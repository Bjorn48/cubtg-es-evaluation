/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 14:30:19 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(stream0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.isEmpty());
      assertFalse(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.size());
      assertEquals(10, jSSubstitution3.capacity());
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      
      boolean boolean1 = jSTerm0.isEval();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d;#=V");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("d;#=V");
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[d;#=V]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[d;#=V, [%%%]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[d;#=V, [%%%]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[d;#=V, [%%%]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[d;#=V, [%%%]]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[d;#=V, [%%%]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[d;#=V, [%%%]]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control paramters: ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[JSTerm:]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      jSTerm2.makeVariable();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      jSTerm1.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("%%% ", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[%%%]", jSTerm3.toString());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertNotNull(jSTerm3);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      
      boolean boolean1 = jSTerm3.equals(jSTerm1);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[%%%]", jSTerm3.toString());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertTrue(boolean1 == boolean0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      
      boolean boolean2 = jSTerm2.isVariable();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("? ");
      assertNotNull(stringReader0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("? ");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[? ]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[? ]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[? ]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[? ]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[? ]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      jSTerm2.makeVariable();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      jSTerm1.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals(1, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.isEmpty());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals("%%% ", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm1);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSSubstitution3.capacity());
      assertEquals(1, jSSubstitution3.size());
      assertFalse(jSSubstitution3.fail());
      assertFalse(jSSubstitution3.isEmpty());
      assertNotNull(jSSubstitution3);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%PFxyqW*b1WL");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-3), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%PFxyqW]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-3), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Iterator iterator0 = jSTerm0.iterator();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(iterator0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-3), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean1 = jSTerm1.isEval();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%PFxyqW]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-3), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm1.makeVariable();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.isEmpty());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("%%% ", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSSubstitution3.capacity());
      assertEquals(1, jSSubstitution3.size());
      assertFalse(jSSubstitution3.fail());
      assertFalse(jSSubstitution3.isEmpty());
      assertNotNull(jSSubstitution3);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[%%%0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control paramters: ");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[Error]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[Error]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[JSTerm:]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[JSTerm:]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals("[JSTerm:]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertNotNull(jSTerm3);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("(");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution2);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution3.size());
      assertTrue(jSSubstitution3.fail());
      assertEquals(10, jSSubstitution3.capacity());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution3.toString());
      assertNotNull(jSSubstitution3);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution3);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(B@");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.sval = "(B@";
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.capacity());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(543);
      assertEquals(543, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(543, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement("$nL");
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(544, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1086, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{CR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("%");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)za|CTTj");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.ordinaryChar(1453);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.whitespaceChars(62, 62);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[U]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.print();
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[U]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      jSTerm1.insertElementAt(jSSubstitution0, 0);
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[U]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader(")");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.resetSyntax();
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      
      jSTerm0.addElement(jSSubstitution0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[], []]", jSTerm0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H<`jXH/j8`*");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("up #e-km");
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertNotNull(stream0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("(up #e-km %%% )", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean2 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      boolean boolean3 = jSTerm0.isEval();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      boolean boolean4 = jSSubstitution0.add((Object) jSTerm2);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[[up #e-km, [%%%]]]", jSSubstitution0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(10, jSTerm3.capacity());
      assertEquals(2, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isFunction());
      assertEquals("[up #e-km, [%%%]]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[[up #e-km, [%%%]]]", jSSubstitution0.toString());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(6, stringBuffer0.length());
      assertEquals("(%%% )", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qap]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StringReader stringReader1 = new StringReader("bs");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("dS!u8Qap]?k\"");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertNotNull(streamTokenizer1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals((-4), streamTokenizer1.ttype);
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer0.equals((Object)streamTokenizer1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer0.equals((Object)streamTokenizer1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(streamTokenizer0, streamTokenizer1);
      
      jSTerm0.makeConstant();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer0.equals((Object)streamTokenizer1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(streamTokenizer0, streamTokenizer1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.addElement((Object) null);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer0.equals((Object)streamTokenizer1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(streamTokenizer0, streamTokenizer1);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer0.equals((Object)streamTokenizer1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(streamTokenizer0, streamTokenizer1);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(stream0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer0.equals((Object)streamTokenizer1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(streamTokenizer0, streamTokenizer1);
      
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer0.equals((Object)streamTokenizer1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(streamTokenizer0, streamTokenizer1);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      stringReader0.close();
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.fail());
      assertEquals(10, jSSubstitution3.capacity());
      assertEquals(0, jSSubstitution3.size());
      assertNotNull(jSSubstitution3);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      
      boolean boolean1 = jSTerm1.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.print();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(1638);
      assertEquals(1638, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1638, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.makeEval(false);
      assertEquals(1638, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1638, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control paramters: ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[Error]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[Error]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertTrue(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[Error]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = new JSTerm();
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm2.isEmpty();
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      int int0 = (-2182);
      // Undeclared exception!
      try { 
        jSTerm2.elementAt(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("? ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H<`jXH/j8`*");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("up #e-km");
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement((Object) null);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[null]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      stringReader0.close();
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      boolean boolean1 = jSSubstitution2.add((Object) "dS!u8Qa:p]?k\"");
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[dS!u8Qa:p]?k\"]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.isEmpty());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[dS!u8Qa:p]?k\"]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      boolean boolean2 = jSTerm2.equals(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[dS!u8Qa:p]?k\"]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      
      jSTerm0.addElement(jSSubstitution0);
      assertEquals("[[], []]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qap]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(stream0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      stringReader0.close();
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.addElement(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("V8.TX");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isEmpty();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSJshopVars.whiteSpace = 41;
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[%%%]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isFunction());
      assertEquals("[%%%]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement("$nL");
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[$nL]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      
      jSTerm0.addElement((Object) null);
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[null]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSJshopVars.interrogation = 36;
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[null]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertEquals("[null]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      jSTerm0.addElement(integer0);
      assertEquals("[-1]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      jSTerm0.addElement((Object) null);
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals("[-1, null]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      JSTerm jSTerm2 = new JSTerm();
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm2.isGround();
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[0.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("? ");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(849L);
      assertEquals(2L, long0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.add((Object) jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[[]]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("8;/&9/0#&~");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.ordinaryChar((-1193));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.commentChar((-1193));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=8.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[8.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=8.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[8.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=8.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[8.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[8.0]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=8.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[8.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[8.0]", jSTerm3.toString());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=8.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[8.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[8.0]", jSTerm3.toString());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isFunction());
      assertEquals(10, jSTerm4.capacity());
      assertEquals("[8.0]", jSTerm4.toString());
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertNotNull(jSTerm4);
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      
      JSPredicateForm jSPredicateForm0 = jSTerm3.clonePF();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=8.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[8.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[8.0]", jSTerm3.toString());
      assertEquals(1, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[8.0]", jSPredicateForm0.toString());
      assertNotNull(jSPredicateForm0);
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm4));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      
      boolean boolean2 = jSTerm3.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=8.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[8.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[8.0]", jSTerm3.toString());
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm4));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[%%%]", jSTerm2.toString());
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSJshopVars.rightPar = (-1);
      boolean boolean1 = jSTerm0.equals(jSTerm2);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[%%%]", jSTerm2.toString());
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = jSTerm1.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm3.isConstant());
      assertEquals(1, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals("[%%%]", jSTerm3.toString());
      assertNotNull(jSTerm3);
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSJshopVars.whiteSpace = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("D");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[D]", jSTerm0.toString());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[D]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[D]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[D]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[D]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[D]", jSTerm0.toString());
      assertEquals("(D )", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("(");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertNotNull(streamTokenizer1);
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals((-4), streamTokenizer1.ttype);
      
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(boolean0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" . ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[0.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      float float0 = JSEvaluate.numericValue(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[0.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Object object0 = unaryOperator1.apply(stringReader0);
      assertNotNull(object0);
      assertSame(stringReader0, object0);
      assertSame(object0, stringReader0);
      
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      assertNotNull(function1);
      assertFalse(function1.equals((Object)function0));
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[0.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("0.0 ", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      assertNotNull(function2);
      assertFalse(function1.equals((Object)function0));
      
      jSSubstitution1.replaceAll(unaryOperator0);
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      boolean boolean1 = jSTerm0.add((Object) stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean1);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean2 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean2);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[0.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm1.makeConstant();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[0.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[0.0]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qap]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      stringReader0.reset();
      stringReader0.close();
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      Object object0 = jSTerm0.firstElement();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertNotNull(object0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals("%%%", object0);
      
      jSTerm0.addElement("%%%");
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%, %%%]", jSTerm0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      streamTokenizer0.lowerCaseMode(true);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm1.makeFunction();
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%, %%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSSubstitution3.fail());
      assertEquals(10, jSSubstitution3.capacity());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution3.toString());
      assertEquals(0, jSSubstitution3.size());
      assertNotNull(jSSubstitution3);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      Object[] objectArray1 = jSTerm0.toArray(objectArray0);
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(objectArray1);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.add(objectArray0[2]);
      assertEquals("[[]]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(4, objectArray0.length);
      assertTrue(boolean0);
      assertSame(objectArray0, objectArray1);
      
      jSTerm0.addElement(jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("ndu");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm0.addElement("ndu");
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringReader stringReader1 = new StringReader("5oXoR$emw");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[5.0]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      jSTerm1.addElement(stringReader1);
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(stringReader1, stringReader0);
      
      JSTerm jSTerm3 = new JSTerm();
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isEmpty());
      assertEquals("[]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isConstant());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      
      boolean boolean1 = jSTerm3.isGround();
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isEmpty());
      assertEquals("[]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      
      jSTerm2.makeFunction();
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(32, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      stringReader0.mark(47);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm1.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      boolean boolean2 = jSTerm1.isEval();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%0]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm1, jSSubstitution1);
      assertEquals(0, jSSubstitution3.size());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution3.toString());
      assertFalse(jSSubstitution3.fail());
      assertEquals(10, jSSubstitution3.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution3);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      jSSubstitution0.trimToSize();
      assertEquals(0, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      
      boolean boolean0 = jSSubstitution0.add((Object) jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(1, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals("[[]]", jSSubstitution0.toString());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(boolean0);
      
      jSTerm0.makeVariable();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      jSTerm0.makeFunction();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      
      jSTerm0.makeVariable();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      boolean boolean1 = jSTerm0.isGround();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("? ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("$nL");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[$nL]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[$nL]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement("$nL");
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[$nL, $nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(4, stringBuffer0.length());
      assertEquals("%%% ", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[[]]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H<`jXH/j8`*");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("up #e-km");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.addElement(jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean1 = jSTerm0.isGround();
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(stream0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("(up #e-km %%% )", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean2 = jSTerm0.equals(jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      boolean boolean3 = jSTerm0.isEval();
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean4 = jSTerm0.equals(jSTerm2);
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("ndu");
      assertNotNull(stringReader0);
      
      jSTerm0.addElement("ndu");
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement("ndu");
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[ndu, ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(+V{u_VN^q?Pf%Qe");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(stringReader0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      Stream stream0 = jSTerm1.parallelStream();
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(stream0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm1);
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotNull(jSSubstitution2);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.size());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution3.toString());
      assertEquals(10, jSSubstitution3.capacity());
      assertNotNull(jSSubstitution3);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm1.makeVariable();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      boolean boolean0 = jSTerm0.isEval();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isVariable());
      assertEquals("[%%%0]", jSTerm3.toString());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertNotNull(jSTerm3);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSSubstitution3.size());
      assertFalse(jSSubstitution3.isEmpty());
      assertEquals(10, jSSubstitution3.capacity());
      assertFalse(jSSubstitution3.fail());
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&e>Ma|");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(38, int0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(2);
      assertFalse(jSTerm0.isVariable());
      assertEquals("[null, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      ListIterator listIterator0 = jSTerm1.listIterator();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm1.makeEval(false);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertEquals("[[]]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm2);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertEquals("[[]]", jSTerm2.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control parameters: ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[JSTerm:]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      jSTerm0.addElement(integer0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[-1]", jSTerm0.toString());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[-1]", jSTerm0.toString());
      assertEquals("(-1 )", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("up #e-km");
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      jSTerm0.makeVariable();
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(boolean0);
      
      jSTerm0.makeFunction();
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      boolean boolean1 = jSTerm0.isGround();
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.addElement("$nL");
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[$nL]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[$nL]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      StringReader stringReader0 = new StringReader("(<VUXe.5z%o#Ty<Wmi");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      jSTerm2.makeVariable();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      jSTerm1.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(4, stringBuffer0.length());
      assertEquals("%%% ", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertEquals("[%%%]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertNotNull(jSTerm3);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H<`jXH/j8`*");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("up #e-km");
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertNotNull(stream0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertEquals("(up #e-km %%% )", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean2 = jSTerm0.equals(jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("dS!u8Qap]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      stringReader0.close();
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      boolean boolean0 = jSSubstitution1.add((Object) "dS!u8Qap]?k\"");
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[dS!u8Qap]?k\"]", jSSubstitution1.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[dS!u8Qap]?k\"]", jSSubstitution1.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      boolean boolean1 = jSTerm2.equals(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[dS!u8Qap]?k\"]", jSSubstitution1.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      jSTerm2.print();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[dS!u8Qap]?k\"]", jSSubstitution1.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = jSTerm2.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[dS!u8Qap]?k\"]", jSSubstitution1.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals("[%%%]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      jSSubstitution2.addElements(jSSubstitution0);
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      jSSubstitution2.addElements(jSSubstitution1);
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      stringReader0.mark(47);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      streamTokenizer0.resetSyntax();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm1.isConstant();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm3 = new JSTerm();
      assertTrue(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm2);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      jSTerm1.removeAllElements();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(4, stringBuffer0.length());
      assertEquals("%%% ", stringBuffer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(stringBuffer0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      
      boolean boolean2 = jSTerm2.equals(jSTerm1);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      Stream stream0 = jSTerm1.parallelStream();
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(stream0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm1.makeVariable();
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qa-:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.print();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("ndu");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm0.addElement("ndu");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringReader stringReader1 = new StringReader("5oXoR$emw");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertNotNull(jSTerm2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      jSTerm1.addElement(stringReader1);
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean1 = jSTerm2.isGround();
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertTrue(boolean1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      jSTerm2.makeFunction();
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(32, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      
      JSTerm jSTerm3 = jSTerm2.call();
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[5.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertNotNull(jSTerm3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm3);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[5.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("dS!u8Qap]?k\"");
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[dS!u8Qap]?k\"]", jSTerm0.toString());
      
      jSTerm0.print();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[dS!u8Qap]?k\"]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals("[%%%]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("$nL");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[$nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      
      boolean boolean0 = jSTerm0.add((Object) "$nL");
      assertEquals("[$nL, $nL]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.equals(jSTerm0);
      assertEquals("[$nL, $nL]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      streamTokenizer0.nval = (-1.0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm0.addElement(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%, []]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1.0), streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%, []]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals((-1.0), streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qa-:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[%%%]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isFunction());
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSJshopVars.VarCounter = (-410);
      jSTerm0.forEach(consumer0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("({NuduvdR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H<`jXH/j8`*");
      assertNotNull(stringReader0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("H<`jXH/j8`*");
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[H<`jXH/j8`*]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      jSTerm0.addElement(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[H<`jXH/j8`*, Token[NOTHING], line 1]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[H<`jXH/j8`*, Token[NOTHING], line 1]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.isEval();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("%");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Bs");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm0.addElement("ndu");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringReader stringReader0 = new StringReader("5oXoR$emw");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      jSTerm1.addElement(stringReader0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      
      jSTerm2.makeFunction();
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[5.0]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(32, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      
      JSTerm jSTerm3 = jSTerm2.call();
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[5.0]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals("[5.0]", jSTerm3.toString());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isConstant());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      
      boolean boolean0 = jSTerm0.equals(jSTerm3);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[5.0]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals("[5.0]", jSTerm3.toString());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[5.0]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[5.0]", jSTerm4.toString());
      assertFalse(jSTerm4.isConstant());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertNotNull(jSTerm4);
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("V8.TX");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isEmpty();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm1.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      stringReader0.close();
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSSubstitution3.isEmpty());
      assertEquals(1, jSSubstitution3.size());
      assertFalse(jSSubstitution3.fail());
      assertEquals(10, jSSubstitution3.capacity());
      assertNotNull(jSSubstitution3);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      
      boolean boolean1 = jSTerm1.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm1.print();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("iu},f`,N)");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      streamTokenizer0.nval = (-1093.95748);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[., [iu,f`,N], [nil]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals((-1093.95748), streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSTerm1.addAll((Collection) jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[., [iu,f`,N], [nil]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals((-1093.95748), streamTokenizer0.nval, 0.01);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm1.makeVariable();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals(1, jSSubstitution2.size());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("%%% ", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSSubstitution3.isEmpty());
      assertEquals(10, jSSubstitution3.capacity());
      assertEquals(1, jSSubstitution3.size());
      assertFalse(jSSubstitution3.fail());
      assertNotNull(jSSubstitution3);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      stringReader0.close();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("?R7o^ZN>4ESg");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals("?%%% ", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertEquals(4.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("UZ");
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[UZ]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      StringReader stringReader0 = new StringReader("5oXoR$emw");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[5.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.addElement((Object) null);
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[UZ, null]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      jSSubstitution0.removeAllElements();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      
      StringReader stringReader0 = new StringReader("jsterR:");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertTrue(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSSubstitution3.size());
      assertEquals(10, jSSubstitution3.capacity());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.fail());
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals("%%% ", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm1.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[%%%0]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qap]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      stringReader0.close();
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeConstant();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%, []]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%, []]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      
      Stream stream1 = jSTerm0.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%, []]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertNotNull(stream1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(stream1.equals((Object)stream0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(stream1, stream0);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%, []]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      jSTerm1.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution2);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution3.capacity());
      assertFalse(jSSubstitution3.fail());
      assertEquals(1, jSSubstitution3.size());
      assertFalse(jSSubstitution3.isEmpty());
      assertNotNull(jSSubstitution3);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution3);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm0, jSSubstitution3);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution3.capacity());
      assertFalse(jSSubstitution3.fail());
      assertEquals(1, jSSubstitution3.size());
      assertFalse(jSSubstitution3.isEmpty());
      assertEquals(1, jSSubstitution4.size());
      assertFalse(jSSubstitution4.isEmpty());
      assertEquals(10, jSSubstitution4.capacity());
      assertFalse(jSSubstitution4.fail());
      assertNotNull(jSSubstitution4);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution4.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution4.equals((Object)jSSubstitution3));
      assertFalse(jSSubstitution4.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution4.equals((Object)jSSubstitution2));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution4);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution3);
      assertNotSame(jSSubstitution3, jSSubstitution4);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution4, jSSubstitution0);
      assertNotSame(jSSubstitution4, jSSubstitution3);
      assertNotSame(jSSubstitution4, jSSubstitution1);
      assertNotSame(jSSubstitution4, jSSubstitution2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H<`jXH/j8`*");
      assertNotNull(stringReader0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("H<`jXH/j8`*");
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[H<`jXH/j8`*]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(stream0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement((Object) null);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[null]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[null]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IA(]A@P");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.fail());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?fW,6JbV8yYBy/qZw");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      stringReader0.mark(39);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm1.lastElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("' ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("(<VUXe.5z%o#Ty<Wmi");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qa-:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Bs");
      assertNotNull(stringReader0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qap]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      stringReader0.reset();
      stringReader0.close();
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.addElement(stringReader0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      streamTokenizer0.lowerCaseMode(true);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      JSSubstitution jSSubstitution3 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution3.toString());
      assertFalse(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.size());
      assertEquals(0, jSSubstitution3.capacity());
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" . ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      float float0 = JSEvaluate.numericValue(jSTerm1);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      jSSubstitution1.replaceAll(unaryOperator0);
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement((Object) null);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".v");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H<`jXH/j8`*");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("up #e-km");
      assertEquals("[up #e-km]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(stream0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("(up #e-km %%% )", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean2 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      jSTerm2.print();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals("[up #e-km, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[up #e-km, [%%%]]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      jSTerm1.print();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals("[%%%]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d;#=V");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("d;#=V");
      assertEquals("[d;#=V]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[d;#=V, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[d;#=V, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[d;#=V, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[d;#=V, [%%%]]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      boolean boolean2 = jSTerm0.equals(jSTerm2);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[d;#=V, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[d;#=V, [%%%]]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("ndu");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm0.addElement("ndu");
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringReader stringReader1 = new StringReader("5oXoR$emw");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[5.0]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      jSTerm1.addElement(stringReader1);
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(stringReader1, stringReader0);
      
      JSTerm jSTerm3 = new JSTerm();
      assertEquals(0, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isFunction());
      assertEquals("[]", jSTerm3.toString());
      assertTrue(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm3.isGround();
      assertEquals(0, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isFunction());
      assertEquals("[]", jSTerm3.toString());
      assertTrue(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(stream0);
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      
      jSTerm2.makeFunction();
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(31, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      
      boolean boolean2 = jSTerm3.isConstant();
      assertEquals(0, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isFunction());
      assertEquals("[]", jSTerm3.toString());
      assertTrue(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSTerm jSTerm4 = jSTerm2.call();
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[5.0]", jSTerm2.toString());
      assertTrue(jSTerm4.isFunction());
      assertEquals("[5.0]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isEmpty());
      assertFalse(jSTerm4.isConstant());
      assertEquals(10, jSTerm4.capacity());
      assertNotNull(jSTerm4);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      
      boolean boolean3 = jSTerm0.isEval();
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm4));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(boolean3);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      
      boolean boolean4 = jSTerm0.equals(jSTerm4);
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[ndu]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[5.0]", jSTerm2.toString());
      assertTrue(jSTerm4.isFunction());
      assertEquals("[5.0]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isEmpty());
      assertFalse(jSTerm4.isConstant());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm4));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm4));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(boolean4);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isVariable());
      assertEquals(1, jSTerm5.size());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isConstant());
      assertFalse(jSTerm5.isEmpty());
      assertTrue(jSTerm5.isFunction());
      assertEquals("[5.0]", jSTerm5.toString());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[5.0]", jSTerm2.toString());
      assertNotNull(jSTerm5);
      assertTrue(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertTrue(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm4));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm5);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      StringReader stringReader0 = new StringReader("8;/&9/0#&~");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.ordinaryChar((-1193));
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.commentChar((-1193));
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=8.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[8.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("Token[n=8.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[8.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H<`jXH/j8`*");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("H<`jXH/j8`*");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[H<`jXH/j8`*]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.addElement(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(18, stringBuffer0.length());
      assertEquals("(H<`jXH/j8`* %%% )", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertEquals("[H<`jXH/j8`*, [%%%]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("$nL");
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[$nL]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[$nL]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[$nL]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("word");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".f");
      assertNotNull(stringReader0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.resetSyntax();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" . ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      float float0 = JSEvaluate.numericValue(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Object object0 = unaryOperator1.apply(stringReader0);
      assertNotNull(object0);
      assertSame(stringReader0, object0);
      assertSame(object0, stringReader0);
      
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      assertNotNull(function1);
      assertFalse(function1.equals((Object)function0));
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("0.0 ", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      assertNotNull(function2);
      assertFalse(function1.equals((Object)function0));
      
      jSSubstitution1.replaceAll(unaryOperator0);
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      jSTerm2.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals("[0.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isEval());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSTerm3);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm4.isEval());
      assertFalse(jSTerm4.isEmpty());
      assertEquals("[0.0]", jSTerm4.toString());
      assertEquals(10, jSTerm4.capacity());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertTrue(jSTerm4.isConstant());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSTerm4);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm2, jSSubstitution0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals("[0.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isEval());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm4));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm4));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm3);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals("[0.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isEval());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution3.toString());
      assertFalse(jSSubstitution3.fail());
      assertEquals(10, jSSubstitution3.capacity());
      assertEquals(0, jSSubstitution3.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution3);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm4));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm4));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertSame(stringReader0, object0);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution3);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm1 = new JSTerm();
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = new JSTerm();
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      
      boolean boolean0 = jSTerm2.isEmpty();
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(boolean0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      // Undeclared exception!
      try { 
        jSTerm0.firstElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Stream stream0 = jSTerm1.parallelStream();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(stream0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      
      boolean boolean1 = jSTerm0.isFunction();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeEval(true);
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.addElement("$nL");
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[$nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[$nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[$nL]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("$nL");
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[$nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      
      jSTerm0.addElement("$nL");
      assertEquals("[$nL, $nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      Stream stream0 = jSTerm0.stream();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(stream0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      jSTerm0.addElement(jSSubstitution0);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      
      jSTerm0.print();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" . ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      float float0 = JSEvaluate.numericValue(jSTerm1);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm0.makeVariable();
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm1.makeVariable();
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[0.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution2.fail());
      assertEquals(1, jSSubstitution2.size());
      assertFalse(jSSubstitution2.isEmpty());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H<`jXH/j8`*");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("up #ekm");
      assertEquals("[up #ekm]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.addElement(jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #ekm, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean1 = jSTerm0.isGround();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #ekm, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      
      Stream stream0 = jSTerm0.parallelStream();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #ekm, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertNotNull(stream0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #ekm, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #ekm, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(14, stringBuffer0.length());
      assertEquals("(up #ekm %%% )", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean2 = jSTerm0.isConstant();
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #ekm, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(jSTerm0, jSTerm1);
      
      boolean boolean3 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #ekm, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertFalse(boolean3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[up #ekm, [%%%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[up #ekm, [%%%]]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("JSTerm: Error reading control paramters: ");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement("$nL");
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[$nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[$nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[$nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[$nL]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      
      boolean boolean1 = jSTerm2.equals(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[$nL]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[$nL]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSJshopVars.whiteSpace = 63;
      StringReader stringReader0 = new StringReader("3=");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSJshopVars.plus = 0;
      JSJshopVars.plus = 0;
      JSJshopVars.plus = 0;
      boolean boolean0 = jSTerm0.isFunction();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(boolean0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate0);
      
      Predicate<String> predicate1 = predicate0.negate();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate2).test(any());
      Predicate<String> predicate3 = predicate0.or(predicate2);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      Predicate<String> predicate4 = predicate3.negate();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate4);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotSame(predicate4, predicate1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate5 = Predicate.isEqual(object0);
      assertNotNull(predicate5);
      assertFalse(predicate5.equals((Object)predicate2));
      
      boolean boolean1 = predicate4.test("");
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(predicate4, predicate1);
      
      Predicate<String> predicate6 = predicate3.or(predicate1);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate6);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate4));
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate6, predicate3);
      
      Predicate<String> predicate7 = predicate4.and(predicate3);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate7);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate4));
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate4, predicate1);
      
      Predicate<Integer> predicate8 = Predicate.isEqual((Object) jSTerm0);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate8);
      
      Predicate<String> predicate9 = predicate4.negate();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate9);
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotSame(predicate9, predicate4);
      assertNotSame(predicate9, predicate1);
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate9);
      
      Predicate<String> predicate10 = predicate4.and(predicate7);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate10);
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate10.equals((Object)predicate7));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate4));
      assertNotSame(predicate10, predicate7);
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate7, predicate10);
      
      Predicate<String> predicate11 = predicate4.and(predicate3);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate11);
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate9));
      assertNotSame(predicate11, predicate10);
      assertNotSame(predicate11, predicate7);
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate9);
      
      Predicate<String> predicate12 = predicate4.negate();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate12);
      assertFalse(predicate12.equals((Object)predicate4));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate6));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate9));
      assertFalse(predicate12.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate9));
      assertNotSame(predicate12, predicate4);
      assertNotSame(predicate12, predicate1);
      assertNotSame(predicate12, predicate9);
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      
      Predicate<String> predicate13 = predicate11.negate();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate13);
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate12));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate9));
      assertNotSame(predicate11, predicate10);
      assertNotSame(predicate11, predicate7);
      assertNotSame(predicate13, predicate9);
      assertNotSame(predicate13, predicate1);
      assertNotSame(predicate13, predicate12);
      assertNotSame(predicate13, predicate4);
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate4, predicate13);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      
      Predicate<String> predicate14 = predicate11.negate();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(predicate14);
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate12));
      assertFalse(predicate11.equals((Object)predicate13));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate9));
      assertNotSame(predicate11, predicate10);
      assertNotSame(predicate11, predicate7);
      assertNotSame(predicate14, predicate4);
      assertNotSame(predicate14, predicate13);
      assertNotSame(predicate14, predicate9);
      assertNotSame(predicate14, predicate1);
      assertNotSame(predicate14, predicate12);
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate4, predicate13);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate14);
      assertNotSame(predicate4, predicate9);
      
      boolean boolean2 = jSTerm0.removeIf(predicate11);
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate12));
      assertFalse(predicate11.equals((Object)predicate13));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate4));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate7));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate14));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(boolean2);
      assertNotSame(predicate11, predicate10);
      assertNotSame(predicate11, predicate7);
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate4, predicate13);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate14);
      assertNotSame(predicate4, predicate9);
      
      boolean boolean3 = jSTerm0.isGround();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = jSTerm0.isEval();
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d;#=V");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm1.makeVariable();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(=^}4");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d!u8Qa-:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("n");
      assertNotNull(stringReader0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dS!u8Qa:p]?k\"");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Integer, Integer> function0 = Function.identity();
      assertNotNull(function0);
      
      jSTerm0.replaceAll(unaryOperator0);
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeVariable();
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      int int0 = (-366);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%PFxyqW*b1WL");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.fail();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      
      JSSubstitution jSSubstitution3 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution3.size());
      assertTrue(jSSubstitution3.isEmpty());
      assertFalse(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.capacity());
      assertEquals("[]", jSSubstitution3.toString());
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      
      JSSubstitution jSSubstitution4 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution4.size());
      assertTrue(jSSubstitution4.isEmpty());
      assertEquals("[]", jSSubstitution4.toString());
      assertFalse(jSSubstitution4.fail());
      assertEquals(0, jSSubstitution4.capacity());
      assertNotNull(jSSubstitution4);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution0));
      assertNotSame(jSSubstitution0, jSSubstitution4);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution4, jSSubstitution3);
      assertNotSame(jSSubstitution4, jSSubstitution2);
      assertNotSame(jSSubstitution4, jSSubstitution0);
      assertNotSame(jSSubstitution4, jSSubstitution1);
      
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution5.capacity());
      assertFalse(jSSubstitution5.fail());
      assertTrue(jSSubstitution5.isEmpty());
      assertEquals(0, jSSubstitution5.size());
      assertEquals("[]", jSSubstitution5.toString());
      assertNotNull(jSSubstitution5);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution1));
      assertNotSame(jSSubstitution0, jSSubstitution4);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution5);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution5, jSSubstitution0);
      assertNotSame(jSSubstitution5, jSSubstitution1);
      assertNotSame(jSSubstitution5, jSSubstitution4);
      assertNotSame(jSSubstitution5, jSSubstitution3);
      assertNotSame(jSSubstitution5, jSSubstitution2);
      
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      assertTrue(jSSubstitution6.isEmpty());
      assertEquals("[]", jSSubstitution6.toString());
      assertFalse(jSSubstitution6.fail());
      assertEquals(0, jSSubstitution6.size());
      assertEquals(10, jSSubstitution6.capacity());
      assertNotNull(jSSubstitution6);
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution1));
      
      JSSubstitution jSSubstitution7 = (JSSubstitution)jSSubstitution6.clone();
      assertTrue(jSSubstitution6.isEmpty());
      assertEquals("[]", jSSubstitution6.toString());
      assertFalse(jSSubstitution6.fail());
      assertEquals(0, jSSubstitution6.size());
      assertEquals(10, jSSubstitution6.capacity());
      assertEquals(0, jSSubstitution7.size());
      assertFalse(jSSubstitution7.fail());
      assertEquals(0, jSSubstitution7.capacity());
      assertTrue(jSSubstitution7.isEmpty());
      assertEquals("[]", jSSubstitution7.toString());
      assertNotNull(jSSubstitution7);
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution6));
      assertNotSame(jSSubstitution6, jSSubstitution0);
      assertNotSame(jSSubstitution6, jSSubstitution1);
      assertNotSame(jSSubstitution6, jSSubstitution5);
      assertNotSame(jSSubstitution6, jSSubstitution4);
      assertNotSame(jSSubstitution6, jSSubstitution7);
      assertNotSame(jSSubstitution6, jSSubstitution2);
      assertNotSame(jSSubstitution6, jSSubstitution3);
      assertNotSame(jSSubstitution7, jSSubstitution4);
      assertNotSame(jSSubstitution7, jSSubstitution6);
      assertNotSame(jSSubstitution7, jSSubstitution0);
      assertNotSame(jSSubstitution7, jSSubstitution1);
      assertNotSame(jSSubstitution7, jSSubstitution5);
      assertNotSame(jSSubstitution7, jSSubstitution2);
      assertNotSame(jSSubstitution7, jSSubstitution3);
      
      JSSubstitution jSSubstitution8 = (JSSubstitution)jSSubstitution6.clone();
      assertTrue(jSSubstitution6.isEmpty());
      assertEquals("[]", jSSubstitution6.toString());
      assertFalse(jSSubstitution6.fail());
      assertEquals(0, jSSubstitution6.size());
      assertEquals(10, jSSubstitution6.capacity());
      assertEquals(0, jSSubstitution8.size());
      assertTrue(jSSubstitution8.isEmpty());
      assertEquals("[]", jSSubstitution8.toString());
      assertFalse(jSSubstitution8.fail());
      assertEquals(0, jSSubstitution8.capacity());
      assertNotNull(jSSubstitution8);
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution7));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution6));
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution7));
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution5));
      assertNotSame(jSSubstitution6, jSSubstitution0);
      assertNotSame(jSSubstitution6, jSSubstitution1);
      assertNotSame(jSSubstitution6, jSSubstitution5);
      assertNotSame(jSSubstitution6, jSSubstitution4);
      assertNotSame(jSSubstitution6, jSSubstitution8);
      assertNotSame(jSSubstitution6, jSSubstitution7);
      assertNotSame(jSSubstitution6, jSSubstitution2);
      assertNotSame(jSSubstitution6, jSSubstitution3);
      assertNotSame(jSSubstitution8, jSSubstitution4);
      assertNotSame(jSSubstitution8, jSSubstitution5);
      assertNotSame(jSSubstitution8, jSSubstitution2);
      assertNotSame(jSSubstitution8, jSSubstitution0);
      assertNotSame(jSSubstitution8, jSSubstitution6);
      assertNotSame(jSSubstitution8, jSSubstitution7);
      assertNotSame(jSSubstitution8, jSSubstitution1);
      assertNotSame(jSSubstitution8, jSSubstitution3);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution6);
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSSubstitution6.isEmpty());
      assertEquals("[]", jSSubstitution6.toString());
      assertFalse(jSSubstitution6.fail());
      assertEquals(0, jSSubstitution6.size());
      assertEquals(10, jSSubstitution6.capacity());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[%PFxyqW]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution8));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution7));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution6, jSSubstitution0);
      assertNotSame(jSSubstitution6, jSSubstitution1);
      assertNotSame(jSSubstitution6, jSSubstitution5);
      assertNotSame(jSSubstitution6, jSSubstitution4);
      assertNotSame(jSSubstitution6, jSSubstitution8);
      assertNotSame(jSSubstitution6, jSSubstitution7);
      assertNotSame(jSSubstitution6, jSSubstitution2);
      assertNotSame(jSSubstitution6, jSSubstitution3);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSJshopVars.lessT = streamTokenizer0.ttype;
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      
      jSTerm1.makeFunction();
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSSubstitution6.isEmpty());
      assertEquals("[]", jSSubstitution6.toString());
      assertFalse(jSSubstitution6.fail());
      assertEquals(0, jSSubstitution6.size());
      assertEquals(10, jSSubstitution6.capacity());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[%PFxyqW]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution8));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution7));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution6, jSSubstitution0);
      assertNotSame(jSSubstitution6, jSSubstitution1);
      assertNotSame(jSSubstitution6, jSSubstitution5);
      assertNotSame(jSSubstitution6, jSSubstitution4);
      assertNotSame(jSSubstitution6, jSSubstitution8);
      assertNotSame(jSSubstitution6, jSSubstitution7);
      assertNotSame(jSSubstitution6, jSSubstitution2);
      assertNotSame(jSSubstitution6, jSSubstitution3);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSSubstitution6.isEmpty());
      assertEquals("[]", jSSubstitution6.toString());
      assertFalse(jSSubstitution6.fail());
      assertEquals(0, jSSubstitution6.size());
      assertEquals(10, jSSubstitution6.capacity());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[%PFxyqW]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution8));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution7));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution6, jSSubstitution0);
      assertNotSame(jSSubstitution6, jSSubstitution1);
      assertNotSame(jSSubstitution6, jSSubstitution5);
      assertNotSame(jSSubstitution6, jSSubstitution4);
      assertNotSame(jSSubstitution6, jSSubstitution8);
      assertNotSame(jSSubstitution6, jSSubstitution7);
      assertNotSame(jSSubstitution6, jSSubstitution2);
      assertNotSame(jSSubstitution6, jSSubstitution3);
      assertNotSame(jSTerm1, jSTerm0);
      
      jSTerm0.makeFunction();
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm1);
      
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      assertTrue(jSSubstitution9.isEmpty());
      assertEquals("[]", jSSubstitution9.toString());
      assertEquals(10, jSSubstitution9.capacity());
      assertEquals(0, jSSubstitution9.size());
      assertFalse(jSSubstitution9.fail());
      assertNotNull(jSSubstitution9);
      assertTrue(jSSubstitution9.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution9.equals((Object)jSSubstitution8));
      assertTrue(jSSubstitution9.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution9.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution9.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution9.equals((Object)jSSubstitution6));
      assertTrue(jSSubstitution9.equals((Object)jSSubstitution7));
      assertTrue(jSSubstitution9.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution9.equals((Object)jSSubstitution1));
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertEquals("Token[PFxyqW], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%PFxyqW]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertEquals("[%PFxyqW]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }
}
