/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:37:11 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.xplain.DeletionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeletionStrategy_ESTest extends DeletionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt1.insertFirst(0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt1).when(iSolver0).unsatExplanation();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      deletionStrategy0.explain(iSolver0, hashMap0, vecInt0);
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(dimacsStringSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(dimacsStringSolver0, hashMap0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.DeletionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2535);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, SolutionCounter> hashMap0 = new HashMap<Integer, SolutionCounter>();
      vecInt0.shrink(2383);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(iSolver0, hashMap0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2548);
      HashMap<Integer, SolutionCounter> hashMap0 = new HashMap<Integer, SolutionCounter>();
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(manyCore0, hashMap0, vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2548);
      int[] intArray0 = new int[2];
      VecInt vecInt1 = new VecInt(intArray0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iSolver0).getLogPrefix();
      doReturn(true).when(iSolver0).isVerbose();
      doReturn(vecInt1).when(iSolver0).unsatExplanation();
      vecInt1.insertFirst((-1582));
      HashMap<Integer, SolutionCounter> hashMap0 = new HashMap<Integer, SolutionCounter>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(iSolver0, hashMap0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(iSolver0).unsatExplanation();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(3392);
      hashMap0.put(integer0, vecInt0);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(iSolver0, hashMap0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.DeletionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2548);
      int[] intArray0 = new int[2];
      VecInt vecInt1 = new VecInt(intArray0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iSolver0).getLogPrefix();
      doReturn(true).when(iSolver0).isVerbose();
      doReturn(vecInt1).when(iSolver0).unsatExplanation();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0, vecInt1);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(abstractMinimalModel0, hashMap0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(iSolver0).getLogPrefix();
      doReturn(true, false).when(iSolver0).isVerbose();
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      HashMap<Integer, SolutionCounter> hashMap0 = new HashMap<Integer, SolutionCounter>();
      deletionStrategy0.explain(iSolver0, hashMap0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).isVerbose();
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(iSolver0, hashMap0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2548, 2548);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iSolver0).getLogPrefix();
      doReturn(true).when(iSolver0).isVerbose();
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      HashMap<Integer, SolutionCounter> hashMap0 = new HashMap<Integer, SolutionCounter>();
      // Undeclared exception!
      deletionStrategy0.explain(iSolver0, hashMap0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      String string0 = deletionStrategy0.toString();
      assertEquals("Deletion based minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      deletionStrategy0.cancelExplanationComputation();
      VecInt vecInt0 = new VecInt(2548, 2548);
      int[] intArray0 = new int[2];
      VecInt vecInt1 = new VecInt(intArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(iSolver0).getLogPrefix();
      doReturn(true, false).when(iSolver0).isVerbose();
      doReturn(vecInt1).when(iSolver0).unsatExplanation();
      HashMap<Integer, SolutionCounter> hashMap0 = new HashMap<Integer, SolutionCounter>();
      deletionStrategy0.explain(iSolver0, hashMap0, vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
  }
}
