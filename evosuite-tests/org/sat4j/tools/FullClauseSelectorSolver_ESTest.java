/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:16:00 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IOptimizationProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FullClauseSelectorSolver_ESTest extends FullClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ManyCore<DimacsOutputSolver> manyCore0 = (ManyCore<DimacsOutputSolver>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<ManyCore<DimacsOutputSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<DimacsOutputSolver>>(manyCore0, true);
      boolean boolean0 = fullClauseSelectorSolver0.isSkipDuplicatedEntries();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      FullClauseSelectorSolver<NegationDecorator<SolutionCounter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<NegationDecorator<SolutionCounter>>(negationDecorator0, false);
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[7];
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(dimacsOutputSolver0).nVars();
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[2] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[3] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[4] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[5] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[6] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(manyCore0);
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(clausalCardinalitiesDecorator0);
      fullClauseSelectorSolver0.addNonControlableClause(iVecInt0);
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, false);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addNonControlableClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>((ManyCore<ModelIteratorToSATAdapter>) null, false);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addControlableClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, false);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(aSolverFactory0, stringArray0);
      FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>(manyCore0, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addControlableClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(iSolver0).modelWithInternalVariables();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, false);
      fullClauseSelectorSolver0.model();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(iSolver0).modelWithInternalVariables();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, true);
      int[] intArray1 = fullClauseSelectorSolver0.model();
      assertNotSame(intArray1, intArray0);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = (ManyCore<ModelIteratorToSATAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(manyCore0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>(manyCore0, false);
      fullClauseSelectorSolver0.addControlableClause(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(aSolverFactory0, stringArray0);
      FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>(manyCore0, true);
      IConstr iConstr0 = fullClauseSelectorSolver0.addControlableClause(vecInt0);
      assertNull(iConstr0);
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, false);
      fullClauseSelectorSolver0.getConstraints();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, true);
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      fullClauseSelectorSolver0.addNonControlableClause(vecInt0);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      fullClauseSelectorSolver0.getAddedVars();
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[7];
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[2] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[3] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[4] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[5] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[6] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      FullClauseSelectorSolver<ManyCore<DimacsOutputSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<DimacsOutputSolver>>(manyCore0, false);
      boolean boolean0 = fullClauseSelectorSolver0.isSkipDuplicatedEntries();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      UnitClause unitClause0 = new UnitClause((-1436));
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = (ManyCore<ModelIteratorToSATAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(manyCore0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>(manyCore0, false);
      fullClauseSelectorSolver1.addControlableClause(iVecInt0);
      //  // Unstable assertion: assertEquals(1, iVecInt0.size());
      //  // Unstable assertion: assertEquals((-1436), iVecInt0.last());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      GroupClauseSelectorSolver<OptToSatAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(groupClauseSelectorSolver0, false);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      fullClauseSelectorSolver0.getConstrs();
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      fullClauseSelectorSolver0.getLastConstr();
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((IteratorInt) null).when(iVecInt0).iterator();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>((StatisticsSolver) null, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addClause(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(65535);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, true);
      fullClauseSelectorSolver0.setLastConstr((IConstr) null);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }
}
