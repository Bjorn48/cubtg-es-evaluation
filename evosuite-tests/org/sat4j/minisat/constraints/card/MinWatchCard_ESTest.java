/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:16:03 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinWatchCard_ESTest extends MinWatchCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-2022));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-2022), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      minWatchCard0.calcReasonOnTheFly((-1137), vecInt0, vecInt0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-2022), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 545.1840961661);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      IVecInt iVecInt0 = solver0.getOutLearnt();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-33));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertEquals((-33), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      minWatchCard0.assertConstraintIfNeeded(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertEquals((-33), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(82);
      assertEquals(82, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(82, iVecInt0.last());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-2022));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-2022), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      lits0.satisfies(82);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      boolean boolean0 = minWatchCard0.simplify();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals((-2022), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(boolean0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-789));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals((-789), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.locked());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      minWatchCard0.remove((UnitPropagationListener) null);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals((-789), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.locked());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, false, 313);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals((-312), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, (-1925));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      int[] intArray0 = new int[6];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(subsetVarOrder0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(tabuListDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, (RestartStrategy) null);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(solver0);
      
      IVecInt iVecInt0 = solver0.getOutLearnt();
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(iVecInt0);
      
      Constr constr0 = MinWatchCard.minWatchCardNew(solver0, lits0, iVecInt0, true, (-1916));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 545.1840961661);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      IVecInt iVecInt0 = solver0.getOutLearnt();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-33));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertEquals((-33), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      minWatchCard0.calcReason((-813), iVecInt0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertEquals((-33), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt(30);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-44));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals((-44), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      minWatchCard0.register();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals((-44), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 313);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(313, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      int int0 = minWatchCard0.size();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(313, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(1, int0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, int0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 545.1840961661);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      IVecInt iVecInt0 = solver0.getOutLearnt();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-2150));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertEquals((-2150), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertEquals((-2150), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals((-2150), int0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 545.1840961661);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      IVecInt iVecInt0 = solver0.getOutLearnt();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-25));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals((-25), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      ILits iLits0 = minWatchCard0.getVocabulary();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals((-25), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNull(iLits0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      lits0.ensurePool(313);
      assertEquals(313, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      assertEquals(313, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      ILits iLits0 = minWatchCard0.getVocabulary();
      assertEquals(313, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, iLits0.realnVars());
      assertEquals(313, iLits0.nVars());
      assertNotNull(iLits0);
      assertSame(lits0, iLits0);
      assertSame(iLits0, lits0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 545.1840961661);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      IVecInt iVecInt0 = solver0.getOutLearnt();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = iVecInt0.push(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertEquals(0, iVecInt1.last());
      assertEquals(1, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertNotNull(iVecInt1);
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt1, iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(1, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      int[] intArray0 = minWatchCard0.getLits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(1, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      assertSame(iVecInt0, iVecInt1);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt(11, 11);
      assertFalse(vecInt0.isEmpty());
      assertEquals(11, vecInt0.size());
      assertEquals(11, vecInt0.last());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-44));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.locked());
      assertEquals((-44), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(11, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation((UnitPropagationListener) null);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.locked());
      assertEquals((-44), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(11, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard1.locked());
      assertEquals((-44), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard1.simplify());
      assertFalse(minWatchCard1.learnt());
      assertEquals(11, minWatchCard1.size());
      assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
      assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard1);
      assertSame(minWatchCard0, minWatchCard1);
      assertSame(minWatchCard1, minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(82);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(82, vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(82, iVecInt0.last());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 82);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(82, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push((-84));
      assertEquals((-84), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-84), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 82);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, minWatchCard0.size());
      assertEquals(82, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -84
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt(30, (-1189));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1189), vecInt0.last());
      assertEquals(30, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-3984));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(30, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-3984), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1190
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 313);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(313, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(296, 311);
      assertEquals(311, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(296, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1435);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.learnt());
      assertEquals(296, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(1435, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, (-3560));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.growTo(47, (-717));
      assertEquals((-717), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(47, vecInt0.size());
      
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 1603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(lits0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(2343);
      assertEquals(1, vecInt0.size());
      assertEquals(2343, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2343, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(iLits0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, (-2465));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals((-2465), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.getAssertionLevel((IVecInt) null, 313);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 313);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(313, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1366);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1366, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt0.size());
      assertEquals(1366, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.locked());
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(1, minWatchCard0.size());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertEquals(1, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      // Undeclared exception!
      try { 
        minWatchCard0.computePropagation((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard((ILits) null, (IVecInt) null, true, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.shrink(1);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, (-2417));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(313);
      assertEquals(1, vecInt0.size());
      assertEquals(313, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(313, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, (-2417));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, (IVecInt) null, 296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 3412);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      minWatchCard0.normalize();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 1181);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.size());
      assertEquals(1181, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      int int0 = minWatchCard0.size();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.size());
      assertEquals(1181, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, int0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(313, 1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(313, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 313);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(313, minWatchCard0.size());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      DotSearchTracing<MixedDataStructureDanielWLConciseBinary> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureDanielWLConciseBinary>("@Ne");
      assertNotNull(dotSearchTracing0);
      
      String string0 = minWatchCard0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(313, minWatchCard0.size());
      assertNotNull(string0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      String string0 = minWatchCard0.toString((VarMapper) null);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, (-730));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertEquals(730, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      DotSearchTracing<MixedDataStructureDanielWLConciseBinary> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureDanielWLConciseBinary>("");
      assertNotNull(dotSearchTracing0);
      
      String string0 = minWatchCard0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertEquals(730, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(45, 45);
      assertEquals(45, vecInt0.size());
      assertEquals(45, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(45, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      int int0 = minWatchCard0.getAssertionLevel(vecInt0, 45);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(45, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals((-1), int0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      VecInt vecInt0 = new VecInt(30, 30);
      assertEquals(30, vecInt0.size());
      assertEquals(30, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-44));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(30, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.locked());
      assertEquals((-44), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      minWatchCard0.calcReasonOnTheFly(248, vecInt0, vecInt0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 313);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.locked());
      assertEquals(1, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(313, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      minWatchCard0.hashCode();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.locked());
      assertEquals(1, minWatchCard0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(313, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, vecInt0, false, 1);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard1.simplify());
      assertEquals((-1), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard1.learnt());
      assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
      assertEquals(0, minWatchCard1.size());
      assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard1.locked());
      assertNotNull(minWatchCard1);
      assertFalse(minWatchCard1.equals((Object)minWatchCard0));
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      boolean boolean0 = minWatchCard0.equals(minWatchCard1);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(minWatchCard1.simplify());
      assertEquals((-1), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard1.learnt());
      assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
      assertEquals(0, minWatchCard1.size());
      assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard1.locked());
      assertFalse(boolean0);
      assertNotSame(minWatchCard0, minWatchCard1);
      assertNotSame(minWatchCard1, minWatchCard0);
      assertFalse(minWatchCard0.equals((Object)minWatchCard1));
      assertFalse(minWatchCard1.equals((Object)minWatchCard0));
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-13));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.locked());
      assertEquals((-13), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      boolean boolean0 = minWatchCard0.equals(minWatchCard0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.locked());
      assertEquals((-13), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(boolean0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1572);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.simplify());
      assertEquals(1572, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      boolean boolean0 = minWatchCard0.equals((Object) null);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.simplify());
      assertEquals(1572, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(boolean0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-5));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-5), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      boolean boolean0 = minWatchCard0.equals(vecInt0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-5), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(boolean0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-789));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals((-789), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation((UnitPropagationListener) null);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals((-789), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard1.size());
      assertFalse(minWatchCard1.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard1.canBeSatisfiedByCountingLiterals());
      assertEquals((-789), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard1.getActivity(), 0.01);
      assertTrue(minWatchCard1.locked());
      assertFalse(minWatchCard1.learnt());
      assertFalse(minWatchCard1.simplify());
      assertNotNull(minWatchCard1);
      assertSame(minWatchCard0, minWatchCard1);
      assertSame(minWatchCard1, minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 545.1840961661);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      IVecInt iVecInt0 = solver0.getOutLearnt();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = iVecInt0.push(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt1.last());
      assertEquals(1, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertNotNull(iVecInt1);
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt1, iVecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(1, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertNotNull(minWatchCard0);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation(solver0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(545.1840961661, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(minWatchCard0.learnt());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(1, minWatchCard0.size());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertNull(minWatchCard1);
      assertSame(iVecInt0, iVecInt1);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertNotNull(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      try { 
        minWatchCard0.computePropagation((UnitPropagationListener) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.getFromPool(0);
      vecInt0.growTo(1601, 0);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-13));
      minWatchCard0.computeWatches();
      assertEquals((-13), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 545.1840961661);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      iVecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 0);
      minWatchCard0.assertConstraint(solver0);
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(45, 45);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      String string0 = minWatchCard0.toString();
      assertEquals("-x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] -x22[?] >= 1", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      minWatchCard0.toString();
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(102);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 102);
      lits0.satisfies(102);
      boolean boolean0 = minWatchCard0.simplify();
      assertEquals(102, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 313);
      minWatchCard0.simplify();
      assertEquals(313, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, minWatchCard0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Lits lits0 = new Lits();
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 545.1840961661);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      iVecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 278);
      minWatchCard0.remove((UnitPropagationListener) null);
      assertEquals(278, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(45, 45);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, 112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(0);
      Constr constr0 = MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, 0);
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(9);
      vecInt0.growTo(9, 9);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, 0);
      assertTrue(constr0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 313);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.push(0);
      lits0.satisfies(1);
      int int0 = MinWatchCard.linearisation(lits0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(82);
      lits0.satisfies(82);
      int int0 = MinWatchCard.linearisation(lits0, iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 313);
      minWatchCard0.calcReason(1, iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertEquals(1, minWatchCard0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 278);
      boolean boolean0 = minWatchCard0.learnt();
      assertFalse(boolean0);
      assertEquals(278, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 545.1840961661);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-33));
      minWatchCard0.incActivity((-33));
      assertEquals((-33), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 0);
      minWatchCard0.setActivity(0.0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 278);
      // Undeclared exception!
      try { 
        minWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1366);
      double double0 = minWatchCard0.getActivity();
      assertEquals((-1366), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1));
      boolean boolean0 = minWatchCard0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-13));
      boolean boolean0 = minWatchCard0.locked();
      assertEquals((-13), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Lits lits0 = new Lits();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, (-1587));
      minWatchCard0.forwardActivity(545.1840961661);
      assertEquals((-1587), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-13));
      minWatchCard0.undo((-13));
      assertEquals((-13), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 1181);
      Constr constr0 = minWatchCard0.toConstraint();
      assertEquals(1181, constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, (-730));
      // Undeclared exception!
      try { 
        minWatchCard0.get((-730));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -730
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 313);
      boolean boolean0 = minWatchCard0.canBePropagatedMultipleTimes();
      assertEquals(313, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, (-730));
      minWatchCard0.getLits();
      assertEquals(730, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-2022));
      minWatchCard0.rescaleBy(82);
      assertEquals((-2022), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 1181);
      minWatchCard0.getVocabulary();
      assertEquals(1181, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }
}
