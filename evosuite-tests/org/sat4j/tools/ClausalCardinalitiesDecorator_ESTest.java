/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:23:02 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.EncodingStrategy;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Ladder;
import org.sat4j.tools.encoding.Policy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClausalCardinalitiesDecorator_ESTest extends ClausalCardinalitiesDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<DimacsOutputSolver>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fullClauseSelectorSolver0).toString(anyString());
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<DimacsOutputSolver>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<DimacsOutputSolver>>(fullClauseSelectorSolver0);
      String string0 = clausalCardinalitiesDecorator0.toString("jafuVC");
      assertEquals("null\nCardinality to SAT encoding: \nEncoding: Policy = [At most K: Native, at most 1: Native, exactly K: Native, exactly 1: Native]\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(aSolverFactory0, true, stringArray0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(manyCore0, vecInt0, solutionFoundListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, solutionFoundListener0);
      NegationDecorator<OptToSatAdapter> negationDecorator0 = new NegationDecorator<OptToSatAdapter>(optToSatAdapter0);
      Ladder ladder0 = new Ladder();
      ClausalCardinalitiesDecorator<NegationDecorator<OptToSatAdapter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<NegationDecorator<OptToSatAdapter>>(negationDecorator0, ladder0);
      String string0 = clausalCardinalitiesDecorator0.toString();
      assertEquals("Optimization to SAT adapter\nManyCore solver with 0 solvers running in parallel\n\nCardinality to SAT encoding: \nEncoding: org.sat4j.tools.encoding.Ladder\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ManyCore<SolutionCounter> manyCore0 = (ManyCore<SolutionCounter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      ClausalCardinalitiesDecorator<ManyCore<SolutionCounter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ManyCore<SolutionCounter>>(manyCore0);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addExactly((IVecInt) null, 1404);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).size();
      CBClause cBClause0 = CBClause.brandNewClause(unitPropagationListener0, iLits0, iVecInt0);
      ManyCore<SolutionCounter> manyCore0 = (ManyCore<SolutionCounter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(cBClause0).when(manyCore0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      ClausalCardinalitiesDecorator<ManyCore<SolutionCounter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ManyCore<SolutionCounter>>(manyCore0);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addExactly((IVecInt) null, 1404);
      assertSame(cBClause0, iConstr0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      Ladder ladder0 = new Ladder();
      ClausalDataStructureWL clausalDataStructureWL0 = mock(ClausalDataStructureWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(clausalDataStructureWL0).getVocabulary();
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(533.789090085);
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, pureOrder0, glucose21Restarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter0, ladder0);
      IConstr iConstr0 = clausalCardinalitiesDecorator0.addAtMost(iVecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(491);
      Ladder ladder0 = new Ladder();
      ClausalDataStructureWL clausalDataStructureWL0 = mock(ClausalDataStructureWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(clausalDataStructureWL0).getVocabulary();
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(533.789090085);
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, pureOrder0, glucose21Restarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, ladder0);
      clausalCardinalitiesDecorator0.addAtLeast(iVecInt0, 1608);
      assertEquals(0, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClausalCardinalitiesDecorator<ModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIterator>((ModelIterator) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString("`>]L=^-XE1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>((OptToSatAdapter) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addExactly((IVecInt) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0, true);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(maxSatDecorator0);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>((MinOneDecorator) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost(iVecInt0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClausalCardinalitiesDecorator<ModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIterator>((ModelIterator) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtMost((IVecInt) null, 798);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClausalCardinalitiesDecorator<SingleSolutionDetector> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SingleSolutionDetector>((SingleSolutionDetector) null);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast((IVecInt) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(aSolverFactory0, true, stringArray0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(manyCore0, vecInt0, solutionFoundListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, solutionFoundListener0);
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.addAtLeast(vecInt0, (-1147));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>((OptToSatAdapter) null, encodingStrategyAdapter0);
      // Undeclared exception!
      try { 
        clausalCardinalitiesDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
