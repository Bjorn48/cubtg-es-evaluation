/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:02:33 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.SingleSolutionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtLeast_ESTest extends AtLeast_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-1));
      VecInt vecInt1 = new VecInt();
      atLeast0.calcReasonOnTheFly((-1), vecInt0, vecInt1);
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, glucose21Restarts0, (ILogAble) null);
      ILits iLits0 = solver0.getVocabulary();
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, (-1098));
      atLeast0.calcReasonOnTheFly((-1098), iVecInt0, iVecInt0);
      assertEquals((-1098), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(476);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 476);
      atLeast0.calcReason((-2141), vecInt0);
      assertEquals(476, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(476);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 476);
      atLeast0.undo(476);
      assertEquals(476, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1531, 1531);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(1531);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, (RestartStrategy) null);
      solver0.addAtLeast(vecInt0, 1);
      assertEquals(1, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      IVecInt iVecInt0 = vecInt0.push(0);
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("iqONg&z f?s$t^Vx");
      String string0 = atLeast0.toString((VarMapper) dotSearchTracing0);
      assertEquals(" + 0[?]  >= 0", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(12, 12);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 1504);
      String string0 = atLeast0.toString();
      assertEquals("Card (12) :  + 6[?@0]   + 6[?@0]   + 6[?@0]   + 6[?@0]   + 6[?@0]   + 6[?@0]   + 6[?@0]   + 6[?@0]   + 6[?@0]   + 6[?@0]   + 6[?@0]   + 6[?@0]  >= 1504", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 3);
      atLeast0.size();
      assertEquals(3, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-792));
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-792), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0.0, 3663);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>((-1195));
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      int int0 = AtLeast.niceParameters(solver0, (ILits) null, vecInt0, 0);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[4];
      LightFactory lightFactory0 = new LightFactory();
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(solver0);
      GateTranslator gateTranslator0 = new GateTranslator(singleSolutionDetector0);
      gateTranslatorArray0[0] = gateTranslator0;
      gateTranslatorArray0[1] = gateTranslatorArray0[0];
      gateTranslatorArray0[2] = gateTranslator0;
      gateTranslatorArray0[3] = gateTranslator0;
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(stringArray0, gateTranslatorArray0);
      FullClauseSelectorSolver<ManyCore<GateTranslator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<GateTranslator>>(manyCore0, false);
      VecInt vecInt0 = (VecInt)fullClauseSelectorSolver0.getLastClause();
      int int0 = AtLeast.niceParameters(solver0, (ILits) null, vecInt0, (-695));
      assertEquals((-695), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      IVecInt iVecInt0 = vecInt0.push(0);
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 0);
      atLeast0.get(0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(2090, 2090);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 2090);
      atLeast0.get(1319);
      assertEquals(2090, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push((-65));
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 0);
      atLeast0.get(0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(476);
      Constr constr0 = AtLeast.atLeastNew((UnitPropagationListener) null, lits0, vecInt0, (-9));
      assertEquals((-9), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4547, 4547);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 4547);
      DotSearchTracing<GateTranslator> dotSearchTracing0 = new DotSearchTracing<GateTranslator>(" `s a MUS");
      // Undeclared exception!
      try { 
        atLeast0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4547, 4547);
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 631);
      // Undeclared exception!
      try { 
        atLeast0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4547, 4547);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 4547);
      // Undeclared exception!
      try { 
        atLeast0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(48, (-446));
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 462);
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -445
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        atLeast0.propagatePI(watcherBasedPrimeImplicantStrategy0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 3568);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        atLeast0.propagatePI(watcherBasedPrimeImplicantStrategy0, 3568);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3568
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        atLeast0.propagate((UnitPropagationListener) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(476);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 476);
      // Undeclared exception!
      try { 
        atLeast0.propagate((UnitPropagationListener) null, 476);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 476
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        AtLeast.niceParameters((UnitPropagationListener) null, lits0, (IVecInt) null, (-395));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      SearchParams searchParams0 = new SearchParams(14, (-1.0), 872.0, 14);
      EMARestarts eMARestarts0 = new EMARestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, eMARestarts0, iLogAble0);
      VecInt vecInt0 = new VecInt(47, (-750));
      // Undeclared exception!
      try { 
        AtLeast.niceParameters(solver0, lits0, vecInt0, 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4547, 4547);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 4547);
      // Undeclared exception!
      try { 
        atLeast0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.push((-316));
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-316));
      // Undeclared exception!
      try { 
        atLeast0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -315
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4552);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 4552);
      // Undeclared exception!
      try { 
        atLeast0.getAssertionLevel((IVecInt) null, 4552);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4547, 4547);
      IVecInt iVecInt0 = vecInt0.clone();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 631);
      // Undeclared exception!
      atLeast0.calcReasonOnTheFly(631, vecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(32);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 32);
      // Undeclared exception!
      try { 
        atLeast0.calcReasonOnTheFly(32, (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt(918);
      IVecInt iVecInt0 = vecInt0.push(1424);
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1424);
      // Undeclared exception!
      try { 
        atLeast0.calcReason(1424, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1424
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams((-717.618358077), (-717.618358077), (-717.618358077), 4547);
      PureOrder pureOrder0 = new PureOrder((-3025));
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, eMARestarts0, mUSLauncher0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew(solver0, iLits0, readOnlyVecInt0, (-3025));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, naturalStaticOrder0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      iVecInt0.push(3534);
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew(solver0, (ILits) null, iVecInt0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-8));
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, naturalStaticOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew(solver0, iLits0, vecInt0, (-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4547, 4547);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 4547);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(476, 476);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 476);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, readOnlyVecInt0, 4530);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast((ILits) null, (IVecInt) null, 2218);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1675);
      IVecInt iVecInt0 = vecInt0.pop();
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast((ILits) null, iVecInt0, 1675);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(1431);
      Lits lits0 = new Lits();
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, vecInt0, (-2185));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(3);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, (RestartStrategy) null);
      AtLeast atLeast0 = (AtLeast)solver0.addAtLeast(vecInt0, (-1199));
      atLeast0.register();
      assertEquals((-1199), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, atLeast0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-918));
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      atLeast0.size();
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(476);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 476);
      boolean boolean0 = atLeast0.learnt();
      assertFalse(boolean0);
      assertEquals(476, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt(500, 500);
      DotSearchTracing<GateTranslator> dotSearchTracing0 = new DotSearchTracing<GateTranslator>("?ml");
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 500);
      // Undeclared exception!
      try { 
        atLeast0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      DotSearchTracing<GateTranslator> dotSearchTracing0 = new DotSearchTracing<GateTranslator>("?ml");
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      String string0 = atLeast0.toString((VarMapper) dotSearchTracing0);
      assertEquals(">= 0", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1431, 1431);
      VecInt vecInt1 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt1, (-2185));
      int int0 = atLeast0.getAssertionLevel(vecInt0, (-2185));
      assertEquals((-2185), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1431, 1431);
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-2185));
      int int0 = atLeast0.getAssertionLevel(vecInt0, (-2185));
      assertEquals((-1), int0);
      assertEquals((-2185), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 3);
      // Undeclared exception!
      try { 
        atLeast0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(3);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, (RestartStrategy) null);
      ILits iLits0 = solver0.getVocabulary();
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 3);
      atLeast0.assertConstraint(solver0);
      assertTrue(atLeast0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4547, 4547);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 4547);
      // Undeclared exception!
      try { 
        atLeast0.calcReason((-1), vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt(500, 500);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(500);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, (RestartStrategy) null);
      AtLeast atLeast0 = (AtLeast)solver0.addAtLeast(vecInt0, (-1199));
      atLeast0.calcReason(500, vecInt0);
      assertEquals((-1199), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, atLeast0.size());
      assertEquals(500, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(476, 476);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 476);
      // Undeclared exception!
      try { 
        atLeast0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 477
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1265);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 1265);
      atLeast0.remove((UnitPropagationListener) null);
      assertEquals(1265, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt(500, 500);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(500);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, (RestartStrategy) null);
      try { 
        solver0.addAtLeast(vecInt0, 500);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt(500, 500);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(500);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, (RestartStrategy) null);
      solver0.addAtLeast(vecInt0, (-1199));
      ILits iLits0 = solver0.getVocabulary();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      try { 
        AtLeast.atLeastNew(solver0, iLits0, iVecInt0, 500);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      try { 
        AtLeast.niceParameters((UnitPropagationListener) null, lits0, vecInt0, 488);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      Lits lits0 = new Lits();
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, vecInt0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cards with degree 1 are clauses!!!!
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(1.0);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver0.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, (-3800));
      atLeast0.setActivity(0.0);
      assertEquals((-3800), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 45);
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4547);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 4547);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      boolean boolean0 = atLeast0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      double double0 = atLeast0.getActivity();
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      Constr constr0 = atLeast0.toConstraint();
      assertEquals(0, constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 1044);
      // Undeclared exception!
      try { 
        atLeast0.rescaleBy(1044);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 4178);
      atLeast0.forwardActivity(4178);
      assertEquals(4178, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 0);
      boolean boolean0 = atLeast0.locked();
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(3);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, (RestartStrategy) null);
      AtLeast atLeast0 = (AtLeast)solver0.addAtLeast(vecInt0, (-1199));
      // Undeclared exception!
      try { 
        atLeast0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VecInt vecInt0 = new VecInt(500, 500);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(500);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, (RestartStrategy) null);
      AtLeast atLeast0 = (AtLeast)solver0.addAtLeast(vecInt0, (-1199));
      boolean boolean0 = atLeast0.simplify();
      assertEquals((-1199), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
      assertEquals(1, atLeast0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4547);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 4547);
      // Undeclared exception!
      try { 
        atLeast0.get(2951);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2951
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 3663);
      atLeast0.incActivity((-2998.7458872289535));
      assertEquals(3663, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      boolean boolean0 = atLeast0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 3);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(3);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, (RestartStrategy) null);
      AtLeast atLeast0 = (AtLeast)solver0.addAtLeast(vecInt0, (-1199));
      assertEquals(0, solver0.getPropagationLevel());
      
      boolean boolean0 = atLeast0.isSatisfied();
      assertEquals(1, atLeast0.size());
      assertEquals((-1199), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }
}
