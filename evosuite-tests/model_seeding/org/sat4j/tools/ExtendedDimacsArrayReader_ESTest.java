/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:21:26 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.ExtendedDimacsArrayReader;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExtendedDimacsArrayReader_ESTest extends ExtendedDimacsArrayReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0, (EncodingStrategyAdapter) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(clausalCardinalitiesDecorator0);
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(12, 12, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1363;
      intArray0[1] = 12;
      intArray0[2] = 15;
      intArray0[3] = 11;
      intArray0[4] = 3;
      intArray0[5] = 9;
      intArray0[6] = 5;
      extendedDimacsArrayReader0.handleConstr(11, 1000, intArray0);
      assertEquals(128, iSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0, (EncodingStrategyAdapter) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(clausalCardinalitiesDecorator0);
      int[] intArray0 = new int[4];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(8, 8, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0, (EncodingStrategyAdapter) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(clausalCardinalitiesDecorator0);
      int[] intArray0 = new int[3];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(4, 4, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = 5;
      intArray0[2] = 3;
      intArray0[3] = 10;
      intArray0[4] = 8;
      extendedDimacsArrayReader0.handleConstr(6, 1000, intArray0);
      assertEquals(1000, iSolver0.nVars());
      assertEquals(6, iSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0, (EncodingStrategyAdapter) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(clausalCardinalitiesDecorator0);
      int[] intArray0 = new int[0];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(2, 1569, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0, (EncodingStrategyAdapter) null);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(clausalCardinalitiesDecorator0);
      int[] intArray0 = new int[0];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(1, (-2206), intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(dimacsOutputSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsOutputSolver0);
      int[] intArray0 = new int[1];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(3, 10, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(dimacsOutputSolver0).nextFreeVarId(anyBoolean());
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(negationDecorator0);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(singleSolutionDetector0);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(6, 938, intArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(12, 12, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(3, 2, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(2, 2, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(1, 1, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(15, 15, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 15 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(12, 14, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(10, 14, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 10 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(9, 9, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 9 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(8, 8, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(7, 7, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 7 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(5, 1, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 5 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(4, 10, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[1];
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(3, 7, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
