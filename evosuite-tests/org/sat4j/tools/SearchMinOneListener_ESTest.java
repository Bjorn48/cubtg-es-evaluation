/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:55:51 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Lbool;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.SearchMinOneListener;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchMinOneListener_ESTest extends SearchMinOneListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchParams searchParams0 = new SearchParams(711.9394936164, 600.792326336965, 600.792326336965, (-451));
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(1);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, lubyRestarts0);
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      int[] intArray0 = new int[2];
      intArray0[1] = (-451);
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SearchMinOneListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      int[] intArray0 = new int[0];
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, pureOrder0, (RestartStrategy) null);
      searchMinOneListener0.init(solver0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, dimacsOutputSolver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cards with degree 1 are clauses!!!!
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchParams searchParams0 = new SearchParams(711.9394936164, 600.792326336965, 600.792326336965, (-451));
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(1);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, lubyRestarts0);
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      searchMinOneListener0.init(solver0);
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Lbool lbool0 = Lbool.TRUE;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      // Undeclared exception!
      try { 
        searchMinOneListener0.end(lbool0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      searchMinOneListener0.end((Lbool) null);
  }
}
