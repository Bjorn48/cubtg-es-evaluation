/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:02:07 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractClauseSelectorSolver_ESTest extends AbstractClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      groupClauseSelectorSolver0.addControlableClause(iVecInt0, (-1760));
      int int0 = groupClauseSelectorSolver0.createNewVar(iVecInt0);
      assertEquals(2, dimacsOutputSolver0.nVars());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(manyCore0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(manyCore0).nVars();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIterator0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(groupClauseSelectorSolver0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<AbstractMinimalModel>(minimal4CardinalityModel0);
      boolean boolean0 = groupClauseSelectorSolver1.isSatisfiable(iVecInt0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(9, 9, 9, 9, 9).when(iSolver0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4InclusionModel0);
      boolean boolean0 = negationDecorator0.isSatisfiable(iVecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(500, 0).when(iSolver0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      LexicoDecorator<Minimal4InclusionModel> lexicoDecorator0 = new LexicoDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>>(lexicoDecorator0, true);
      boolean boolean0 = fullClauseSelectorSolver0.isSatisfiable();
      assertFalse(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(manyCore0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIterator0);
      int int0 = groupClauseSelectorSolver0.createNewVar(iVecInt0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ManyCore<OptToSatAdapter> manyCore0 = (ManyCore<OptToSatAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(manyCore0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIterator0);
      int int0 = groupClauseSelectorSolver0.createNewVar(iVecInt0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(statisticsSolver0);
      LexicoDecorator<Minimal4InclusionModel> lexicoDecorator0 = new LexicoDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>>(lexicoDecorator0, true);
      try { 
        fullClauseSelectorSolver0.isSatisfiable(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LexicoDecorator<Minimal4InclusionModel> lexicoDecorator0 = (LexicoDecorator<Minimal4InclusionModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>>(lexicoDecorator0, true);
      fullClauseSelectorSolver0.clearDecorated();
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      VecInt vecInt0 = new VecInt(0, 0);
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsStringSolver0, vecInt0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(subModelIterator0, vecInt0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4CardinalityModel0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(maxSatDecorator0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, true);
      try { 
        fullClauseSelectorSolver0.isSatisfiable((IVecInt) vecInt0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.isSatisfiable(iVecInt0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      LexicoDecorator<Minimal4InclusionModel> lexicoDecorator0 = (LexicoDecorator<Minimal4InclusionModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>>(lexicoDecorator0, true);
      fullClauseSelectorSolver1.isSatisfiable(false);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-558));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1.0E20, (-558), (-558), (-558));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, miniSATRestarts0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, restartStrategy0);
      IVecInt iVecInt0 = solver1.createBlockingClauseForCurrentModel();
      solutionFoundListener0.onSolutionFound(iVecInt0);
      solutionFoundListener0.onUnsatTermination();
      solutionFoundListener0.onUnsatTermination();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver1, solutionFoundListener0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      boolean boolean0 = negationDecorator0.isSatisfiable(iVecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.isSatisfiable(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(576);
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      try { 
        negationDecorator0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.createNewVar((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      iVecInt0.insertFirst(182);
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.createNewVar(iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      iVecInt0.insertFirst((-1));
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      int int0 = groupClauseSelectorSolver0.createNewVar(iVecInt0);
      assertEquals(1, dimacsOutputSolver0.nVars());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LexicoDecorator<Minimal4InclusionModel> lexicoDecorator0 = (LexicoDecorator<Minimal4InclusionModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(lexicoDecorator0).isSatisfiable(anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>>(lexicoDecorator0, true);
      fullClauseSelectorSolver0.internalState();
      boolean boolean0 = fullClauseSelectorSolver0.isSatisfiable(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(gateTranslatorArray0);
      GateTranslator gateTranslator0 = new GateTranslator(manyCore0);
      ModelIterator modelIterator0 = new ModelIterator(gateTranslator0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(modelIterator0);
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(true, abstractMinimalModelArray0);
      NegationDecorator<ManyCore<AbstractMinimalModel>> negationDecorator0 = new NegationDecorator<ManyCore<AbstractMinimalModel>>(manyCore0);
      try { 
        negationDecorator0.isSatisfiable(iVecInt0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LexicoDecorator<Minimal4InclusionModel> lexicoDecorator0 = (LexicoDecorator<Minimal4InclusionModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>>(lexicoDecorator0, true);
      fullClauseSelectorSolver0.externalState();
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MinOneDecorator>((MinOneDecorator) null, false);
      fullClauseSelectorSolver0.discardLastestVar();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(iSolver0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      LexicoDecorator<Minimal4InclusionModel> lexicoDecorator0 = new LexicoDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(lexicoDecorator0, 787L, (SolutionFoundListener) null);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      boolean boolean0 = groupClauseSelectorSolver0.isSatisfiable(iVecInt0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(gateTranslatorArray0);
      GateTranslator gateTranslator0 = new GateTranslator(manyCore0);
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.isSatisfiable(iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }
}
