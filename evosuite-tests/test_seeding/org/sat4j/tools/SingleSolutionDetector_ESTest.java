/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:01:48 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.SingleSolutionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingleSolutionDetector_ESTest extends SingleSolutionDetector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(lexicoDecorator0).modelWithInternalVariables();
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(2, 0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[1] = (-142);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(lexicoDecorator0).modelWithInternalVariables();
      doReturn(2, 0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution((IVecInt) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) intArray0, (Object) intArray0).when(lexicoDecorator0).modelWithInternalVariables();
      doReturn(originalWLClause0).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(Integer.MAX_VALUE, (-17)).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      doReturn(true).when(lexicoDecorator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      singleSolutionDetector0.hasASingleSolution();
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution((IVecInt) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.FullClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(iSolver0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector((ISolver) null);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[5];
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(lexicoDecorator0).modelWithInternalVariables();
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      doReturn(false).when(lexicoDecorator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0, true);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      singleSolutionDetector0.hasASingleSolution();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(lexicoDecorator0).modelWithInternalVariables();
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      doReturn(false).when(lexicoDecorator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      MockFile mockFile0 = new MockFile(" is a MUS");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsOutputSolver0);
      boolean boolean0 = singleSolutionDetector0.hasASingleSolution(iVecInt0);
      assertTrue(boolean0);
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(lexicoDecorator0).model();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution((IVecInt) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(lexicoDecorator0).model();
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(lexicoDecorator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      boolean boolean0 = singleSolutionDetector0.hasASingleSolution((IVecInt) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(maxSatDecorator0);
      // Undeclared exception!
      try { 
        singleSolutionDetector0.hasASingleSolution();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(lexicoDecorator0).model();
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(lexicoDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(lexicoDecorator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      boolean boolean0 = singleSolutionDetector0.hasASingleSolution();
      assertTrue(boolean0);
  }
}
