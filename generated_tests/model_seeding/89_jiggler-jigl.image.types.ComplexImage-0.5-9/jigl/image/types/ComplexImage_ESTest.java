/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 17:50:37 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.image.ImageProducer;
import javax.swing.JApplet;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      int int0 = 3861;
      complexImage0.addbuffer(3861, 1, 1, 3864, (float) 3861, (-1069.44F));
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-3177), 3861, (float) (-3177), (-56.36728F));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      ComplexImage complexImage1 = complexImage0.subtract((float) 0, (float) 3879);
      complexImage0.toString();
      complexImage1.max();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 3824;
      ComplexImage complexImage0 = new ComplexImage(3824, 3824);
      int int1 = 1491;
      int int2 = (-1446);
      int int3 = (-1);
      int int4 = (-346);
      ROI rOI0 = new ROI(int1, int0, int3, int4);
      // Undeclared exception!
      try { 
        complexImage0.add(int2, int0, (float) int2, (float) int2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1447
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 195;
      ComplexImage complexImage0 = new ComplexImage(195, 195);
      int int1 = (-3687);
      int int2 = 2836;
      ROI rOI0 = new ROI((-3687), (-2166), 195, 2836);
      rOI0.setROI((-3687), (-3687), (-2526), (-2526));
      complexImage0.imaginary();
      int int3 = 1;
      // Undeclared exception!
      try { 
        complexImage0.subtract(int3, int1, (float) int0, (float) int2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7374
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(0, 3864);
      float float0 = (-797.22003F);
      ComplexImage complexImage1 = complexImage0.divide((-797.22003F), 255.0F);
      // Undeclared exception!
      complexImage1.magnitudeImage();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 16;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(16, 16, (float) 16, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI((-4449), 0, 0, (-3699));
      rOI0.X();
      rOI0.setROI(16, 173, 3841, (-3699));
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage1.add((-1401), (-1401), (-4158.05F), (-4158.05F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.getMagnitudeImage();
      // Undeclared exception!
      try { 
        complexImage0.setImag(3833, 3833, (float) 3833, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.setImag((-3699), (-3921), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 1110;
      int int1 = 1;
      ComplexImage complexImage0 = new ComplexImage(1110, 1);
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI((-4449), 0, 0, (-3699));
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage0.multiply(3574.82F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      complexImage0.magnitudeImage();
      int int2 = 4978;
      complexImage0.toString();
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(4978, 3135, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3135
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(101, 756, 1882, 101);
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(173, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(2400, 2400, 2400, 2400);
      complexImage0.subtract((float) 2400, 189.1F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 2019;
      int int1 = (-3296);
      int int2 = 2738;
      ROI rOI0 = new ROI(0, 2019, 0, 2738);
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.getReal(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3864);
      complexImage0.getJavaImage();
      ComplexImage complexImage1 = complexImage0.divide((-797.22003F), (float) 3864);
      complexImage1.real = null;
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      complexImage0.copy();
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      String string0 = "X-Z>XV^RX";
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 3863;
      int int1 = 2251;
      Complex complex0 = new Complex();
      complex0.real();
      complex0.magnitude();
      Complex complex1 = new Complex(complex0);
      // Undeclared exception!
      try { 
        complexImage0.set(3853, 3853, complex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 3879;
      ComplexImage complexImage0 = new ComplexImage(3879, 3879);
      // Undeclared exception!
      complexImage0.addbuffer(3879, 3879, 3879, (-3887), (float) (-3887), (float) (-3887));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ROI rOI0 = new ROI();
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        complexImage0.divide((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(1.0, 1.0);
      complex1.real();
      complex0.magnitude();
      // Undeclared exception!
      try { 
        complexImage0.set(2826, 8, complex1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.getImag(3438, 3438, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.min();
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(195, 195);
      // Undeclared exception!
      try { 
        complexImage0.setReal(195, 195, (-537.5349F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 195
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      Complex complex0 = new Complex();
      complex0.real();
      Complex complex1 = Complex.mult(complex0, complex0);
      complex1.magnitude();
      Complex complex2 = new Complex(complex1);
      // Undeclared exception!
      try { 
        complexImage0.clear(complex2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (-537.5349F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.multiply(1.0F, 1.0F);
      complexImage1.phaseImage();
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(173, 173);
      ROI rOI0 = new ROI();
      complexImage1.copy(rOI0);
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.divide(complexImage0);
      complexImage0.getMagnitudeImage();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ROI rOI0 = new ROI();
      int int0 = 3879;
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(924, 924);
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage1.set(0, (-2390), (Complex) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(3836, 3836, 3875, 1809, (float) 3875, (float) 3836);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.add((-2502.8665F), (-962.0F));
      // Undeclared exception!
      try { 
        complexImage1.getReal((-16777216), (-16777216), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(173, 173, (float) 173, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.multiply((-1.0F), (-1.0F));
      int int0 = (-1);
      float float0 = 972.8184F;
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ux();
      rOI0.ux();
      complexImage0.max();
      rOI0.lx();
      int int1 = 255;
      int int2 = (-2003);
      rOI0.setROI((-1), 0, (-2003), (-1));
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.multiply((float) (-4460), (float) (-4460));
      ROI rOI0 = new ROI(75, 911, (-4460), (-1));
      // Undeclared exception!
      try { 
        complexImage0.add((-1.0F), 2396.165F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = (-117);
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-117), (-117), (-1597.4514F), (float) (-117));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.divide(0.0F, (-0.59215367F));
      complexImage1.imag();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.imaginary();
      ROI rOI0 = new ROI((-4449), 0, 0, (-3699));
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage1.subtract((-1093), (-1093), (float) (-1093), (float) (-1093), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(173, 173);
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.X();
      complexImage1.Y();
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 1958;
      ComplexImage complexImage0 = new ComplexImage(1958, 1958);
      ComplexImage complexImage1 = new ComplexImage(1958, 1958);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1958;
      floatArray0[1] = (float) 1958;
      RealGrayImage realGrayImage0 = new RealGrayImage(1958, 0, floatArray0);
      complexImage1.setImag(realGrayImage0);
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      ROI rOI0 = new ROI(0, 0, 1, 0);
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(2400, 2400, 2400, 2400);
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.setImag((RealGrayImage) null);
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(2888, 0, (float) 2888);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.getMagnitudeImage();
      ROI rOI0 = new ROI(0, 0, 0, 2635);
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 16;
      ROI rOI0 = new ROI();
      rOI0.setROI((-720), (-1), 0, (-720));
      rOI0.setROI((-1), (-354), 16, (-1));
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(16, 16, (float) 16, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.divide((-797.22003F), (float) 0);
      complexImage0.copy();
      // Undeclared exception!
      try { 
        complexImage0.get((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.getMagnitudeImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      ComplexImage complexImage1 = complexImage0.subtract((float) 3879, (float) 3879);
      // Undeclared exception!
      complexImage1.phaseImage();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ROI rOI0 = new ROI((-2692), (-2692), (-2692), (-2692));
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.multiply((-2692), (-2692), 313.3F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = (-1);
      int int1 = (-293);
      float float0 = 985.7F;
      complexImage0.min();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI((-1), 2042, (-293), (-801));
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(255, 3879);
      // Undeclared exception!
      try { 
        complexImage0.multiply(255, 3846, (-1433.1852F), 1116.9F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.diff((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.setImag((RealGrayImage) null);
      ROI rOI0 = new ROI(331, 1, (-257), 1);
      int int0 = new Integer(331);
      // Undeclared exception!
      try { 
        complexImage0.setReal((-257), (-4259), (float) 1972, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(128, 128, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.set(144, 16, (float) 144, (float) 144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 14;
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.get(14, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.clear((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3864);
      // Undeclared exception!
      complexImage0.magnitudeImage();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.add(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.add(0, 0, (float) 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      complexImage0.setReal(realGrayImage0);
      // Undeclared exception!
      try { 
        complexImage0.diff((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI((-3672), (-3672), (-3672), (-3672));
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      ComplexImage complexImage1 = complexImage0.subtract(1191.9633F, (float) 3879);
      complexImage0.toString();
      complexImage1.max();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.divide(0.0F, 0.0F);
      complexImage0.magnitudeImage();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.divide(complexImage0);
      complexImage0.getMagnitudeImage();
      int int0 = 3835;
      // Undeclared exception!
      try { 
        complexImage0.setImag(3835, 3835, (float) 3835, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(173, 1);
      ComplexImage complexImage2 = complexImage1.clear();
      complexImage2.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(173, 173);
      // Undeclared exception!
      try { 
        complexImage0.subtract((-1334.59F), (-1334.59F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1110, 1110);
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      complexImage0.max();
      float float0 = 239.87F;
      // Undeclared exception!
      try { 
        complexImage0.subtract(239.87F, 239.87F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(173, 173);
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI((-3272), 2042, (-3296), (-3296));
      // Undeclared exception!
      complexImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1958, 1958);
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.X();
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(179, 2);
      // Undeclared exception!
      try { 
        complexImage0.setImag(0, 179, (float) 179);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 179
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = (-3898);
      ROI rOI0 = new ROI((-3898), (-3898), (-3898), (-3464));
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(0, 3864);
      complexImage0.subtract((float) 3879, (-4126.6904F));
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.add(complexImage1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1, 1, (-1137.223F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.setROI((-1221), 2738, (-966), (-1221));
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      Complex complex0 = complexImage0.max();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.ly();
      // Undeclared exception!
      try { 
        complexImage0.set(0, 2635, complex0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI((-4449), 0, 0, (-3673));
      rOI0.X();
      ROI rOI1 = new ROI(0, 0, (-3673), 1);
      rOI0.X();
      ROI rOI2 = new ROI((-3673), (-4467), 0, (-257));
      rOI2.Y();
      // Undeclared exception!
      try { 
        complexImage0.setReal(4211, 1972, 1362.4463F, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.subtract((float) 2400, (float) 2400);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract(1.0F, 1.0F);
      assertNotNull(complexImage1);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(3879, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract(1191.9633F, (float) 3879);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(3879, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.add(1191.9633F, (float) 0);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(3879, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(3879, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.divide(1023.7872F, 1191.9633F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 2042;
      int int1 = 352;
      ComplexImage complexImage0 = new ComplexImage(2042, 352);
      assertNotNull(complexImage0);
      assertEquals(2042, complexImage0.X());
      assertEquals(352, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((-3007.616F), (-3007.616F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-1), (-1), (-905.15F), (float) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNull(realGrayImage0);
      
      ROI rOI0 = new ROI((-1093), (-1093), (-1093), (-3687));
      assertNotNull(rOI0);
      assertEquals((-1093), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-1093), rOI0.ly());
      assertEquals((-1093), rOI0.lx());
      assertEquals((-3687), rOI0.uy());
      assertEquals(2595, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.subtract((-1093), (-1093), (float) (-1093), (float) (-1093), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(0.0F, 255.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(255, 255, (float) 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-1), (-1), (-293), (-1), (float) (-293), 985.7F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-3932), 173, (float) 173, (-1387.566F));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int0 = 3879;
      ComplexImage complexImage0 = new ComplexImage(0, 3864);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(3864, complexImage0.Y());
      
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract(1191.9633F, (float) 3879);
      assertNotNull(complexImage1);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(3879, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.add(1191.9633F, 0.0F);
      assertNotNull(complexImage2);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      complexImage1.multiply(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(3879, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(1, 1780);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 448;
      ComplexImage complexImage0 = new ComplexImage(448, 448);
      assertNotNull(complexImage0);
      assertEquals(448, complexImage0.X());
      assertEquals(448, complexImage0.Y());
      
      float float0 = (-32768.0F);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.uy();
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      rOI0.setROI(448, 3847, 448, 0);
      assertEquals(1, rOI0.X());
      assertEquals(448, rOI0.lx());
      assertEquals(3848, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3847, rOI0.ly());
      assertEquals(448, rOI0.ux());
      
      int int2 = rOI0.ux();
      assertEquals(448, int2);
      assertEquals(1, rOI0.X());
      assertEquals(448, rOI0.lx());
      assertEquals(3848, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3847, rOI0.ly());
      assertEquals(448, rOI0.ux());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(448, int3);
      assertEquals(1, rOI0.X());
      assertEquals(448, rOI0.lx());
      assertEquals(3848, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3847, rOI0.ly());
      assertEquals(448, rOI0.ux());
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(448, int4);
      assertEquals(1, rOI0.X());
      assertEquals(448, rOI0.lx());
      assertEquals(3848, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3847, rOI0.ly());
      assertEquals(448, rOI0.ux());
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.ux();
      assertEquals(448, int5);
      assertEquals(1, rOI0.X());
      assertEquals(448, rOI0.lx());
      assertEquals(3848, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3847, rOI0.ly());
      assertEquals(448, rOI0.ux());
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.ux();
      assertEquals(448, int6);
      assertEquals(1, rOI0.X());
      assertEquals(448, rOI0.lx());
      assertEquals(3848, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3847, rOI0.ly());
      assertEquals(448, rOI0.ux());
      assertFalse(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(3847, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3847
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(173, 173);
      assertNotNull(complexImage1);
      assertEquals(173, complexImage1.X());
      assertEquals(173, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI(173, 173, 173, 173);
      assertNotNull(rOI0);
      assertEquals(173, rOI0.uy());
      assertEquals(173, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(173, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(173, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 173
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 173;
      ComplexImage complexImage1 = new ComplexImage(173, 173);
      assertNotNull(complexImage1);
      assertEquals(173, complexImage1.X());
      assertEquals(173, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.divide(0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = 3879;
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(3879, 1, (float) 3879, (float) 1);
      assertNotNull(complexImage1);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.multiply(3864.3882F, (float) 3879);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 1;
      int int1 = 0;
      ComplexImage complexImage1 = new ComplexImage(2616, 0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(2616, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.multiply((float) 1, (-832.0F));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.Y());
      assertEquals(2616, complexImage1.X());
      assertEquals(2616, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = new ComplexImage();
      assertNotNull(complexImage3);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      
      complexImage2.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(2616, complexImage1.X());
      assertEquals(2616, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage3));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage3.toString(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) (-4449), (float) (-4449));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1518, (-1632), (float) 3879, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1632
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage0 = new ComplexImage(3846, 2);
      assertNotNull(complexImage0);
      assertEquals(3846, complexImage0.X());
      assertEquals(2, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(3846, 0, 0, 2, 451.94476F, (float) 3846);
      assertNotNull(complexImage1);
      assertEquals(3846, complexImage0.X());
      assertEquals(2, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(3846, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((-1026.5935F), (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(255, 255);
      assertNotNull(complexImage1);
      assertEquals(255, complexImage1.Y());
      assertEquals(255, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.add(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(255, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      complexImage1.addbuffer(255, 255, (float) 255, 1131.0897F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 173, (float) 173);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI(173, 173, 173, 173);
      assertNotNull(rOI0);
      assertEquals(173, rOI0.ux());
      assertEquals(173, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(173, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(173, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage1.add(2412.7537F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(173, 173);
      assertNotNull(complexImage0);
      assertEquals(173, complexImage0.X());
      assertEquals(173, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 173, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertNotSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(173, 173);
      assertNotNull(complexImage0);
      assertEquals(173, complexImage0.Y());
      assertEquals(173, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract(1191.9633F, (float) 3879);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      assertEquals(3879, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.add(1191.9633F, (float) 0);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      assertEquals(3879, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(3879, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage2.multiply(32767.0F, 1191.9633F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.min((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1), (-1), (float) (-1), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 690;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(690, 0);
      assertNotNull(complexImage0);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      
      ComplexImage complexImage1 = complexImage0.divide((float) 690, 0.0F);
      assertNotNull(complexImage1);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(690, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage1.imag = null;
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(690, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      complexImage1.add(complexImage0);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(690, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(690, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(690, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.add(690, 690, (-2842.445F), 2337.913F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 690
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.divide(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(1528, 1528, 0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(173, 173);
      assertNotNull(complexImage0);
      assertEquals(173, complexImage0.Y());
      assertEquals(173, complexImage0.X());
      
      complexImage0.toString();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(659, 659);
      assertNotNull(complexImage0);
      assertEquals(659, complexImage0.X());
      assertEquals(659, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.mult(complex0, complex1);
      assertNotNull(complex2);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      double double0 = complex2.magnitude();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      // Undeclared exception!
      complexImage0.clear(complex2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag((-1757), (-1757), (float) (-1757));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 173;
      ComplexImage complexImage1 = new ComplexImage(173, 173);
      assertNotNull(complexImage1);
      assertEquals(173, complexImage1.X());
      assertEquals(173, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.divide(0.0F, (float) 173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.diff(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(3879, complexImage2.Y());
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-3197), 3152);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      float float0 = 12.8F;
      // Undeclared exception!
      try { 
        complexImage0.add(0, 0, 12.8F, 12.8F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 690;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(690, 0);
      assertNotNull(complexImage0);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 690, 0.0F);
      assertNotNull(complexImage1);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(690, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage1.imag = null;
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(690, complexImage1.X());
      
      complexImage1.add(complexImage0);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(690, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        complexImage1.add(690, 0, (-2842.445F), 2337.913F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-4467), (-4467), 173, (-4467));
      assertNotNull(rOI0);
      assertEquals((-4467), rOI0.uy());
      assertEquals((-4467), rOI0.ux());
      assertEquals(173, rOI0.lx());
      assertEquals((-4467), rOI0.ly());
      assertEquals(4641, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals((-4467), rOI0.uy());
      assertEquals((-4467), rOI0.ux());
      assertEquals(173, rOI0.lx());
      assertEquals((-4467), rOI0.ly());
      assertEquals(4641, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply(3864.3882F, (float) 3879);
      assertNotNull(complexImage1);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(3879, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply(3864.3882F, (float) 3879);
      assertNotNull(complexImage1);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      String string0 = complexImage1.toString();
      assertEquals("0:3879\n0:3879\n", string0);
      assertNotNull(string0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 3864);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(3864, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      
      double double1 = complex0.magnitude();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(double1, double0, 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertFalse(complex1.equals((Object)complex0));
      
      // Undeclared exception!
      try { 
        complexImage0.set(3864, 3864, complex1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3864
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-4449), (-20), (-20), (-3673));
      assertNotNull(rOI0);
      assertEquals(3654, rOI0.Y());
      assertEquals((-4449), rOI0.ux());
      assertEquals(4430, rOI0.X());
      assertEquals((-3673), rOI0.uy());
      assertEquals((-20), rOI0.ly());
      assertEquals((-20), rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(4430, int0);
      assertEquals(3654, rOI0.Y());
      assertEquals((-4449), rOI0.ux());
      assertEquals(4430, rOI0.X());
      assertEquals((-3673), rOI0.uy());
      assertEquals((-20), rOI0.ly());
      assertEquals((-20), rOI0.lx());
      
      ROI rOI1 = new ROI(0, 0, (-3673), 1);
      assertNotNull(rOI1);
      assertEquals(1, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(3674, rOI1.X());
      assertEquals(2, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals((-3673), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.Y();
      assertEquals(2, int1);
      assertEquals(1, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(3674, rOI1.X());
      assertEquals(2, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals((-3673), rOI1.ux());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-2256), (-1871), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(195, 195);
      assertNotNull(complexImage0);
      assertEquals(195, complexImage0.Y());
      assertEquals(195, complexImage0.X());
      
      ROI rOI0 = new ROI((-3687), (-2166), 195, 2836);
      assertNotNull(rOI0);
      assertEquals(3883, rOI0.X());
      assertEquals(5003, rOI0.Y());
      assertEquals((-3687), rOI0.ux());
      assertEquals(195, rOI0.lx());
      assertEquals(2836, rOI0.ly());
      assertEquals((-2166), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1, (-3687), (float) 195, (float) 2836, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5853
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(448, 448);
      assertNotNull(complexImage0);
      assertEquals(448, complexImage0.X());
      assertEquals(448, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      
      int int6 = rOI0.ly();
      assertEquals(0, int6);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.add((-32768.0F), (float) 448, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(2400, 2400, 2400, 2400);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(2400, rOI0.lx());
      assertEquals(2400, rOI0.ly());
      assertEquals(2400, rOI0.ux());
      assertEquals(2400, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 391;
      int int1 = (-1376);
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage(391, (-1376));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ly();
      assertEquals(0, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      
      Complex complex0 = new Complex(0.0, (-2858.3169215731));
      assertNotNull(complex0);
      assertEquals(2858, complex0.intValue());
      assertEquals((byte)42, complex0.byteValue());
      assertEquals(2858.3168998555775, complex0.doubleValue(), 0.01);
      assertEquals((-2858.31689453125), complex0.imag(), 0.01);
      assertEquals((short)2858, complex0.shortValue());
      assertEquals(2858.317F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((-2858.31689453125), complex0.imaginary(), 0.01);
      assertEquals(2858L, complex0.longValue());
      assertEquals(2858.3168998555775, complex0.magnitude(), 0.01);
      assertEquals((-1.5707963267948966), complex0.arg(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(2858, complex0.intValue());
      assertEquals((byte)42, complex0.byteValue());
      assertEquals(2858.3168998555775, complex0.doubleValue(), 0.01);
      assertEquals((-2858.31689453125), complex0.imag(), 0.01);
      assertEquals((short)2858, complex0.shortValue());
      assertEquals(2858.317F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((-2858.31689453125), complex0.imaginary(), 0.01);
      assertEquals(2858L, complex0.longValue());
      assertEquals(2858.3168998555775, complex0.magnitude(), 0.01);
      assertEquals((-1.5707963267948966), complex0.arg(), 0.01);
      assertEquals((-2858.31689453125), complex1.imag(), 0.01);
      assertEquals((-2858.31689453125), complex1.imaginary(), 0.01);
      assertEquals((byte)42, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2858.317F, complex1.floatValue(), 0.01F);
      assertEquals(2858L, complex1.longValue());
      assertEquals((short)2858, complex1.shortValue());
      assertEquals(2858.3168998555775, complex1.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex1.doubleValue(), 0.01);
      assertEquals(2858, complex1.intValue());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(2858, complex0.intValue());
      assertEquals((byte)42, complex0.byteValue());
      assertEquals(2858.3168998555775, complex0.doubleValue(), 0.01);
      assertEquals((-2858.31689453125), complex0.imag(), 0.01);
      assertEquals((short)2858, complex0.shortValue());
      assertEquals(2858.317F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((-2858.31689453125), complex0.imaginary(), 0.01);
      assertEquals(2858L, complex0.longValue());
      assertEquals(2858.3168998555775, complex0.magnitude(), 0.01);
      assertEquals((-1.5707963267948966), complex0.arg(), 0.01);
      assertEquals((-2858.31689453125), complex1.imag(), 0.01);
      assertEquals((-2858.31689453125), complex1.imaginary(), 0.01);
      assertEquals((byte)42, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2858.317F, complex1.floatValue(), 0.01F);
      assertEquals(2858L, complex1.longValue());
      assertEquals((short)2858, complex1.shortValue());
      assertEquals(2858.3168998555775, complex1.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex1.doubleValue(), 0.01);
      assertEquals(2858, complex1.intValue());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals(2858.3168998555775, complex2.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex2.doubleValue(), 0.01);
      assertEquals(2858.317F, complex2.floatValue(), 0.01F);
      assertEquals(2858L, complex2.longValue());
      assertEquals((byte)42, complex2.byteValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)2858, complex2.shortValue());
      assertEquals((-2858.31689453125), complex2.imaginary(), 0.01);
      assertEquals((-2858.31689453125), complex2.imag(), 0.01);
      assertEquals(2858, complex2.intValue());
      assertEquals((-1.5707963267948966), complex2.arg(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = new Complex(complex2);
      assertNotNull(complex3);
      assertEquals(2858, complex0.intValue());
      assertEquals((byte)42, complex0.byteValue());
      assertEquals(2858.3168998555775, complex0.doubleValue(), 0.01);
      assertEquals((-2858.31689453125), complex0.imag(), 0.01);
      assertEquals((short)2858, complex0.shortValue());
      assertEquals(2858.317F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((-2858.31689453125), complex0.imaginary(), 0.01);
      assertEquals(2858L, complex0.longValue());
      assertEquals(2858.3168998555775, complex0.magnitude(), 0.01);
      assertEquals((-1.5707963267948966), complex0.arg(), 0.01);
      assertEquals((-2858.31689453125), complex1.imag(), 0.01);
      assertEquals((-2858.31689453125), complex1.imaginary(), 0.01);
      assertEquals((byte)42, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2858.317F, complex1.floatValue(), 0.01F);
      assertEquals(2858L, complex1.longValue());
      assertEquals((short)2858, complex1.shortValue());
      assertEquals(2858.3168998555775, complex1.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex1.doubleValue(), 0.01);
      assertEquals(2858, complex1.intValue());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals(2858.3168998555775, complex2.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex2.doubleValue(), 0.01);
      assertEquals(2858.317F, complex2.floatValue(), 0.01F);
      assertEquals(2858L, complex2.longValue());
      assertEquals((byte)42, complex2.byteValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)2858, complex2.shortValue());
      assertEquals((-2858.31689453125), complex2.imaginary(), 0.01);
      assertEquals((-2858.31689453125), complex2.imag(), 0.01);
      assertEquals(2858, complex2.intValue());
      assertEquals((-1.5707963267948966), complex2.arg(), 0.01);
      assertEquals(2858.3168998555775, complex3.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex3.doubleValue(), 0.01);
      assertEquals((short)2858, complex3.shortValue());
      assertEquals((-2858.31689453125), complex3.imaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex3.arg(), 0.01);
      assertEquals((byte)42, complex3.byteValue());
      assertEquals(2858, complex3.intValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(2858.317F, complex3.floatValue(), 0.01F);
      assertEquals((-2858.31689453125), complex3.imag(), 0.01);
      assertEquals(2858L, complex3.longValue());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      double double0 = complex3.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2858, complex0.intValue());
      assertEquals((byte)42, complex0.byteValue());
      assertEquals(2858.3168998555775, complex0.doubleValue(), 0.01);
      assertEquals((-2858.31689453125), complex0.imag(), 0.01);
      assertEquals((short)2858, complex0.shortValue());
      assertEquals(2858.317F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((-2858.31689453125), complex0.imaginary(), 0.01);
      assertEquals(2858L, complex0.longValue());
      assertEquals(2858.3168998555775, complex0.magnitude(), 0.01);
      assertEquals((-1.5707963267948966), complex0.arg(), 0.01);
      assertEquals((-2858.31689453125), complex1.imag(), 0.01);
      assertEquals((-2858.31689453125), complex1.imaginary(), 0.01);
      assertEquals((byte)42, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2858.317F, complex1.floatValue(), 0.01F);
      assertEquals(2858L, complex1.longValue());
      assertEquals((short)2858, complex1.shortValue());
      assertEquals(2858.3168998555775, complex1.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex1.doubleValue(), 0.01);
      assertEquals(2858, complex1.intValue());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals(2858.3168998555775, complex2.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex2.doubleValue(), 0.01);
      assertEquals(2858.317F, complex2.floatValue(), 0.01F);
      assertEquals(2858L, complex2.longValue());
      assertEquals((byte)42, complex2.byteValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)2858, complex2.shortValue());
      assertEquals((-2858.31689453125), complex2.imaginary(), 0.01);
      assertEquals((-2858.31689453125), complex2.imag(), 0.01);
      assertEquals(2858, complex2.intValue());
      assertEquals((-1.5707963267948966), complex2.arg(), 0.01);
      assertEquals(2858.3168998555775, complex3.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex3.doubleValue(), 0.01);
      assertEquals((short)2858, complex3.shortValue());
      assertEquals((-2858.31689453125), complex3.imaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex3.arg(), 0.01);
      assertEquals((byte)42, complex3.byteValue());
      assertEquals(2858, complex3.intValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(2858.317F, complex3.floatValue(), 0.01F);
      assertEquals((-2858.31689453125), complex3.imag(), 0.01);
      assertEquals(2858L, complex3.longValue());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = new Complex(complex3);
      assertNotNull(complex4);
      assertEquals(2858, complex0.intValue());
      assertEquals((byte)42, complex0.byteValue());
      assertEquals(2858.3168998555775, complex0.doubleValue(), 0.01);
      assertEquals((-2858.31689453125), complex0.imag(), 0.01);
      assertEquals((short)2858, complex0.shortValue());
      assertEquals(2858.317F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((-2858.31689453125), complex0.imaginary(), 0.01);
      assertEquals(2858L, complex0.longValue());
      assertEquals(2858.3168998555775, complex0.magnitude(), 0.01);
      assertEquals((-1.5707963267948966), complex0.arg(), 0.01);
      assertEquals((-2858.31689453125), complex1.imag(), 0.01);
      assertEquals((-2858.31689453125), complex1.imaginary(), 0.01);
      assertEquals((byte)42, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2858.317F, complex1.floatValue(), 0.01F);
      assertEquals(2858L, complex1.longValue());
      assertEquals((short)2858, complex1.shortValue());
      assertEquals(2858.3168998555775, complex1.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex1.doubleValue(), 0.01);
      assertEquals(2858, complex1.intValue());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals(2858.3168998555775, complex2.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex2.doubleValue(), 0.01);
      assertEquals(2858.317F, complex2.floatValue(), 0.01F);
      assertEquals(2858L, complex2.longValue());
      assertEquals((byte)42, complex2.byteValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)2858, complex2.shortValue());
      assertEquals((-2858.31689453125), complex2.imaginary(), 0.01);
      assertEquals((-2858.31689453125), complex2.imag(), 0.01);
      assertEquals(2858, complex2.intValue());
      assertEquals((-1.5707963267948966), complex2.arg(), 0.01);
      assertEquals(2858.3168998555775, complex3.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex3.doubleValue(), 0.01);
      assertEquals((short)2858, complex3.shortValue());
      assertEquals((-2858.31689453125), complex3.imaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex3.arg(), 0.01);
      assertEquals((byte)42, complex3.byteValue());
      assertEquals(2858, complex3.intValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(2858.317F, complex3.floatValue(), 0.01F);
      assertEquals((-2858.31689453125), complex3.imag(), 0.01);
      assertEquals(2858L, complex3.longValue());
      assertEquals(2858.3168998555775, complex4.magnitude(), 0.01);
      assertEquals(2858.3168998555775, complex4.doubleValue(), 0.01);
      assertEquals(2858, complex4.intValue());
      assertEquals((short)2858, complex4.shortValue());
      assertEquals((-2858.31689453125), complex4.imaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex4.arg(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals((-2858.31689453125), complex4.imag(), 0.01);
      assertEquals(2858.317F, complex4.floatValue(), 0.01F);
      assertEquals((byte)42, complex4.byteValue());
      assertEquals(2858L, complex4.longValue());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      
      ROI rOI1 = new ROI(3853, 1, 1, 1);
      assertNotNull(rOI1);
      assertEquals(1, rOI1.ly());
      assertEquals(3853, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(3853, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, 1, complex4, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 2400;
      ComplexImage complexImage1 = complexImage0.add((float) 2400, (float) 2400);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertSame(complexImage0, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(2400, 2400, 2400, (-16777216), (-1743.2654F), (float) 2400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(690, 0);
      assertNotNull(complexImage0);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      
      ComplexImage complexImage1 = complexImage0.add(0.0F, 0.0F);
      assertNotNull(complexImage1);
      assertEquals(690, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(690, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(690, 0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 448;
      ComplexImage complexImage0 = new ComplexImage(448, 448);
      assertNotNull(complexImage0);
      assertEquals(448, complexImage0.Y());
      assertEquals(448, complexImage0.X());
      
      float float0 = (-32768.0F);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI((-192), 448, (-1), (-999));
      assertEquals(448, rOI0.ly());
      assertEquals((-999), rOI0.uy());
      assertEquals((-1), rOI0.lx());
      assertEquals(192, rOI0.X());
      assertEquals((-192), rOI0.ux());
      assertEquals(1448, rOI0.Y());
      
      int int1 = rOI0.uy();
      assertEquals((-999), int1);
      assertEquals(448, rOI0.ly());
      assertEquals((-999), rOI0.uy());
      assertEquals((-1), rOI0.lx());
      assertEquals(192, rOI0.X());
      assertEquals((-192), rOI0.ux());
      assertEquals(1448, rOI0.Y());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals((-192), int2);
      assertEquals(448, rOI0.ly());
      assertEquals((-999), rOI0.uy());
      assertEquals((-1), rOI0.lx());
      assertEquals(192, rOI0.X());
      assertEquals((-192), rOI0.ux());
      assertEquals(1448, rOI0.Y());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals((-192), int3);
      assertEquals(448, rOI0.ly());
      assertEquals((-999), rOI0.uy());
      assertEquals((-1), rOI0.lx());
      assertEquals(192, rOI0.X());
      assertEquals((-192), rOI0.ux());
      assertEquals(1448, rOI0.Y());
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.lx();
      assertEquals((-1), int4);
      assertEquals(448, rOI0.ly());
      assertEquals((-999), rOI0.uy());
      assertEquals((-1), rOI0.lx());
      assertEquals(192, rOI0.X());
      assertEquals((-192), rOI0.ux());
      assertEquals(1448, rOI0.Y());
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      // Undeclared exception!
      try { 
        complexImage0.divide((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add(1989.104F, 3176.52F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage1.imag();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage1.setReal((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      int int0 = 128;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.uy();
      assertEquals(0, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      
      int int7 = rOI0.ly();
      assertEquals(0, int7);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-4467), 0, 0, (-1871));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-4467), rOI0.ux());
      assertEquals((-1871), rOI0.uy());
      assertEquals(1872, rOI0.Y());
      assertEquals(4468, rOI0.X());
      
      int int0 = rOI0.Y();
      assertEquals(1872, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-4467), rOI0.ux());
      assertEquals((-1871), rOI0.uy());
      assertEquals(1872, rOI0.Y());
      assertEquals(4468, rOI0.X());
      
      ROI rOI1 = new ROI((-4467), 8, 16, 3137);
      assertNotNull(rOI1);
      assertEquals(16, rOI1.lx());
      assertEquals(8, rOI1.uy());
      assertEquals((-4467), rOI1.ux());
      assertEquals(3137, rOI1.ly());
      assertEquals(3130, rOI1.Y());
      assertEquals(4484, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = new Integer((-4467));
      assertEquals((-4467), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(250, (-354));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 173;
      ComplexImage complexImage0 = new ComplexImage(173, 173);
      assertNotNull(complexImage0);
      assertEquals(173, complexImage0.Y());
      assertEquals(173, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      complexImage1.getMagnitudeImage();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(173, 173);
      assertNotNull(complexImage0);
      assertEquals(173, complexImage0.Y());
      assertEquals(173, complexImage0.X());
      
      // Undeclared exception!
      complexImage0.clear();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage(2042, 352);
      assertNotNull(complexImage0);
      assertEquals(2042, complexImage0.X());
      assertEquals(352, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.set(132, (-1772), 0.0F, (float) 352);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1772
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(255, 255, (float) 255, (float) 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(173, 173);
      assertNotNull(complexImage0);
      assertEquals(173, complexImage0.X());
      assertEquals(173, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.magnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1958, 1958);
      assertNotNull(complexImage0);
      assertEquals(1958, complexImage0.X());
      assertEquals(1958, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 0;
      int int1 = 2042;
      int int2 = (-3272);
      ROI rOI0 = new ROI((-3272), 2042, (-3296), (-3296));
      assertNotNull(rOI0);
      assertEquals(2042, rOI0.ly());
      assertEquals((-3272), rOI0.lx());
      assertEquals((-3296), rOI0.uy());
      assertEquals((-3296), rOI0.ux());
      assertEquals(5339, rOI0.Y());
      assertEquals(25, rOI0.X());
      
      // Undeclared exception!
      complexImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = (-1562);
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(1, (-1562), (float) 1, (float) (-1562));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      Complex complex1 = complexImage1.min();
      assertNotNull(complex1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex1.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex1.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.magnitude(), 0.01);
      assertEquals((short) (-1), complex1.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imag(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.imaginary(), 0.01);
      assertEquals((byte) (-1), complex1.byteValue());
      assertEquals(9223372036854775807L, complex1.longValue());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complex1.equals((Object)complex0));
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.imag;
      assertNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-3065), (-389), (float) (-3065));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = complexImage0.X();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int1 = complexImage0.Y();
      assertEquals(0, int1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertTrue(int1 == int0);
      
      int int2 = (-3115);
      // Undeclared exception!
      try { 
        complexImage0.getImaginary((-3115), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3864);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(3864, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(0, 3864);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 2978;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.uy();
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.lx();
      assertEquals(0, int4);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      
      int int7 = rOI0.ly();
      assertEquals(0, int7);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertFalse(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.lx();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      
      int int6 = rOI0.ly();
      assertEquals(0, int6);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      
      String string0 = complexImage0.toString(rOI0);
      assertEquals("1:1\nnull \n1:1\nnull \n", string0);
      assertNotNull(string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1748, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.add((-1), 252, 0.0F, (float) (-1), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(532, 173, 0, 2635);
      assertEquals(2463, rOI0.Y());
      assertEquals(2635, rOI0.ly());
      assertEquals(533, rOI0.X());
      assertEquals(173, rOI0.uy());
      assertEquals(532, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      int int0 = rOI0.Y();
      assertEquals(2463, int0);
      assertEquals(2463, rOI0.Y());
      assertEquals(2635, rOI0.ly());
      assertEquals(533, rOI0.X());
      assertEquals(173, rOI0.uy());
      assertEquals(532, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add(1.0F, 0.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.divide(0.0F, 0.0F);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.get((-962), 887);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((ImageProducer) null).when(image0).getSource();
      doReturn(0, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage(image0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-32768.0F), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-4449), 0, 0, (-3699));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals((-3699), rOI0.uy());
      assertEquals(3700, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-4449), rOI0.ux());
      assertEquals(4450, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(4450, int0);
      assertEquals(0, rOI0.ly());
      assertEquals((-3699), rOI0.uy());
      assertEquals(3700, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-4449), rOI0.ux());
      assertEquals(4450, rOI0.X());
      
      int int1 = rOI0.Y();
      assertEquals(3700, int1);
      assertEquals(0, rOI0.ly());
      assertEquals((-3699), rOI0.uy());
      assertEquals(3700, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-4449), rOI0.ux());
      assertEquals(4450, rOI0.X());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract(1.0F, 1811.831F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(3879, complexImage0.Y());
      assertEquals(3879, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 1958;
      ComplexImage complexImage0 = new ComplexImage(1958, 1958);
      assertNotNull(complexImage0);
      assertEquals(1958, complexImage0.Y());
      assertEquals(1958, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(1958, 1958);
      assertNotNull(complexImage1);
      assertEquals(1958, complexImage1.X());
      assertEquals(1958, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      complexImage0.addbuffer(1958, 119, (float) 1958, (float) 119);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.divide(0.0F, 0.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.get((-970), 887);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage0 = new ComplexImage(8, 0);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 0, (float) 0);
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.add((-4126.6904F), 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(1898, 173);
      assertNotNull(complexImage1);
      assertEquals(1898, complexImage1.X());
      assertEquals(173, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.subtract((-1.0F), (float) 173);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage1.add((float) 173, (float) 173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 14, (float) 14, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage0 = new ComplexImage(0, 3879);
      assertNotNull(complexImage0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      String string0 = complexImage0.toString();
      assertEquals("0:3879\n0:3879\n", string0);
      assertNotNull(string0);
      assertEquals(3879, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1642.87F, (float) 3879, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ROI rOI0 = new ROI((-2692), (-2692), (-2692), (-2692));
      assertNotNull(rOI0);
      assertEquals((-2692), rOI0.lx());
      assertEquals((-2692), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-2692), rOI0.uy());
      assertEquals((-2692), rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag((-2692), (-2692));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add((-2512.4F), (-2512.4F));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 3864);
      complexImage0.divide((-797.22003F), (float) 3864);
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.divide(1149, (-1), 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.multiply(3850, 3850, (float) 3850, (float) 3850);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }
}
