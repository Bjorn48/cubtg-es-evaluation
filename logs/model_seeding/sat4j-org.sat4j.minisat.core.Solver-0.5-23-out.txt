* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 13865
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550563370601
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.23909249563699825
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.12824010914051842
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.13733333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07894736842105263
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2755905511811024
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.1889763779527559
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.08185538881309687
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 276
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2766143106457243
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.15279672578444747
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.196
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18045112781954886
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.09686221009549795
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 357
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.29842931937172773
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17326057298772168
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.21733333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4094488188976378
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.31496062992125984
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11186903137789904
[MASTER] 09:04:41.173 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.IteratorInt
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 449
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.30977312390924955
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1800818553888131
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.22933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19172932330827067
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12005457025920874
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 541
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.38045375218150085
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2373806275579809
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.304
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19924812030075187
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.49606299212598426
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3700787401574803
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.16371077762619374
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 628
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3900523560209424
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24420190995907232
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.30666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21052631578947367
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5354330708661418
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17053206002728513
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 647
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.39092495636998253
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.30666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21804511278195488
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4094488188976378
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17189631650750342
* Search finished after 126s and 6 generations, 11626 statements, best individual has fitness: 2719.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.39092495636998253
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.30666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21804511278195488
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4094488188976378
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17189631650750342
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 09:06:19.863 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 41%
* Total number of goals: 1146
* Number of covered goals: 469
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 25%
* Total number of goals: 733
* Number of covered goals: 180
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 32%
* Total number of goals: 750
* Number of covered goals: 241
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 22%
* Total number of goals: 266
* Number of covered goals: 58
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 57%
* Total number of goals: 127
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 127
* Number of covered goals: 52
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 17%
* Total number of goals: 733
* Number of covered goals: 126
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.39092495636998253
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.30666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21804511278195488
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4094488188976378
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17189631650750342
* Generated 127 tests with total length 2875
* Resulting test suite's coverage: 41% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 09:07:18.447 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.671% of time used, but only 16/127 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 2%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.39092495636998253
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.30666666666666664
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21804511278195488
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4094488188976378
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17189631650750342
* Compiling and checking tests
[MASTER] 09:08:02.299 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 09:08:02.310 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 09:08:12.914 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 09:08:12.915 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
glucose21Restarts0.onBackjumpToRootLevel();
Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, glucose21Restarts0);
solver0.toString();

[MASTER] 09:08:15.626 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 09:08:15.628 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
SearchParams searchParams0 = new SearchParams(0);
searchParams0.setConflictBoundIncFactor((-2226.19));
int[] intArray0 = new int[1];
intArray0[0] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
ArminRestarts arminRestarts0 = new ArminRestarts();
MUSLauncher mUSLauncher0 = new MUSLauncher();
FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0, mUSLauncher0);
solver0.createBlockingClauseForCurrentModel();
ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams1 = new SearchParams();
searchParams0.getConflictBoundIncFactor();
searchParams0.getInitConflictBound();
ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>(0);
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, searchParams1, subsetVarOrder0, (RestartStrategy) null, mUSLauncher0);
MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
Object[] objectArray0 = new Object[1];
objectArray0[0] = (Object) solver0;
mockPrintWriter0.printf(" => ", objectArray0);
solver0.printStat((PrintWriter) mockPrintWriter0, "c ");
LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
solver1.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 09:08:17.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:17.319 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

int int0 = (-215);
solver0.model((-215));

[MASTER] 09:08:18.105 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 09:08:18.123 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

String string0 = "Listener: ";
boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Listener: ");
assertFalse(boolean0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, glucose21Restarts0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(basicLauncher0);

basicLauncher0.log("nHcZS(O_aZfbT");
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

SearchParams searchParams0 = new SearchParams(29);
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(29, int0);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, glucose21Restarts0, basicLauncher0);
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(solver1);

fixedLengthLearning0.setSolver(solver1);
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, arminRestarts0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(5, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(6, solver2.newVar());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver2.equals((Object)solver1));
assertNotNull(solver2);

int[] intArray0 = new int[3];
intArray0[0] = 29;
MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertEquals(1, solver3.nVars());
assertEquals(2, solver3.newVar());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertNotNull(solver3);

boolean boolean1 = solver3.isSolverKeptHot();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertEquals(3, solver3.nVars());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals(4, solver3.newVar());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

intArray0[1] = 29;
solver2.addAtMostOnTheFly(intArray0, 29);

[MASTER] 09:08:18.814 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:18.817 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams((-426));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-426), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int[] intArray0 = new int[9];
intArray0[0] = (-426);
intArray0[1] = (-426);
intArray0[2] = (-426);
intArray0[3] = (-426);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertEquals(9, intArray0.length);
assertArrayEquals(new int[] {(-426), (-426), (-426), (-426), 0, 0, 0, 0, 0}, intArray0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, subsetVarOrder0, lubyRestarts0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(9, intArray0.length);
assertArrayEquals(new int[] {(-426), (-426), (-426), (-426), 0, 0, 0, 0, 0}, intArray0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotNull(miniSATRestarts0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, subsetVarOrder0, miniSATRestarts0, mUSLauncher0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-426), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.equals((Object)solver0));
assertNotNull(solver1);
assertEquals(9, intArray0.length);
assertArrayEquals(new int[] {(-426), (-426), (-426), (-426), 0, 0, 0, 0, 0}, intArray0);

solver0.enqueue((-2961));

[MASTER] 09:08:19.505 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:19.506 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams((-532.1), 1000);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-532.1), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1000, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("a!SYM7");
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-532.1), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1000, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

solver0.discardCurrentModel();

[MASTER] 09:08:20.250 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:20.252 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams(953);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(953, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int[] intArray0 = new int[7];
intArray0[0] = 2258;
intArray0[1] = 953;
intArray0[2] = 953;
intArray0[3] = 953;
intArray0[4] = 953;
intArray0[5] = 953;
intArray0[6] = 953;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertEquals(7, intArray0.length);
assertArrayEquals(new int[] {2258, 953, 953, 953, 953, 953, 953}, intArray0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
noRestarts0.onRestart();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, noRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(953, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotNull(solver0);
assertEquals(7, intArray0.length);
assertArrayEquals(new int[] {2258, 953, 953, 953, 953, 953, 953}, intArray0);

solver0.cancelUntil(0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(953, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(7, intArray0.length);
assertArrayEquals(new int[] {2258, 953, 953, 953, 953, 953, 953}, intArray0);


[MASTER] 09:08:20.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:20.957 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertNotNull(solverStats0);

lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>();
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);

SearchParams searchParams0 = new SearchParams(0.0, (-542));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-542), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts0, (ILogAble) null);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-542), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

activeLearning1.setSolver(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-542), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, naturalStaticOrder0, lubyRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.equals((Object)solver0));
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

ClausalDataStructureWL clausalDataStructureWL2 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
assertNotNull(clausalDataStructureWL2);

ILits iLits0 = clausalDataStructureWL1.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL2));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(iLits0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL2);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(learningStrategy0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL2));
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertNotNull(solver2);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver2.cancel();

[MASTER] 09:08:21.778 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:21.781 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Listener: ");
assertFalse(boolean0);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, glucose21Restarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(solver0);

glucose21Restarts0.onRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(basicLauncher0);

basicLauncher0.log("nHcZS(O_aZfbT");
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

SearchParams searchParams0 = new SearchParams(29);
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(29, int0);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, arminRestarts0);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(29, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(solver1);

int[] intArray0 = new int[3];
intArray0[0] = 29;
intArray0[1] = 29;
intArray0[2] = 29;
solver1.addAtMostOnTheFly(intArray0, 29);

[MASTER] 09:08:22.325 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:22.334 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<MixedDataStructureDanielHT> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielHT>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

ILits iLits0 = clausalDataStructureWL1.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(iLits0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);

SearchParams searchParams0 = new SearchParams((-2421));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2421), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2421), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2421), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2421), int0);

PureOrder pureOrder0 = new PureOrder(2);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-2421));
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2421), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(Integer.MIN_VALUE);
assertEquals(Integer.MIN_VALUE, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, pureOrder0, lubyRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2, pureOrder0.getPeriod());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2421), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(Integer.MIN_VALUE, percentLengthLearning0.getLimit());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ILogAble iLogAble0 = solver0.getLogger();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2, pureOrder0.getPeriod());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2421), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(Integer.MIN_VALUE, percentLengthLearning0.getLimit());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(iLogAble0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);

ClausalDataStructureWL clausalDataStructureWL2 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
assertNotNull(clausalDataStructureWL2);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL2, searchParams0, pureOrder0, glucose21Restarts0, iLogAble0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2421), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2, pureOrder0.getPeriod());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2421), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(Integer.MIN_VALUE, percentLengthLearning0.getLimit());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL2));
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
assertFalse(solver1.equals((Object)solver0));
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int int1 = solver0.newVar(1298);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2, pureOrder0.getPeriod());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-2421), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(Integer.MIN_VALUE, percentLengthLearning0.getLimit());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1299, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(1300, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1298, solver0.nVars());
assertFalse(int1 == int0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL2));
assertFalse(solver0.equals((Object)solver1));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL2);
assertNotSame(solver0, solver1);
assertEquals(1298, int1);


[MASTER] 09:08:22.989 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:22.992 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, fixedPeriodRestarts0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);

IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iVecInt0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-2147483645));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2147483645), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-1220));
assertEquals((-1220), fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2147483645), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-1220), fixedLengthLearning1.getMaxLength());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertNotNull(solver1);

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, varOrderHeap0, fixedPeriodRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver2.getTimeout());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.getPropagationLevel());
assertNotNull(solver2);

MockPrintStream mockPrintStream0 = new MockPrintStream("tq_s(SX!tg5@xdm7nC");
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
assertNotNull(mockPrintWriter0);

mockPrintWriter0.print('7');
mockPrintWriter0.println();
mockPrintWriter0.print('3');
solver2.printInfos((PrintWriter) mockPrintWriter0, "`r<OZW;*#1CPx5'");
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.getPropagationLevel());

System.setCurrentTimeMillis((-1L));
solver0.truthValue((-1220));

[MASTER] 09:08:24.238 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:24.267 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams((-426));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-426), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

int[] intArray0 = new int[9];
intArray0[0] = (-426);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertEquals(9, intArray0.length);
assertArrayEquals(new int[] {(-426), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("a!SYM7");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

SearchParams searchParams1 = new SearchParams(32);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(32, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

double double0 = searchParams1.getConflictBoundIncFactor();
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(32, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams1, searchParams0);
assertEquals(1.5, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-426), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertEquals((-426), int0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(23);
assertEquals(23, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, subsetVarOrder0, arminRestarts0);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(32, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(23, percentLengthLearning0.getLimit());
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver0);
assertEquals(9, intArray0.length);
assertArrayEquals(new int[] {(-426), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);

double[] doubleArray0 = solver0.getVariableHeuristics();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(32, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(23, percentLengthLearning0.getLimit());
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(doubleArray0);
assertNotSame(searchParams1, searchParams0);
assertEquals(9, intArray0.length);
assertEquals(1, doubleArray0.length);
assertArrayEquals(new int[] {(-426), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);


[MASTER] 09:08:24.827 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 09:08:24.834 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams((-426));
assertEquals((-426), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

int[] intArray0 = new int[9];
intArray0[0] = (-426);
intArray0[1] = (-426);
intArray0[2] = (-426);
intArray0[3] = (-426);
intArray0[4] = 0;
intArray0[5] = (-426);
intArray0[6] = (-426);
searchParams0.setConflictBoundIncFactor(70.1846529559964);
assertEquals((-426), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(70.1846529559964, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

intArray0[7] = (-426);
intArray0[8] = (-426);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertEquals(9, intArray0.length);
assertArrayEquals(new int[] {(-426), (-426), (-426), (-426), 0, (-426), (-426), (-426), (-426)}, intArray0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0, mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals((-426), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(70.1846529559964, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver0);
assertEquals(9, intArray0.length);
assertArrayEquals(new int[] {(-426), (-426), (-426), (-426), 0, (-426), (-426), (-426), (-426)}, intArray0);

IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals((-426), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(70.1846529559964, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(iVecInt0);
assertEquals(9, intArray0.length);
assertArrayEquals(new int[] {(-426), (-426), (-426), (-426), 0, (-426), (-426), (-426), (-426)}, intArray0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams1 = new SearchParams(1298);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1298, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(searchParams1);

double double0 = searchParams1.getConflictBoundIncFactor();
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1298, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams1, searchParams0);
assertEquals(1.5, double0, 0.01);

int int0 = searchParams1.getInitConflictBound();
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1298, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotSame(searchParams1, searchParams0);
assertEquals(1298, int0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams1, subsetVarOrder0, (RestartStrategy) null, mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1298, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotNull(solver1);
assertEquals(9, intArray0.length);
assertArrayEquals(new int[] {(-426), (-426), (-426), (-426), 0, (-426), (-426), (-426), (-426)}, intArray0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) mockPrintWriter0;
objectArray0[1] = (Object) subsetVarOrder0;
objectArray0[2] = (Object) subsetVarOrder0;
objectArray0[3] = (Object) solver0;
PrintWriter printWriter0 = mockPrintWriter0.printf("c ", objectArray0);
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(4, objectArray0.length);

solver0.printStat(printWriter0, "c ");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals((-426), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(70.1846529559964, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(searchParams0.equals((Object)searchParams1));
assertNotSame(searchParams0, searchParams1);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertEquals(9, intArray0.length);
assertEquals(4, objectArray0.length);
assertArrayEquals(new int[] {(-426), (-426), (-426), (-426), 0, (-426), (-426), (-426), (-426)}, intArray0);

solver1.varBumpActivity(0);

* Writing tests to file
[MASTER] 09:08:27.646 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 09:08:27.648 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ynm3bk-4b");
assertFalse(boolean0);

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics1);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics1, mixedDataStructureDanielHT0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver0.fixedSize(0);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(learnedConstraintsDeletionStrategy0);


* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
