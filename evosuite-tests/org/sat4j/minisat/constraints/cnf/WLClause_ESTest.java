/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:47:24 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IOrder;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.Learner;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.Pair;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WLClause_ESTest extends WLClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertNotNull(learntWLClause0);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertFalse(learntWLClause1.isSatisfied());
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause1);
      
      boolean boolean0 = learntWLClause1.isSatisfied();
      assertFalse(boolean0);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertFalse(learntWLClause1.isSatisfied());
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertNotSame(learntWLClause1, learntWLClause0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.size());
      assertEquals(963, vecInt0.last());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(963);
      assertEquals(963, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      cardinalityDataStructureYanMax0.setLearner((Learner) null);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SearchParams searchParams0 = new SearchParams(0.01, 963);
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, miniSATRestarts0, (ILogAble) null);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.01, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(963, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      
      double double0 = searchParams1.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.01, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(963, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertSame(searchParams0, searchParams1);
      
      SolutionCounter solutionCounter0 = new SolutionCounter(solver0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solutionCounter0);
      
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("c ", string0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertSame(searchParams0, searchParams1);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3648, (-3253)).when(iVecInt0).size();
      ILits iLits1 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = null;
      try {
        originalWLClause0 = new OriginalWLClause(iVecInt0, iLits1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertNotNull(learntWLClause0);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.simplify());
      assertFalse(learntWLClause1.isSatisfied());
      assertNotNull(learntWLClause1);
      
      String string0 = learntWLClause0.toString((VarMapper) null);
      assertEquals("", string0);
      assertTrue(learntWLClause0.equals((Object)learntWLClause1));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertNotSame(learntWLClause0, learntWLClause1);
      assertNotNull(string0);
      
      boolean boolean0 = learntWLClause0.isSatisfied();
      assertFalse(boolean0);
      assertTrue(learntWLClause0.equals((Object)learntWLClause1));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertNotSame(learntWLClause0, learntWLClause1);
      
      boolean boolean1 = learntWLClause0.learnt();
      assertTrue(boolean1);
      assertTrue(learntWLClause0.equals((Object)learntWLClause1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertNotSame(learntWLClause0, learntWLClause1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder((-1));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int0 = randomLiteralSelectionStrategy0.select((-1));
      assertEquals((-1), int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      randomLiteralSelectionStrategy0.init((-722));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(solver0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nVars());
      assertNotNull(solver1);
      
      ArminRestarts arminRestarts1 = new ArminRestarts();
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts1);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(solver2);
      
      solver1.setRestartStrategy(arminRestarts0);
      assertFalse(arminRestarts0.equals((Object)arminRestarts1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.equals((Object)solver2));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nVars());
      assertNotSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver1, solver0);
      assertNotSame(solver1, solver2);
      
      ILits iLits0 = solver2.getVocabulary();
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver0);
      assertNotNull(iLits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.size());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(originalWLClause0);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("starts\t\t: ");
      assertNotNull(dotSearchTracing0);
      
      originalWLClause0.assertConstraint(solver0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(arminRestarts0.equals((Object)arminRestarts1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver0.equals((Object)solver2));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(originalWLClause0.simplify());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.size());
      assertTrue(originalWLClause0.locked());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.isSatisfied());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertNotSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver0);
      assertNotSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver1);
      assertNotSame(solver0, solver2);
      
      boolean boolean0 = originalWLClause0.locked();
      assertTrue(boolean0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(originalWLClause0.simplify());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.size());
      assertTrue(originalWLClause0.locked());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.isSatisfied());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-1), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int0 = randomLiteralSelectionStrategy0.select((-1));
      assertEquals((-1), int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      randomLiteralSelectionStrategy0.init((-722));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertNotNull(arminRestarts0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      searchParams0.setVarDecay((-722));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722.0), searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722.0), searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nVars());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722.0), searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(solver1);
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver1.getRestartStrategy();
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nVars());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722.0), searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotSame(solver1, solver0);
      assertSame(arminRestarts1, arminRestarts0);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver2);
      
      solver1.setRestartStrategy((RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nVars());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722.0), searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotSame(solver1, solver0);
      assertNotSame(solver1, solver2);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      
      Lits lits0 = (Lits)solver2.getVocabulary();
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(originalWLClause0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("starts\t\t: ");
      assertNotNull(dotSearchTracing0);
      
      String string1 = originalWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("0[?] ", string1);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotNull(string1);
      
      originalWLClause0.assertConstraint(solver1);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722.0), searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(originalWLClause0.isSatisfied());
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver1, solver0);
      assertNotSame(solver1, solver2);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      
      int int1 = originalWLClause0.hashCode();
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(int1 == int0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(originalWLClause0.isSatisfied());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax1).getVocabulary();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1)).when(searchParams0).getClaDecay();
      doReturn(0.0).when(searchParams0).getVarDecay();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNull(iConstr0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, (RestartStrategy) null, (ILogAble) null);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotNull(searchParams1);
      
      double double0 = searchParams1.getVarDecay();
      assertEquals(0.0, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      double double1 = searchParams1.getClaDecay();
      assertEquals((-1.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.locked());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.simplify();
      assertFalse(boolean0);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.locked());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      
      boolean boolean1 = originalWLClause0.locked();
      assertFalse(boolean1);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(boolean1 == boolean0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertNotSame(lits0, iLits0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      boolean boolean2 = learntWLClause0.learnt();
      assertTrue(boolean2);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.locked());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      
      int int0 = originalWLClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertNotSame(lits0, iLits0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      assertEquals(1126, vecInt0.size());
      assertEquals(1798, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.ensure(1965);
      assertEquals(1126, vecInt0.size());
      assertEquals(1798, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.unsafePush(1798);
      assertEquals(1127, vecInt0.size());
      assertEquals(1798, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(1, vecInt0.size());
      assertEquals(1798, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 0);
      assertEquals((-1), int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      
      learntWLClause0.forwardActivity(1023.410002505);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      
      int[] intArray0 = learntWLClause0.getLits();
      assertEquals(1, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertArrayEquals(new int[] {1798}, intArray0);
      assertNotNull(intArray0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      vecInt0.growTo(32, (-1910));
      assertEquals(32, vecInt0.size());
      assertEquals((-1910), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      
      boolean boolean0 = solver0.enqueue(0);
      assertTrue(boolean0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      originalWLClause0.incActivity(0);
      assertEquals(32, vecInt0.size());
      assertEquals((-1910), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      
      int int1 = originalWLClause0.size();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(32, vecInt0.size());
      assertEquals((-1910), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      
      // Undeclared exception!
      try { 
        learntWLClause0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1798
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(317, 317, 317, 317, 317).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(317, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(317, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.locked());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(317, originalWLClause0.size());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        originalWLClause0.propagate(solver0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "removed literals (reason simplification)\t: ");
      assertFalse(boolean0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.last());
      assertEquals(281, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(281, originalWLClause0.size());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax2 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax2).getVocabulary();
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNull(iConstr0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax2, searchParams1, naturalStaticOrder0, (RestartStrategy) null, (ILogAble) null);
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(solver0);
      
      SearchParams searchParams2 = solver0.getSearchParams();
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0.0, searchParams2.getVarDecay(), 0.01);
      assertEquals(0, searchParams2.getInitConflictBound());
      assertEquals(0.0, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(searchParams2, searchParams1);
      assertNotSame(iLits0, lits0);
      assertNotNull(searchParams2);
      
      Pair pair0 = new Pair();
      assertEquals(0, pair0.getBacktrackLevel());
      assertNotNull(pair0);
      
      // Undeclared exception!
      try { 
        solver0.analyze(originalWLClause0, pair0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      originalWLClause0.setActivity(281);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(281.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason((-2710), iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = learntWLClause0.simplify();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = (-1);
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(1, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int1 = randomLiteralSelectionStrategy0.select((-722));
      assertEquals((-1443), int1);
      assertFalse(int1 == int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      randomLiteralSelectionStrategy0.init((-722));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(solver1);
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver1.getRestartStrategy();
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotSame(solver1, solver0);
      assertSame(arminRestarts1, arminRestarts0);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver2);
      
      solver1.setRestartStrategy((RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotSame(solver1, solver2);
      assertNotSame(solver1, solver0);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      
      Lits lits0 = (Lits)solver2.getVocabulary();
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.simplify());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(originalWLClause0);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("h}8k@Kak6qkpFqTB6$");
      assertNotNull(dotSearchTracing0);
      
      DotSearchTracing<Object> dotSearchTracing1 = new DotSearchTracing<Object>("starts\t\t: ");
      assertFalse(dotSearchTracing1.equals((Object)dotSearchTracing0));
      assertNotNull(dotSearchTracing1);
      
      String string1 = originalWLClause0.toString((VarMapper) dotSearchTracing1);
      assertEquals("0[?] ", string1);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(dotSearchTracing1.equals((Object)dotSearchTracing0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.simplify());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNotSame(dotSearchTracing1, dotSearchTracing0);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        originalWLClause0.propagate(solver2, 1555);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      String string0 = vecInt0.toString();
      assertEquals("", string0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(string0);
      
      String string1 = Lits.toStringX(1860);
      assertEquals("+x930", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertNotNull(originalWLClause0);
      
      int int0 = originalWLClause0.size();
      assertEquals(0, int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      
      originalWLClause0.setActivity((-165.4302));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.simplify());
      assertEquals((-165.4302), originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      
      double double0 = 0.0;
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertFalse(int1 == int0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNull(restartStrategy0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        OriginalWLClause.brandNewClause(solver1, lits0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.OriginalWLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int0 = randomLiteralSelectionStrategy0.select((-722));
      assertEquals((-1443), int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      randomLiteralSelectionStrategy0.init((-722));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(arminRestarts0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      SearchParams searchParams1 = new SearchParams(1458);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1458, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams1);
      
      SolverStats solverStats0 = new SolverStats();
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getDecisions());
      assertNotNull(solverStats0);
      
      lubyRestarts0.init(searchParams1, solverStats0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1458, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getDecisions());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams1, searchParams0);
      
      lubyRestarts0.onRestart();
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setRestartStrategy(lubyRestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax1, pureOrder0, arminRestarts0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(solver1);
      
      ILits iLits0 = solver1.getVocabulary();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertNotNull(iLits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(learntWLClause0);
      
      String string1 = learntWLClause0.toString((VarMapper) null);
      assertEquals("-0[?] ", string1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertNotNull(string1);
      
      IVecInt iVecInt1 = solver0.getOutLearnt();
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver0, solver1);
      assertNotNull(iVecInt1);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      assertTrue(iVecInt0.equals((Object)iVecInt1));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.simplify());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(originalWLClause0);
      
      originalWLClause0.incActivity(1458);
      assertTrue(iVecInt0.equals((Object)iVecInt1));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.simplify());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      
      int int1 = originalWLClause0.size();
      assertEquals(0, int1);
      assertTrue(iVecInt0.equals((Object)iVecInt1));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(int1 == int0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.simplify());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      
      learntWLClause0.calcReasonOnTheFly(30, iVecInt1, iVecInt1);
      assertTrue(iVecInt0.equals((Object)iVecInt1));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver0, solver1);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertNotSame(iVecInt1, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(281, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      Random.setNextRandom(281);
      originalWLClause0.hashCode();
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(281, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertNotSame(lits0, iLits0);
      
      // Undeclared exception!
      try { 
        OriginalWLClause.brandNewClause((UnitPropagationListener) null, lits0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.OriginalWLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      assertEquals(1798, vecInt0.last());
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.ensure(1965);
      assertEquals(1798, vecInt0.last());
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.unsafePush(1798);
      assertEquals(1798, vecInt0.last());
      assertEquals(1127, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(1798, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.size());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 0);
      assertEquals((-1), int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.size());
      
      learntWLClause0.forwardActivity(1023.410002505);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.size());
      
      int[] intArray0 = learntWLClause0.getLits();
      assertEquals(1, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.size());
      assertArrayEquals(new int[] {1798}, intArray0);
      assertNotNull(intArray0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.simplify());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, originalWLClause0.size());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      int int1 = lits0.nextFreeVarId(false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      originalWLClause0.setActivity(1.0E-4);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.simplify());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1.0E-4, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0, originalWLClause0.size());
      
      String string0 = originalWLClause0.toString();
      assertEquals("", string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.simplify());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1.0E-4, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0, originalWLClause0.size());
      assertNotNull(string0);
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause1 = null;
      try {
        originalWLClause1 = new OriginalWLClause((IVecInt) null, iLits0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(solver0);
      
      IVecInt iVecInt1 = solver0.getOutLearnt();
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertNotSame(iVecInt1, iVecInt0);
      assertNotNull(iVecInt1);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals(100, int0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotSame(searchParams1, searchParams0);
      
      pureOrder0.init();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertNotSame(searchParams0, searchParams1);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertFalse(noLearningButHeuristics1.equals((Object)noLearningButHeuristics0));
      assertNotNull(noLearningButHeuristics1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics1, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0);
      assertFalse(noLearningButHeuristics1.equals((Object)noLearningButHeuristics0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(solver1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(solver2);
      
      ILits iLits0 = solver2.getVocabulary();
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver0);
      assertNotSame(noLearningButHeuristics0, noLearningButHeuristics1);
      assertNotNull(iLits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertTrue(iVecInt0.equals((Object)iVecInt1));
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(1, originalWLClause0.size());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(originalWLClause0);
      
      originalWLClause0.incActivity(1.5);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertTrue(iVecInt0.equals((Object)iVecInt1));
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(1, originalWLClause0.size());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(noLearningButHeuristics0, noLearningButHeuristics1);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(solver3.equals((Object)solver0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(solver3);
      
      boolean boolean1 = solver3.isSatisfiable();
      assertTrue(boolean1);
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(solver3.equals((Object)solver0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertFalse(arminRestarts0.shouldRestart());
      assertEquals(100L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotSame(noLearningButHeuristics0, noLearningButHeuristics1);
      assertNotSame(solver3, solver2);
      assertNotSame(solver3, solver1);
      assertNotSame(solver3, solver0);
      
      originalWLClause0.rescaleBy(0);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver2.equals((Object)solver0));
      assertTrue(iVecInt0.equals((Object)iVecInt1));
      assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(1, originalWLClause0.size());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(arminRestarts0.shouldRestart());
      assertEquals(100L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver3);
      assertNotSame(solver2, solver0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(noLearningButHeuristics0, noLearningButHeuristics1);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        statisticsSolver0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      
      iVecInt0.sort();
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      
      IteratorInt iteratorInt0 = iVecInt0.iterator();
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotNull(iteratorInt0);
      
      iVecInt0.clear();
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      
      vecInt0.ensure((-1));
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      
      int int0 = iVecInt0.size();
      assertEquals(0, int0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      
      vecInt0.copyTo(iVecInt0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      IVecInt iVecInt2 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt2);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      IVecInt iVecInt3 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt3);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      IVecInt iVecInt4 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt4);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      IVecInt iVecInt5 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      levelBasedVarOrderHeap0.addLevel(iVecInt5);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNull(iLits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.isSatisfied();
      assertFalse(boolean0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(268, 268, 268, 268, 268).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(268, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(268, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.locked());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(268, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(268);
      assertEquals(268, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Lits lits1 = new Lits();
      assertFalse(lits1.equals((Object)lits0));
      assertEquals(0, lits1.nVars());
      assertEquals(0, lits1.realnVars());
      assertNotNull(lits1);
      
      Random.setNextRandom(268);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, 268);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(originalWLClause0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      iVecInt0.shrinkTo(269);
      assertEquals(269, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(269, iVecInt0.last());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      Random.setNextRandom(281);
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.locked());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(269, learntWLClause0.size());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.learnt();
      assertTrue(boolean0);
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.locked());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(269, learntWLClause0.size());
      assertNotSame(iLits0, lits0);
      
      // Undeclared exception!
      try { 
        learntWLClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 258
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, lits0);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      IVecInt iVecInt1 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt1.isEmpty());
      assertEquals(281, iVecInt1.last());
      assertEquals(281, iVecInt1.size());
      assertNotSame(iVecInt1, iVecInt0);
      assertNotNull(iVecInt1);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(iVecInt1, iLits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      assertFalse(learntWLClause1.locked());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(281, learntWLClause1.size());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertNotNull(learntWLClause1);
      
      boolean boolean1 = learntWLClause1.learnt();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      assertFalse(learntWLClause1.locked());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(281, learntWLClause1.size());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertNotSame(iLits0, lits0);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(learntWLClause1, learntWLClause0);
      
      LearntWLClause learntWLClause2 = new LearntWLClause(iVecInt1, iLits0);
      assertFalse(learntWLClause2.equals((Object)learntWLClause1));
      assertTrue(learntWLClause2.equals((Object)learntWLClause0));
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause2.simplify());
      assertTrue(learntWLClause2.learnt());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause2.isSatisfied());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertEquals(0, learntWLClause2.size());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      assertNotNull(learntWLClause2);
      
      // Undeclared exception!
      try { 
        learntWLClause1.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, (-128));
      assertEquals((-1), int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      
      learntWLClause0.setActivity((-128));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals((-128.0), learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      
      boolean boolean0 = learntWLClause0.learnt();
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals((-128.0), learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      
      String string0 = learntWLClause0.toString();
      assertEquals("", string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals((-128.0), learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int0 = randomLiteralSelectionStrategy0.select((-1));
      assertEquals((-1), int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      randomLiteralSelectionStrategy0.init((-722));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      ArminRestarts arminRestarts1 = new ArminRestarts();
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts1);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(solver2);
      
      solver1.setRestartStrategy(arminRestarts0);
      assertFalse(arminRestarts0.equals((Object)arminRestarts1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver1, solver2);
      assertNotSame(solver1, solver0);
      
      ILits iLits0 = solver2.getVocabulary();
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNotNull(iLits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(originalWLClause0);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("starts\t\t: ");
      assertNotNull(dotSearchTracing0);
      
      originalWLClause0.assertConstraint(solver0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(arminRestarts0.equals((Object)arminRestarts1));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(originalWLClause0.isSatisfied());
      assertTrue(originalWLClause0.locked());
      assertTrue(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertNotSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNotSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver2);
      assertNotSame(solver0, solver1);
      
      int int1 = originalWLClause0.hashCode();
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(int1 == int0);
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(originalWLClause0.isSatisfied());
      assertTrue(originalWLClause0.locked());
      assertTrue(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      
      boolean boolean0 = originalWLClause0.isSatisfied();
      assertTrue(boolean0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(originalWLClause0.isSatisfied());
      assertTrue(originalWLClause0.locked());
      assertTrue(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.last());
      assertEquals(281, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertNull(iConstr0);
      
      VecInt vecInt0 = new VecInt();
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotSame(vecInt0, iVecInt0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(learntWLClause0);
      
      String string1 = learntWLClause0.toString();
      assertEquals("0[?] ", string1);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iLits0, lits0);
      assertNotNull(string1);
      
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iLits0, lits0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause0);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("ip&0|/X");
      assertNotNull(dotSearchTracing0);
      
      String string0 = learntWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("", string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(string0);
      
      boolean boolean0 = learntWLClause0.isSatisfied();
      assertFalse(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean1 = learntWLClause0.learnt();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(281, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNull(iConstr0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      boolean boolean0 = lits0.isImplied(0);
      assertFalse(boolean0);
      assertFalse(lits0.equals((Object)iLits0));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotSame(lits0, iLits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(learntWLClause0);
      
      boolean boolean1 = learntWLClause0.simplify();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      
      boolean boolean2 = originalWLClause0.locked();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(281, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotSame(lits0, iLits0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = learntWLClause0.equals(object0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      
      learntWLClause0.forwardActivity(0.0);
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      
      ILits iLits1 = originalWLClause0.getVocabulary();
      assertFalse(lits0.equals((Object)iLits0));
      assertFalse(iLits1.equals((Object)iLits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(281, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, iLits1.nVars());
      assertEquals(0, iLits1.realnVars());
      assertNotSame(lits0, iLits0);
      assertSame(lits0, iLits1);
      assertNotSame(iLits1, iLits0);
      assertSame(iLits1, lits0);
      assertNotNull(iLits1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      // Undeclared exception!
      try { 
        originalWLClause0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      originalWLClause0.calcReasonOnTheFly((-3650), vecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      
      // Undeclared exception!
      try { 
        originalWLClause0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(284, 284, 284, 284, 284).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(284, iVecInt0.size());
      assertEquals(284, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, (ILits) null);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(284, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertNotNull(originalWLClause0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      iVecInt0.shrinkTo(1122);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1122, iVecInt0.size());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-487));
      assertEquals((-487), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      Lits lits0 = new Lits();
      assertFalse(lits0.equals((Object)iLits0));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      int int0 = (-3278);
      lits0.ensurePool((-3278));
      assertFalse(lits0.equals((Object)iLits0));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotSame(lits0, iLits0);
      
      int int1 = lits0.getFromPool(284);
      assertEquals(568, int1);
      assertFalse(lits0.equals((Object)iLits0));
      assertFalse(int1 == int0);
      assertEquals(1, lits0.realnVars());
      assertEquals(284, lits0.nVars());
      assertNotSame(lits0, iLits0);
      
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(originalWLClause0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(281);
      assertEquals(281, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(learntWLClause0);
      
      originalWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      
      originalWLClause0.forwardActivity(281);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(281.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, 281);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ", (String) null).when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      String string1 = groupClauseSelectorSolver0.getLogPrefix();
      assertNull(string1);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.locked());
      assertEquals(1, originalWLClause0.size());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(originalWLClause0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(932);
      assertEquals(932, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(learntWLClause0);
      
      String string2 = learntWLClause0.toString();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, 281);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1021)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertNotNull(phaseCachingAutoEraseStrategy0);
      
      phaseCachingAutoEraseStrategy0.updateVarAtDecisionLevel(19);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseCachingAutoEraseStrategy0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(100, int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      ILogAble iLogAble1 = ILogAble.CONSOLE;
      assertSame(iLogAble1, iLogAble0);
      assertNotNull(iLogAble1);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertSame(iLogAble1, iLogAble0);
      assertNull(restartStrategy0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax1, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(solver2);
      
      RestartStrategy restartStrategy1 = solver2.getRestartStrategy();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNull(restartStrategy1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax2 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertNotNull(cardinalityDataStructureYanMax2);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax2, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.nVars());
      assertEquals(0, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver3);
      
      Solver<CardinalityDataStructureYanMax> solver4 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax2, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver4.equals((Object)solver1));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver0));
      assertFalse(solver4.equals((Object)solver3));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.nVars());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(solver4);
      
      Solver<CardinalityDataStructureYanMax> solver5 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax2, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver5.equals((Object)solver4));
      assertFalse(solver5.equals((Object)solver2));
      assertFalse(solver5.equals((Object)solver1));
      assertFalse(solver5.equals((Object)solver3));
      assertFalse(solver5.equals((Object)solver0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver5.realNumberOfVariables());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(0, solver5.nVars());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isVerbose());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver5);
      
      solver5.setRestartStrategy((RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver5.equals((Object)solver4));
      assertFalse(solver5.equals((Object)solver2));
      assertFalse(solver5.equals((Object)solver1));
      assertFalse(solver5.equals((Object)solver3));
      assertFalse(solver5.equals((Object)solver0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver5.realNumberOfVariables());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(0, solver5.nVars());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isVerbose());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotSame(cardinalityDataStructureYanMax2, cardinalityDataStructureYanMax0);
      assertNotSame(cardinalityDataStructureYanMax2, cardinalityDataStructureYanMax1);
      assertNotSame(solver5, solver4);
      assertNotSame(solver5, solver2);
      assertNotSame(solver5, solver1);
      assertNotSame(solver5, solver3);
      assertNotSame(solver5, solver0);
      
      ILits iLits0 = solver2.getVocabulary();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(solver2.equals((Object)solver5));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax2);
      assertNotSame(solver2, solver5);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver4);
      assertNotSame(solver2, solver3);
      assertNotSame(solver2, solver1);
      assertNotNull(iLits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(solver2.equals((Object)solver5));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.simplify();
      assertFalse(boolean0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(solver2.equals((Object)solver5));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax2);
      assertNotSame(solver2, solver5);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver4);
      assertNotSame(solver2, solver3);
      assertNotSame(solver2, solver1);
      
      boolean boolean1 = learntWLClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(solver2.equals((Object)solver5));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver2.equals((Object)solver1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax2);
      assertNotSame(solver2, solver5);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver4);
      assertNotSame(solver2, solver3);
      assertNotSame(solver2, solver1);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(solver2.equals((Object)solver5));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertNotNull(originalWLClause0);
      
      boolean boolean2 = originalWLClause0.learnt();
      assertFalse(boolean2);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax2));
      assertFalse(solver2.equals((Object)solver5));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver2.equals((Object)solver1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax2);
      assertNotSame(solver2, solver5);
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver4);
      assertNotSame(solver2, solver3);
      assertNotSame(solver2, solver1);
      
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraint(solver5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, (-17));
      assertEquals((-1), int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      
      learntWLClause0.setActivity((-1));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1.0), learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = learntWLClause0.learnt();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1.0), learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      
      String string0 = learntWLClause0.toString();
      assertEquals("", string0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1.0), learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertNotNull(string0);
      
      ILits iLits0 = learntWLClause0.getVocabulary();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1.0), learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertNull(iLits0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      String string0 = Lits.toStringX((-2710));
      assertEquals("+x-1355", string0);
      assertNotNull(string0);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertNotNull(positiveLiteralSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNull(iLits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.isSatisfied());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.simplify();
      assertFalse(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.isSatisfied());
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertFalse(learntWLClause1.isSatisfied());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertNotNull(learntWLClause1);
      
      boolean boolean1 = learntWLClause1.canBePropagatedMultipleTimes();
      assertFalse(boolean1);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(boolean1 == boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertFalse(learntWLClause1.isSatisfied());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertNotSame(learntWLClause1, learntWLClause0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      LearntWLClause learntWLClause2 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause2.isSatisfied());
      assertFalse(learntWLClause2.simplify());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertEquals(0, learntWLClause2.size());
      assertTrue(learntWLClause2.learnt());
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(learntWLClause2);
      
      boolean boolean2 = learntWLClause0.equals(learntWLClause2);
      assertTrue(boolean2);
      assertTrue(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(learntWLClause0.equals((Object)learntWLClause1));
      assertTrue(learntWLClause0.equals((Object)learntWLClause2));
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause2.isSatisfied());
      assertFalse(learntWLClause2.simplify());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertEquals(0, learntWLClause2.size());
      assertTrue(learntWLClause2.learnt());
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.isSatisfied());
      assertNotSame(learntWLClause2, learntWLClause1);
      assertNotSame(learntWLClause2, learntWLClause0);
      assertNotSame(learntWLClause0, learntWLClause1);
      assertNotSame(learntWLClause0, learntWLClause2);
      
      learntWLClause1.forwardActivity(1860);
      assertTrue(learntWLClause1.equals((Object)learntWLClause2));
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertFalse(learntWLClause1.isSatisfied());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertNotSame(learntWLClause1, learntWLClause2);
      assertNotSame(learntWLClause1, learntWLClause0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.size());
      assertEquals(963, vecInt0.last());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(963);
      assertEquals(963, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.01, 963);
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, miniSATRestarts0, (ILogAble) null);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(963, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      
      double double0 = searchParams1.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(963, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertSame(searchParams0, searchParams1);
      
      SolutionCounter solutionCounter0 = new SolutionCounter(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solutionCounter0.lowerBound());
      assertNotNull(solutionCounter0);
      
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solutionCounter0.lowerBound());
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("c ", string0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(963, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solutionCounter0.lowerBound());
      assertSame(searchParams0, searchParams1);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iVecInt0).size();
      ILits iLits1 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits1);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      int int0 = (-885);
      // Undeclared exception!
      try { 
        originalWLClause0.get((-885));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -885
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int0 = randomLiteralSelectionStrategy0.select(1515);
      assertEquals(3031, int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      randomLiteralSelectionStrategy0.init((-1));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver0.getRestartStrategy();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      Lits lits0 = (Lits)solver0.getVocabulary();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver0, solver1);
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(originalWLClause0);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("h}8k@Kak6qkpFqTB6$");
      assertNotNull(dotSearchTracing0);
      
      String string1 = originalWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("0[?] ", string1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver0, solver1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        originalWLClause0.propagate(solver0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax1).getVocabulary();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1)).when(searchParams0).getClaDecay();
      doReturn(0.0).when(searchParams0).getVarDecay();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNull(iConstr0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, (RestartStrategy) null, (ILogAble) null);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(solver0);
      
      boolean boolean0 = lits0.isImplied(0);
      assertFalse(boolean0);
      assertFalse(lits0.equals((Object)iLits0));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotSame(lits0, iLits0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotNull(searchParams1);
      
      double double0 = searchParams1.getVarDecay();
      assertEquals(0.0, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      double double1 = searchParams1.getClaDecay();
      assertEquals((-1.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(1, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(learntWLClause0);
      
      boolean boolean1 = learntWLClause0.simplify();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(1, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      
      boolean boolean2 = originalWLClause0.locked();
      assertFalse(boolean2);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertNotSame(lits0, iLits0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean3 = learntWLClause0.isSatisfied();
      assertFalse(boolean3);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(1, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator1);
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      // Undeclared exception!
      try { 
        watcherBasedPrimeImplicantStrategy0.isMandatory((-1797));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(284, 284, 284, 284, 284).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(284, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(284, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(284, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertNotNull(originalWLClause0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(284);
      assertEquals(284, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Lits lits1 = new Lits();
      assertFalse(lits1.equals((Object)lits0));
      assertEquals(0, lits1.nVars());
      assertEquals(0, lits1.realnVars());
      assertNotNull(lits1);
      
      Random.setNextRandom(284);
      originalWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertFalse(lits0.equals((Object)lits1));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(284, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertNotSame(lits0, lits1);
      
      boolean boolean0 = originalWLClause0.locked();
      assertFalse(boolean0);
      assertFalse(lits0.equals((Object)lits1));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(284, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertNotSame(lits0, lits1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.last());
      assertEquals(963, vecInt0.size());
      assertNotNull(vecInt0);
      
      ILits iLits0 = null;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3, 2, 10, 10, 963).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.last());
      assertEquals(963, vecInt0.size());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(963, learntWLClause0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(963, learntWLClause0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, arminRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      String string0 = vecInt0.toString();
      assertEquals("", string0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(string0);
      
      String string1 = Lits.toStringX(1860);
      assertEquals("+x930", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.simplify());
      assertEquals(0, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      int int0 = originalWLClause0.size();
      assertEquals(0, int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.simplify());
      assertEquals(0, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      
      originalWLClause0.setActivity((-165.4302));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-165.4302), originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertFalse(int1 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNull(restartStrategy0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(solver2);
      
      RestartStrategy restartStrategy1 = solver2.getRestartStrategy();
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver0);
      assertNull(restartStrategy1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver1));
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.nVars());
      assertEquals(0, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver3);
      
      Solver<CardinalityDataStructureYanMax> solver4 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax1, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver0));
      assertFalse(solver4.equals((Object)solver1));
      assertFalse(solver4.equals((Object)solver2));
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.nConstraints());
      assertEquals(0, solver4.realNumberOfVariables());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.nVars());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(solver4);
      
      solver4.setRestartStrategy((RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver0));
      assertFalse(solver4.equals((Object)solver1));
      assertFalse(solver4.equals((Object)solver2));
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.nConstraints());
      assertEquals(0, solver4.realNumberOfVariables());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.nVars());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver4, solver3);
      assertNotSame(solver4, solver0);
      assertNotSame(solver4, solver1);
      assertNotSame(solver4, solver2);
      
      ILits iLits0 = solver4.getVocabulary();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver0));
      assertFalse(solver4.equals((Object)solver1));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.nConstraints());
      assertEquals(0, solver4.realNumberOfVariables());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.nVars());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver4, solver3);
      assertNotSame(solver4, solver0);
      assertNotSame(solver4, solver1);
      assertNotSame(solver4, solver2);
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertFalse(lits0.equals((Object)iLits0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.simplify();
      assertFalse(boolean0);
      assertFalse(lits0.equals((Object)iLits0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotSame(lits0, iLits0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.ensure(1965);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-2468));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      randomLiteralSelectionStrategy0.init(1519);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(arminRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver0.getRestartStrategy();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      solver1.setRestartStrategy(arminRestarts0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver1, solver0);
      
      Lits lits0 = (Lits)solver1.getVocabulary();
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver1, solver0);
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertNotNull(learntWLClause0);
      
      String string0 = learntWLClause0.toString((VarMapper) null);
      assertEquals("", string0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver1, solver0);
      assertNotNull(string0);
      
      double double0 = 555.8266268084;
      // Undeclared exception!
      try { 
        OriginalWLClause.brandNewClause(solver1, lits0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.OriginalWLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/");
      assertFalse(boolean0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      
      boolean boolean1 = solver0.enqueue(0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Lits lits0 = (Lits)solver0.getVocabulary();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lits0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(lits0).when(cardinalityDataStructureYanMax1).getVocabulary();
      SearchParams searchParams0 = new SearchParams(2127.68038236638, (-211));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2127.68038236638, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-211), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-211);
      intArray0[1] = (-211);
      intArray0[2] = (-211);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertArrayEquals(new int[] {(-211), (-211), (-211)}, intArray0);
      assertNotNull(subsetVarOrder0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts((-279));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals((-279), lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax1, searchParams0, subsetVarOrder0, lubyRestarts1);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2127.68038236638, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-211), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals((-279), lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {(-211), (-211), (-211)}, intArray0);
      assertNotNull(solver1);
      
      VecInt vecInt0 = (VecInt)solver1.getOutLearnt();
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2127.68038236638, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-211), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals((-279), lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {(-211), (-211), (-211)}, intArray0);
      assertNotSame(lubyRestarts0, lubyRestarts1);
      assertNotSame(solver0, solver1);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(solver1, solver0);
      assertNotNull(vecInt0);
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2127.68038236638, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-211), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals((-279), lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, readOnlyVecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {(-211), (-211), (-211)}, intArray0);
      assertNotNull(readOnlyVecInt0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, intArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2127.68038236638, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-211), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals((-279), lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {(-211), (-211), (-211)}, intArray0);
      assertNotNull(learntWLClause0);
      
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraint(solver1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 963;
      VecInt vecInt0 = new VecInt(963, 963);
      assertEquals(963, vecInt0.size());
      assertEquals(963, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(963, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause0);
      
      // Undeclared exception!
      try { 
        learntWLClause0.calcReason(963, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(281, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax1).getVocabulary();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1)).when(searchParams0).getClaDecay();
      doReturn(0.0).when(searchParams0).getVarDecay();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNull(iConstr0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, (RestartStrategy) null, (ILogAble) null);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(solver0);
      
      boolean boolean0 = lits0.isImplied(0);
      assertFalse(boolean0);
      assertFalse(lits0.equals((Object)iLits0));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotSame(lits0, iLits0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotNull(searchParams1);
      
      double double0 = searchParams1.getVarDecay();
      assertEquals(0.0, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      double double1 = searchParams1.getClaDecay();
      assertEquals((-1.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(learntWLClause0);
      
      boolean boolean1 = learntWLClause0.simplify();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      
      boolean boolean2 = originalWLClause0.locked();
      assertFalse(boolean2);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(281, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotSame(lits0, iLits0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean3 = learntWLClause0.isSatisfied();
      assertFalse(boolean3);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause1.size());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertNotNull(learntWLClause1);
      
      originalWLClause0.assertConstraintIfNeeded(solver0);
      assertFalse(lits0.equals((Object)iLits0));
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(281, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotSame(lits0, iLits0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(283, 283, 283, 283, 283).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(283, iVecInt0.size());
      assertEquals(283, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(283, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertNotNull(originalWLClause0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(283);
      assertEquals(283, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Lits lits1 = new Lits();
      assertFalse(lits1.equals((Object)lits0));
      assertEquals(0, lits1.realnVars());
      assertEquals(0, lits1.nVars());
      assertNotNull(lits1);
      
      Random.setNextRandom(283);
      VarMapper varMapper0 = null;
      // Undeclared exception!
      try { 
        originalWLClause0.toString((VarMapper) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 258
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt(2979, 2979);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(2979, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2979, vecInt1.last());
      assertNotNull(vecInt1);
      
      vecInt1.ensure(3181);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(2979, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2979, vecInt1.last());
      assertNotSame(vecInt1, vecInt0);
      
      vecInt0.unsafePush(1965);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(1965, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotSame(vecInt0, vecInt1);
      
      vecInt0.sortUnique();
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(1965, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotSame(vecInt0, vecInt1);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 222);
      assertEquals((-1), int0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotSame(vecInt0, vecInt1);
      
      learntWLClause0.forwardActivity(3181);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotSame(vecInt0, vecInt1);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt1, lits0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertEquals(2979, originalWLClause0.size());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(233);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(233, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 1798);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(233, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1798.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(233, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1798.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      vecInt0.growTo((-331), 0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotSame(vecInt0, vecInt1);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      
      boolean boolean0 = solver0.enqueue(0);
      assertTrue(boolean0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      originalWLClause0.incActivity((-2265.4643265491));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertEquals(2979, originalWLClause0.size());
      assertNotSame(vecInt1, vecInt0);
      
      int int1 = originalWLClause0.size();
      assertEquals(2979, int1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(int1 == int0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertEquals(2979, originalWLClause0.size());
      assertNotSame(vecInt1, vecInt0);
      
      learntWLClause0.calcReasonOnTheFly(1798, vecInt0, vecInt0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotSame(vecInt0, vecInt1);
      
      // Undeclared exception!
      try { 
        originalWLClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      assertEquals(963, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.size());
      assertNotNull(vecInt0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(963, learntWLClause0.size());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 703);
      assertEquals((-1), int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(963, learntWLClause0.size());
      
      boolean boolean0 = learntWLClause0.learnt();
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(963, learntWLClause0.size());
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause1.isSatisfied());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause1);
      
      LearntWLClause learntWLClause2 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertFalse(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, learntWLClause2.size());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause2.learnt());
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause2.simplify());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertFalse(learntWLClause2.isSatisfied());
      assertNotNull(learntWLClause2);
      
      // Undeclared exception!
      try { 
        learntWLClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, learntWLClause0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = learntWLClause0.toString();
      assertEquals("", string0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, learntWLClause0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      ILits iLits0 = null;
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause0);
      
      // Undeclared exception!
      try { 
        learntWLClause0.getAssertionLevel((IVecInt) null, (-120));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertNotNull(learntWLClause0);
      
      learntWLClause0.calcReason(963, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      
      int[] intArray0 = learntWLClause0.getLits();
      assertEquals(0, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-503)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = iVecInt0.clone();
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt1.last());
      assertEquals(1, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotNull(iVecInt1);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertNotSame(iVecInt0, iVecInt1);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(iVecInt0, (ILits) null);
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, (ILits) null);
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.learnt());
      assertNotNull(originalWLClause0);
      
      LearntWLClause learntWLClause2 = new LearntWLClause(iVecInt0, (ILits) null);
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(learntWLClause2.simplify());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertFalse(learntWLClause2.isSatisfied());
      assertEquals(0, learntWLClause2.size());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause2.learnt());
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause2);
      
      Integer integer0 = new Integer(238);
      assertEquals(238, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = learntWLClause2.equals(integer0);
      assertFalse(boolean2);
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(learntWLClause2.simplify());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertFalse(learntWLClause2.isSatisfied());
      assertEquals(0, learntWLClause2.size());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause2.learnt());
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(learntWLClause2, learntWLClause0);
      assertNotSame(learntWLClause2, learntWLClause1);
      
      learntWLClause2.forwardActivity((-1152.7675535364351));
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(learntWLClause2.simplify());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertFalse(learntWLClause2.isSatisfied());
      assertEquals(0, learntWLClause2.size());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause2.learnt());
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(learntWLClause2, learntWLClause0);
      assertNotSame(learntWLClause2, learntWLClause1);
      
      Constr constr0 = learntWLClause2.toConstraint();
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertTrue(constr0.equals((Object)learntWLClause1));
      assertFalse(constr0.equals((Object)learntWLClause0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(learntWLClause2.simplify());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertFalse(learntWLClause2.isSatisfied());
      assertEquals(0, learntWLClause2.size());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause2.learnt());
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(0, constr0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertFalse(constr0.isSatisfied());
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(learntWLClause2, learntWLClause0);
      assertNotSame(learntWLClause2, learntWLClause1);
      assertSame(learntWLClause2, constr0);
      assertNotSame(constr0, learntWLClause1);
      assertNotSame(constr0, learntWLClause0);
      assertSame(constr0, learntWLClause2);
      assertNotNull(constr0);
      
      ILits iLits0 = learntWLClause0.getVocabulary();
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(learntWLClause0.equals((Object)learntWLClause2));
      assertFalse(learntWLClause0.equals((Object)learntWLClause1));
      assertFalse(learntWLClause0.equals((Object)constr0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(learntWLClause0, learntWLClause2);
      assertNotSame(learntWLClause0, learntWLClause1);
      assertNotSame(learntWLClause0, constr0);
      assertNull(iLits0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      ILits iLits0 = null;
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertNotNull(learntWLClause0);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.simplify());
      assertFalse(learntWLClause1.isSatisfied());
      assertNotNull(learntWLClause1);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, 2439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(281, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertNotNull(originalWLClause0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      iVecInt0.shrinkTo(269);
      assertEquals(269, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(269, iVecInt0.last());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      Random.setNextRandom(281);
      // Undeclared exception!
      try { 
        originalWLClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 1572);
      assertEquals(3, vecInt0.size());
      assertEquals(1572, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertEquals(3, vecInt0.size());
      assertEquals(1572, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3, learntWLClause0.size());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3, learntWLClause0.size());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause1);
      
      boolean boolean1 = learntWLClause1.learnt();
      assertTrue(boolean1);
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(boolean1 == boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertNotSame(learntWLClause1, learntWLClause0);
      
      LearntWLClause learntWLClause2 = new LearntWLClause(vecInt0, (ILits) null);
      assertFalse(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause2.learnt());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertEquals(0, learntWLClause2.size());
      assertFalse(learntWLClause2.isSatisfied());
      assertFalse(learntWLClause2.simplify());
      assertNotNull(learntWLClause2);
      
      boolean boolean2 = learntWLClause0.equals(learntWLClause1);
      assertFalse(boolean2);
      assertFalse(learntWLClause0.equals((Object)learntWLClause2));
      assertFalse(learntWLClause0.equals((Object)learntWLClause1));
      assertTrue(learntWLClause1.equals((Object)learntWLClause2));
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3, learntWLClause0.size());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertNotSame(learntWLClause0, learntWLClause2);
      assertNotSame(learntWLClause0, learntWLClause1);
      assertNotSame(learntWLClause1, learntWLClause0);
      assertNotSame(learntWLClause1, learntWLClause2);
      
      learntWLClause2.forwardActivity(0.0);
      assertFalse(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause2.learnt());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertEquals(0, learntWLClause2.size());
      assertFalse(learntWLClause2.isSatisfied());
      assertFalse(learntWLClause2.simplify());
      assertNotSame(learntWLClause2, learntWLClause1);
      assertNotSame(learntWLClause2, learntWLClause0);
      
      boolean boolean3 = learntWLClause0.learnt();
      assertTrue(boolean3);
      assertFalse(learntWLClause0.equals((Object)learntWLClause2));
      assertFalse(learntWLClause0.equals((Object)learntWLClause1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(3, learntWLClause0.size());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertNotSame(learntWLClause0, learntWLClause2);
      assertNotSame(learntWLClause0, learntWLClause1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 284;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(284, 284, 284, 284, 284).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(284, iVecInt0.last());
      assertEquals(284, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(284, originalWLClause0.size());
      assertNotNull(originalWLClause0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(284);
      assertEquals(284, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      lubyRestarts0.setFactor(0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      lubyRestarts0.onRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax1, varOrderHeap0, lubyRestarts0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      
      boolean boolean0 = solver0.enqueue(0);
      assertTrue(boolean0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraint(solver0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      assertEquals(963, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.last());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertEquals(963, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.last());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(963, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(963, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean1 = learntWLClause0.learnt();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(963, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertNotNull(learntWLClause0);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertNotNull(learntWLClause1);
      
      boolean boolean0 = learntWLClause0.isSatisfied();
      assertFalse(boolean0);
      assertTrue(learntWLClause0.equals((Object)learntWLClause1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertNotSame(learntWLClause0, learntWLClause1);
      
      int int0 = learntWLClause1.size();
      assertEquals(0, int0);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertNotSame(learntWLClause1, learntWLClause0);
      
      double double0 = learntWLClause1.getActivity();
      assertEquals(0.0, double0, 0.01);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertNotSame(learntWLClause1, learntWLClause0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      assertEquals(1798, vecInt0.last());
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.ensure(1965);
      assertEquals(1798, vecInt0.last());
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.unsafePush(1798);
      assertEquals(1798, vecInt0.last());
      assertEquals(1127, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-2468));
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int0 = randomLiteralSelectionStrategy0.select(1965);
      assertEquals(3931, int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      randomLiteralSelectionStrategy0.init(1519);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(solver0);
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver0.getRestartStrategy();
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertNotNull(solver1);
      
      solver1.setRestartStrategy(arminRestarts0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver1, solver0);
      
      Lits lits0 = (Lits)solver1.getVocabulary();
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver1, solver0);
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1127, originalWLClause0.size());
      assertNotNull(originalWLClause0);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("h}8k@Ka6qkpFqTB6$");
      assertNotNull(dotSearchTracing0);
      
      // Undeclared exception!
      try { 
        originalWLClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1798
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(281, originalWLClause0.size());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax1).getVocabulary();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNull(iConstr0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, (RestartStrategy) null, (ILogAble) null);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(solver0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, miniSATRestarts0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(solver1);
      
      ILits iLits1 = solver0.getVocabulary();
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(iLits1.equals((Object)lits0));
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(0, iLits1.realnVars());
      assertEquals(0, iLits1.nVars());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotSame(solver0, solver1);
      assertSame(iLits1, iLits0);
      assertNotSame(iLits1, lits0);
      assertNotSame(iLits0, lits0);
      assertSame(iLits0, iLits1);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotNull(iLits1);
      
      OriginalWLClause originalWLClause1 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(lits0.equals((Object)iLits1));
      assertFalse(lits0.equals((Object)iLits0));
      assertFalse(originalWLClause1.equals((Object)originalWLClause0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause1.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, originalWLClause1.size());
      assertFalse(originalWLClause1.simplify());
      assertFalse(originalWLClause1.learnt());
      assertTrue(originalWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause1.locked());
      assertFalse(originalWLClause1.isSatisfied());
      assertEquals(0.0, originalWLClause1.getActivity(), 0.01);
      assertFalse(originalWLClause1.canBePropagatedMultipleTimes());
      assertNotNull(originalWLClause1);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("/1{!JqwD!Q\",G");
      assertNotNull(dotSearchTracing0);
      
      String string1 = originalWLClause1.toString((VarMapper) dotSearchTracing0);
      assertEquals("0[?] ", string1);
      assertFalse(lits0.equals((Object)iLits1));
      assertFalse(lits0.equals((Object)iLits0));
      assertFalse(originalWLClause1.equals((Object)originalWLClause0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause1.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, originalWLClause1.size());
      assertFalse(originalWLClause1.simplify());
      assertFalse(originalWLClause1.learnt());
      assertTrue(originalWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause1.locked());
      assertFalse(originalWLClause1.isSatisfied());
      assertEquals(0.0, originalWLClause1.getActivity(), 0.01);
      assertFalse(originalWLClause1.canBePropagatedMultipleTimes());
      assertNotSame(lits0, iLits1);
      assertNotSame(lits0, iLits0);
      assertNotSame(originalWLClause1, originalWLClause0);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        originalWLClause0.propagate(solver1, 240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 281;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(originalWLClause0);
      
      originalWLClause0.setActivity(281);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(281.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(281, originalWLClause0.size());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason(281, iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1798, vecInt0.last());
      assertNotNull(vecInt0);
      
      vecInt0.ensure(1965);
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1798, vecInt0.last());
      
      vecInt0.unsafePush(1798);
      assertEquals(1127, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1798, vecInt0.last());
      
      vecInt0.sortUnique();
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1798, vecInt0.last());
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 0);
      assertEquals((-1), int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      
      learntWLClause0.forwardActivity(1023.410002505);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      
      int[] intArray0 = learntWLClause0.getLits();
      assertEquals(1, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertArrayEquals(new int[] {1798}, intArray0);
      assertNotNull(intArray0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.simplify());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      int int1 = lits0.nextFreeVarId(false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      boolean boolean0 = lits0.isImplied(0);
      assertFalse(boolean0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      originalWLClause0.setActivity(1.0E-4);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.simplify());
      assertEquals(1.0E-4, originalWLClause0.getActivity(), 0.01);
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      
      String string0 = originalWLClause0.toString();
      assertEquals("", string0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.simplify());
      assertEquals(1.0E-4, originalWLClause0.getActivity(), 0.01);
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(string0);
      
      double double0 = learntWLClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause1 = null;
      try {
        originalWLClause1 = new OriginalWLClause((IVecInt) null, iLits0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1798, vecInt0.last());
      assertNotNull(vecInt0);
      
      vecInt0.ensure(1965);
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1798, vecInt0.last());
      
      vecInt0.unsafePush(1798);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1127, vecInt0.size());
      assertEquals(1798, vecInt0.last());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-2468));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      randomLiteralSelectionStrategy0.init(1519);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(arminRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver0.getRestartStrategy();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      solver1.setRestartStrategy(arminRestarts0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver1, solver0);
      
      Lits lits0 = (Lits)solver1.getVocabulary();
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(solver0, solver1);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotSame(solver1, solver0);
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-2468), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1127, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertNotNull(learntWLClause0);
      
      // Undeclared exception!
      try { 
        learntWLClause0.toString((VarMapper) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1798
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.locked());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax1).getVocabulary();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1)).when(searchParams0).getClaDecay();
      doReturn(0.0).when(searchParams0).getVarDecay();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNull(iConstr0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, (RestartStrategy) null, (ILogAble) null);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(solver0);
      
      boolean boolean0 = lits0.isImplied(0);
      assertFalse(boolean0);
      assertFalse(lits0.equals((Object)iLits0));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotSame(lits0, iLits0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotNull(searchParams1);
      
      double double0 = searchParams1.getVarDecay();
      assertEquals(0.0, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      double double1 = searchParams1.getClaDecay();
      assertEquals((-1.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, learntWLClause0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(learntWLClause0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      OriginalWLClause originalWLClause1 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(lits0.equals((Object)iLits0));
      assertFalse(originalWLClause1.equals((Object)originalWLClause0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause1.learnt());
      assertTrue(originalWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0, originalWLClause1.size());
      assertFalse(originalWLClause1.simplify());
      assertEquals(0.0, originalWLClause1.getActivity(), 0.01);
      assertFalse(originalWLClause1.isSatisfied());
      assertNotNull(originalWLClause1);
      
      boolean boolean2 = learntWLClause0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(iLits0.equals((Object)lits0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, learntWLClause0.size());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.size());
      assertEquals(963, vecInt0.last());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3, 2, 10, 10, 963).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.size());
      assertEquals(963, vecInt0.last());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(963, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(963, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      
      boolean boolean1 = learntWLClause0.learnt();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(963, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause1.isSatisfied());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.learnt());
      assertNotNull(learntWLClause1);
      
      boolean boolean2 = learntWLClause0.equals(learntWLClause0);
      assertTrue(boolean2);
      assertFalse(learntWLClause0.equals((Object)learntWLClause1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(963, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotSame(learntWLClause0, learntWLClause1);
      
      learntWLClause0.forwardActivity(0.0);
      assertFalse(learntWLClause0.equals((Object)learntWLClause1));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(963, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotSame(learntWLClause0, learntWLClause1);
      
      boolean boolean3 = learntWLClause0.learnt();
      assertTrue(boolean3);
      assertFalse(learntWLClause0.equals((Object)learntWLClause1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(963, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotSame(learntWLClause0, learntWLClause1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      assertEquals(1798, vecInt0.last());
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.ensure(1965);
      assertEquals(1798, vecInt0.last());
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.unsafePush(1798);
      assertEquals(1798, vecInt0.last());
      assertEquals(1127, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(1, vecInt0.size());
      assertEquals(1798, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 0);
      assertEquals((-1), int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      
      learntWLClause0.forwardActivity(1023.410002505);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      
      int[] intArray0 = learntWLClause0.getLits();
      assertEquals(1, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertArrayEquals(new int[] {1798}, intArray0);
      assertNotNull(intArray0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.simplify());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotNull(solver0);
      
      boolean boolean0 = solver0.enqueue(0);
      assertTrue(boolean0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-2830.63978), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        originalWLClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.size());
      assertEquals(963, vecInt0.last());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(963, 963, 963, 963, 963).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(963, vecInt0.size());
      assertEquals(963, vecInt0.last());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(963, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 963);
      assertEquals((-1), int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(963, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        learntWLClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax1).getVocabulary();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1)).when(searchParams0).getClaDecay();
      doReturn(0.0).when(searchParams0).getVarDecay();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertNull(iConstr0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, (RestartStrategy) null, (ILogAble) null);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(solver0);
      
      boolean boolean0 = lits0.isImplied(0);
      assertFalse(boolean0);
      assertFalse(lits0.equals((Object)iLits0));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotSame(lits0, iLits0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotNull(searchParams1);
      
      double double0 = searchParams1.getVarDecay();
      assertEquals(0.0, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      double double1 = searchParams1.getClaDecay();
      assertEquals((-1.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("*^/,");
      assertNotNull(dotSearchTracing0);
      
      OriginalWLClause originalWLClause1 = new OriginalWLClause(iVecInt0, iLits0);
      assertFalse(originalWLClause1.equals((Object)originalWLClause0));
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(1, originalWLClause1.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause1.learnt());
      assertFalse(originalWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalWLClause1.getActivity(), 0.01);
      assertEquals(1, originalWLClause1.size());
      assertFalse(originalWLClause1.locked());
      assertFalse(originalWLClause1.isSatisfied());
      assertFalse(originalWLClause1.simplify());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(originalWLClause1);
      
      String string1 = originalWLClause1.toString((VarMapper) dotSearchTracing0);
      assertEquals("0[?] ", string1);
      assertFalse(originalWLClause1.equals((Object)originalWLClause0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(1, originalWLClause1.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause1.learnt());
      assertFalse(originalWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalWLClause1.getActivity(), 0.01);
      assertEquals(1, originalWLClause1.size());
      assertFalse(originalWLClause1.locked());
      assertFalse(originalWLClause1.isSatisfied());
      assertFalse(originalWLClause1.simplify());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(originalWLClause1, originalWLClause0);
      assertNotSame(iLits0, lits0);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        originalWLClause0.propagate(solver0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 963;
      VecInt vecInt0 = new VecInt(963, 963);
      assertEquals(963, vecInt0.last());
      assertEquals(963, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int1 = 3;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3, 2, 10, 10, 963).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertEquals(963, vecInt0.last());
      assertEquals(963, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(963, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(963, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean1 = learntWLClause0.learnt();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(963, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean2 = learntWLClause0.equals(learntWLClause0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(963, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      learntWLClause0.forwardActivity(0.0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(963, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean3 = learntWLClause0.learnt();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(963, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        learntWLClause0.calcReasonOnTheFly(947, vecInt0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 9, (-71)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(2, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int0 = randomLiteralSelectionStrategy0.select((-722));
      assertEquals((-1443), int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      randomLiteralSelectionStrategy0.init((-722));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver0.getRestartStrategy();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(arminRestarts1, arminRestarts0);
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertNotNull(solver1);
      
      Lits lits0 = (Lits)solver1.getVocabulary();
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotSame(solver1, solver0);
      assertNotNull(lits0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("h}8k@Kak6qkpFqTB6$");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(2, originalWLClause0.size());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertFalse(originalWLClause0.learnt());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.simplify());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertNotNull(originalWLClause0);
      
      // Undeclared exception!
      try { 
        originalWLClause0.calcReasonOnTheFly((-722), iVecInt0, iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.size());
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertEquals(281, originalWLClause0.size());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.locked());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(281);
      assertEquals(281, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      iLits0.init(281);
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iLits0, lits0);
      
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, 281);
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNull(iConstr0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax2 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertNotNull(cardinalityDataStructureYanMax2);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.simplify();
      assertFalse(boolean0);
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertFalse(learntWLClause0.locked());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(iLits0, lits0);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(iVecInt0, lits0);
      assertFalse(lits0.equals((Object)iLits0));
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertNotNull(learntWLClause1);
      
      boolean boolean1 = learntWLClause1.canBePropagatedMultipleTimes();
      assertFalse(boolean1);
      assertFalse(lits0.equals((Object)iLits0));
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertNotSame(lits0, iLits0);
      assertNotSame(learntWLClause1, learntWLClause0);
      
      OriginalWLClause originalWLClause1 = new OriginalWLClause(iVecInt0, iLits0);
      assertFalse(originalWLClause1.equals((Object)originalWLClause0));
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(originalWLClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause1.isSatisfied());
      assertFalse(originalWLClause1.simplify());
      assertFalse(originalWLClause1.learnt());
      assertFalse(originalWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalWLClause1.getActivity(), 0.01);
      assertEquals(0, originalWLClause1.size());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(originalWLClause1);
      
      int int0 = originalWLClause1.size();
      assertEquals(0, int0);
      assertFalse(originalWLClause1.equals((Object)originalWLClause0));
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(originalWLClause1.canBeSatisfiedByCountingLiterals());
      assertEquals(1, originalWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause1.isSatisfied());
      assertFalse(originalWLClause1.simplify());
      assertFalse(originalWLClause1.learnt());
      assertFalse(originalWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalWLClause1.getActivity(), 0.01);
      assertEquals(0, originalWLClause1.size());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotSame(originalWLClause1, originalWLClause0);
      assertNotSame(iLits0, lits0);
      
      IVecInt iVecInt1 = iVecInt0.clone();
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotNull(iVecInt1);
      
      VecInt vecInt0 = new VecInt(1126, 1798);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1798, vecInt0.last());
      assertNotNull(vecInt0);
      
      vecInt0.ensure(1965);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertEquals(1126, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1798, vecInt0.last());
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      
      vecInt0.unsafePush(1798);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.isEmpty());
      assertEquals(1127, vecInt0.size());
      assertEquals(1798, vecInt0.last());
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      
      learntWLClause1.calcReasonOnTheFly(281, vecInt0, iVecInt0);
      assertTrue(iVecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(lits0.equals((Object)iLits0));
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1127, vecInt0.size());
      assertEquals(1798, vecInt0.last());
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(lits0, iLits0);
      assertNotSame(learntWLClause1, learntWLClause0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 1553);
      assertEquals((-1), int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertNotNull(learntWLClause1);
      
      boolean boolean0 = learntWLClause1.simplify();
      assertFalse(boolean0);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertNotSame(learntWLClause1, learntWLClause0);
      
      // Undeclared exception!
      try { 
        learntWLClause1.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(1, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int0 = randomLiteralSelectionStrategy0.select((-1));
      assertEquals((-1), int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, lits0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause0);
      
      int int1 = learntWLClause0.getAssertionLevel(iVecInt0, 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = learntWLClause0.learnt();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertFalse(learntWLClause0.locked());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.size());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      LearntWLClause learntWLClause1 = new LearntWLClause(iVecInt0, lits0);
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertNotNull(learntWLClause1);
      
      learntWLClause1.calcReason(1, iVecInt0);
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertNotSame(learntWLClause1, learntWLClause0);
      
      boolean boolean2 = learntWLClause1.isSatisfied();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.simplify());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertNotSame(learntWLClause1, learntWLClause0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~),c\"");
      assertFalse(boolean0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertNotNull(learntWLClause0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 1553);
      assertEquals((-1), int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause1.size());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertNotNull(learntWLClause1);
      
      boolean boolean1 = learntWLClause1.simplify();
      assertFalse(boolean1);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause1.size());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertNotSame(learntWLClause1, learntWLClause0);
      
      learntWLClause1.activity = 1.0E-100;
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause1.size());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertEquals(1.0E-100, learntWLClause1.getActivity(), 0.01);
      
      boolean boolean2 = learntWLClause0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(learntWLClause0.equals((Object)learntWLClause1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.isSatisfied());
      assertNotSame(learntWLClause0, learntWLClause1);
      
      learntWLClause1.calcReason((-1), vecInt0);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0, learntWLClause1.size());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause1.isSatisfied());
      assertFalse(learntWLClause1.simplify());
      assertEquals(1.0E-100, learntWLClause1.getActivity(), 0.01);
      assertNotSame(learntWLClause1, learntWLClause0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ", "starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 0).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(281, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(281, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(281, originalWLClause0.size());
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertNotNull(originalWLClause0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertFalse(iLits0.equals((Object)lits0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax1).getVocabulary();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1)).when(searchParams0).getClaDecay();
      doReturn(0.0).when(searchParams0).getVarDecay();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      miniSATRestarts0.newConflict();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, miniSATRestarts0, (ILogAble) null);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      assertNotNull(searchParams1);
      
      double double0 = searchParams1.getVarDecay();
      assertEquals(0.0, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      
      double double1 = searchParams1.getClaDecay();
      assertEquals((-1.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.nVars());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals((-1), fixedLengthLearning0.getMaxLength());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertSame(searchParams1, searchParams0);
      assertNotSame(iLits0, lits0);
      
      String string1 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        originalWLClause0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      
      String string0 = groupClauseSelectorSolver0.getLogPrefix();
      assertEquals("starts\t\t: ", string0);
      assertNotNull(string0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      assertEquals(1, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      SearchParams searchParams0 = new SearchParams((-722));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertNotNull(randomLiteralSelectionStrategy0);
      
      int int0 = randomLiteralSelectionStrategy0.select((-1));
      assertEquals((-1), int0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      randomLiteralSelectionStrategy0.init((-722));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertNotNull(solver1);
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver1.getRestartStrategy();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertSame(arminRestarts1, arminRestarts0);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver1, solver0);
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver2);
      
      solver1.setRestartStrategy((RestartStrategy) null);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver1, solver2);
      assertNotSame(solver1, solver0);
      
      Lits lits0 = (Lits)solver2.getVocabulary();
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver0);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotNull(lits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(originalWLClause0);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("starts\t\t: ");
      assertNotNull(dotSearchTracing0);
      
      String string1 = originalWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("0[?] ", string1);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.locked());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.isSatisfied());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver0);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotNull(string1);
      
      originalWLClause0.assertConstraint(solver1);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.equals((Object)solver0));
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-722), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalWLClause0.size());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalWLClause0.learnt());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertTrue(originalWLClause0.simplify());
      assertTrue(originalWLClause0.locked());
      assertTrue(originalWLClause0.isSatisfied());
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(arminRestarts0, arminRestarts1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver1, solver2);
      assertNotSame(solver1, solver0);
      assertNotSame(solver2, solver1);
      assertNotSame(solver2, solver0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      String string0 = vecInt0.toString();
      assertEquals("", string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(string0);
      
      String string1 = Lits.toStringX(1860);
      assertEquals("+x930", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(100, int0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNull(restartStrategy0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertNotNull(solver2);
      
      RestartStrategy restartStrategy1 = solver2.getRestartStrategy();
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.realNumberOfVariables());
      assertNotSame(solver2, solver0);
      assertNotSame(solver2, solver1);
      assertNull(restartStrategy1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(solver3.equals((Object)solver0));
      assertFalse(solver3.equals((Object)solver2));
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.realNumberOfVariables());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver3);
      
      Solver<CardinalityDataStructureYanMax> solver4 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax1, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver4.equals((Object)solver1));
      assertFalse(solver4.equals((Object)solver0));
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nVars());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(solver4);
      
      solver4.setRestartStrategy((RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver4.equals((Object)solver1));
      assertFalse(solver4.equals((Object)solver0));
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nVars());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver4, solver1);
      assertNotSame(solver4, solver0);
      assertNotSame(solver4, solver3);
      assertNotSame(solver4, solver2);
      
      ILits iLits0 = solver4.getVocabulary();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver4.equals((Object)solver1));
      assertFalse(solver4.equals((Object)solver0));
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(iLits0.equals((Object)lits0));
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nVars());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver4, solver1);
      assertNotSame(solver4, solver0);
      assertNotSame(solver4, solver3);
      assertNotSame(solver4, solver2);
      assertNotSame(iLits0, lits0);
      assertNotNull(iLits0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.simplify();
      assertFalse(boolean0);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertNotSame(lits0, iLits0);
      
      boolean boolean1 = learntWLClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean1);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(boolean1 == boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause0.simplify());
      assertNotSame(lits0, iLits0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(originalWLClause0);
      
      boolean boolean2 = originalWLClause0.learnt();
      assertFalse(boolean2);
      assertFalse(lits0.equals((Object)iLits0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, originalWLClause0.size());
      assertFalse(originalWLClause0.simplify());
      assertFalse(originalWLClause0.isSatisfied());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(originalWLClause0.learnt());
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, originalWLClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
      assertNotSame(lits0, iLits0);
      
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraint(solver3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(learntWLClause0);
      
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean1 = learntWLClause0.learnt();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(learntWLClause0.learnt());
      assertFalse(learntWLClause0.simplify());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause1.isSatisfied());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertNotNull(learntWLClause1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = learntWLClause1.equals(object0);
      assertFalse(boolean2);
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause1.isSatisfied());
      assertTrue(learntWLClause1.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause1.simplify());
      assertTrue(learntWLClause1.learnt());
      assertEquals(1, learntWLClause1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, learntWLClause1.size());
      assertFalse(learntWLClause1.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertNotSame(learntWLClause1, learntWLClause0);
      
      LearntWLClause learntWLClause2 = new LearntWLClause(vecInt0, (ILits) null);
      assertTrue(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause2.isSatisfied());
      assertEquals(0, learntWLClause2.size());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause2.simplify());
      assertTrue(learntWLClause2.learnt());
      assertNotNull(learntWLClause2);
      
      boolean boolean3 = learntWLClause2.simplify();
      assertFalse(boolean3);
      assertTrue(learntWLClause2.equals((Object)learntWLClause0));
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(learntWLClause2.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause2.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause2.isSatisfied());
      assertEquals(0, learntWLClause2.size());
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertEquals(1, learntWLClause2.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntWLClause2.simplify());
      assertTrue(learntWLClause2.learnt());
      assertNotSame(learntWLClause2, learntWLClause1);
      assertNotSame(learntWLClause2, learntWLClause0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3, 2, 10, 10, 963).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason(2242, (IVecInt) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 963
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.canBeSatisfiedByCountingLiterals();
      learntWLClause0.learnt();
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.forwardActivity(0.0);
      learntWLClause0.learnt();
      // Undeclared exception!
      try { 
        learntWLClause0.get(963);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 963
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.getAssertionLevel(vecInt0, (-136));
      // Undeclared exception!
      try { 
        learntWLClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(963, 963, 963, 963, 963).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.getAssertionLevel(vecInt0, 963);
      FileSystemHandling.shouldAllThrowIOExceptions();
      learntWLClause0.learnt();
      // Undeclared exception!
      try { 
        learntWLClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      vecInt0.toString();
      Lits.toStringX(1860);
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause0.simplify();
      boolean boolean1 = learntWLClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean1);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      originalWLClause0.learnt();
      boolean boolean2 = learntWLClause0.equals(iLogAble0);
      assertTrue(boolean2 == boolean0);
      
      learntWLClause0.forwardActivity(1.0E-100);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, (-136));
      assertEquals((-1), int0);
      
      learntWLClause0.learnt();
      learntWLClause0.toString();
      learntWLClause0.getLits();
      boolean boolean0 = learntWLClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3, 1572);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1572, 1572, 928).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.canBeSatisfiedByCountingLiterals();
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      String string0 = "";
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("");
      // Undeclared exception!
      try { 
        learntWLClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 1553);
      assertEquals((-1), int0);
      
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause1.simplify();
      assertTrue(learntWLClause1.equals((Object)learntWLClause0));
      
      boolean boolean1 = learntWLClause0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      vecInt0.ensure(1965);
      vecInt0.unsafePush(1798);
      vecInt0.sortUnique();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.getAssertionLevel(vecInt0, 0);
      learntWLClause0.forwardActivity(1023.410002505);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(iPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      vecInt0.growTo(32, (-1910));
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      solver0.enqueue(0);
      originalWLClause0.incActivity(0);
      originalWLClause0.size();
      // Undeclared exception!
      try { 
        learntWLClause0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1798
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 281, 281, 281).when(solutionCounter0).nVars();
      doReturn(0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      groupClauseSelectorSolver0.getLogPrefix();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMax1).getVocabulary();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1)).when(searchParams0).getClaDecay();
      doReturn(0.0).when(searchParams0).getVarDecay();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      miniSATRestarts0.newConflict();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, (RestartStrategy) null, (ILogAble) null);
      SearchParams searchParams1 = solver0.getSearchParams();
      searchParams1.getVarDecay();
      searchParams1.getClaDecay();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      learntWLClause0.simplify();
      originalWLClause0.locked();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(284, 284, 284, 284, 284).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      SearchParams searchParams0 = new SearchParams((-722));
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      randomLiteralSelectionStrategy0.select((-1));
      randomLiteralSelectionStrategy0.init((-1));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax1, searchParams0, pureOrder0, arminRestarts0);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax1, searchParams0, pureOrder0, arminRestarts0);
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap1, arminRestarts0);
      solver0.setRestartStrategy(arminRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("starts\t\t: ");
      originalWLClause0.assertConstraint(solver0);
      ILits iLits1 = levelBasedVarOrderHeap1.getVocabulary();
      assertEquals(0, iLits1.nVars());
      
      originalWLClause0.simplify();
      // Undeclared exception!
      try { 
        originalWLClause0.get((-1674));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1674
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      IOrder iOrder0 = mock(IOrder.class, new ViolatedAssumptionAnswer());
      RestartStrategy restartStrategy0 = mock(RestartStrategy.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, iOrder0, restartStrategy0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      originalWLClause0.rescaleBy((-412.80970660451646));
      originalWLClause0.incActivity(2530.23403);
      originalWLClause0.size();
      assertEquals(-0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.rescaleBy((-526.0813169985));
      learntWLClause0.canBeSatisfiedByCountingLiterals();
      learntWLClause0.learnt();
      assertEquals(-0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3, 2, 10, 10, 963).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      learntWLClause0.learnt();
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      LearntWLClause learntWLClause2 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean1 = learntWLClause2.equals(learntWLClause0);
      assertTrue(learntWLClause2.equals((Object)learntWLClause1));
      assertFalse(boolean1 == boolean0);
      
      learntWLClause0.forwardActivity(0.0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      vecInt0.ensure(1965);
      vecInt0.unsafePush(1798);
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      vecInt0.unsafePush(1126);
      SearchParams searchParams0 = new SearchParams((-2468));
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      levelBasedVarOrderHeap0.addLevel((IVecInt) vecInt0);
      levelBasedVarOrderHeap0.addLevel((IVecInt) vecInt0);
      levelBasedVarOrderHeap0.addLevel((IVecInt) vecInt0);
      levelBasedVarOrderHeap0.addLevel((IVecInt) vecInt0);
      levelBasedVarOrderHeap0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 284;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(284, 284, 284, 284, 284).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      groupClauseSelectorSolver0.getLogPrefix();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(284);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(iPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lubyRestarts0.setFactor(0);
      lubyRestarts0.onRestart();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      solver0.enqueue(0);
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraint(solver0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.getAssertionLevel(vecInt0, (-136));
      // Undeclared exception!
      try { 
        learntWLClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      vecInt0.ensure(1965);
      vecInt0.unsafePush(1798);
      vecInt0.sortUnique();
      Lits lits0 = new Lits();
      lits0.nextFreeVarId(false);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.getAssertionLevel(vecInt0, 0);
      learntWLClause0.forwardActivity(1023.410002505);
      learntWLClause0.getLits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lits0.nextFreeVarId(false);
      originalWLClause0.setActivity(1.0E-4);
      originalWLClause0.toString();
      originalWLClause0.getLits();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause1 = null;
      try {
        originalWLClause1 = new OriginalWLClause((IVecInt) null, iLits0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, 9, (-1763)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      groupClauseSelectorSolver0.getLogPrefix();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-722));
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      randomLiteralSelectionStrategy0.select((-722));
      randomLiteralSelectionStrategy0.init((-722));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      solver0.getRestartStrategy();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      ILits iLits0 = solver1.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("h}8k@Kak6qkpFqTB6$");
      originalWLClause0.toString((VarMapper) dotSearchTracing0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate(solver1, 1555);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1555
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 242);
      assertEquals((-1), int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      learntWLClause0.learnt();
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause1.isSatisfied();
      assertFalse(boolean0);
      
      int int1 = learntWLClause1.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int1);
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, 963);
      assertEquals((-1), int0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      
      // Undeclared exception!
      try { 
        learntWLClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      IOrder iOrder0 = mock(IOrder.class, new ViolatedAssumptionAnswer());
      RestartStrategy restartStrategy0 = mock(RestartStrategy.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, iOrder0, restartStrategy0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      originalWLClause0.incActivity(2530.23403);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      groupClauseSelectorSolver0.getLogPrefix();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      SearchParams searchParams0 = new SearchParams((-722));
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      int int0 = randomLiteralSelectionStrategy0.select((-1));
      randomLiteralSelectionStrategy0.init((-722));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      ArminRestarts arminRestarts1 = new ArminRestarts();
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts1);
      solver1.setRestartStrategy(arminRestarts0);
      ILits iLits0 = solver2.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("starts\t\t: ");
      originalWLClause0.assertConstraint(solver0);
      int int1 = originalWLClause0.hashCode();
      assertFalse(int1 == int0);
      
      Constr constr0 = originalWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 284;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(284, 284, 284, 284, 284).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      groupClauseSelectorSolver0.getLogPrefix();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(284);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits1 = new Lits();
      Random.setNextRandom(284);
      UnitPropagationListener unitPropagationListener0 = null;
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.setLits((ILits) null);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      arminRestarts0.shouldRestart();
      arminRestarts0.onBackjumpToRootLevel();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, arminRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      SearchParams searchParams0 = new SearchParams();
      searchParams0.getInitConflictBound();
      searchParams0.getConflictBoundIncFactor();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      ILits iLits0 = solver1.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      originalWLClause0.incActivity(1965);
      solver1.isSatisfiable();
      originalWLClause0.rescaleBy(1094.99185);
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraintIfNeeded(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(317, 317, 317, 317, 317).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, (ILits) null);
      originalWLClause0.hashCode();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1126, 1798);
      vecInt0.ensure(1965);
      vecInt0.unsafePush(1798);
      vecInt0.sortUnique();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.getAssertionLevel(vecInt0, 0);
      learntWLClause0.forwardActivity(1023.410002505);
      learntWLClause0.getLits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2830.63978));
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(iPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      varOrderHeap0.printStat(printWriter0, "");
      learntWLClause0.toConstraint();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
      learntWLClause0.learnt();
      // Undeclared exception!
      try { 
        originalWLClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      vecInt0.toString();
      Lits.toStringX(1860);
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      SearchParams searchParams0 = new SearchParams();
      searchParams0.getInitConflictBound();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
      solver0.getRestartStrategy();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      solver2.getRestartStrategy();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      Solver<CardinalityDataStructureYanMax> solver4 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax1, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      solver4.setRestartStrategy((RestartStrategy) null);
      solver4.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause0.simplify();
      boolean boolean1 = learntWLClause0.canBePropagatedMultipleTimes();
      assertTrue(boolean1 == boolean0);
      
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      originalWLClause0.size();
      learntWLClause0.calcReasonOnTheFly(100, vecInt0, vecInt0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      VecInt vecInt0 = new VecInt(963, 963);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      
      learntWLClause0.learnt();
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean1 = learntWLClause0.equals(learntWLClause0);
      LearntWLClause learntWLClause2 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean2 = learntWLClause2.simplify();
      assertFalse(boolean2 == boolean1);
      assertFalse(learntWLClause2.equals((Object)learntWLClause0));
      assertEquals(0.0, learntWLClause2.getActivity(), 0.01);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      
      vecInt0.insertFirst(215);
      LearntWLClause learntWLClause2 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause2.learnt();
      learntWLClause2.equals(learntWLClause1);
      learntWLClause1.forwardActivity(0.0);
      LearntWLClause learntWLClause3 = new LearntWLClause(vecInt0, (ILits) null);
      assertEquals(0.0, learntWLClause3.getActivity(), 0.01);
      assertFalse(learntWLClause3.equals((Object)learntWLClause2));
      assertTrue(learntWLClause3.equals((Object)learntWLClause1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("starts\t\t: ").when(solutionCounter0).getLogPrefix();
      doReturn(281, 281, (-1)).when(solutionCounter0).nVars();
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      groupClauseSelectorSolver0.getLogPrefix();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(groupClauseSelectorSolver0);
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      SearchParams searchParams0 = new SearchParams((-722));
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      randomLiteralSelectionStrategy0.select((-1));
      randomLiteralSelectionStrategy0.init((-722));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      solver1.getRestartStrategy();
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      solver1.setRestartStrategy((RestartStrategy) null);
      ILits iLits0 = solver2.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("h}8k@Ka6qkpFqTB6$");
      DotSearchTracing<Object> dotSearchTracing1 = new DotSearchTracing<Object>("starts\t\t: ");
      String string0 = originalWLClause0.toString((VarMapper) dotSearchTracing1);
      assertEquals("0[?] ", string0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      boolean boolean1 = learntWLClause0.isSatisfied();
      assertFalse(boolean1 == boolean0);
      
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("]");
      learntWLClause1.toConstraint();
      learntWLClause1.size();
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Lits lits0 = new Lits();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      cardinalityDataStructure0.getVocabulary();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      miniSATRestarts0.newConflict();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("starts\t\t: ");
      originalWLClause0.toString((VarMapper) dotSearchTracing0);
      Constr constr0 = originalWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }
}
