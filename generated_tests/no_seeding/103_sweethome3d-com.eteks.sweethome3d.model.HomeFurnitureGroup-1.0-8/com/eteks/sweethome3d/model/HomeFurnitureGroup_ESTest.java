/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 22:30:42 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import java.math.BigDecimal;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomeFurnitureGroup_ESTest extends HomeFurnitureGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[10];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = new Sash((-1269.1682F), 250.64F, 756.0F, 3535.505F, 745.0205F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.5F, 3, (-1552.98F), 969.3F, 745.0205F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(745.0205F, 231.9674F, 0.0F, (-898.0F), 3535.505F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(250.64F, 3535.505F, 231.9674F, 1.0F, 969.3F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(3535.505F, 3537.547F, 414.5792F, (-6.15F), 414.5792F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(0.0F, 0.0F, 0.0F, 969.3F, 0.0F);
      sashArray0[5] = sash5;
      Integer integer0 = new Integer(2241);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("AKq~6", resourceURLContent0, resourceURLContent0, (-2047.633F), 1.0F, 0.0F, 0.0F, true, (-1269.1682F), 3535.505F, sashArray0, integer0, (float[][]) null, false, 3535.505F, true);
      catalogDoorOrWindow0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.setAngle((-1741.512F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.setAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.5F, 3, 0.0F, 3);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float0);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setWidth((-2047.633F));
      homeFurnitureGroup0.setX(0.8618414F);
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-1.0F));
      homeFurnitureGroup0.intersectsRectangle((-1.0F), (-2047.633F), 359.747F, 359.747F);
      homeFurnitureGroup1.setAngle((-2047.633F));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      resourceURLContent0.getJAREntryURL();
      LightSource lightSource1 = new LightSource(0.0F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[1] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1433.127763627909));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer((-1427));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, 2446.9F);
      homeFurnitureGroup0.isMovable();
      homeFurnitureGroup0.setAngle(2446.9F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isBottomLeftPointAt(129.0F, (-2047.633F), 2409.0F);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getIcon();
      homeFurnitureGroup0.getLevel();
      homeFurnitureGroup1.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[15];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.setX((-5257.484F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setElevation((-5257.484F));
      homeFurnitureGroup0.setX(0.5F);
      homeFurnitureGroup0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float0);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.setX((-5257.484F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.5F);
      CatalogLight catalogLight0 = new CatalogLight("G2a~[U~7Bot qQ#[", "", "G2a~[U~7Bot qQ#[", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-2047.633F), 1138.0F, 1138.0F, 1138.0F, false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      linkedList0.offerLast(homeLight1);
      linkedList1.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Qr0~~d\"HW}");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setDepth(0.0F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      BigDecimal bigDecimal0 = new BigDecimal(0.5F);
      CatalogLight catalogLight0 = new CatalogLight("", (String) null, "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 547.541F, false, lightSourceArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      Integer integer0 = new Integer((-3923));
      Integer integer1 = Integer.getInteger((String) null, 963);
      homeFurnitureGroup0.setColor(integer1);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setDepth(11);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.setHeight(0.0F);
      homeFurnitureGroup0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-3661.548F));
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-3661.548F), (-3661.548F), (-3661.548F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getValueAddedTax();
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "7:yRFM/J]J[{`.");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-3661.548F));
      homeFurnitureGroup0.setHeight(2.0F);
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-2.6401193F));
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-2.6401193F), (-2.6401193F), 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(14);
      Integer.getInteger(" /S-E-S?g//B1", 14);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getModel();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("P5o8AjX3TT/Jp2", 0.0F, 0.5F, (-1.0F));
      homeLight0.setLevel(level0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(11);
      linkedList0.remove();
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setHeight(1442.97F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      resourceURLContent0.getJAREntryURL();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      Integer integer0 = new Integer((-2146668662));
      Integer.getInteger("", 0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setColor(integer0);
      homeFurnitureGroup1.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup((List<HomePieceOfFurniture>) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      homeFurnitureGroup0.getPrice();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setY(0.0F);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.0F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[1] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1433.127763627909));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer((-1427));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, 2446.9F);
      homeFurnitureGroup0.isMovable();
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.getHeight();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      CatalogLight catalogLight0 = new CatalogLight("", "7hl#'E<1)|^,Z", "7hl#'E<1)|^,Z", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.66424024F, 0.66424024F, (-2.6401193F), 0.66424024F, true, lightSourceArray0, "", (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "7hl#'E<1)|^,Z");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isBottomLeftPointAt(129.0F, (-2047.633F), 2409.0F);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getIcon();
      homeFurnitureGroup1.getModel();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "x<kqEO,}");
      homeFurnitureGroup0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "0", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "0");
      homeFurnitureGroup0.getHeight();
      Integer integer0 = new Integer((-1589));
      homeFurnitureGroup0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource((-2047.633F), 0.0F, 0.0F, 3);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float((-1.439425394567113));
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.6704F));
      homeFurnitureGroup0.setAngle((-1741.6704F));
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.setModelMirrored(true);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setWidth((-2047.633F));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isBottomLeftPointAt(129.0F, (-2047.633F), 2409.0F);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getIcon();
      homeFurnitureGroup1.containsPoint(3.4028235E38F, 2775.0F, 3.4028235E38F);
      homeFurnitureGroup1.getIcon();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Float float1 = new Float(0.0);
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.setX((-5256.3525F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setWidth(2233.5818F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7c:yRFsqJ[{.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(17);
      homeFurnitureGroup0.setHeight(1.0F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7:yRFM/J]J[{`.";
      stringArray0[1] = "7:yRFM/J]J[{`.";
      stringArray0[2] = "com.eteks.sweethome3d.model.HomeFurnitureGroup";
      stringArray0[3] = "7:yRFM/J]J[{`.";
      stringArray0[4] = "com.eteks.sweethome3d.model.HomeFurnitureGroup";
      Long long0 = new Long(0L);
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", stringArray0, long0, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-2916.0F), 0.0F, 0.5F, 1.0F, false, (-1.0F), 15.0F, sashArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0, "Y/,bP");
      catalogLight0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow0);
      Level level0 = new Level("P5o8AjX3TT/Jp2", 0.0F, 0.5F, (-1.0F));
      homeLight0.setLevel(level0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(11);
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setHeight(1442.97F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(11);
      Integer.getInteger(" /S-E-S?g//B1", 11);
      homeFurnitureGroup0.setWidth((-679.865F));
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "R1o,$*p'x+#n{");
      homeFurnitureGroup0.isBottomLeftPointAt(0.0F, 0.3926991F, 0.5F);
      homeFurnitureGroup0.getHeight();
      CatalogTexture catalogTexture0 = new CatalogTexture("", resourceURLContent0, 0.0F, 0.5F, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      linkedList0.offerLast(homeLight1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isBottomLeftPointAt(129.0F, (-2047.633F), 2409.0F);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getIcon();
      homeFurnitureGroup1.setWidth(0.0F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("$VALUES", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("$VALUES", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("$VALUES", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("$VALUES", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("$VALUES", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertTrue(boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "$VALUES");
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]'[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      linkedList0.offerLast(homeLight1);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "7:yRFM/J]'[{`.");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.getPoints();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup1.setDepth(0.9288076F);
      homeFurnitureGroup0.setWidth(0.9288076F);
      homeFurnitureGroup1.setWidth(0.9288076F);
      homeFurnitureGroup1.getPrice();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(11);
      Integer.getInteger(" /S-E-S?g//B1", 0);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setHeight(2757.617F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "xi])Hm39|=7fXR+,1r");
      homeFurnitureGroup0.getCurrency();
      homeFurnitureGroup0.getModel();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      assertNotNull(float0);
      assertEquals(0.5F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      assertNotNull(lightSource0);
      assertEquals(0.5F, lightSource0.getZ(), 0.01F);
      assertEquals(3, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.5F, lightSource0.getY(), 0.01F);
      assertEquals(0.5F, lightSource0.getDiameter(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      assertNotNull(lightSource1);
      assertNull(lightSource1.getDiameter());
      assertEquals((-2047.633F), lightSource1.getZ(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(3, lightSource1.getColor());
      assertEquals((-2047.633F), lightSource1.getY(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      assertNotNull(lightSource2);
      assertEquals((-2047.633F), lightSource2.getZ(), 0.01F);
      assertEquals(3, lightSource2.getColor());
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals(0.0F, lightSource2.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource2.getX(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      assertNotNull(bigDecimal0);
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("7:yRFM/J%yJ[{9`.", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(3, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("7:yRFM/J%yJ[{9`.", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals((-2047.633F), homeLight0.getElevation(), 0.01F);
      assertEquals("7:yRFM/J%yJ[{9`.", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2047.633F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("7:yRFM/J%yJ[{9`.", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals((-2047.633F), homeLight0.getElevation(), 0.01F);
      assertEquals("7:yRFM/J%yJ[{9`.", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2047.633F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean0);
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      assertNotNull(linkedList1);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("QALqG:)b31/TM", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("QALqG:)b31/TM", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.25F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(2047.633F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals("QALqG:)b31/TM", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-2047.633F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.5F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals((-2047.633F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      Content content0 = homeFurnitureGroup1.getIcon();
      assertNull(content0);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("QALqG:)b31/TM", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.25F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(2047.633F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals("QALqG:)b31/TM", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-2047.633F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.5F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals((-2047.633F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setY(1.0F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-3661.548F));
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-3661.548F), (-3661.548F), (-3661.548F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "7:yRFM/J]J[{`.");
      homeFurnitureGroup0.isDoorOrWindow();
      Integer.getInteger("7:yRFM/J]J[{`.", 346);
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setDepth(1795.8732F);
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.setAngle(346);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(3, (-2047.633F), (-2047.633F), 3, float0);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[1] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer((-1435));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, 2446.9F);
      homeFurnitureGroup0.isMovable();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isBottomLeftPointAt(129.0F, (-2047.633F), 2409.0F);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getIcon();
      homeFurnitureGroup1.getFurniture();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      resourceURLContent0.getJAREntryName();
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-2047.633F));
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isBottomLeftPointAt(129.0F, (-2047.633F), 2409.0F);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getIcon();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      linkedList0.offerLast(homeLight1);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "7:yRFM/J]J[{`.");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.getPoints();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup1.setDepth(0.5F);
      homeFurnitureGroup1.setWidth(0.5F);
      homeFurnitureGroup1.isDeformable();
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[15];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 0.0F, 0.0F, 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, 0.0F, 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.5F, false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.setX((-5257.484F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setElevation((-5257.484F));
      homeFurnitureGroup0.setX(0.5F);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.18116198F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[1] = lightSource0;
      Float float1 = new Float(0.0);
      LightSource lightSource1 = new LightSource(0.0F, 0.18116198F, (-2047.633F), 3, float1);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.18116198F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer((-1435));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.containsPoint(0.0F, 0.18116198F, 2446.9F);
      homeFurnitureGroup0.isMovable();
      System.setCurrentTimeMillis(3);
      homeFurnitureGroup0.setDepth((-1435));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-3661.548F));
      BigDecimal bigDecimal0 = new BigDecimal((-3661.548F));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-3661.548F), (-3661.548F), (-3661.548F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "7:yRFM/J]J[{`.");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-3661.548F));
      homeFurnitureGroup1.setAngle((-3661.548F));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      CatalogLight catalogLight0 = new CatalogLight("", "7hl#'E<1)|^,Z", "7hl#'E<1)|^,Z", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.66424024F, 0.66424024F, (-2.6401193F), 0.66424024F, true, lightSourceArray0, "", (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "7hl#'E<1)|^,Z");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getModel();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "7:yRFM/J]J[{`.");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-1.0F));
      homeFurnitureGroup0.intersectsRectangle((-1.0F), (-2047.633F), 359.747F, 359.747F);
      homeFurnitureGroup1.setAngle((-2047.633F));
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(0.0F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.setX((-5257.484F));
      homeFurnitureGroup0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("$VALUES", 0.0F, 2191.0F, (-2945.4778F));
      homeLight0.setLevel(level0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-1.0F));
      homeFurnitureGroup0.setX(1547.0183F);
      homeFurnitureGroup0.intersectsRectangle((-1.0F), (-2047.633F), 359.747F, 359.747F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.setAngle((-1741.512F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.setY(0.0F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float(0.66424024F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.66424024F, 0.66424024F, (-2.6401193F), 0.66424024F, true, lightSourceArray0, "", (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getFurniture();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, 0.5F, 3);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getValueAddedTaxPercentage();
      homeFurnitureGroup1.setDepth(0.0F);
      homeFurnitureGroup0.isDeformable();
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-1.0F));
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup1.getValueAddedTaxPercentage();
      homeFurnitureGroup1.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setX(0.0F);
      homeFurnitureGroup1.setAngle(1155.6F);
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup1.setModelMirrored(false);
      homeFurnitureGroup1.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setNameAngle(0.0F);
      Integer integer0 = Integer.getInteger("O]<D&:Baw}", 3);
      homeFurnitureGroup1.setColor(integer0);
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.containsPoint((-5574.9585F), (-5574.9585F), (-2047.633F));
      homeFurnitureGroup2.isMovable();
      homeFurnitureGroup1.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0F);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 0.0F, 3, float0);
      LightSource lightSource1 = new LightSource(0.0F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setAngle((-1741.512F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setDepth(0.0F);
      homeFurnitureGroup0.isResizable();
      homeFurnitureGroup0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[10];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.setAngle((-1741.512F));
      homeFurnitureGroup0.setElevation(3);
      homeFurnitureGroup0.setX(0.0F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "7:yRFM/J]J[{`.");
      Integer integer0 = new Integer((-2133848830));
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = Integer.getInteger("7:yRFM/J]J[{`.", 0);
      homeFurnitureGroup0.setColor(integer0);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.containsPoint(0.5F, 0.5F, 0.9288076F);
      homeFurnitureGroup1.isMovable();
      homeFurnitureGroup0.getWidth();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.5F, 0.0F, 3, 3);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.setAngle((-1741.512F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-2.6401193F));
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-2.6401193F), (-2.6401193F), 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(14);
      Integer.getInteger(" /S-E-S?g//B1", 14);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setModelMirrored(false);
      homeFurnitureGroup0.isBackFaceShown();
      homeFurnitureGroup0.setDepth(0.5F);
      homeFurnitureGroup0.isDeformable();
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.setDepth((-2901.5977F));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource((-0.49415946F), 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Float float1 = new Float(0.0);
      LightSource lightSource1 = new LightSource(0.0F, (-0.49415946F), (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-0.49415946F), 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.setX((-5256.3525F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setWidth(2233.5818F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(11);
      Integer integer1 = Integer.getInteger(" /S-E-S?g//B1", 0);
      homeFurnitureGroup0.setColor(integer1);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.containsPoint(0.5F, 0.5F, 0.9288076F);
      homeFurnitureGroup1.isMovable();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource((-2144.748F), 2303.5F, 3.4028235E38F, 2545);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2303.5F;
      floatArray1[1] = (-1258.6077F);
      floatArray1[2] = (-2144.748F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 1.0F;
      floatArray2[1] = (-2144.748F);
      floatArray2[2] = 2.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 1.0F;
      floatArray3[1] = (float) 2545;
      floatArray3[2] = 2.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = (float) 2545;
      floatArray4[1] = 2303.5F;
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = new BigDecimal((long) 2545);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, 2303.5F, 2303.5F, 2303.5F, 2303.5F, true, lightSourceArray0, "", floatArray0, "#rQUHF#K2Z#D]i", false, false, false, bigDecimal0, bigDecimal1, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      linkedList0.add((HomePieceOfFurniture) homeLight1);
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray1 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal2 = new BigDecimal((-1431.463));
      CatalogLight catalogLight1 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray1, (float[][]) null, "", true, true, true, bigDecimal2, bigDecimal2);
      HomeLight homeLight2 = new HomeLight(catalogLight1);
      linkedList0.offerLast(homeLight2);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((double) 0.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.5F, 3, 0.0F, 3);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float0);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "7:yRFM/J%yJ[{9`.");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.offerLast(homeLight1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2496);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.66424024F);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      CatalogLight catalogLight0 = new CatalogLight(";q{EGS0u>QIpy*", "", "<'1R98v2mC*<~q", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.66424024F, 0.66424024F, (-2.6401193F), 0.66424024F, true, lightSourceArray0, "", (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "<'1R98v2mC*<~q");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, ";q{EGS0u>QIpy*");
      linkedList0.addLast(homeLight0);
      homeFurnitureGroup0.setDepth(0.5F);
      homeFurnitureGroup0.setWidth(0.66424024F);
      homeFurnitureGroup0.getWidth();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.66424024F);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.66424024F, 0.66424024F, 0.66424024F, (-3460.0F), 1621.106F);
      sashArray0[0] = sash0;
      Integer integer0 = new Integer((-24));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", resourceURLContent0, resourceURLContent0, 0.66424024F, 1.0F, 3.3858732E-35F, 1621.106F, true, (-3460.0F), 3.3858732E-35F, sashArray0, integer0, (float[][]) null, false, 1.0F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(0.66424024F);
      homeFurnitureGroup0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7c:yRFsqJ[{.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2496);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.setAngle((-1741.512F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.isMovable();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(6.630564336598255);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2045.7736F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      linkedList0.remove();
      homeFurnitureGroup0.setDepth((-2273.6F));
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setWidth((-2045.7736F));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(1.8576152F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Float float1 = new Float(0.0);
      LightSource lightSource1 = new LightSource(0.0F, 1.8576152F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.8576152F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.setX((-5256.3525F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setWidth(2233.5818F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2045.7736F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.intersectsRectangle(3570.474F, 1.0F, 0.0F, (-2045.7736F));
      linkedList0.remove();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isBottomLeftPointAt(129.0F, (-2047.633F), 2409.0F);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.setDepth(3.0F);
      homeFurnitureGroup0.isResizable();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setDepth(0.0F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[1] = lightSource0;
      Float float1 = new Float(0.0);
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource1;
      resourceURLContent0.getJAREntryName();
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX(3);
      homeFurnitureGroup0.setAngle(1115.0775F);
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.getDepth();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "9l;CoLs&&");
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.setDepth(0.0F);
      homeFurnitureGroup0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "7:yRFM/J]J[{`.");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation(0.0F);
      homeFurnitureGroup1.setAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash(0.8618414F, 0.8618414F, (-589.8922F), (-1.0F), (-2047.633F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1741.6704F), (-2047.633F), 1290.3F, (-279.93875F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-2656.302F), 1916.715F, (-264.11417F), (-589.8922F), (-2047.633F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-264.11417F), 0.3926991F, (-264.11417F), 2233.5818F, (-4318.02F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-589.8922F), 0.8618414F, 2233.5818F, 0.0F, 0.0F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(3.0F, (-1.0F), 0.8618414F, 0.5F, (-1741.6704F));
      sashArray0[5] = sash5;
      Sash sash6 = new Sash((-264.11417F), 0.0F, (-589.8922F), 1.8576152F, (-279.93875F));
      sashArray0[6] = sash6;
      Sash sash7 = new Sash(451.036F, (-1223.0F), (-2656.302F), (-1223.0F), (-2047.633F));
      sashArray0[7] = sash7;
      BigDecimal bigDecimal1 = new BigDecimal(529L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.8618414F, (-2047.633F), 277.9F, (-2047.633F), true, 0.3926991F, 0.0F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      catalogDoorOrWindow0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isBottomLeftPointAt(129.0F, (-2047.633F), 2409.0F);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getIcon();
      homeFurnitureGroup1.isResizable();
      homeFurnitureGroup0.isResizable();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7c:yRFsqJ[{.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2496);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getWidth();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, 0.5F, 3);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup1.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      homeFurnitureGroup2.getValueAddedTaxPercentage();
      homeFurnitureGroup2.setDepth(0.0F);
      homeFurnitureGroup2.isResizable();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "$VALUES");
      homeFurnitureGroup0.setDepth(6);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.5F, 3, 0.0F, 3);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float0);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.setWidth((-2047.633F));
      homeFurnitureGroup0.getCurrency();
      homeFurnitureGroup0.setModelMirrored(false);
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7c:yRFsqJ[{.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2496);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[19];
      Float float0 = new Float(467.7181F);
      BigDecimal bigDecimal0 = new BigDecimal(467.7181F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 467.7181F, 467.7181F, 467.7181F, 467.7181F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(15);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float((double) 0.5F);
      resourceURLContent0.getJAREntryName();
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("P5o8AjX3TT/Jp2", 0.0F, 0.5F, (-1.0F));
      level0.setName((String) null);
      homeLight0.setLevel(level0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(11);
      linkedList0.remove();
      Integer integer1 = Integer.getInteger(" /S-E-S?g//B1", 0);
      homeFurnitureGroup0.setColor(integer1);
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setDepth(0);
      Integer integer2 = new Integer(0);
      homeFurnitureGroup0.setColor(integer2);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      resourceURLContent0.getJAREntryURL();
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = new BigDecimal((-1431.2661500367517));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.31425288F, 0.31425288F, 0.31425288F, 0.31425288F, false, lightSourceArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      Level level0 = new Level("P5o8AjX3TT/Jp2", 0.31425288F, 0.31425288F, 0.31425288F);
      homeLight0.setLevel(level0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(11);
      Integer integer1 = new Integer(11);
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, " /S-E-S?g//B1");
      homeFurnitureGroup1.getHeight();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.getTexture();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.setTexture((HomeTexture) null);
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup2.setHeight((-156.0F));
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup1.getDepth();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.66424024F);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      BigDecimal bigDecimal1 = new BigDecimal((-84.0));
      resourceURLContent0.getJAREntryName();
      CatalogLight catalogLight0 = new CatalogLight("", "", "!/", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.66424024F, 0.0F, 1398.0786F, 0.66424024F, false, lightSourceArray0, (float[][]) null, "|+R1M,e.,$82", true, true, true, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.offerLast(homeLight0);
      linkedList0.spliterator();
      Integer.getInteger("!/", 15);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "Application Data");
      homeFurnitureGroup0.setWidth((-452.2347F));
      homeFurnitureGroup0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.setHeight(0.0F);
      CatalogTexture catalogTexture0 = new CatalogTexture("7:yRFM/J]J[{`.", (Content) null, 0.0F, (-875.246F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.5F, 3, 0.0F, 3);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float0);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.setWidth((-2047.633F));
      homeFurnitureGroup0.getWidth();
      homeFurnitureGroup0.isMovable();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-3661.548F));
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-3661.548F), (-3661.548F), 1.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "7:yRFM/J]J[{`.");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-1.0F));
      homeFurnitureGroup0.intersectsRectangle((-1.0F), 1.0F, 359.747F, 359.747F);
      homeFurnitureGroup1.setAngle(1.0F);
      homeFurnitureGroup1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.66424024F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      CatalogLight catalogLight0 = new CatalogLight("", "", "\"[)0", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.66424024F, 0.66424024F, (-2.6401193F), 0.66424024F, true, lightSourceArray0, "", (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "\"[)0");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Random.setNextRandom((-135));
      homeFurnitureGroup0.getHeight();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7c:yRFsqJ[{.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2496);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getPrice();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      CatalogLight catalogLight0 = new CatalogLight("", "U=(s%CIR3*~xR", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-5257.484F), (-3277.4294F), 0.0F, true, lightSourceArray0, (float[][]) null, "@ZNRCnoj", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomeTexture");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation(393.84213F);
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup1.getValueAddedTaxPercentage();
      homeFurnitureGroup1.setModelMirrored(true);
      homeFurnitureGroup1.setWidth(1216.53F);
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup1.clone();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0F);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 0.0F, 3, float0);
      LightSource lightSource1 = new LightSource(0.0F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setAngle((-1741.512F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.setY(0.0F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.5F, 3, 0.0F, 3);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float0);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.setElevation(3);
      homeFurnitureGroup0.setX((-2047.633F));
      homeFurnitureGroup0.intersectsRectangle(2233.5818F, 3, 359.747F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7c:yRFsqJ[{.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = new BigDecimal((-853L));
      BigDecimal bigDecimal2 = new BigDecimal(1221);
      CatalogLight catalogLight1 = new CatalogLight("`4xG36q`R ;8", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.5F, 2561.096F, 0.5F, 2.0F, true, lightSourceArray0, "", (float[][]) null, "7:yRFM/J]J[{`.", true, false, true, bigDecimal1, bigDecimal1, "[[Z^Z&Q;[r9E");
      bigDecimal0.signum();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight1);
      linkedList0.offerLast(homeLight1);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(1221);
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getDepth();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.5266047F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.5266047F, 0.5F, 3);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7yRF&(M/%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.5266047F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 278.5F, 0.25F, 0.5266047F, 2233.5818F, false, 278.5F, 0.25F, (Sash[]) null, (float[][]) null, " Mws\"?e1%", false, true, false, bigDecimal0, bigDecimal1, "UzJ");
      catalogDoorOrWindow0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setNameAngle(37.0F);
      homeFurnitureGroup1.getValueAddedTaxPercentage();
      homeFurnitureGroup1.setDepth(0.0F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2045.7736F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = new BigDecimal((-257L));
      bigDecimal0.add(bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation(0.5F);
      homeFurnitureGroup1.getHeight();
      homeFurnitureGroup1.getValueAddedTaxPercentage();
      homeFurnitureGroup1.setModelMirrored(true);
      homeFurnitureGroup0.setWidth((-679.865F));
      homeFurnitureGroup0.setHeight(2045.7736F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7c:yRFsqJ[{.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      Level level0 = new Level("7c:yRFsqJ[{.", 0.0F, 2496, 0.0F);
      homeLight0.setLevel(level0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "x<kqEO,}");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      Integer integer0 = new Integer((-628));
      Integer.getInteger("7:yRFM/J]J[{`.", 15);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "7:yRFM/J]J[{`.");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setWidth(2716.206F);
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.setWidth(0.0F);
      homeFurnitureGroup1.getFurniture();
      homeFurnitureGroup0.getFurniture();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.eteks.sweethome3d.model.HomeFurnitureGroup";
      stringArray0[1] = "Nv@}YbnPK=R^i-SWQY";
      stringArray0[2] = "com.eteks.sweethome3d.model.HomeFurnitureGroup";
      stringArray0[3] = "com.eteks.sweethome3d.model.HomeFurnitureGroup";
      Long long0 = new Long(199L);
      CatalogLight catalogLight0 = new CatalogLight("&O9&p~]Y*1Juowc", "Nv@}YbnPK=R^i-SWQY", "", "com.eteks.sweethome3d.model.HomeFurnitureGroup", stringArray0, long0, (Float) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 199L, (-3154.0F), 0.0F, 3384.7793F, false, lightSourceArray0, "&O9&p~]Y*1Juowc", (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      Integer integer0 = new Integer((-3693));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 3384.7793F, (-1.0F), (-1.0F), 0.0F, false, integer0, (float[][]) null, true, (-194.8416F), false);
      catalogLight0.compareTo(catalogPieceOfFurniture0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Nv@}YbnPK=R^i-SWQY");
      Integer integer1 = new Integer((-2940));
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setColor(integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[15];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX(0.0F);
      homeFurnitureGroup0.setX((-5257.484F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setElevation((-5257.484F));
      homeFurnitureGroup0.setX(0.5F);
      homeFurnitureGroup0.setElevation((-5257.484F));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      LightSource lightSource1 = new LightSource(0.5F, (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.setAngle((-1741.512F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "QALqG:)b31/TM");
      homeFurnitureGroup0.containsPoint(0.0F, 129.0F, (-2047.633F));
      homeFurnitureGroup0.setHeight(0.5F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", resourceURLContent0, resourceURLContent0, 1.9775257E-36F, 0.66424024F, 1.9775257E-36F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      CatalogLight catalogLight0 = new CatalogLight("", "", "\"[)0", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.66424024F, 0.66424024F, (-2.6401193F), 0.66424024F, true, lightSourceArray0, "", (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "\"[)0");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(0.66424024F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-7.2126746F));
      LightSource lightSource0 = new LightSource((-7.2126746F), 3, 1115.0775F, 3);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-7.2126746F), (-2047.633F), (-2047.633F), 3);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 1115.0775F, (-2047.633F), 3, float0);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1115.0775F, (-7.2126746F), (-7.2126746F), (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isPointAt(0.0F, (-1741.512F), 3);
      homeFurnitureGroup0.setWidth((-2047.633F));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((double) 0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7c:yRFI/s]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      linkedList0.add(homePieceOfFurniture0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      Integer integer0 = new Integer(15);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, (String) null, resourceURLContent0, 15, 299.696F, "");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
      HomeTexture homeTexture1 = new HomeTexture(catalogTexture0);
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setTexture(homeTexture1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-3661.548F));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3628.36F, (-3661.548F), (-3661.548F), (-3661.548F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      linkedList0.offerLast(homeLight0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n.;{E3,a");
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "/mEHs9U,~Y'_Yx>T)P");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[8];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-1.3148713F), (-1.3148713F), 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer((-6298));
      homeFurnitureGroup0.setY(358.698F);
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      lightSourceArray0[1] = lightSource0;
      Float float1 = new Float(0.0);
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource1;
      resourceURLContent0.getJAREntryName();
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX(3);
      homeFurnitureGroup0.setAngle(0.0F);
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      linkedList0.offerLast(homeLight1);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "7:yRFM/J]J[{`.");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.getPoints();
      homeFurnitureGroup1.getPoints();
      homeFurnitureGroup1.setDepth(3000.0F);
      homeFurnitureGroup0.setWidth((-5256.3525F));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-799.34375F));
      LightSource lightSource0 = new LightSource(0.0F, (-799.34375F), (-799.34375F), 3, float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Float float1 = new Float(0.0);
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      lightSourceArray0[2] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-799.34375F), (-799.34375F), (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      homeFurnitureGroup0.setX((-1741.512F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.setX((-5256.3525F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setWidth(2233.5818F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.66424024F);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      CatalogLight catalogLight0 = new CatalogLight(";q{EGS0u>QIpy*", "", "<'1R98v2mC*<~q", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.66424024F, 0.66424024F, (-2.6401193F), 0.66424024F, true, lightSourceArray0, "", (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "<'1R98v2mC*<~q");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, ";q{EGS0u>QIpy*");
      homeFurnitureGroup0.setDepth(0.5F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      linkedList0.offerLast(homeLight1);
      linkedList0.spliterator();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup1.setDepth(3000.0F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      resourceURLContent0.getJAREntryURL();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "QALqG:)b31/TM");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-1.0F));
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.setColor((Integer) null);
      homeFurnitureGroup2.getValueAddedTaxPercentage();
      homeFurnitureGroup1.setDepth((-1.0F));
      homeFurnitureGroup1.getPrice();
      homeFurnitureGroup2.getModel();
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup2.isMovable());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-799.34375F));
      assertNotNull(float0);
      assertEquals((-799.34375F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-5.4461746F), (-799.34375F), (-799.34375F), 3, float0);
      assertNotNull(lightSource0);
      assertEquals(3, lightSource0.getColor());
      assertEquals((-5.4461746F), lightSource0.getX(), 0.01F);
      assertEquals((-799.34375F), lightSource0.getY(), 0.01F);
      assertEquals((-799.34375F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-799.34375F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-5.4461746F), (-2047.633F), 3, float1);
      assertNotNull(lightSource1);
      assertEquals((-2047.633F), lightSource1.getZ(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-5.4461746F), lightSource1.getY(), 0.01F);
      assertEquals(3, lightSource1.getColor());
      assertEquals(0.0F, lightSource1.getDiameter(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[2] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-5.4461746F), (-799.34375F), (-799.34375F), (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals((-799.34375F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("7:yRFM/J%yJ[{9`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-5.4461746F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-799.34375F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(3, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals((-799.34375F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("7:yRFM/J%yJ[{9`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-5.4461746F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-799.34375F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2.7230873F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-399.67188F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-799.34375F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2047.633F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2047.633F), homeLight0.getElevation(), 0.01F);
      assertEquals("7:yRFM/J%yJ[{9`.", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-5.4461746F), homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-799.34375F), homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals((-799.34375F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("7:yRFM/J%yJ[{9`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-5.4461746F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-799.34375F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2.7230873F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-399.67188F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-799.34375F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2047.633F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2047.633F), homeLight0.getElevation(), 0.01F);
      assertEquals("7:yRFM/J%yJ[{9`.", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-5.4461746F), homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-799.34375F), homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "f9qLdtW\"G4<QgFnXl");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("f9qLdtW\"G4<QgFnXl", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      homeFurnitureGroup0.setX((-1741.512F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1741.512F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("f9qLdtW\"G4<QgFnXl", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      boolean boolean1 = homeFurnitureGroup0.isDoorOrWindow();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1741.512F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("f9qLdtW\"G4<QgFnXl", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      homeFurnitureGroup0.setX((-5256.3525F));
      assertEquals(1, linkedList0.size());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("f9qLdtW\"G4<QgFnXl", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      boolean boolean2 = homeFurnitureGroup0.isTexturable();
      assertEquals(1, linkedList0.size());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("f9qLdtW\"G4<QgFnXl", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      homeFurnitureGroup0.setWidth(2233.5818F);
      assertEquals(1, linkedList0.size());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(2233.5818F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals("f9qLdtW\"G4<QgFnXl", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[19];
      Float float0 = new Float(467.7181F);
      assertNotNull(float0);
      assertEquals(467.7181F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(467.7181F);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-45), bigDecimal0.byteValue());
      assertEquals((short)467, bigDecimal0.shortValue());
      
      boolean boolean0 = linkedList0.removeLastOccurrence((Object) null);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 467.7181F, 467.7181F, 467.7181F, 467.7181F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte) (-45), bigDecimal0.byteValue());
      assertEquals((short)467, bigDecimal0.shortValue());
      assertEquals("", catalogLight0.getId());
      assertEquals(467.7181F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(467.7181F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(467.7181F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(467.7181F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(19, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte) (-45), bigDecimal0.byteValue());
      assertEquals((short)467, bigDecimal0.shortValue());
      assertEquals("", catalogLight0.getId());
      assertEquals(467.7181F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(467.7181F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(467.7181F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(467.7181F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(467.7181F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(233.85905F, homeLight0.getY(), 0.01F);
      assertEquals(233.85905F, homeLight0.getX(), 0.01F);
      assertEquals(467.7181F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(467.7181F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(467.7181F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(467.7181F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(19, lightSourceArray0.length);
      
      boolean boolean1 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte) (-45), bigDecimal0.byteValue());
      assertEquals((short)467, bigDecimal0.shortValue());
      assertEquals("", catalogLight0.getId());
      assertEquals(467.7181F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(467.7181F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(467.7181F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(467.7181F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(467.7181F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(233.85905F, homeLight0.getY(), 0.01F);
      assertEquals(233.85905F, homeLight0.getX(), 0.01F);
      assertEquals(467.7181F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(467.7181F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(467.7181F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(467.7181F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(19, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(233.85905F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(233.85905F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(467.7181F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(467.7181F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(467.7181F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(467.7181F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(467.7181F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      
      homeFurnitureGroup0.setHeight(0.9288076F);
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(233.85905F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(233.85905F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(467.7181F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(467.7181F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(467.7181F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(467.7181F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.9288076F, homeFurnitureGroup0.getHeight(), 0.01F);
      
      homeFurnitureGroup0.setWidth(15);
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(15.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(233.85905F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(233.85905F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(467.7181F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(467.7181F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(467.7181F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.9288076F, homeFurnitureGroup0.getHeight(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPrice();
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(15.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(233.85905F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(233.85905F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(467.7181F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(467.7181F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(467.7181F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.9288076F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((byte) (-45), bigDecimal1.byteValue());
      assertEquals((short)467, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-3661.548F));
      assertNotNull(float0);
      assertEquals((-3661.548F), (float)float0, 0.01F);
      
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      assertNotNull(bigDecimal0);
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-3661.548F), (-3661.548F), (-3661.548F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3661.548F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals((-3661.548F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3661.548F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(3, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3661.548F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals((-3661.548F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3661.548F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3661.548F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-3661.548F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3661.548F), homeLight0.getElevation(), 0.01F);
      assertEquals((-3661.548F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getDescription());
      assertEquals((-1830.774F), homeLight0.getY(), 0.01F);
      assertEquals(3, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3661.548F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals((-3661.548F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3661.548F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3661.548F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-3661.548F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3661.548F), homeLight0.getElevation(), 0.01F);
      assertEquals((-3661.548F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getDescription());
      assertEquals((-1830.774F), homeLight0.getY(), 0.01F);
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean0);
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      assertNotNull(linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "7:yRFM/J]J[{`.");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-3661.548F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-3661.548F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3661.548F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean1 = homeFurnitureGroup0.isDoorOrWindow();
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-3661.548F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-3661.548F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3661.548F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(boolean1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-3661.548F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-3661.548F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3661.548F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-3661.548F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals((-3661.548F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(3661.548F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setElevation((-3661.548F));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-3661.548F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-3661.548F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3661.548F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-3661.548F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals((-3661.548F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(3661.548F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      boolean boolean2 = homeFurnitureGroup0.intersectsRectangle((-1.0F), 0.0F, 359.747F, 359.747F);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-3661.548F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-3661.548F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3661.548F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(boolean2);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      homeFurnitureGroup1.setAngle((-3661.548F));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-3661.548F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-3661.548F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3661.548F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(1.5489384F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-3661.548F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals((-3661.548F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(3661.548F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      BigDecimal bigDecimal1 = homeFurnitureGroup1.getPrice();
      assertNotNull(bigDecimal1);
      assertNotSame(linkedList0, linkedList1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)105, bigDecimal1.byteValue());
      assertEquals((short) (-1431), bigDecimal1.shortValue());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-3661.548F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-3661.548F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3661.548F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(1.5489384F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-3661.548F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals((-3661.548F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(3661.548F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      Content content0 = homeFurnitureGroup1.getIcon();
      assertNull(content0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-3661.548F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-3661.548F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3661.548F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(1.5489384F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-3661.548F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals((-3661.548F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(3661.548F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      Content content1 = homeFurnitureGroup1.getModel();
      assertNull(content1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-3661.548F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-3661.548F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3661.548F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(1.5489384F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-3661.548F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals((-3661.548F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(3661.548F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      assertNotNull(float0);
      assertEquals(0.5F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2045.7736F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-2045.7736F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(3, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-2045.7736F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2045.7736F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2045.7736F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(3, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-2045.7736F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2045.7736F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2045.7736F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean0);
      
      Spliterator<HomePieceOfFurniture> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, linkedList0.size());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2045.7736F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-2045.7736F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2045.7736F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2045.7736F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-2045.7736F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2045.7736F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.25F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2045.7736F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals((-2045.7736F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertEquals((-2045.7736F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setElevation(0.5F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2045.7736F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-2045.7736F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2045.7736F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.25F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2045.7736F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      float float2 = homeFurnitureGroup1.getHeight();
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2045.7736F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-2045.7736F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2045.7736F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.25F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2045.7736F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(2045.7736F, float2, 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      BigDecimal bigDecimal1 = homeFurnitureGroup1.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2045.7736F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-2045.7736F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2045.7736F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.25F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2045.7736F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals((byte)105, bigDecimal1.byteValue());
      assertEquals((short) (-1431), bigDecimal1.shortValue());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setModelMirrored(true);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2045.7736F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-2045.7736F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2045.7736F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.25F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2045.7736F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      assertTrue(boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertNull(string0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "$VALUES", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("$VALUES", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("$VALUES", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("$VALUES", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("$VALUES", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("$VALUES", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(1, lightSourceArray0.length);
      assertTrue(boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "$VALUES");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals("$VALUES", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      
      Content content0 = homeFurnitureGroup0.getPlanIcon();
      assertNull(content0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals("$VALUES", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      assertNotNull(float0);
      assertEquals(0.5F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 0.5F, 0.5F, 3, float0);
      assertNotNull(lightSource0);
      assertEquals(0.5F, lightSource0.getZ(), 0.01F);
      assertEquals(3, lightSource0.getColor());
      assertEquals(0.5F, lightSource0.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-2047.633F), (-2047.633F), 3);
      assertNotNull(lightSource1);
      assertEquals((-2047.633F), lightSource1.getZ(), 0.01F);
      assertEquals(3, lightSource1.getColor());
      assertEquals((-2047.633F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, (-2047.633F), 3, float1);
      assertNotNull(lightSource2);
      assertEquals((-2047.633F), lightSource2.getZ(), 0.01F);
      assertEquals(3, lightSource2.getColor());
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals(0.0F, lightSource2.getX(), 0.01F);
      assertEquals(0.0F, lightSource2.getDiameter(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      
      lightSourceArray0[1] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal((-1433.127763627909));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1433), bigDecimal0.shortValue());
      assertEquals((byte)103, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J%yJ[{9`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, false, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1433), bigDecimal0.shortValue());
      assertEquals((byte)103, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals("7:yRFM/J%yJ[{9`.", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(3, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1433), bigDecimal0.shortValue());
      assertEquals((byte)103, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals("7:yRFM/J%yJ[{9`.", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("7:yRFM/J%yJ[{9`.", homeLight0.getDescription());
      assertEquals((-2047.633F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-2047.633F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1433), bigDecimal0.shortValue());
      assertEquals((byte)103, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals("7:yRFM/J%yJ[{9`.", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("7:yRFM/J%yJ[{9`.", homeLight0.getDescription());
      assertEquals((-2047.633F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-2047.633F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean0);
      
      Spliterator<HomePieceOfFurniture> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, linkedList0.size());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1, linkedList0.size());
      
      Integer integer0 = new Integer((-1427));
      assertNotNull(integer0);
      assertEquals((-1427), (int)integer0);
      
      homeFurnitureGroup0.setColor(integer0);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1427), (int)homeFurnitureGroup0.getColor());
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = homeFurnitureGroup0.isBackFaceShown();
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1427), (int)homeFurnitureGroup0.getColor());
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = homeFurnitureGroup0.isMovable();
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1427), (int)homeFurnitureGroup0.getColor());
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      LightSource[] lightSourceArray0 = new LightSource[8];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-1.3148713F), (-1.3148713F), 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(8, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1.3148713F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.65743566F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.3148713F), homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(8, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1.3148713F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.65743566F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.3148713F), homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(8, lightSourceArray0.length);
      assertTrue(boolean0);
      
      Spliterator<HomePieceOfFurniture> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, linkedList0.size());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      
      Integer integer0 = new Integer((-6298));
      assertNotNull(integer0);
      assertEquals((-6298), (int)integer0);
      
      homeFurnitureGroup0.setX((-6298));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-6298.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-6298.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      
      boolean boolean1 = homeFurnitureGroup0.isDoorOrWindow();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-6298.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-6298.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "k.]+Pra", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.4028235E38F, (-1361.4F), (-1361.4F), (-1408.0F), false, lightSourceArray0, "KU}foc", (float[][]) null, "", true, false, false, bigDecimal0, bigDecimal0, "KU}foc");
      assertNotNull(catalogLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("KU}foc", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals(3.4028235E38F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1361.4F), catalogLight0.getHeight(), 0.01F);
      assertEquals("k.]+Pra", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("KU}foc", catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1408.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1361.4F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(3, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("KU}foc", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals(3.4028235E38F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1361.4F), catalogLight0.getHeight(), 0.01F);
      assertEquals("k.]+Pra", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("KU}foc", catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1408.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1361.4F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-680.7F), homeLight0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1408.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("KU}foc", homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals((-1408.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1361.4F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("k.]+Pra", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeLight0.getX(), 0.01F);
      assertEquals("KU}foc", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1361.4F), homeLight0.getDepth(), 0.01F);
      assertEquals(3, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("KU}foc", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals(3.4028235E38F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1361.4F), catalogLight0.getHeight(), 0.01F);
      assertEquals("k.]+Pra", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("KU}foc", catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1408.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1361.4F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-680.7F), homeLight0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1408.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("KU}foc", homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals((-1408.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1361.4F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("k.]+Pra", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeLight0.getX(), 0.01F);
      assertEquals("KU}foc", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1361.4F), homeLight0.getDepth(), 0.01F);
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      CatalogLight catalogLight1 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal1, bigDecimal1);
      assertNotNull(catalogLight1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertEquals("", catalogLight1.getId());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertFalse(catalogLight1.isModifiable());
      assertNull(catalogLight1.getCreationDate());
      assertEquals("", catalogLight1.getCreator());
      assertEquals("", catalogLight1.getDescription());
      assertNull(catalogLight1.getCurrency());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertFalse(catalogLight1.isBackFaceShown());
      assertTrue(catalogLight1.isResizable());
      assertFalse(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getInformation());
      assertNull(catalogLight1.getColor());
      assertTrue(catalogLight1.isProportional());
      assertEquals("", catalogLight1.getName());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertTrue(catalogLight1.isTexturable());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertNull(catalogLight1.getGrade());
      assertEquals(3, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      
      HomeLight homeLight1 = new HomeLight(catalogLight1);
      assertNotNull(homeLight1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertEquals("", catalogLight1.getId());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertFalse(catalogLight1.isModifiable());
      assertNull(catalogLight1.getCreationDate());
      assertEquals("", catalogLight1.getCreator());
      assertEquals("", catalogLight1.getDescription());
      assertNull(catalogLight1.getCurrency());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertFalse(catalogLight1.isBackFaceShown());
      assertTrue(catalogLight1.isResizable());
      assertFalse(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getInformation());
      assertNull(catalogLight1.getColor());
      assertTrue(catalogLight1.isProportional());
      assertEquals("", catalogLight1.getName());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertTrue(catalogLight1.isTexturable());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertNull(catalogLight1.getGrade());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(3, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      boolean boolean1 = linkedList0.offerLast(homeLight1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(catalogLight1, catalogLight0);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight1.getWidth(), 0.01F);
      assertEquals("", catalogLight1.getId());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertFalse(catalogLight1.isModifiable());
      assertNull(catalogLight1.getCreationDate());
      assertEquals("", catalogLight1.getCreator());
      assertEquals("", catalogLight1.getDescription());
      assertNull(catalogLight1.getCurrency());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertFalse(catalogLight1.isBackFaceShown());
      assertTrue(catalogLight1.isResizable());
      assertFalse(catalogLight1.isMovable());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getInformation());
      assertNull(catalogLight1.getColor());
      assertTrue(catalogLight1.isProportional());
      assertEquals("", catalogLight1.getName());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertTrue(catalogLight1.isTexturable());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertNull(catalogLight1.getGrade());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1408.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1408.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-1408.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      
      Content content0 = homeFurnitureGroup0.getIcon();
      assertNull(content0);
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1408.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1408.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-1408.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      
      homeFurnitureGroup0.setHeight(0.0F);
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1408.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-1408.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[8];
      Float float0 = new Float((-1.3148713F));
      assertNotNull(float0);
      assertEquals((-1.3148713F), (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-1.3148713F), (-1.3148713F), 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getDepth(), 0.01F);
      assertEquals(8, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getDescription());
      assertEquals((-0.65743566F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1.3148713F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.3148713F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(8, lightSourceArray0.length);
      
      homeLight0.setDescription("work");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals((-0.65743566F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1.3148713F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("work", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.3148713F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(8, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1.3148713F), catalogLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals((-0.65743566F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1.3148713F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("work", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.3148713F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(8, lightSourceArray0.length);
      assertTrue(boolean0);
      
      Spliterator<HomePieceOfFurniture> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, linkedList0.size());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      
      Integer integer0 = new Integer((-6298));
      assertNotNull(integer0);
      assertEquals((-6298), (int)integer0);
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      
      homeFurnitureGroup0.setHeight((-1464.246F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1464.246F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      assertNotNull(float0);
      assertEquals(0.5F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(3, lightSourceArray0.length);
      
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      float[][] floatArray0 = new float[7][2];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (-480.6F);
      floatArray1[1] = (float) 46;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) 46;
      floatArray1[4] = (-2047.633F);
      floatArray1[5] = 0.5F;
      floatArray1[6] = (-2047.633F);
      floatArray1[7] = (float) 46;
      floatArray1[8] = (-480.6F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 46;
      floatArray2[1] = (-2047.633F);
      floatArray2[2] = 0.5F;
      floatArray2[3] = (-2047.633F);
      floatArray2[4] = 0.5F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.5F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.5F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (float) 46;
      floatArray3[5] = 0.0F;
      floatArray3[6] = (float) 46;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 3054.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-2047.633F);
      floatArray4[3] = (-2047.633F);
      floatArray4[4] = 0.25F;
      floatArray4[5] = (-2047.633F);
      floatArray4[6] = (-480.6F);
      floatArray4[7] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[8];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 3054.0F;
      floatArray5[1] = 0.25F;
      floatArray5[2] = (-480.6F);
      floatArray5[3] = 0.0F;
      floatArray5[4] = (-2047.633F);
      floatArray5[5] = (-480.6F);
      floatArray5[6] = (-480.6F);
      floatArray5[7] = 0.5F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray5));
      
      floatArray6[0] = (float) 46;
      floatArray6[1] = (-2047.633F);
      floatArray6[2] = (-2047.633F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray3));
      
      floatArray7[0] = (-2047.633F);
      floatArray7[1] = 0.0F;
      floatArray7[2] = 1171.27F;
      floatArray7[3] = 0.0F;
      floatArray7[4] = 0.0F;
      floatArray7[5] = 704.25104F;
      floatArray7[6] = (-2047.633F);
      floatArray0[6] = floatArray7;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.5F, (-480.6F), 0.5F, 0.0F, true, true, integer0, floatArray0, true, (-334.8F), true);
      assertNotNull(catalogPieceOfFurniture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.5F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-334.8F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-480.6F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.5F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(46, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(7, floatArray0.length);
      
      int int0 = catalogLight0.compareTo(catalogPieceOfFurniture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.5F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-334.8F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-480.6F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.5F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(46, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(3, lightSourceArray0.length);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getDescription());
      assertEquals((-2047.633F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2047.633F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3, lightSourceArray0.length);
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-2047.633F), catalogLight0.getElevation(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getDescription());
      assertEquals((-2047.633F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2047.633F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean0);
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      assertNotNull(linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Spliterator<HomePieceOfFurniture> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      homeFurnitureGroup0.setX(0.0F);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      homeFurnitureGroup0.setAngle((-1741.6704F));
      assertNotSame(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.055105F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      boolean boolean1 = homeFurnitureGroup0.isTexturable();
      assertNotSame(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.055105F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      float[][] floatArray8 = homeFurnitureGroup0.getModelRotation();
      assertNotNull(floatArray8);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(floatArray8, floatArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.055105F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(3, floatArray8.length);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(floatArray8.equals((Object)floatArray0));
      
      homeFurnitureGroup0.setModelMirrored(false);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.055105F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      boolean boolean2 = homeFurnitureGroup0.isMovable();
      assertNotSame(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(2047.633F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.055105F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.5F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-2047.633F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2047.633F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.25F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(boolean2);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.5F);
      assertNotNull(float0);
      assertEquals(0.5F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      assertNotNull(bigDecimal0);
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("7:yRFM/J]J[{`.", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(3, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = new BigDecimal(0.5F);
      assertNotNull(bigDecimal1);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      CatalogLight catalogLight1 = new CatalogLight("7:yRFM/J]J[{`.", "7:yRFM/J]J[{`.", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1606.1394F), 0.5F, 0.0F, (-1606.1394F), false, lightSourceArray0, (float[][]) null, "", true, false, false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight1);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(catalogLight1.isDeformable());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertEquals((-1606.1394F), catalogLight1.getElevation(), 0.01F);
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getInformation());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("7:yRFM/J]J[{`.", catalogLight1.getDescription());
      assertFalse(catalogLight1.isBackFaceShown());
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getGrade());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertNull(catalogLight1.getColor());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("7:yRFM/J]J[{`.", catalogLight1.getId());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isMovable());
      assertEquals("7:yRFM/J]J[{`.", catalogLight1.getName());
      assertEquals(0.5F, catalogLight1.getDepth(), 0.01F);
      assertNull(catalogLight1.getCurrency());
      assertEquals((-1606.1394F), catalogLight1.getWidth(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertEquals(3, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(class0, "");
      assertNotNull(resourceURLContent1);
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertTrue(resourceURLContent1.isJAREntry());
      assertTrue(resourceURLContent1.equals((Object)resourceURLContent0));
      
      URL uRL0 = resourceURLContent1.getJAREntryURL();
      assertNotNull(uRL0);
      assertNotSame(resourceURLContent1, resourceURLContent0);
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertTrue(resourceURLContent1.isJAREntry());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(resourceURLContent1.equals((Object)resourceURLContent0));
      
      HomeLight homeLight0 = new HomeLight(catalogLight1);
      assertNotNull(homeLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(catalogLight1.isDeformable());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertEquals((-1606.1394F), catalogLight1.getElevation(), 0.01F);
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getInformation());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("7:yRFM/J]J[{`.", catalogLight1.getDescription());
      assertFalse(catalogLight1.isBackFaceShown());
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getGrade());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertNull(catalogLight1.getColor());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("7:yRFM/J]J[{`.", catalogLight1.getId());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isMovable());
      assertEquals("7:yRFM/J]J[{`.", catalogLight1.getName());
      assertEquals(0.5F, catalogLight1.getDepth(), 0.01F);
      assertNull(catalogLight1.getCurrency());
      assertEquals((-1606.1394F), catalogLight1.getWidth(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1606.1394F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-803.0697F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1606.1394F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1606.1394F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getName());
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3, lightSourceArray0.length);
      assertTrue(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      
      boolean boolean0 = linkedList0.offerLast(homeLight0);
      assertNotSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(catalogLight1, catalogLight0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)105, bigDecimal0.byteValue());
      assertEquals((short) (-1431), bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertTrue(catalogLight1.isDeformable());
      assertEquals(0.0F, catalogLight1.getHeight(), 0.01F);
      assertEquals((-1606.1394F), catalogLight1.getElevation(), 0.01F);
      assertTrue(catalogLight1.isResizable());
      assertNull(catalogLight1.getInformation());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertTrue(catalogLight1.isProportional());
      assertEquals("7:yRFM/J]J[{`.", catalogLight1.getDescription());
      assertFalse(catalogLight1.isBackFaceShown());
      assertTrue(catalogLight1.isTexturable());
      assertNull(catalogLight1.getGrade());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertNull(catalogLight1.getColor());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("7:yRFM/J]J[{`.", catalogLight1.getId());
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isMovable());
      assertEquals("7:yRFM/J]J[{`.", catalogLight1.getName());
      assertEquals(0.5F, catalogLight1.getDepth(), 0.01F);
      assertNull(catalogLight1.getCurrency());
      assertEquals((-1606.1394F), catalogLight1.getWidth(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1606.1394F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-803.0697F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1606.1394F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1606.1394F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getName());
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean0);
      assertTrue(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      assertNotNull(linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "7:yRFM/J]J[{`.");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1606.1394F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1606.1394F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1606.1394F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      boolean boolean1 = homeFurnitureGroup0.isDoorOrWindow();
      assertNotSame(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals((-1606.1394F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1606.1394F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1606.1394F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1606.1394F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-1606.1394F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1606.1394F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1606.1394F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1606.1394F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1606.1394F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup0.setElevation((-5256.3525F));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1606.1394F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      assertNotNull(homeFurnitureGroup2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1606.1394F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-1606.1394F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1606.1394F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup2.isMovable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertEquals((-1606.1394F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(1606.1394F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals((-1606.1394F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup2.getName());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1606.1394F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      homeFurnitureGroup2.setColor((Integer) null);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1606.1394F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-1606.1394F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1606.1394F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup2.isMovable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertEquals((-1606.1394F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(1606.1394F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals((-1606.1394F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup2.getName());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1606.1394F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1606.1394F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      
      homeFurnitureGroup1.setDepth(3.0F);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1606.1394F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-1606.1394F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(3.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1606.1394F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("7:yRFM/J]J[{`.", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals((-5256.3525F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1606.1394F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((-3661.548F));
      Float float1 = new Float(0.0);
      BigDecimal bigDecimal0 = new BigDecimal((-1431.463));
      CatalogLight catalogLight0 = new CatalogLight("", "", "7:yRFM/J]J[{`.", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-3661.548F), (-3661.548F), (-2047.633F), false, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(linkedList0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "7:yRFM/J]J[{`.");
      homeFurnitureGroup0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation((-1.0F));
      homeFurnitureGroup0.intersectsRectangle((-1.0F), (-2047.633F), 359.747F, 359.747F);
      homeFurnitureGroup1.setAngle((-2047.633F));
      assertEquals(0.6853535F, homeFurnitureGroup1.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2496);
      Level level0 = new Level("", 2496, 2496, 2496);
      homeFurnitureGroup0.setLevel(level0);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.getPlanIcon();
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
  }
}
