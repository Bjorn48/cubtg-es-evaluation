/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:26:16 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.JSONReader;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReader_ESTest extends JSONReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReader<ModelIterator> jSONReader0 = new JSONReader<ModelIterator>((ModelIterator) null);
      int[] intArray0 = new int[5];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",");
      jSONReader0.decode(intArray0, (PrintWriter) mockPrintWriter0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      JSONReader<SolutionCounter> jSONReader0 = new JSONReader<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = jSONReader0.getLiterals("[]");
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      JSONReader<StatisticsSolver> jSONReader0 = new JSONReader<StatisticsSolver>(statisticsSolver0);
      String string0 = jSONReader0.constraintRegexp();
      assertEquals("((\\[(-?(\\d+)(,-?(\\d+))*)?\\])|(\\[(\\[(-?(\\d+)(,-?(\\d+))*)?\\]),'[=<>]=?',-?\\d+\\]))", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0, true);
      JSONReader<MaxSatDecorator> jSONReader0 = new JSONReader<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        jSONReader0.parseString("[]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReader<MinOneDecorator> jSONReader0 = new JSONReader<MinOneDecorator>((MinOneDecorator) null);
      // Undeclared exception!
      try { 
        jSONReader0.parseString("[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      JSONReader<GateTranslator> jSONReader0 = new JSONReader<GateTranslator>(gateTranslator0);
      // Undeclared exception!
      try { 
        jSONReader0.parseInstance((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      JSONReader<SolutionCounter> jSONReader0 = new JSONReader<SolutionCounter>(solutionCounter0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-60), (byte)124);
      // Undeclared exception!
      try { 
        jSONReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONReader<MinOneDecorator> jSONReader0 = new JSONReader<MinOneDecorator>((MinOneDecorator) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        jSONReader0.parseInstance((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      JSONReader<MinOneDecorator> jSONReader0 = new JSONReader<MinOneDecorator>(minOneDecorator0);
      try { 
        jSONReader0.handleCard("[[],'<',0]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("[[],'<',0=]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("[[]'<',0]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals("=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReader<DimacsOutputSolver> jSONReader0 = new JSONReader<DimacsOutputSolver>((DimacsOutputSolver) null);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals("(([(-?(d+)(,-?(d+))*)?])|([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+]))");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"([(-?(d+)(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      JSONReader<StatisticsSolver> jSONReader0 = new JSONReader<StatisticsSolver>(statisticsSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GateTranslator gateTranslator0 = new GateTranslator(dimacsStringSolver0);
      JSONReader<GateTranslator> jSONReader0 = new JSONReader<GateTranslator>(gateTranslator0);
      // Undeclared exception!
      try { 
        jSONReader0.decode((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReader<MinOneDecorator> jSONReader0 = new JSONReader<MinOneDecorator>((MinOneDecorator) null);
      try { 
        jSONReader0.parseString("([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input ([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      JSONReader<DimacsOutputSolver> jSONReader0 = new JSONReader<DimacsOutputSolver>(dimacsOutputSolver0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        jSONReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input \u0000\u0000\u0000
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("/[],'<',8]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 7
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      jSONReader0.handleCard("[[],'<&',0]");
      assertEquals(0, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONReader<MinOneDecorator> jSONReader0 = new JSONReader<MinOneDecorator>((MinOneDecorator) null);
      jSONReader0.handleCard("J*G$K{X(9Q;k7");
      assertFalse(jSONReader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      IVecInt iVecInt0 = jSONReader0.getLiterals("[18]");
      assertEquals(1, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      JSONReader<StatisticsSolver> jSONReader0 = new JSONReader<StatisticsSolver>(statisticsSolver0);
      ISolver iSolver0 = jSONReader0.parseString("[]");
      assertEquals(0, iSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      int[] intArray0 = new int[1];
      String string0 = jSONReader0.decode(intArray0);
      assertEquals("[0]", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>((DimacsStringSolver) null);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        jSONReader0.decode((int[]) null, (PrintWriter) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      try { 
        jSONReader0.handleNotHandled("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown constraint: 
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }
}
