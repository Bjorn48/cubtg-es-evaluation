* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 13869
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550385896474
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.15794066317626526
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.07776261937244201
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.096
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.05263157894736842
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.25984251968503935
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2047244094488189
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.06275579809004093
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
[MASTER] 07:45:40.122 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.ILogAble
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 279
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2661431064572426
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.15006821282401092
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.15333333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07518796992481203
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.33858267716535434
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.10231923601637108
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 360
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.31326352530541013
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1869031377899045
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18533333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.10150375939849623
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4409448818897638
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3543307086614173
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12551159618008187
[MASTER] 07:45:48.662 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.IVecInt
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 441
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3307155322862129
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21145975443383355
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.236
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.11278195488721804
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5039370078740157
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15143246930422918
[MASTER] 07:45:56.062 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 510
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 582
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.34904013961605584
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.22373806275579808
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.248
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13533834586466165
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.44881889763779526
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.165075034106412
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 658
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 738
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3787085514834206
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24693042291950887
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.27066666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.15413533834586465
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6299212598425197
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.49606299212598426
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18281036834924966
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 814
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 896
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3970331588132635
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.26330150068212826
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.288
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18421052631578946
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7007874015748031
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5590551181102362
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.19781718963165076
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 986
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1057
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.41361256544502617
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2728512960436562
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2946666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7244094488188977
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5748031496062992
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.20600272851296045
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1138
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1214
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.41535776614310643
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2755798090040928
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2986666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.20676691729323307
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7401574803149606
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5905511811023622
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.21145975443383355
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1295
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1375
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4354275741710297
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2946793997271487
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.31733333333333336
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21804511278195488
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7716535433070866
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6220472440944882
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22510231923601637
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1448
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
[MASTER] 07:46:37.235 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.RestartStrategy
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1529
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1607
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.44502617801047123
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.30286493860845837
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.33066666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.24812030075187969
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8267716535433071
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6850393700787402
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.23465211459754434
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1695
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1780
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1865
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.450261780104712
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3069577080491132
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3333333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.24812030075187969
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24010914051841747
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1946
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2028
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4650959860383944
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3178717598908595
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.336
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8661417322834646
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7165354330708661
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2112
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2192
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4668411867364747
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.31923601637107774
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3373333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8740157480314961
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7165354330708661
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.25648021828103684
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2285
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2375
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2462
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2555
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4816753926701571
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.330150068212824
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.35733333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.889763779527559
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7401574803149606
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2660300136425648
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2649
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.48429319371727747
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.330150068212824
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3626666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.889763779527559
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7401574803149606
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2660300136425648
* Search finished after 124s and 30 generations, 54693 statements, best individual has fitness: 2322.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.48429319371727747
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.330150068212824
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3626666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.889763779527559
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7401574803149606
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2660300136425648
* Minimizing test suite
[MASTER] 07:48:11.788 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 50%
* Total number of goals: 1146
* Number of covered goals: 573
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 33%
* Total number of goals: 733
* Number of covered goals: 242
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 37%
* Total number of goals: 750
* Number of covered goals: 277
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 266
* Number of covered goals: 89
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 94%
* Total number of goals: 127
* Number of covered goals: 120
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 74%
* Total number of goals: 127
* Number of covered goals: 94
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 27%
* Total number of goals: 733
* Number of covered goals: 195
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.48429319371727747
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.330150068212824
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3626666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.889763779527559
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7401574803149606
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2660300136425648
* Generated 257 tests with total length 5642
* Resulting test suite's coverage: 55% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 07:49:10.739 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7264333333333334% of time used, but only 39/257 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 4%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.48429319371727747
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.330150068212824
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3626666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.33458646616541354
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.889763779527559
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7401574803149606
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2660300136425648
* Compiling and checking tests
[MASTER] 07:49:37.984 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 07:49:37.990 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 07:49:41.907 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:41.908 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(0.0).when(searchParams0).getClaDecay();
doReturn((-4885), (-8)).when(searchParams0).getInitConflictBound();
doReturn(0.0).when(searchParams0).getVarDecay();
FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>(7);
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log(" a\"d");
CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
ArminRestarts arminRestarts0 = new ArminRestarts();
SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(0.0).when(searchParams1).getConflictBoundIncFactor();
doReturn(0, 0, 0).when(searchParams1).getInitConflictBound();
FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning2 = new FixedLengthLearning<ClausalDataStructureWL>(7);
ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
VarOrderHeap varOrderHeap1 = new VarOrderHeap();
MUSLauncher mUSLauncher1 = new MUSLauncher();
Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning2, clausalDataStructureWL1, searchParams1, varOrderHeap1, arminRestarts0, mUSLauncher1);
SolverStats solverStats0 = solver0.stats;
arminRestarts0.init(searchParams1, solverStats0);
arminRestarts0.onRestart();
MUSLauncher mUSLauncher2 = new MUSLauncher();
mUSLauncher2.log("--- End Solver configuration ---");
mUSLauncher2.log("--- End Solver configuration ---");
mUSLauncher2.log("--- End Solver configuration ---");
mUSLauncher2.log("--- End Solver configuration ---");
mUSLauncher2.log("--- End Solver configuration ---");
mUSLauncher2.log("--- End Solver configuration ---");
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure1, searchParams0, varOrderHeap0, arminRestarts0, mUSLauncher2);
solver1.isSatisfiable(true);
assertEquals(1, solver1.nVars());


[MASTER] 07:49:45.876 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 07:49:45.876 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
int int0 = (-2304);
FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, fixedPeriodRestarts0);
fixedPeriodRestarts0.onRestart();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
solver0.reduceDB();

[MASTER] 07:49:46.665 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 07:49:46.667 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
SearchParams searchParams0 = null;
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
varOrderHeap0.varDecayActivity();
RestartStrategy restartStrategy0 = null;
Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, varOrderHeap0, (RestartStrategy) null);
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, cardinalityDataStructureYanMin0, (SearchParams) null, varOrderHeap0, (RestartStrategy) null);
solver1.toString();

[MASTER] 07:49:52.661 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 07:49:52.661 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
MUSLauncher mUSLauncher0 = new MUSLauncher();
String[] stringArray0 = new String[1];
stringArray0[0] = "c ";
mUSLauncher0.run(stringArray0);

[MASTER] 07:49:53.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:53.546 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.95, double0, 0.01);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, (RestartStrategy) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

solver0.unset(3);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

SearchParams searchParams1 = new SearchParams(3, 0.0, (-2256.7514), 47);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(47, searchParams1.getInitConflictBound());
assertEquals(3.0, searchParams1.getVarDecay(), 0.01);
assertEquals((-2256.7514), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);

double double1 = searchParams1.getVarDecay();
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);
assertEquals(47, searchParams1.getInitConflictBound());
assertEquals(3.0, searchParams1.getVarDecay(), 0.01);
assertEquals((-2256.7514), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(3.0, double1, 0.01);

Float float0 = new Float(0.0);
assertNotNull(float0);
assertEquals(0.0F, (float)float0, 0.01F);


[MASTER] 07:49:53.808 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:53.812 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());

int[] intArray0 = new int[9];
intArray0[0] = (-1444);
intArray0[2] = 32;
intArray0[4] = (-1444);
intArray0[5] = 32;
intArray0[7] = (-1444);
intArray0[8] = (-1444);
UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertNotNull(lubyRestarts1);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts0, lubyRestarts1);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2, lubyRestarts0.luby());
assertEquals((-2888L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts0.getFactor());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(9, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-1444), 0, 32, 0, (-1444), 32, 0, (-1444), (-1444)}, intArray0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, subsetVarOrder0, lubyRestarts1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(9, intArray0.length);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertNotNull(solver0);
assertArrayEquals(new int[] {(-1444), 0, 32, 0, (-1444), 32, 0, (-1444), (-1444)}, intArray0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
assertNotNull(mixedDataStructureDanielWLConciseBinary1);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary1, searchParams0, varOrderHeap1, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(solver1.equals((Object)solver0));
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2, lubyRestarts0.luby());
assertEquals((-2888L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);

solver0.findModel();

[MASTER] 07:49:54.152 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:54.167 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(1517.669, 710.0, 0.0, 759);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(1517.669, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, double1, 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(759).when(varOrderHeap0).select();
VecInt vecInt0 = new VecInt(755);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

Lits lits0 = new Lits();
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertNotNull(lits0);

LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertFalse(learntWLClause0.isSatisfied());
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0, learntWLClause0.size());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertNotNull(learntWLClause0);

Constr constr0 = learntWLClause0.toConstraint();
assertSame(learntWLClause0, constr0);
assertSame(constr0, learntWLClause0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertFalse(learntWLClause0.isSatisfied());
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0, learntWLClause0.size());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(constr0.simplify());
assertTrue(constr0.learnt());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertFalse(constr0.isSatisfied());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertEquals(0, constr0.size());
assertNotNull(constr0);

constr0.setLearnt();
assertSame(learntWLClause0, constr0);
assertSame(constr0, learntWLClause0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertFalse(learntWLClause0.isSatisfied());
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0, learntWLClause0.size());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(constr0.simplify());
assertTrue(constr0.learnt());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertFalse(constr0.isSatisfied());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertEquals(0, constr0.size());

learntWLClause0.register();
assertSame(learntWLClause0, constr0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertFalse(learntWLClause0.isSatisfied());
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0, learntWLClause0.size());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);

noLearningNoHeuristics0.claBumpActivity(constr0);
assertSame(learntWLClause0, constr0);
assertSame(constr0, learntWLClause0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertFalse(learntWLClause0.isSatisfied());
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0, learntWLClause0.size());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(constr0.simplify());
assertTrue(constr0.learnt());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertFalse(constr0.isSatisfied());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertEquals(0, constr0.size());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(755, 759).when(varOrderHeap1).select();
TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1, (-59));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(tabuListDecorator1);

int int0 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(755, int0);

int int1 = tabuListDecorator0.select();
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertFalse(int1 == int0);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertEquals(759, int1);

int int2 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertTrue(int2 == int1);
assertFalse(int2 == int0);
assertEquals(759, int2);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator1, eMARestarts0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

tabuListDecorator1.assignLiteral((-352));
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

solver0.cancelUntilTrailLevel(0);
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder((-2601));
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2601));
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);

solver1.setLearningStrategy(noLearningButHeuristics0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());


[MASTER] 07:49:54.504 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:54.516 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(varOrderHeap0).toString();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.init();
tabuListDecorator0.setVarDecay(4552);
tabuListDecorator0.setVarDecay(4552);
RestartStrategy restartStrategy0 = null;
ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, varOrderHeap1, (RestartStrategy) null);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>((-1.0));
assertEquals((-1.0), activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals((-1.0), activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(solver1);

LearningStrategy<CardinalityDataStructureYanMin> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMin>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, (-5233.960816354));
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);
assertArrayEquals(new int[] {}, intArray0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(learningStrategy0, cardinalityDataStructureYanMin1, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertNotNull(solver2);
assertArrayEquals(new int[] {}, intArray0);

ILogAble iLogAble0 = solver2.out;
assertEquals(0, intArray0.length);
assertNotNull(iLogAble0);
assertArrayEquals(new int[] {}, intArray0);

iLogAble0.log((String) null);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(4, solver2.newVar());
assertArrayEquals(new int[] {}, intArray0);

solver1.setLogger(iLogAble0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(6, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(5, solver2.nVars());
assertEquals((-1.0), activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertArrayEquals(new int[] {}, intArray0);

String string0 = "`";
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`", true);
assertNotNull(mockFileOutputStream0);

FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
assertNotNull(filterOutputStream0);

ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
assertNotNull(objectOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false, "jWc*I&059x(O}R7Ua");

[MASTER] 07:49:54.835 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:54.851 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertNotNull(phaseCachingAutoEraseStrategy0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap1, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

int int0 = solver0.newVar(32);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(33, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(34, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(32, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(32, int0);

int[] intArray0 = solver0.findModel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertEquals(0, intArray0.length);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(35, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(36, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(32, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertNotNull(intArray0);
assertArrayEquals(new int[] {}, intArray0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, varOrderHeap1, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);

boolean boolean0 = solver1.isDBSimplificationAllowed();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(boolean0);


[MASTER] 07:49:55.156 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:49:55.162 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

varOrderHeap0.varDecayActivity();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(eMARestarts0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(32, 710.0, 0.0, 759);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(32.0, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(710.0, double1, 0.01);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, eMARestarts0);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(solver0);

searchParams0.setClaDecay(2396.3489426);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
assertEquals(2396.3489426, searchParams0.getClaDecay(), 0.01);

solver0.enqueue((-220));

[MASTER] 07:49:55.478 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 07:49:55.480 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(847);
assertEquals(847, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

String string0 = "--- End Solver configuration ---";
mUSLauncher0.log("--- End Solver configuration ---");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

String[] stringArray0 = new String[7];
stringArray0[0] = "--- End Solver configuration ---";
stringArray0[1] = "--- End Solver configuration ---";
stringArray0[2] = "";
stringArray0[3] = "--- End Solver configuration ---";
stringArray0[4] = "";
stringArray0[5] = "c ";
stringArray0[6] = " Timeout (";
mUSLauncher0.run(stringArray0);

[MASTER] 07:49:55.790 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:55.791 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(4552);
tabuListDecorator0.setVarDecay(4552);
RestartStrategy restartStrategy0 = null;
ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, varOrderHeap1, (RestartStrategy) null);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 07:49:56.085 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:49:56.088 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

int int0 = (-668);
FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals((-4), iVecInt0.last());
assertNotNull(iVecInt0);

IVecInt iVecInt1 = iVecInt0.pop();
assertSame(iVecInt0, iVecInt1);
assertSame(iVecInt1, iVecInt0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals((-3), iVecInt0.last());
assertEquals((-3), iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertEquals(3, iVecInt1.size());
assertNotNull(iVecInt1);

solver0.addAtMost(iVecInt0, (-668));

[MASTER] 07:49:56.429 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:56.432 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(4552).when(varOrderHeap0).select();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(4552);
tabuListDecorator0.setVarDecay(0.01);
int int0 = tabuListDecorator0.select();
assertEquals(4552, int0);

ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, varOrderHeap1, (RestartStrategy) null);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

long long0 = solver0.getTimeoutMs();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(2147483647L, long0);

int int1 = solver0.realNumberOfVariables();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(int1 == int0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals(4, int1);


[MASTER] 07:49:56.735 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:56.745 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());

int[] intArray0 = new int[9];
intArray0[0] = (-1444);
intArray0[2] = 32;
intArray0[4] = (-1444);
intArray0[5] = 32;
intArray0[7] = (-1444);
intArray0[8] = (-1444);
NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

String string0 = solver0.getLogPrefix();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(string0);
assertEquals("c ", string0);

SearchParams searchParams1 = new SearchParams(1517.669, 710.0, 0.0, 759);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(1517.669, double0, 0.01);

String string1 = searchParams1.toString();
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(string1.equals((Object)string0));
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertNotNull(string1);

double double1 = searchParams1.getClaDecay();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(710.0, double1, 0.01);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams1, naturalStaticOrder0, lubyRestarts0, (ILogAble) null);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);

solver1.cancelUntil(1123);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());

boolean boolean0 = solver1.assume(9);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.currentDecisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertTrue(boolean0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());


[MASTER] 07:49:56.989 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:56.999 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getStarts());
assertNotNull(solverStats0);

solverStats0.incStarts();
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(1, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedliterals());

SearchParams searchParams0 = new SearchParams(1425);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1425, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1425, searchParams0.getInitConflictBound());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1425, searchParams0.getInitConflictBound());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts1.getFactor());
assertNotNull(lubyRestarts1);

lubyRestarts1.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1425, searchParams0.getInitConflictBound());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts1.getFactor());

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, varOrderHeap1, lubyRestarts1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(solver1.equals((Object)solver0));
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1425, searchParams0.getInitConflictBound());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.nVars());
assertEquals(10, solver0.newVar());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(8, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(8, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(9, solver1.newVar());
assertNotNull(solver1);

solver0.model();

[MASTER] 07:49:57.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:57.284 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

int int0 = lubyRestarts0.luby();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, int0);

int int1 = lubyRestarts0.nextLuby();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(int1 == int0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, int1);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertNotNull(solver1);

solver1.undoOne();

[MASTER] 07:49:57.533 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:57.534 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

solver0.toString();

[MASTER] 07:49:57.794 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:57.797 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

int int0 = 0;
SearchParams searchParams0 = new SearchParams((-935.8901259), 0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

searchParams0.setInitConflictBound(0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);

int int1 = searchParams0.getInitConflictBound();
assertTrue(int1 == int0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, int1);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertNotNull(miniSATRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

boolean boolean0 = solver0.simplifyDB();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertTrue(boolean0);

IVec<IVecInt> iVec0 = (IVec<IVecInt>) mock(IVec.class, new ViolatedAssumptionAnswer());
doReturn((Iterator) null).when(iVec0).iterator();
solver0.addAllClauses(iVec0);

[MASTER] 07:49:58.115 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:49:58.117 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, varOrderHeap1, (RestartStrategy) null);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, varOrderHeap1, (RestartStrategy) null);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(solver1.equals((Object)solver0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertNotNull(solver1);

int int0 = solver0.nextFreeVarId(false);
assertNotSame(solver0, solver1);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(solver0.equals((Object)solver1));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(5, int0);


[MASTER] 07:49:58.387 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:58.398 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

naturalStaticOrder0.assignLiteral((-668));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

NoRestarts noRestarts0 = new NoRestarts();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, noRestarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

SearchListener<Solver<MixedDataStructureDanielHT>> searchListener0 = solver0.getSearchListener();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertNotNull(searchListener0);

int int0 = solver0.getPropagationLevel();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(6, solver0.newVar());
assertEquals(0, int0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>(3052);
assertEquals(3052, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, naturalStaticOrder0, noRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3052, fixedLengthLearning1.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);

boolean boolean2 = solver1.isDBSimplificationAllowed();
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3052, fixedLengthLearning1.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(boolean2);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning2 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning2.getMaxLength());
assertNotNull(fixedLengthLearning2);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.nVars());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertNotNull(searchParams0);

searchParams0.setConflictBoundIncFactor(1000.0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1000.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(fixedLengthLearning2, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, noRestarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1000.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(11, solver0.nVars());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(12, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, fixedLengthLearning2.getMaxLength());
assertNotNull(solver2);

ILogAble iLogAble0 = solver2.getLogger();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1000.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(13, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(14, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, fixedLengthLearning2.getMaxLength());
assertNotNull(iLogAble0);


[MASTER] 07:49:58.658 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:49:58.666 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertNotNull(solverStats0);

solverStats0.incStarts();
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(1, solverStats0.getStarts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

SearchParams searchParams0 = new SearchParams(7);
assertEquals(7, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(7, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(7, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertNotNull(lubyRestarts1);

UnitClause unitClause0 = new UnitClause((-27));
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(unitClause0.isSatisfied());
assertFalse(unitClause0.learnt());
assertNotNull(unitClause0);

DotSearchTracing<OriginalBinaryClause> dotSearchTracing0 = new DotSearchTracing<OriginalBinaryClause>("\"J0:");
assertNotNull(dotSearchTracing0);

String string0 = unitClause0.toString(dotSearchTracing0);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(unitClause0.isSatisfied());
assertFalse(unitClause0.learnt());
assertNotNull(string0);
assertEquals("14", string0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Lits lits0 = (Lits)clausalDataStructureWL0.getVocabulary();
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertNotNull(lits0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(7, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(solver1);

solver1.removeSubsumedConstr(unitClause0);

[MASTER] 07:49:58.936 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:58.940 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams((-2228));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2228), searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral((-668));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--- Begin Solver configuration ---", true);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

mockPrintWriter0.print('y');
mockPrintWriter0.print('y');
mockPrintWriter0.print('}');
mockPrintWriter0.print('d');
mockPrintWriter0.print('I');
mockPrintWriter0.println();
Object[] objectArray0 = new Object[9];
objectArray0[1] = (Object) mockFileOutputStream0;
objectArray0[2] = (Object) "--- Begin Solver configuration ---";
objectArray0[3] = (Object) "--- Begin Solver configuration ---";
objectArray0[4] = (Object) mockPrintWriter0;
Object object0 = new Object();
assertNotNull(object0);

objectArray0[7] = object0;
objectArray0[8] = (Object) mockFileOutputStream0;
PrintWriter printWriter0 = mockPrintWriter0.format("--- Begin Solver configuration ---", objectArray0);
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(9, objectArray0.length);
assertNotNull(printWriter0);

printWriter0.print('}');
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(9, objectArray0.length);

printWriter0.print('y');
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(9, objectArray0.length);

printWriter0.print('(');
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(9, objectArray0.length);

printWriter0.println();
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(9, objectArray0.length);

NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, arminRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2228), searchParams0.getInitConflictBound());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

solver0.setRestartStrategy(arminRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2228), searchParams0.getInitConflictBound());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());


[MASTER] 07:49:59.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:59.225 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertNotNull(solverStats0);

solverStats0.incIgnoredclauses();
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(1L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());

solverStats0.incStarts();
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(1L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());

MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning1 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning1, mixedDataStructureDanielWL0, varOrderHeap0, (RestartStrategy) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

solver0.varBumpActivity((-1413));

[MASTER] 07:49:59.520 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:49:59.523 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

SearchParams searchParams0 = new SearchParams(1517.669, 710.0, 0.0, 759);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1517.669, double0, 0.01);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, (RestartStrategy) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

solver0.unset(3);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());

SearchParams searchParams1 = new SearchParams(1517.669, 759, 710.0, (-2989));
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(710.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(759.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals((-2989), searchParams1.getInitConflictBound());
assertNotNull(searchParams1);

double double1 = searchParams1.getVarDecay();
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(double1, double0, 0.01);
assertEquals(710.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(759.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals((-2989), searchParams1.getInitConflictBound());
assertEquals(1517.669, double1, 0.01);

double double2 = searchParams1.getClaDecay();
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double2, double1, 0.01);
assertEquals(710.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(759.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals((-2989), searchParams1.getInitConflictBound());
assertEquals(759.0, double2, 0.01);

varOrderHeap0.init();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertNotNull(solver1);

solver1.isSatisfiable(true);

[MASTER] 07:49:59.795 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:49:59.814 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(847);
assertEquals(847, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("--- End Solver configuration ---");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("--- End Solver configuration ---");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("--- End Solver configuration ---");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("--- End Solver configuration ---");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("--- End Solver configuration ---");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(solver0);

int[] intArray0 = solver0.findModel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, intArray0.length);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(intArray0);
assertArrayEquals(new int[] {}, intArray0);

solver0.decayActivities();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());


[MASTER] 07:50:00.127 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:00.141 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-141));
assertEquals((-141), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams((-141), (-2034));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((-2034)).when(varOrderHeap0).select();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
int int0 = tabuListDecorator0.select();
assertEquals((-2034), int0);

Integer integer0 = new Integer((-141));
assertFalse(integer0.equals((Object)int0));
assertNotNull(integer0);
assertEquals((-141), (int)integer0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin1, varOrderHeap1, miniSATRestarts0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

int int1 = lubyRestarts0.luby();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(int1 == int0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, int1);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts1.getFactor());
assertNotNull(lubyRestarts1);

int int2 = lubyRestarts1.nextLuby();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(int2 == int0);
assertTrue(int2 == int1);
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, int2);

lubyRestarts1.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(2, lubyRestarts1.luby());
assertEquals(64L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts1.getFactor());
assertFalse(lubyRestarts1.shouldRestart());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning1, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, miniSATRestarts0);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(solver1);

int int3 = solver1.newVar((-653));
assertFalse(int3 == int1);
assertFalse(int3 == int2);
assertFalse(int3 == int0);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals((-653), solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals((-653), int3);

solver1.findModel();

[MASTER] 07:50:00.502 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:00.530 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());

int[] intArray0 = new int[9];
intArray0[0] = (-1444);
intArray0[1] = 32;
intArray0[2] = 32;
intArray0[4] = (-1444);
intArray0[5] = 32;
intArray0[7] = (-1444);
intArray0[8] = (-1444);
NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver0);

String string0 = solver0.getLogPrefix();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(string0);
assertEquals("c ", string0);

SearchParams searchParams1 = new SearchParams(1517.669, 710.0, 0.0, 759);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, double0, 0.01);

double double1 = searchParams1.getClaDecay();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, double1, 0.01);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams1, naturalStaticOrder0, lubyRestarts0, (ILogAble) null);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertNotNull(solver1);

boolean boolean0 = solver1.assume(9);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(1, solver1.getPropagationLevel());
assertEquals(1, solver1.decisionLevel());
assertEquals(1, solver1.currentDecisionLevel());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertTrue(boolean0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(9);
assertEquals(9, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

SearchParams searchParams2 = new SearchParams((-935.8901259), 0);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams2.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams2);

int int0 = searchParams2.getInitConflictBound();
assertNotSame(searchParams2, searchParams1);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0, int0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams2, naturalStaticOrder0, lubyRestarts0, (ILogAble) null);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(9, percentLengthLearning0.getLimit());
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertNotNull(solver2);

LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver2.fixedSize((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams2, searchParams1);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(9, percentLengthLearning0.getLimit());
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertNotNull(learnedConstraintsDeletionStrategy0);


[MASTER] 07:50:01.343 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:01.348 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());

int[] intArray0 = new int[9];
intArray0[0] = (-1444);
intArray0[2] = 32;
intArray0[4] = (-1444);
intArray0[5] = 32;
intArray0[7] = (-1444);
intArray0[8] = (-1444);
NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Integer integer0 = IVisualizationTool.NOTGOOD;
assertNotNull(integer0);
assertEquals(Integer.MIN_VALUE, (int)integer0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertFalse(miniSATLearning1.equals((Object)miniSATLearning0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin2 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin1));
assertNotNull(cardinalityDataStructureYanMin2);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertNotNull(miniSATRestarts0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotNull(iVecInt0);

percentLengthLearning0.setSolver(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(6, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning1, cardinalityDataStructureYanMin0, naturalStaticOrder0, glucose21Restarts0);
assertFalse(miniSATLearning1.equals((Object)miniSATLearning0));
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin2));
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertNotNull(solver1);

solver1.addExactly(iVecInt0, 18);

[MASTER] 07:50:01.770 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:01.772 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(1.0E-100);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());

lubyRestarts0.newConflict();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

ISimplifier iSimplifier0 = solver0.getSimplifier();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1.0E-100, activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertNotNull(iSimplifier0);


[MASTER] 07:50:02.023 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:02.026 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral(16384);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(16384);
assertEquals(16384, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, double1, 0.01);

Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
PrintWriter printWriter0 = new PrintWriter(writer0);
assertNotNull(printWriter0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>(16384);
assertEquals(16384, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(16384, percentLengthLearning1.getLimit());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

IVecInt iVecInt0 = solver0.unsatExplanation();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(16384, percentLengthLearning1.getLimit());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertNull(iVecInt0);


[MASTER] 07:50:02.290 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:02.296 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral((-668));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-668));
assertEquals((-668), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-668));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-668), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

LearningStrategy<CardinalityDataStructureYanMin> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMin>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, (-5233.960816354));
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);
assertArrayEquals(new int[] {}, intArray0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(learningStrategy0, cardinalityDataStructureYanMin1, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertArrayEquals(new int[] {}, intArray0);

ILogAble iLogAble0 = solver0.out;
assertEquals(0, intArray0.length);
assertNotNull(iLogAble0);
assertArrayEquals(new int[] {}, intArray0);

iLogAble0.log((String) null);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertArrayEquals(new int[] {}, intArray0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, iLogAble0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(solver1.equals((Object)solver0));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals((-668), fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-668), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);
assertArrayEquals(new int[] {}, intArray0);

solver1.model(32);

[MASTER] 07:50:02.514 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:02.517 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Integer integer0 = IVisualizationTool.NOTGOOD;
assertNotNull(integer0);
assertEquals(Integer.MIN_VALUE, (int)integer0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotNull(miniSATRestarts0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

miniSATRestarts0.onBackjumpToRootLevel();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, pureOrder0, glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertNotNull(solver0);

IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iVecInt0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin1, pureOrder0, miniSATRestarts0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertNotNull(solver1);

solver1.addExactly((IVecInt) null, 3020);

[MASTER] 07:50:02.773 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:02.775 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(3099, 0, 0).when(varOrderHeap0).select();
doReturn((String) null).when(varOrderHeap0).toString();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
int int0 = tabuListDecorator0.select();
assertEquals(3099, int0);

int int1 = tabuListDecorator0.select();
assertFalse(int1 == int0);
assertEquals(0, int1);

int int2 = tabuListDecorator0.select();
assertFalse(int2 == int0);
assertTrue(int2 == int1);
assertEquals(0, int2);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, tabuListDecorator0, (RestartStrategy) null);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

SimplificationType simplificationType0 = SimplificationType.NO_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

solver0.expireTimeout();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(112);
assertEquals(112, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, varOrderHeap1, (RestartStrategy) null);
assertEquals(112, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);

int int3 = solver1.nextFreeVarId(false);
assertFalse(int3 == int2);
assertFalse(int3 == int1);
assertFalse(int3 == int0);
assertEquals(112, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, int3);


[MASTER] 07:50:03.028 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:03.032 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams((-935.8901259), 0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

MiniSATRestarts miniSATRestarts1 = new MiniSATRestarts();
assertFalse(miniSATRestarts1.equals((Object)miniSATRestarts0));
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertNotNull(miniSATRestarts1);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

miniSATRestarts0.onBackjumpToRootLevel();
assertNotSame(miniSATRestarts0, miniSATRestarts1);
assertFalse(miniSATRestarts0.equals((Object)miniSATRestarts1));
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

PureOrder pureOrder0 = new PureOrder((int) integer0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, pureOrder0, miniSATRestarts1);
assertFalse(miniSATRestarts1.equals((Object)miniSATRestarts0));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(solver1);

IVecInt iVecInt0 = solver1.createBlockingClauseForCurrentModel();
assertNotSame(miniSATRestarts1, miniSATRestarts0);
assertFalse(miniSATRestarts1.equals((Object)miniSATRestarts0));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(iVecInt0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning1, cardinalityDataStructureYanMin0, pureOrder0, miniSATRestarts0);
assertFalse(miniSATRestarts0.equals((Object)miniSATRestarts1));
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(solver2);

IConstr iConstr0 = solver2.getIthConstr(0);
assertNotSame(miniSATRestarts0, miniSATRestarts1);
assertNotSame(cardinalityDataStructureYanMin0, cardinalityDataStructureYanMin1);
assertFalse(miniSATRestarts0.equals((Object)miniSATRestarts1));
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNull(iConstr0);


[MASTER] 07:50:03.333 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:03.338 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-141));
assertEquals((-141), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams((-141), (-2034));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((-2034)).when(varOrderHeap0).select();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

int int0 = tabuListDecorator0.select();
assertEquals((-2034), int0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

int int1 = lubyRestarts0.luby();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(int1 == int0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, int1);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(32, lubyRestarts1.getFactor());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts1);

int int2 = lubyRestarts1.nextLuby();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertTrue(int2 == int1);
assertFalse(int2 == int0);
assertEquals(32, lubyRestarts1.getFactor());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, int2);

lubyRestarts1.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(2, lubyRestarts1.luby());
assertEquals(64L, lubyRestarts1.nextRestartNumberOfConflict());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL1, tabuListDecorator0, arminRestarts0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(solver0);

int int3 = solver0.getTimeout();
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(int3 == int2);
assertFalse(int3 == int1);
assertFalse(int3 == int0);
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(2147483, int3);

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, tabuListDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(solver1);

solver1.cancelUntilTrailLevel(33);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts0, lubyRestarts1);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertEquals((-141), fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(solver2);

IVecInt iVecInt0 = solver1.createBlockingClauseForCurrentModel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts0, lubyRestarts1);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(6, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.realNumberOfVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotNull(iVecInt0);

solver2.addParity(iVecInt0, false);

[MASTER] 07:50:03.641 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:03.642 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(2037);
assertEquals(2037, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, double1, 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, (SearchParams) null, varOrderHeap0, (RestartStrategy) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

ILogAble iLogAble0 = solver0.getLogger();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertNotNull(iLogAble0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, (ClausalDataStructureWL) null, searchParams0, varOrderHeap0, (RestartStrategy) null, iLogAble0);

[MASTER] 07:50:03.980 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:03.982 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-2842.5));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2842.5), activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams((-935.8901259), 0);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, int0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

NoRestarts noRestarts0 = new NoRestarts();
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertNotNull(noRestarts0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, noRestarts0, (ILogAble) null);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2842.5), activeLearning0.getActivityPercent(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

solver0.discardCurrentModel();

[MASTER] 07:50:04.284 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:04.287 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(753).when(varOrderHeap0).select();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(753, 753).when(varOrderHeap1).select();
doReturn("").when(varOrderHeap1).toString();
TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1, (-59));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(tabuListDecorator1);

int int0 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(753, int0);

int int1 = tabuListDecorator0.select();
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertTrue(int1 == int0);
assertEquals(753, int1);

int int2 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals(753, int2);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, tabuListDecorator1, (RestartStrategy) null);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

solver0.expireTimeout();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, (RestartStrategy) null);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertNotNull(solver1);

int int3 = solver1.nAssigns();
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertFalse(int3 == int1);
assertFalse(int3 == int0);
assertFalse(int3 == int2);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, int3);


[MASTER] 07:50:04.568 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:04.572 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-773.6720604899095));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-773.6720604899095), activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

int int0 = (-1444);
LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertNotNull(solverStats0);

solverStats0.incStarts();
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(1, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());

lubyRestarts0.init(searchParams0, solverStats0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(1, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-773.6720604899095), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

solver0.model();

[MASTER] 07:50:04.956 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:04.966 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(8, (-2034));
assertEquals(8.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
PrintWriter printWriter0 = new PrintWriter(writer0);
assertNotNull(printWriter0);

printWriter0.println();
FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

LubyRestarts lubyRestarts0 = new LubyRestarts(20);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(8.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

solver0.printStat(printWriter0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(8.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructure>(20);
assertFalse(fixedLengthLearning2.equals((Object)fixedLengthLearning0));
assertEquals(20, fixedLengthLearning2.getMaxLength());
assertNotNull(fixedLengthLearning2);

tabuListDecorator0.assignLiteral((-2034));
ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral((-668));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(solver1);

solver1.cancelUntilTrailLevel((-170));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(cardinalityDataStructure1);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure1, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(fixedLengthLearning0.equals((Object)fixedLengthLearning2));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(8.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2, solver2.newVar());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(solver2);

Constr constr0 = solver2.propagate();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(fixedLengthLearning0, fixedLengthLearning2);
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertFalse(fixedLengthLearning0.equals((Object)fixedLengthLearning2));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(8.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.nVars());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertNull(constr0);

solver1.record((Constr) null);

[MASTER] 07:50:05.276 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:05.309 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(847);
assertEquals(847, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotNull(clausalDataStructureWL1);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

MUSLauncher mUSLauncher1 = new MUSLauncher();
assertFalse(mUSLauncher1.equals((Object)mUSLauncher0));
assertEquals(0L, mUSLauncher1.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
assertFalse(mUSLauncher1.isSilent());
assertNotNull(mUSLauncher1);

SearchParams searchParams0 = new SearchParams((-2810));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, mUSLauncher0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(mUSLauncher0.equals((Object)mUSLauncher1));
assertEquals(847, percentLengthLearning0.getLimit());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

SolverStats solverStats0 = solver0.stats;
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertNotNull(solverStats0);

solverStats0.incRootSimplifications();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertNotSame(varOrderHeap0, varOrderHeap1);
assertNotSame(mUSLauncher0, mUSLauncher1);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(mUSLauncher0.equals((Object)mUSLauncher1));
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(847, percentLengthLearning0.getLimit());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());

solverStats0.incDecisions();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertNotSame(varOrderHeap0, varOrderHeap1);
assertNotSame(mUSLauncher0, mUSLauncher1);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(mUSLauncher0.equals((Object)mUSLauncher1));
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(1L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(847, percentLengthLearning0.getLimit());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());

lubyRestarts0.init(searchParams0, solverStats0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertNotSame(varOrderHeap0, varOrderHeap1);
assertNotSame(mUSLauncher0, mUSLauncher1);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(mUSLauncher0.equals((Object)mUSLauncher1));
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(1L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(847, percentLengthLearning0.getLimit());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap1, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(solver1);

LubyRestarts lubyRestarts1 = (LubyRestarts)solver1.getRestartStrategy();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(lubyRestarts1, lubyRestarts0);
assertSame(lubyRestarts0, lubyRestarts1);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(lubyRestarts1);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, lubyRestarts1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver2.equals((Object)solver1));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(7, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(8, solver1.newVar());
assertEquals(7, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(7, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(6, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(6, solver2.nVars());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(solver2);

solver1.modelFound();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(solver1, solver2);
assertSame(lubyRestarts0, lubyRestarts1);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertFalse(solver1.equals((Object)solver2));
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(9, solver1.realNumberOfVariables());
assertEquals(10, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(9, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

solver0.toString("ALGO2");

[MASTER] 07:50:05.554 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:05.556 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

int int0 = 0;
SearchParams searchParams0 = new SearchParams((-935.8901259), 0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

searchParams0.setInitConflictBound(0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

int int1 = searchParams0.getInitConflictBound();
assertTrue(int1 == int0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, int1);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotNull(miniSATRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

solver0.getLiteralsPropagatedAt(0);

[MASTER] 07:50:05.810 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:05.812 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

PureOrder pureOrder0 = new PureOrder((-2601));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

double double0 = pureOrder0.varActivity(0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.0, double0, 0.01);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2601));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Lits lits0 = new Lits();
assertEquals(0, lits0.realnVars());
assertEquals(0, lits0.nVars());
assertNotNull(lits0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double1 = searchParams0.getVarDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, double1, 0.01);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

solver0.cancelUntil((-803));

[MASTER] 07:50:06.047 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:06.049 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

Pair pair0 = new Pair();
assertEquals(0, pair0.getBacktrackLevel());
assertNotNull(pair0);

solver0.analyze((Constr) null, pair0);

[MASTER] 07:50:06.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:06.292 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral(16384);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);

int int0 = solver1.newVar(500);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(500, solver1.nVars());
assertEquals(502, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(501, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(500, int0);

solver1.findModel();

[MASTER] 07:50:06.552 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:06.556 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

int int0 = 0;
SearchParams searchParams0 = new SearchParams((-935.8901259), 0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

searchParams0.setInitConflictBound(0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());

int int1 = searchParams0.getInitConflictBound();
assertTrue(int1 == int0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0, int1);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertNotNull(miniSATRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);

Iterator<IVecInt> iterator0 = (Iterator<IVecInt>) mock(Iterator.class, new ViolatedAssumptionAnswer());
IVec<IVecInt> iVec0 = (IVec<IVecInt>) mock(IVec.class, new ViolatedAssumptionAnswer());
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);

SearchListener<Solver<CardinalityDataStructure>> searchListener0 = (SearchListener<Solver<CardinalityDataStructure>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
solver1.setSearchListener(searchListener0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver2);

solver2.isSatisfiable((IVecInt) null, true);

[MASTER] 07:50:06.841 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:06.849 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(1517.669, 710.0, 0.0, 759);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1517.669, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(710.0, double1, 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(759).when(varOrderHeap0).select();
VecInt vecInt0 = new VecInt(755);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

Lits lits0 = new Lits();
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertNotNull(lits0);

LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.learnt());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, learntWLClause0.size());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertFalse(learntWLClause0.isSatisfied());
assertNotNull(learntWLClause0);

Constr constr0 = learntWLClause0.toConstraint();
assertSame(learntWLClause0, constr0);
assertSame(constr0, learntWLClause0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.learnt());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, learntWLClause0.size());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertFalse(learntWLClause0.isSatisfied());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, constr0.size());
assertFalse(constr0.isSatisfied());
assertFalse(constr0.simplify());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertTrue(constr0.learnt());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertNotNull(constr0);

constr0.setLearnt();
assertSame(learntWLClause0, constr0);
assertSame(constr0, learntWLClause0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.learnt());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, learntWLClause0.size());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertFalse(learntWLClause0.isSatisfied());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, constr0.size());
assertFalse(constr0.isSatisfied());
assertFalse(constr0.simplify());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertTrue(constr0.learnt());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());

learntWLClause0.register();
assertSame(learntWLClause0, constr0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.learnt());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, learntWLClause0.size());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertFalse(learntWLClause0.isSatisfied());

noLearningNoHeuristics0.claBumpActivity(constr0);
assertSame(learntWLClause0, constr0);
assertSame(constr0, learntWLClause0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.learnt());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, learntWLClause0.size());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertFalse(learntWLClause0.isSatisfied());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, constr0.size());
assertFalse(constr0.isSatisfied());
assertFalse(constr0.simplify());
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertTrue(constr0.learnt());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(755, 759).when(varOrderHeap1).select();
TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1, (-59));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(tabuListDecorator1);

int int0 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(755, int0);

int int1 = tabuListDecorator0.select();
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertFalse(int1 == int0);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertEquals(759, int1);

int int2 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertTrue(int2 == int1);
assertFalse(int2 == int0);
assertEquals(759, int2);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator1, eMARestarts0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

tabuListDecorator1.assignLiteral((-352));
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

solver0.cancelUntilTrailLevel(0);
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

solver0.record(learntWLClause0);

[MASTER] 07:50:07.115 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:07.117 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertNotNull(positiveLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(2295.2529);
assertEquals(2295.2529, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertNotNull(cardinalityDataStructureYanMax1);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, double1, 0.01);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, noRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

solver0.cancelUntil((-803));

[MASTER] 07:50:07.380 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:07.388 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());

int[] intArray0 = new int[9];
intArray0[0] = (-1444);
intArray0[2] = 32;
intArray0[4] = (-1444);
intArray0[5] = 32;
intArray0[7] = (-1444);
intArray0[8] = (-1444);
NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

String string0 = solver0.getLogPrefix();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(string0);
assertEquals("c ", string0);

SearchParams searchParams1 = new SearchParams(1517.669, 710.0, 0.0, 759);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, double0, 0.01);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

naturalStaticOrder0.varDecayActivity();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertFalse(noLearningButHeuristics1.equals((Object)noLearningButHeuristics0));
assertNotNull(noLearningButHeuristics1);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(eMARestarts0);

boolean boolean0 = solver0.enqueue(32);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(noLearningButHeuristics0, noLearningButHeuristics1);
assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.getPropagationLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertTrue(boolean0);

eMARestarts0.onBackjumpToRootLevel();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, eMARestarts0);
assertFalse(solver1.equals((Object)solver0));
assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(7, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(8, solver1.newVar());
assertEquals(7, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertNotNull(solver1);

solver1.setLearningStrategy(noLearningButHeuristics1);
assertNotSame(noLearningButHeuristics1, noLearningButHeuristics0);
assertNotSame(solver1, solver0);
assertNotSame(noLearningButHeuristics0, noLearningButHeuristics1);
assertFalse(noLearningButHeuristics1.equals((Object)noLearningButHeuristics0));
assertFalse(solver1.equals((Object)solver0));
assertFalse(noLearningButHeuristics0.equals((Object)noLearningButHeuristics1));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(9, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(10, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(9, solver1.realNumberOfVariables());


[MASTER] 07:50:07.708 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:07.742 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral(16384);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, (SearchParams) null, varOrderHeap0, eMARestarts0, mUSLauncher0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

SolverStats solverStats0 = solver0.stats;
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertNotNull(solverStats0);

solverStats0.incStarts();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());

solverStats0.incRootSimplifications();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());

solverStats0.incDecisions();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(1L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());

solverStats0.incConflicts();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(1L, solverStats0.getConflicts());
assertEquals(1L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());

solverStats0.incDecisions();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(12, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(11, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(2L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(1L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());

solverStats0.incConflicts();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(14, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(13, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(2L, solverStats0.getConflicts());
assertEquals(2L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());

eMARestarts0.init((SearchParams) null, solverStats0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(15, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(16, solver0.newVar());
assertEquals(15, solver0.nVars());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(2L, solverStats0.getConflicts());
assertEquals(2L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(1, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());

boolean boolean0 = eMARestarts0.shouldRestart();
assertFalse(eMARestarts0.shouldRestart());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(boolean0);

eMARestarts0.onBackjumpToRootLevel();
assertFalse(eMARestarts0.shouldRestart());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, varOrderHeap0, eMARestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(solver1);

ISimplifier iSimplifier0 = solver0.getSimplifier();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(17, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(17, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(18, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(iSimplifier0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

UnitClause unitClause0 = new UnitClause((-602));
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(unitClause0.learnt());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, unitClause0.size());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertNotNull(unitClause0);

String string0 = unitClause0.toString((VarMapper) null);
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(unitClause0.learnt());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, unitClause0.size());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertNotNull(string0);
assertEquals("-301", string0);

solver0.removeSubsumedConstr((IConstr) null);

[MASTER] 07:50:08.012 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:08.021 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());

int[] intArray0 = new int[9];
intArray0[0] = (-1444);
intArray0[2] = 32;
intArray0[4] = (-1444);
intArray0[5] = 32;
intArray0[7] = (-1444);
intArray0[8] = (-1444);
NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

String string0 = solver0.getLogPrefix();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertNotNull(string0);
assertEquals("c ", string0);

SearchParams searchParams1 = new SearchParams(1517.669, 710.0, 0.0, 759);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);

double double0 = searchParams1.getVarDecay();
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(1517.669, double0, 0.01);

double double1 = searchParams1.getClaDecay();
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals(710.0, double1, 0.01);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams1, naturalStaticOrder0, lubyRestarts0, (ILogAble) null);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);

solver1.cancelUntil(1123);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());

boolean boolean0 = solver1.assume(9);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(759, searchParams1.getInitConflictBound());
assertEquals(710.0, searchParams1.getClaDecay(), 0.01);
assertEquals(1517.669, searchParams1.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.decisionLevel());
assertEquals(1, solver1.getPropagationLevel());
assertEquals(1, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertTrue(boolean0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());


[MASTER] 07:50:08.268 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:08.275 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, double1, 0.01);

PureOrder pureOrder0 = new PureOrder((-2601));
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2601));
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getReduceddb());
assertNotNull(solverStats0);

lubyRestarts0.init(searchParams1, solverStats0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getReduceddb());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("--- End Solver configuration ---");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("--- End Solver configuration ---");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("--- End Solver configuration ---");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--- End Solver configuration ---");
assertFalse(boolean0);

mUSLauncher0.log("--- End Solver configuration ---");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("--- End Solver configuration ---");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("--- End Solver configuration ---");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(solver0);

Constr constr0 = null;
solver0.claBumpActivity((Constr) null);

[MASTER] 07:50:08.497 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:08.498 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

int[] intArray0 = solver0.findModel();
assertEquals(0, intArray0.length);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(intArray0);
assertArrayEquals(new int[] {}, intArray0);


[MASTER] 07:50:08.827 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:08.854 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin1, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.5, double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(7, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int0);

int int1 = searchParams0.getInitConflictBound();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertTrue(int1 == int0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.nVars());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int1);

int int2 = searchParams0.getInitConflictBound();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(12, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(11, solver0.nVars());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int2);

int int3 = searchParams0.getInitConflictBound();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertTrue(int3 == int2);
assertTrue(int3 == int0);
assertTrue(int3 == int1);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(14, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(13, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int3);

int int4 = searchParams0.getInitConflictBound();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertTrue(int4 == int2);
assertTrue(int4 == int0);
assertTrue(int4 == int1);
assertTrue(int4 == int3);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(16, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(15, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(15, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int4);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals(double1, double0, 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(18, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(17, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(17, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.5, double1, 0.01);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver1.equals((Object)solver0));
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(19, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(20, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(19, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(solver1);

solver1.setLogPrefix("i");
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(solver1, solver0);
assertNotSame(cardinalityDataStructureYanMin0, cardinalityDataStructureYanMin1);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertNotSame(solver0, solver1);
assertFalse(solver1.equals((Object)solver0));
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(solver0.equals((Object)solver1));
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals("i", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(21, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(22, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(21, solver0.realNumberOfVariables());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);


[MASTER] 07:50:09.144 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:09.146 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-141));
assertEquals((-141), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams((-141), (-2034));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(0).when(varOrderHeap0).select();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(0, 0).when(varOrderHeap1).select();
TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1, (-59));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(tabuListDecorator1);

int int0 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0, int0);

int int1 = tabuListDecorator0.select();
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertTrue(int1 == int0);
assertEquals(0, int1);

int int2 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertTrue(int2 == int1);
assertTrue(int2 == int0);
assertEquals(0, int2);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator1, arminRestarts0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals((-141), fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

solver0.reset();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals((-141), fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());


[MASTER] 07:50:09.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:09.420 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(0).when(varOrderHeap0).select();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(0, 0).when(varOrderHeap1).select();
TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1, (-59));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(tabuListDecorator1);

int int0 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0, int0);

int int1 = tabuListDecorator0.select();
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertTrue(int1 == int0);
assertEquals(0, int1);

int int2 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals(0, int2);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertNotNull(solverStats0);

lubyRestarts0.init(searchParams1, solverStats0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator1, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(solver0);

solver0.setDataStructureFactory(mixedDataStructureDanielHT0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());


[MASTER] 07:50:09.721 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:09.733 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams((-141), (-2034));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
PrintWriter printWriter0 = new PrintWriter(writer0);
assertNotNull(printWriter0);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

LubyRestarts lubyRestarts0 = new LubyRestarts(20);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

solver0.printStat(printWriter0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructure>();
assertFalse(fixedLengthLearning2.equals((Object)fixedLengthLearning0));
assertEquals(3, fixedLengthLearning2.getMaxLength());
assertNotNull(fixedLengthLearning2);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(cardinalityDataStructure1);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning2, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
assertFalse(fixedLengthLearning2.equals((Object)fixedLengthLearning0));
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(3, fixedLengthLearning2.getMaxLength());
assertNotNull(solver1);

IVecInt iVecInt0 = solver1.unsatExplanation();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructure0, cardinalityDataStructure1);
assertNotSame(fixedLengthLearning2, fixedLengthLearning0);
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
assertFalse(fixedLengthLearning2.equals((Object)fixedLengthLearning0));
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(3, fixedLengthLearning2.getMaxLength());
assertNull(iVecInt0);

ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

IVecInt iVecInt1 = solver0.getOutLearnt();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2034), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-141.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, iVecInt1.size());
assertTrue(iVecInt1.isEmpty());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(20, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertNotNull(iVecInt1);

int[] intArray0 = new int[4];
fixedLengthLearning1.init();
assertEquals(3, fixedLengthLearning1.getMaxLength());

intArray0[0] = 20;
intArray0[1] = (-141);
intArray0[2] = 32;
intArray0[3] = (-141);
solver0.addClauseOnTheFly(intArray0);

[MASTER] 07:50:10.012 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:10.013 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, (RestartStrategy) null);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

solver0.unset((-1200));

[MASTER] 07:50:10.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:10.314 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams((-935.8901259), 0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

MiniSATRestarts miniSATRestarts1 = new MiniSATRestarts();
assertFalse(miniSATRestarts1.equals((Object)miniSATRestarts0));
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertNotNull(miniSATRestarts1);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

miniSATRestarts0.onBackjumpToRootLevel();
assertNotSame(miniSATRestarts0, miniSATRestarts1);
assertFalse(miniSATRestarts0.equals((Object)miniSATRestarts1));
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts1, (ILogAble) null);
assertFalse(miniSATRestarts1.equals((Object)miniSATRestarts0));
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

SearchParams searchParams1 = solver0.getSearchParams();
assertSame(searchParams1, searchParams0);
assertSame(searchParams0, searchParams1);
assertNotSame(miniSATRestarts1, miniSATRestarts0);
assertFalse(miniSATRestarts1.equals((Object)miniSATRestarts0));
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(searchParams1);

solver0.modelWithInternalVariables();

[MASTER] 07:50:10.620 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:10.622 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(0).when(varOrderHeap0).select();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(0, 0).when(varOrderHeap1).select();
doReturn((String) null).when(varOrderHeap1).toString();
TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1, (-59));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(tabuListDecorator1);

int int0 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0, int0);

int int1 = tabuListDecorator0.select();
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertTrue(int1 == int0);
assertEquals(0, int1);

int int2 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals(0, int2);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, tabuListDecorator1, (RestartStrategy) null);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

solver0.expireTimeout();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());


[MASTER] 07:50:10.904 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:10.913 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral((-668));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = null;
FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>((-668));
assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));
assertEquals((-668), fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertNotNull(mixedDataStructureDanielHT1);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning1, mixedDataStructureDanielHT1, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals((-668), fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
assertNotSame(fixedLengthLearning1, fixedLengthLearning0);
assertNotSame(mixedDataStructureDanielHT1, mixedDataStructureDanielHT0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals((-668), fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotNull(iVecInt0);

IVecInt iVecInt1 = vecInt0.clone();
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertNotSame(iVecInt1, vecInt0);
assertNotSame(iVecInt1, iVecInt0);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt1.equals((Object)iVecInt0));
assertTrue(iVecInt1.equals((Object)vecInt0));
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0, iVecInt1.size());
assertTrue(iVecInt1.isEmpty());
assertNotNull(iVecInt1);

vecInt0.clear();
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertTrue(vecInt0.equals((Object)iVecInt1));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

IVecInt iVecInt2 = iVecInt1.push(3054);
assertNotSame(vecInt0, iVecInt1);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt2);
assertSame(iVecInt1, iVecInt2);
assertNotSame(iVecInt1, vecInt0);
assertNotSame(iVecInt1, iVecInt0);
assertSame(iVecInt2, iVecInt1);
assertNotSame(iVecInt2, vecInt0);
assertNotSame(iVecInt2, iVecInt0);
assertFalse(vecInt0.equals((Object)iVecInt1));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertFalse(iVecInt1.equals((Object)vecInt0));
assertFalse(iVecInt1.equals((Object)iVecInt0));
assertFalse(iVecInt2.equals((Object)vecInt0));
assertFalse(iVecInt2.equals((Object)iVecInt0));
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(1, iVecInt1.size());
assertFalse(iVecInt1.isEmpty());
assertEquals(3054, iVecInt1.last());
assertEquals(3054, iVecInt2.last());
assertFalse(iVecInt2.isEmpty());
assertEquals(1, iVecInt2.size());
assertNotNull(iVecInt2);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VecInt vecInt1 = new VecInt(3054, 3054);
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertEquals(3054, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertEquals(3054, vecInt1.size());
assertNotNull(vecInt1);

IVecInt iVecInt3 = vecInt1.clone();
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt2);
assertNotSame(iVecInt3, iVecInt1);
assertNotSame(iVecInt3, vecInt0);
assertNotSame(iVecInt3, iVecInt2);
assertNotSame(iVecInt3, vecInt1);
assertNotSame(iVecInt3, iVecInt0);
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertFalse(iVecInt3.equals((Object)iVecInt1));
assertFalse(iVecInt3.equals((Object)vecInt0));
assertFalse(iVecInt3.equals((Object)iVecInt2));
assertFalse(iVecInt3.equals((Object)iVecInt0));
assertEquals(3054, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertEquals(3054, vecInt1.size());
assertEquals(3054, iVecInt3.size());
assertFalse(iVecInt3.isEmpty());
assertEquals(3054, iVecInt3.last());
assertNotNull(iVecInt3);

int[] intArray0 = iVecInt3.toArray();
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt2);
assertNotSame(iVecInt3, iVecInt1);
assertNotSame(iVecInt3, vecInt0);
assertNotSame(iVecInt3, iVecInt2);
assertNotSame(iVecInt3, vecInt1);
assertNotSame(iVecInt3, iVecInt0);
assertEquals(3054, intArray0.length);
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertFalse(iVecInt3.equals((Object)iVecInt1));
assertFalse(iVecInt3.equals((Object)vecInt0));
assertFalse(iVecInt3.equals((Object)iVecInt2));
assertFalse(iVecInt3.equals((Object)iVecInt0));
assertTrue(iVecInt3.equals((Object)vecInt1));
assertEquals(3054, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertEquals(3054, vecInt1.size());
assertEquals(3054, iVecInt3.size());
assertFalse(iVecInt3.isEmpty());
assertEquals(3054, iVecInt3.last());
assertNotNull(intArray0);

vecInt1.clear();
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt2);
assertTrue(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt3));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertTrue(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());

IVecInt iVecInt4 = iVecInt3.push(3054);
assertNotSame(vecInt1, iVecInt4);
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt2);
assertNotSame(iVecInt3, iVecInt1);
assertNotSame(iVecInt3, vecInt0);
assertNotSame(iVecInt3, iVecInt2);
assertSame(iVecInt3, iVecInt4);
assertNotSame(iVecInt3, vecInt1);
assertNotSame(iVecInt3, iVecInt0);
assertNotSame(iVecInt4, vecInt1);
assertSame(iVecInt4, iVecInt3);
assertNotSame(iVecInt4, vecInt0);
assertNotSame(iVecInt4, iVecInt2);
assertNotSame(iVecInt4, iVecInt1);
assertNotSame(iVecInt4, iVecInt0);
assertTrue(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt3));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertTrue(vecInt1.equals((Object)iVecInt0));
assertFalse(iVecInt3.equals((Object)iVecInt1));
assertFalse(iVecInt3.equals((Object)vecInt0));
assertFalse(iVecInt3.equals((Object)iVecInt2));
assertFalse(iVecInt3.equals((Object)vecInt1));
assertFalse(iVecInt3.equals((Object)iVecInt0));
assertFalse(iVecInt4.equals((Object)vecInt1));
assertFalse(iVecInt4.equals((Object)vecInt0));
assertFalse(iVecInt4.equals((Object)iVecInt2));
assertFalse(iVecInt4.equals((Object)iVecInt1));
assertFalse(iVecInt4.equals((Object)iVecInt0));
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertEquals(3055, iVecInt3.size());
assertFalse(iVecInt3.isEmpty());
assertEquals(3054, iVecInt3.last());
assertFalse(iVecInt4.isEmpty());
assertEquals(3054, iVecInt4.last());
assertEquals(3055, iVecInt4.size());
assertNotNull(iVecInt4);

solver0.addAtMost(iVecInt2, (-668));

[MASTER] 07:50:11.298 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:11.311 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, double1, 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(0).when(varOrderHeap0).select();
String string0 = searchParams0.toString();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(string0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.setVarDecay(0.01);
tabuListDecorator0.updateVarAtDecisionLevel(2834);
VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(0, 0).when(varOrderHeap1).select();
TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1, (-59));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertNotNull(tabuListDecorator1);

int int0 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0, int0);

int int1 = tabuListDecorator0.select();
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertTrue(int1 == int0);
assertEquals(0, int1);

int int2 = tabuListDecorator1.select();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals(0, int2);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertNotNull(solverStats0);

lubyRestarts0.init(searchParams1, solverStats0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator1, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(solver0);

solver0.stop();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams2 = new SearchParams(0);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams2);

double double2 = searchParams2.getConflictBoundIncFactor();
assertNotSame(searchParams2, searchParams0);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertNotEquals(double2, double1, 0.01);
assertNotEquals(double2, double0, 0.01);
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1.5, double2, 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral((-668));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams2, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(solver1);

Solver<MixedDataStructureDanielWL>[] solverArray0 = (Solver<MixedDataStructureDanielWL>[]) Array.newInstance(Solver.class, 0);
ManyCore<Solver<MixedDataStructureDanielWL>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWL>>(true, solverArray0);
assertEquals(0, solverArray0.length);
assertNotNull(manyCore0);

solver1.setUnitClauseProvider(manyCore0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(searchParams2, searchParams0);
assertEquals(0, solverArray0.length);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals((-1444L), lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1444), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());


[MASTER] 07:50:11.593 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:11.613 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(1517.669, 710.0, 0.0, 759);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1517.669, double0, 0.01);

double double1 = searchParams0.getClaDecay();
assertNotEquals(double1, double0, 0.01);
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals(710.0, double1, 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral((-668));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

LearningStrategy<CardinalityDataStructureYanMin> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMin>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, (-5233.960816354));
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);
assertArrayEquals(new int[] {}, intArray0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(learningStrategy0, cardinalityDataStructureYanMin1, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);
assertArrayEquals(new int[] {}, intArray0);

ILogAble iLogAble0 = solver0.out;
assertEquals(0, intArray0.length);
assertNotNull(iLogAble0);
assertArrayEquals(new int[] {}, intArray0);

iLogAble0.log((String) null);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertArrayEquals(new int[] {}, intArray0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, iLogAble0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(solver1.equals((Object)solver0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);
assertArrayEquals(new int[] {}, intArray0);

miniSATLearning0.setSolver(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(cardinalityDataStructureYanMin0, cardinalityDataStructureYanMin1);
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertNotSame(solver0, solver1);
assertNotSame(solver1, solver0);
assertEquals(0, intArray0.length);
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(solver0.equals((Object)solver1));
assertFalse(solver1.equals((Object)solver0));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-5233.960816354), randomWalkDecorator0.getProbability(), 0.01);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(7, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertArrayEquals(new int[] {}, intArray0);

LubyRestarts lubyRestarts1 = new LubyRestarts((-1444));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals((-1444), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertNotNull(lubyRestarts1);

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertNotNull(solverStats0);

lubyRestarts1.init(searchParams1, solverStats0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals((-1444L), lubyRestarts1.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());

lubyRestarts1.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals((-1444L), lubyRestarts1.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(solver2.equals((Object)solver0));
assertFalse(solver2.equals((Object)solver1));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(759, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1517.669, searchParams0.getVarDecay(), 0.01);
assertEquals(710.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1444L), lubyRestarts1.nextRestartNumberOfConflict());
assertEquals((-1444), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(5, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertNotNull(solver2);

int[] intArray1 = new int[9];
assertFalse(intArray1.equals((Object)intArray0));

intArray1[0] = (-1444);
intArray1[1] = 32;
intArray1[2] = 32;
intArray1[3] = 759;
intArray1[4] = (-1444);
intArray1[5] = 32;
intArray1[6] = 759;
intArray1[7] = (-1444);
intArray1[8] = (-1444);
solver2.backtrack(intArray1);

[MASTER] 07:50:11.820 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:50:11.822 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.assignLiteral(16384);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(6);
assertEquals(6, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

Constr constr0 = Constr.TAUTOLOGY;
assertNotNull(constr0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

Pair pair0 = new Pair();
assertEquals(0, pair0.getBacktrackLevel());
assertNotNull(pair0);

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

solver0.analyze(constr0, pair0);

[MASTER] 07:50:12.234 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:12.246 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

int int0 = (-668);
naturalStaticOrder0.assignLiteral((-668));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = null;
FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>((-668));
assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));
assertEquals((-668), fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertNotNull(mixedDataStructureDanielHT1);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning1, mixedDataStructureDanielHT1, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals((-668), fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

VecInt vecInt0 = new VecInt(3054, 3054);
assertEquals(3054, vecInt0.size());
assertEquals(3054, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertNotNull(vecInt0);

IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
assertNotSame(fixedLengthLearning1, fixedLengthLearning0);
assertNotSame(mixedDataStructureDanielHT1, mixedDataStructureDanielHT0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals((-668), fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3055, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(3055, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(3056, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(3054, vecInt0.size());
assertEquals(3054, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertFalse(iVecInt0.isEmpty());
assertEquals(6108, iVecInt0.last());
assertEquals(3054, iVecInt0.size());
assertNotNull(iVecInt0);

IVecInt iVecInt1 = vecInt0.clone();
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertNotSame(iVecInt1, vecInt0);
assertNotSame(iVecInt1, iVecInt0);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(iVecInt1.equals((Object)iVecInt0));
assertEquals(3054, vecInt0.size());
assertEquals(3054, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(3054, iVecInt1.size());
assertFalse(iVecInt1.isEmpty());
assertEquals(3054, iVecInt1.last());
assertNotNull(iVecInt1);

vecInt0.clear();
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(vecInt0.equals((Object)iVecInt1));
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IVecInt iVecInt2 = iVecInt1.push(3054);
assertNotSame(iVecInt2, vecInt0);
assertNotSame(iVecInt2, iVecInt0);
assertSame(iVecInt2, iVecInt1);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertNotSame(vecInt0, iVecInt2);
assertNotSame(iVecInt1, vecInt0);
assertSame(iVecInt1, iVecInt2);
assertNotSame(iVecInt1, iVecInt0);
assertFalse(iVecInt2.equals((Object)vecInt0));
assertFalse(iVecInt2.equals((Object)iVecInt0));
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(vecInt0.equals((Object)iVecInt1));
assertFalse(iVecInt1.equals((Object)vecInt0));
assertFalse(iVecInt1.equals((Object)iVecInt0));
assertFalse(iVecInt2.isEmpty());
assertEquals(3055, iVecInt2.size());
assertEquals(3054, iVecInt2.last());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(iVecInt1.isEmpty());
assertEquals(3055, iVecInt1.size());
assertEquals(3054, iVecInt1.last());
assertNotNull(iVecInt2);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMin>(1);
assertEquals(1, fixedLengthLearning2.getMaxLength());
assertNotNull(fixedLengthLearning2);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning2, cardinalityDataStructureYanMin0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals(1, fixedLengthLearning2.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(solver1);

VecInt vecInt1 = new VecInt(3054, 3054);
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.isEmpty());
assertEquals(3054, vecInt1.size());
assertEquals(3054, vecInt1.last());
assertNotNull(vecInt1);

IVecInt iVecInt3 = vecInt1.clone();
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, iVecInt2);
assertNotSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(iVecInt3, vecInt0);
assertNotSame(iVecInt3, iVecInt2);
assertNotSame(iVecInt3, iVecInt1);
assertNotSame(iVecInt3, iVecInt0);
assertNotSame(iVecInt3, vecInt1);
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(iVecInt3.equals((Object)vecInt0));
assertFalse(iVecInt3.equals((Object)iVecInt2));
assertFalse(iVecInt3.equals((Object)iVecInt1));
assertFalse(iVecInt3.equals((Object)iVecInt0));
assertFalse(vecInt1.isEmpty());
assertEquals(3054, vecInt1.size());
assertEquals(3054, vecInt1.last());
assertFalse(iVecInt3.isEmpty());
assertEquals(3054, iVecInt3.last());
assertEquals(3054, iVecInt3.size());
assertNotNull(iVecInt3);

int[] intArray0 = iVecInt3.toArray();
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, iVecInt2);
assertNotSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(iVecInt3, vecInt0);
assertNotSame(iVecInt3, iVecInt2);
assertNotSame(iVecInt3, iVecInt1);
assertNotSame(iVecInt3, iVecInt0);
assertNotSame(iVecInt3, vecInt1);
assertEquals(3054, intArray0.length);
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(iVecInt3.equals((Object)vecInt0));
assertFalse(iVecInt3.equals((Object)iVecInt2));
assertFalse(iVecInt3.equals((Object)iVecInt1));
assertFalse(iVecInt3.equals((Object)iVecInt0));
assertTrue(iVecInt3.equals((Object)vecInt1));
assertFalse(vecInt1.isEmpty());
assertEquals(3054, vecInt1.size());
assertEquals(3054, vecInt1.last());
assertFalse(iVecInt3.isEmpty());
assertEquals(3054, iVecInt3.last());
assertEquals(3054, iVecInt3.size());
assertNotNull(intArray0);

vecInt1.clear();
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, iVecInt2);
assertNotSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, vecInt0);
assertTrue(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertFalse(vecInt1.equals((Object)iVecInt3));
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());

IVecInt iVecInt4 = iVecInt3.push(3054);
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, iVecInt2);
assertNotSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt4);
assertNotSame(iVecInt3, vecInt0);
assertNotSame(iVecInt3, iVecInt2);
assertNotSame(iVecInt3, iVecInt1);
assertNotSame(iVecInt3, iVecInt0);
assertSame(iVecInt3, iVecInt4);
assertNotSame(iVecInt3, vecInt1);
assertNotSame(iVecInt4, iVecInt1);
assertNotSame(iVecInt4, iVecInt0);
assertNotSame(iVecInt4, iVecInt2);
assertNotSame(iVecInt4, vecInt0);
assertNotSame(iVecInt4, vecInt1);
assertSame(iVecInt4, iVecInt3);
assertTrue(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertFalse(vecInt1.equals((Object)iVecInt3));
assertFalse(iVecInt3.equals((Object)vecInt0));
assertTrue(iVecInt3.equals((Object)iVecInt1));
assertFalse(iVecInt3.equals((Object)iVecInt0));
assertFalse(iVecInt3.equals((Object)vecInt1));
assertFalse(iVecInt4.equals((Object)iVecInt0));
assertTrue(iVecInt4.equals((Object)iVecInt1));
assertFalse(iVecInt4.equals((Object)vecInt0));
assertFalse(iVecInt4.equals((Object)vecInt1));
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertFalse(iVecInt3.isEmpty());
assertEquals(3054, iVecInt3.last());
assertEquals(3055, iVecInt3.size());
assertEquals(3054, iVecInt4.last());
assertFalse(iVecInt4.isEmpty());
assertEquals(3055, iVecInt4.size());
assertNotNull(iVecInt4);

solver1.isSatisfiable(iVecInt4);

[MASTER] 07:50:12.550 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:12.552 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(1);
assertEquals(1, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PureOrder pureOrder0 = new PureOrder((-2601));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " conflicts");
assertFalse(boolean0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2601));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, randomWalkDecorator0, (RestartStrategy) null);
assertEquals(1, fixedLengthLearning0.getMaxLength());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

solver0.isSatisfiable();

[MASTER] 07:50:12.915 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:12.929 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn((-835.56)).when(searchParams0).getConflictBoundIncFactor();
doReturn((-4157), (-2892)).when(searchParams0).getInitConflictBound();
FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(7);
assertEquals(7, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap1, arminRestarts0, mUSLauncher0);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(7, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

SolverStats solverStats0 = solver0.stats;
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertNotNull(solverStats0);

arminRestarts0.init(searchParams0, solverStats0);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals((-4157L), arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(7, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());

arminRestarts0.onRestart();
assertEquals(3473423L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, arminRestarts0);
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(3473423L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertNotNull(solver1);

SimplificationType simplificationType0 = SimplificationType.NO_SIMPLIFICATION;
byte[] byteArray0 = new byte[7];
byteArray0[0] = (byte) (-65);
byteArray0[1] = (byte)13;
byteArray0[2] = (byte) (-28);
byteArray0[3] = (byte) (-53);
byteArray0[4] = (byte)33;
byteArray0[5] = (byte)13;
byteArray0[6] = (byte) (-14);
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertEquals(7, byteArray0.length);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte) (-65), (byte)13, (byte) (-28), (byte) (-53), (byte)33, (byte)13, (byte) (-14)}, byteArray0);

solver1.setSimplifier(simplificationType0);
assertNotSame(varOrderHeap0, varOrderHeap1);
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(3473423L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.newVar());

VecInt vecInt0 = new VecInt(3054, 3054);
assertEquals(3054, vecInt0.size());
assertEquals(3054, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertNotNull(vecInt0);

IVecInt iVecInt0 = vecInt0.clone();
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(3054, vecInt0.size());
assertEquals(3054, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(3054, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(3054, iVecInt0.size());
assertNotNull(iVecInt0);

int[] intArray0 = iVecInt0.toArray();
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(3054, intArray0.length);
assertTrue(iVecInt0.equals((Object)vecInt0));
assertEquals(3054, vecInt0.size());
assertEquals(3054, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(3054, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(3054, iVecInt0.size());
assertNotNull(intArray0);

vecInt0.clear();
assertNotSame(vecInt0, iVecInt0);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

IVecInt iVecInt1 = iVecInt0.push(3054);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertSame(iVecInt0, iVecInt1);
assertNotSame(iVecInt0, vecInt0);
assertSame(iVecInt1, iVecInt0);
assertNotSame(iVecInt1, vecInt0);
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(iVecInt1.equals((Object)vecInt0));
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(3054, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(3055, iVecInt0.size());
assertEquals(3055, iVecInt1.size());
assertFalse(iVecInt1.isEmpty());
assertEquals(3054, iVecInt1.last());
assertNotNull(iVecInt1);

solver0.addBlockingClause(iVecInt1);

[MASTER] 07:50:13.340 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:13.373 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, double0, 0.01);

Float float0 = new Float(0.95);
assertNotNull(float0);
assertEquals(0.95F, (float)float0, 0.01F);

PureOrder pureOrder0 = new PureOrder((-2601));
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

double double1 = pureOrder0.varActivity(0);
assertNotEquals(double1, double0, 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.0, double1, 0.01);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2601));
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(boolean0);

LearningStrategy<CardinalityDataStructureYanMin> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMin>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);

RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(subsetVarOrder0, 0.0);
assertEquals(0, intArray0.length);
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.0, randomWalkDecorator1.getProbability(), 0.01);
assertNotNull(randomWalkDecorator1);
assertArrayEquals(new int[] {}, intArray0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(learningStrategy0, cardinalityDataStructureYanMin1, searchParams0, pureOrder0, glucose21Restarts0, mUSLauncher0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(solver0);

solver0.expireTimeout();
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(57);
assertEquals(57, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningNoHeuristics0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(solver1);

Lbool lbool0 = solver1.truthValue(112);
assertNotSame(randomWalkDecorator0, randomWalkDecorator1);
assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("U", lbool0.toString());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(lbool0);

ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-2601));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2601.0), activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, subsetVarOrder0, glucose21Restarts0);
assertEquals(0, intArray0.length);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2601.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver2);
assertArrayEquals(new int[] {}, intArray0);

int[] intArray1 = solver2.findModel();
assertNotSame(intArray1, intArray0);
assertNotSame(intArray0, intArray1);
assertEquals(0, intArray1.length);
assertEquals(0, intArray0.length);
assertFalse(intArray1.equals((Object)intArray0));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2601.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(3, solver2.nVars());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(intArray1);
assertArrayEquals(new int[] {}, intArray1);
assertArrayEquals(new int[] {}, intArray0);

ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, searchParams0, subsetVarOrder0, glucose21Restarts0);
assertEquals(0, intArray0.length);
assertFalse(intArray0.equals((Object)intArray1));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(2, solver3.newVar());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver3);
assertArrayEquals(new int[] {}, intArray0);

boolean boolean1 = solver3.isSolverKeptHot();
assertNotSame(intArray0, intArray1);
assertEquals(0, intArray0.length);
assertFalse(intArray0.equals((Object)intArray1));
assertTrue(boolean1 == boolean0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(4, solver3.newVar());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(3, solver3.nVars());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(boolean1);
assertArrayEquals(new int[] {}, intArray0);


[MASTER] 07:50:13.672 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:13.675 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

MUSLauncher mUSLauncher1 = new MUSLauncher();
assertFalse(mUSLauncher1.equals((Object)mUSLauncher0));
assertFalse(mUSLauncher1.isSilent());
assertEquals(0L, mUSLauncher1.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
assertNotNull(mUSLauncher1);

SearchParams searchParams0 = new SearchParams((-2810));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2810), searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

UnitClause unitClause0 = new UnitClause(3015);
assertTrue(unitClause0.isSatisfied());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(unitClause0.learnt());
assertNotNull(unitClause0);

DotSearchTracing<OriginalBinaryClause> dotSearchTracing0 = new DotSearchTracing<OriginalBinaryClause>("c ");
assertNotNull(dotSearchTracing0);

String string0 = unitClause0.toString(dotSearchTracing0);
assertTrue(unitClause0.isSatisfied());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(unitClause0.learnt());
assertNotNull(string0);
assertEquals("-1507", string0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

solver0.suggestNextLiteralToBranchOn(32);

[MASTER] 07:50:13.936 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:13.938 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-2842.5));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2842.5), activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams((-935.8901259), 0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, int0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertNotNull(noRestarts0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, noRestarts0, (ILogAble) null);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2842.5), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-935.8901259), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, varOrderHeap0, noRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);

solver1.model(0);

[MASTER] 07:50:14.215 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:14.225 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, double0, 0.01);

Float float0 = new Float(0.95);
assertNotNull(float0);
assertEquals(0.95F, (float)float0, 0.01F);

PureOrder pureOrder0 = new PureOrder((-2601));
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

double double1 = pureOrder0.varActivity(0);
assertNotEquals(double1, double0, 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0.0, double1, 0.01);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2601));
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.varDecayActivity();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(boolean0);

LearningStrategy<CardinalityDataStructureYanMin> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMin>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertNotNull(cardinalityDataStructureYanMin1);

int[] intArray0 = new int[0];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {}, intArray0);

RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(subsetVarOrder0, 0.0);
assertEquals(0, intArray0.length);
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0.0, randomWalkDecorator1.getProbability(), 0.01);
assertNotNull(randomWalkDecorator1);
assertArrayEquals(new int[] {}, intArray0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(learningStrategy0, cardinalityDataStructureYanMin1, searchParams0, pureOrder0, glucose21Restarts0, mUSLauncher0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(solver0);

solver0.expireTimeout();
assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(57);
assertEquals(57, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningNoHeuristics0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(solver1);

Lbool lbool0 = solver1.truthValue(112);
assertNotSame(randomWalkDecorator0, randomWalkDecorator1);
assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2601), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals("U", lbool0.toString());
assertEquals((-2601.0), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(lbool0);


[MASTER] 07:50:14.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:14.492 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(1175);
assertEquals(1175, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(1175, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

searchParams0.setConflictBoundIncFactor(1175);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1175.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(1175, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1175.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());


[MASTER] 07:50:14.800 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:50:14.805 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

int int0 = solver0.newVar(32);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(33, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(34, solver0.newVar());
assertEquals(32, solver0.nVars());
assertEquals(32, int0);

int[] intArray0 = solver0.findModel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, intArray0.length);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(35, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(36, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, solver0.nVars());
assertNotNull(intArray0);
assertArrayEquals(new int[] {}, intArray0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
