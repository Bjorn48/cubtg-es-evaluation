/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 00:25:10 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSEvaluate_ESTest extends JSEvaluate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = JSEvaluate.maxElement(jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertNotNull(jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      boolean boolean0 = jSTerm1.add((Object) jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = JSEvaluate.not(jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[]]", jSTerm1.toString());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.not((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.member((JSTerm) null, (JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(1183.0F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[1183.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = null;
      JSTerm jSTerm0 = JSEvaluate.minOf(0.0F, 0.0F);
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        jSTerm0.subList((-699), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -699
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("member", jSTerm0, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult((-2158.8306F), (-2158.8306F));
      assertNotNull(jSTerm0);
      assertEquals("[4660549.5]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      boolean boolean0 = jSTerm0.add((Object) "Eeil");
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[4660549.5, Eeil]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("Eeil", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[4660549.5, Eeil]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(595.4599F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[596.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("/", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[596.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[1.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[1.0]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = JSEvaluate.ceil(1.0F);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[1.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm2 = JSEvaluate.div(4692.8F, 3383.99F);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals("[1.3867652]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = JSEvaluate.maxOf(401.0F, 1.0F);
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[401.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSTerm jSTerm4 = JSEvaluate.greater(1.0F, (-623.38635F));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertNotNull(jSTerm4);
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEval());
      assertEquals(10, jSTerm4.capacity());
      assertEquals("[t]", jSTerm4.toString());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      
      JSTerm jSTerm5 = JSEvaluate.addsub(1.0F, (-3063.68F), 461);
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertNotNull(jSTerm5);
      assertTrue(jSTerm5.isConstant());
      assertFalse(jSTerm5.isVariable());
      assertEquals("[-1412355.5]", jSTerm5.toString());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isFunction());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isEmpty());
      assertEquals(1, jSTerm5.size());
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm1);
      
      JSTerm jSTerm6 = JSEvaluate.applyOperator("+", jSTerm3, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm4));
      assertFalse(jSTerm1.equals((Object)jSTerm5));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm5));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertNotNull(jSTerm6);
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[1.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[401.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm6.isEmpty());
      assertEquals(1, jSTerm6.size());
      assertFalse(jSTerm6.isEval());
      assertTrue(jSTerm6.isConstant());
      assertFalse(jSTerm6.isVariable());
      assertEquals("[402.0]", jSTerm6.toString());
      assertEquals(10, jSTerm6.capacity());
      assertFalse(jSTerm6.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm6);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm5);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm6);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm5);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf((-3117.2615F), (-3117.2615F));
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[-3117.2615]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("not", jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[1.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = JSEvaluate.maxElement(jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[1.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      assertNotNull(jSTerm0);
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = JSEvaluate.floor(1.0F);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[1.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm2 = JSEvaluate.applyOperator("member", jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[1.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = JSEvaluate.maxOf(1.4E-45F, 1.0F);
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.isFunction());
      assertEquals("[1.0]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub((-2403.0F), (-2403.0F), 1);
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[-4806.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm0.add(object0);
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = jSTerm0.add(object1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(object1, object0);
      assertTrue(boolean1);
      
      JSTerm jSTerm2 = JSEvaluate.minOf(847.0499F, (-658.2F));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals("[-658.2]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = JSEvaluate.maxOf(1082.0F, 847.0499F);
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertNotNull(jSTerm3);
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[1082.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      
      JSTerm jSTerm4 = JSEvaluate.minElement(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertNotNull(jSTerm4);
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[1082.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isEval());
      assertEquals(0, jSTerm4.size());
      assertTrue(jSTerm4.isEmpty());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isConstant());
      assertEquals("[]", jSTerm4.toString());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm2);
      
      JSTerm jSTerm5 = JSEvaluate.ceil(847.0499F);
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertNotNull(jSTerm5);
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isFunction());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isEmpty());
      assertEquals(1, jSTerm5.size());
      assertFalse(jSTerm5.isEval());
      assertEquals("[848.0]", jSTerm5.toString());
      assertTrue(jSTerm5.isConstant());
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(595.4599F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[596.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("*", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[596.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[355216.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal(1348.508F, 1971.4653F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(595.4599F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[596.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      
      JSTerm jSTerm1 = JSEvaluate.not(jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[596.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm0.add(object0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        JSEvaluate.minElement(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(1.0F, 1.0F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("max", jSTerm0, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[1.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(47.541565F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[47.0]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = JSEvaluate.maxOf(47.541565F, 47.541565F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[47.541565]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.applyOperator("<=", jSTerm1, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[47.541565]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(0, jSTerm2.size());
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSTerm jSTerm3 = JSEvaluate.applyOperator(":t|~&Q", jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[47.0]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[47.541565]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm3.isEmpty());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isConstant());
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater((-509.0F), (-509.0F));
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary((String) null, jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(708.49F);
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[708.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("ceil", jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[708.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[708.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater(596.13916F, (-2730.795F));
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[t]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(595.4599F, 263.65F);
      assertNotNull(jSTerm0);
      assertEquals("[595.4599]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = JSEvaluate.div(595.4599F, 263.65F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[2.2585242]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.floor(263.65F);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotNull(jSTerm2);
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[263.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = JSEvaluate.applyOperator("-", jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertNotNull(jSTerm3);
      assertEquals("[595.4599]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[2.2585242]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertEquals("[-593.20135]", jSTerm3.toString());
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm0 = JSEvaluate.addsub(668.39355F, (-3117.2615F), 461);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertEquals("[-1436389.1]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("^$<}<", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertEquals("[-1436389.1]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal((-1.0F), 0.0F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      assertNotNull(predicate0);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      Predicate<Integer> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      Predicate<Integer> predicate2 = predicate0.negate();
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      Predicate<Integer> predicate3 = predicate0.and(predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate1);
      
      Predicate<Integer> predicate4 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotSame(predicate1, predicate3);
      
      Predicate<Integer> predicate5 = predicate1.and(predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotNull(predicate5);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate1);
      
      Predicate<JSTerm> predicate6 = Predicate.isEqual((Object) predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertNotNull(predicate6);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      
      Predicate<Integer> predicate7 = predicate4.negate();
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate5));
      assertNotNull(predicate7);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate7, predicate2);
      
      Predicate<Integer> predicate8 = predicate7.negate();
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate0));
      assertNotNull(predicate8);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate7, predicate8);
      assertNotSame(predicate7, predicate2);
      assertNotSame(predicate8, predicate7);
      assertNotSame(predicate8, predicate2);
      
      boolean boolean0 = jSTerm0.removeIf(predicate7);
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate5));
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate7, predicate8);
      assertNotSame(predicate7, predicate2);
      assertFalse(boolean0);
      
      JSTerm jSTerm1 = JSEvaluate.addsub(0.0F, (-1.0F), 729);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.isConstant());
      assertEquals("[-729.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.maxElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.sort(comparator0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = JSEvaluate.member(jSTerm1, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[-729.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isEmpty());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      
      boolean boolean1 = jSTerm1.add((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[-729.0, null]", jSTerm1.toString());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(boolean1);
      
      JSTerm jSTerm4 = JSEvaluate.maxOf((-1.0F), (-1.0F));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertNotNull(jSTerm4);
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertTrue(jSTerm4.isConstant());
      assertEquals("[-1.0]", jSTerm4.toString());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      
      JSTerm jSTerm5 = JSEvaluate.greater(729, (-2358.0F));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertNotNull(jSTerm5);
      assertEquals(1, jSTerm5.size());
      assertFalse(jSTerm5.isFunction());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isEmpty());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isVariable());
      assertTrue(jSTerm5.isConstant());
      assertEquals("[t]", jSTerm5.toString());
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm4);
      
      JSTerm jSTerm6 = JSEvaluate.notequal(0.0F, 0.0F);
      assertTrue(jSTerm6.equals((Object)jSTerm3));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertTrue(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertTrue(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm4));
      assertNotNull(jSTerm6);
      assertEquals(10, jSTerm6.capacity());
      assertFalse(jSTerm6.isFunction());
      assertFalse(jSTerm6.isVariable());
      assertEquals(0, jSTerm6.size());
      assertFalse(jSTerm6.isEval());
      assertFalse(jSTerm6.isConstant());
      assertEquals("[]", jSTerm6.toString());
      assertTrue(jSTerm6.isEmpty());
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm3);
      
      JSTerm jSTerm7 = JSEvaluate.not(jSTerm3);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm6));
      assertFalse(jSTerm0.equals((Object)jSTerm4));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm5));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm7.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm6));
      assertFalse(jSTerm7.equals((Object)jSTerm0));
      assertTrue(jSTerm7.equals((Object)jSTerm5));
      assertFalse(jSTerm7.equals((Object)jSTerm3));
      assertFalse(jSTerm7.equals((Object)jSTerm4));
      assertFalse(jSTerm7.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm5));
      assertFalse(jSTerm1.equals((Object)jSTerm6));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm4));
      assertFalse(jSTerm2.equals((Object)jSTerm5));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm6));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm6));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm5));
      assertNotNull(jSTerm7);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm7.isVariable());
      assertEquals(10, jSTerm7.capacity());
      assertEquals("[t]", jSTerm7.toString());
      assertTrue(jSTerm7.isConstant());
      assertEquals(1, jSTerm7.size());
      assertFalse(jSTerm7.isEval());
      assertFalse(jSTerm7.isEmpty());
      assertFalse(jSTerm7.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[-729.0, null]", jSTerm1.toString());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isEmpty());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm7);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm6);
      assertNotSame(jSTerm0, jSTerm5);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm7, jSTerm2);
      assertNotSame(jSTerm7, jSTerm6);
      assertNotSame(jSTerm7, jSTerm0);
      assertNotSame(jSTerm7, jSTerm3);
      assertNotSame(jSTerm7, jSTerm4);
      assertNotSame(jSTerm7, jSTerm5);
      assertNotSame(jSTerm7, jSTerm1);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm7);
      assertNotSame(jSTerm1, jSTerm5);
      assertNotSame(jSTerm1, jSTerm6);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm2, jSTerm5);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm7);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm6);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm7);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm5);
      assertNotSame(jSTerm3, jSTerm6);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSTerm jSTerm8 = JSEvaluate.equal(0.0F, 5079.28F);
      assertFalse(jSTerm8.equals((Object)jSTerm1));
      assertFalse(jSTerm8.equals((Object)jSTerm7));
      assertTrue(jSTerm8.equals((Object)jSTerm0));
      assertTrue(jSTerm8.equals((Object)jSTerm6));
      assertTrue(jSTerm8.equals((Object)jSTerm3));
      assertFalse(jSTerm8.equals((Object)jSTerm5));
      assertFalse(jSTerm8.equals((Object)jSTerm4));
      assertTrue(jSTerm8.equals((Object)jSTerm2));
      assertNotNull(jSTerm8);
      assertFalse(jSTerm8.isConstant());
      assertEquals("[]", jSTerm8.toString());
      assertEquals(10, jSTerm8.capacity());
      assertFalse(jSTerm8.isFunction());
      assertFalse(jSTerm8.isVariable());
      assertEquals(0, jSTerm8.size());
      assertFalse(jSTerm8.isEval());
      assertTrue(jSTerm8.isEmpty());
      assertNotSame(jSTerm8, jSTerm1);
      assertNotSame(jSTerm8, jSTerm7);
      assertNotSame(jSTerm8, jSTerm5);
      assertNotSame(jSTerm8, jSTerm2);
      assertNotSame(jSTerm8, jSTerm0);
      assertNotSame(jSTerm8, jSTerm6);
      assertNotSame(jSTerm8, jSTerm4);
      assertNotSame(jSTerm8, jSTerm3);
      
      JSTerm jSTerm9 = JSEvaluate.notequal((-1.0F), (-2358.0F));
      assertFalse(jSTerm9.equals((Object)jSTerm1));
      assertFalse(jSTerm9.equals((Object)jSTerm8));
      assertFalse(jSTerm9.equals((Object)jSTerm4));
      assertFalse(jSTerm9.equals((Object)jSTerm3));
      assertFalse(jSTerm9.equals((Object)jSTerm6));
      assertFalse(jSTerm9.equals((Object)jSTerm0));
      assertTrue(jSTerm9.equals((Object)jSTerm5));
      assertTrue(jSTerm9.equals((Object)jSTerm7));
      assertFalse(jSTerm9.equals((Object)jSTerm2));
      assertNotNull(jSTerm9);
      assertTrue(jSTerm9.isConstant());
      assertEquals(10, jSTerm9.capacity());
      assertEquals("[t]", jSTerm9.toString());
      assertFalse(jSTerm9.isFunction());
      assertEquals(1, jSTerm9.size());
      assertFalse(jSTerm9.isVariable());
      assertFalse(jSTerm9.isEval());
      assertFalse(jSTerm9.isEmpty());
      assertNotSame(jSTerm9, jSTerm1);
      assertNotSame(jSTerm9, jSTerm7);
      assertNotSame(jSTerm9, jSTerm8);
      assertNotSame(jSTerm9, jSTerm4);
      assertNotSame(jSTerm9, jSTerm3);
      assertNotSame(jSTerm9, jSTerm6);
      assertNotSame(jSTerm9, jSTerm0);
      assertNotSame(jSTerm9, jSTerm5);
      assertNotSame(jSTerm9, jSTerm2);
      
      JSTerm jSTerm10 = JSEvaluate.notequal((-2286.719F), (-1.0F));
      assertTrue(jSTerm10.equals((Object)jSTerm7));
      assertFalse(jSTerm10.equals((Object)jSTerm6));
      assertFalse(jSTerm10.equals((Object)jSTerm0));
      assertFalse(jSTerm10.equals((Object)jSTerm3));
      assertFalse(jSTerm10.equals((Object)jSTerm1));
      assertFalse(jSTerm10.equals((Object)jSTerm4));
      assertFalse(jSTerm10.equals((Object)jSTerm8));
      assertTrue(jSTerm10.equals((Object)jSTerm5));
      assertTrue(jSTerm10.equals((Object)jSTerm9));
      assertFalse(jSTerm10.equals((Object)jSTerm2));
      assertNotNull(jSTerm10);
      assertFalse(jSTerm10.isVariable());
      assertFalse(jSTerm10.isFunction());
      assertTrue(jSTerm10.isConstant());
      assertEquals("[t]", jSTerm10.toString());
      assertFalse(jSTerm10.isEmpty());
      assertFalse(jSTerm10.isEval());
      assertEquals(1, jSTerm10.size());
      assertEquals(10, jSTerm10.capacity());
      assertNotSame(jSTerm10, jSTerm5);
      assertNotSame(jSTerm10, jSTerm6);
      assertNotSame(jSTerm10, jSTerm0);
      assertNotSame(jSTerm10, jSTerm3);
      assertNotSame(jSTerm10, jSTerm9);
      assertNotSame(jSTerm10, jSTerm1);
      assertNotSame(jSTerm10, jSTerm7);
      assertNotSame(jSTerm10, jSTerm4);
      assertNotSame(jSTerm10, jSTerm8);
      assertNotSame(jSTerm10, jSTerm2);
      
      JSTerm jSTerm11 = JSEvaluate.not(jSTerm10);
      assertTrue(jSTerm10.equals((Object)jSTerm7));
      assertFalse(jSTerm10.equals((Object)jSTerm6));
      assertFalse(jSTerm10.equals((Object)jSTerm0));
      assertFalse(jSTerm10.equals((Object)jSTerm3));
      assertFalse(jSTerm10.equals((Object)jSTerm1));
      assertFalse(jSTerm10.equals((Object)jSTerm4));
      assertFalse(jSTerm10.equals((Object)jSTerm8));
      assertTrue(jSTerm10.equals((Object)jSTerm5));
      assertTrue(jSTerm10.equals((Object)jSTerm9));
      assertFalse(jSTerm10.equals((Object)jSTerm2));
      assertTrue(jSTerm11.equals((Object)jSTerm8));
      assertFalse(jSTerm11.equals((Object)jSTerm4));
      assertTrue(jSTerm11.equals((Object)jSTerm2));
      assertFalse(jSTerm11.equals((Object)jSTerm9));
      assertFalse(jSTerm11.equals((Object)jSTerm1));
      assertFalse(jSTerm11.equals((Object)jSTerm7));
      assertFalse(jSTerm11.equals((Object)jSTerm10));
      assertTrue(jSTerm11.equals((Object)jSTerm0));
      assertTrue(jSTerm11.equals((Object)jSTerm6));
      assertTrue(jSTerm11.equals((Object)jSTerm3));
      assertFalse(jSTerm11.equals((Object)jSTerm5));
      assertNotNull(jSTerm11);
      assertFalse(jSTerm10.isVariable());
      assertFalse(jSTerm10.isFunction());
      assertTrue(jSTerm10.isConstant());
      assertEquals("[t]", jSTerm10.toString());
      assertFalse(jSTerm10.isEmpty());
      assertFalse(jSTerm10.isEval());
      assertEquals(1, jSTerm10.size());
      assertEquals(10, jSTerm10.capacity());
      assertEquals(0, jSTerm11.size());
      assertFalse(jSTerm11.isEval());
      assertFalse(jSTerm11.isConstant());
      assertTrue(jSTerm11.isEmpty());
      assertFalse(jSTerm11.isVariable());
      assertEquals(10, jSTerm11.capacity());
      assertEquals("[]", jSTerm11.toString());
      assertFalse(jSTerm11.isFunction());
      assertNotSame(jSTerm10, jSTerm11);
      assertNotSame(jSTerm10, jSTerm5);
      assertNotSame(jSTerm10, jSTerm6);
      assertNotSame(jSTerm10, jSTerm0);
      assertNotSame(jSTerm10, jSTerm3);
      assertNotSame(jSTerm10, jSTerm9);
      assertNotSame(jSTerm10, jSTerm1);
      assertNotSame(jSTerm10, jSTerm7);
      assertNotSame(jSTerm10, jSTerm4);
      assertNotSame(jSTerm10, jSTerm8);
      assertNotSame(jSTerm10, jSTerm2);
      assertNotSame(jSTerm11, jSTerm3);
      assertNotSame(jSTerm11, jSTerm0);
      assertNotSame(jSTerm11, jSTerm4);
      assertNotSame(jSTerm11, jSTerm6);
      assertNotSame(jSTerm11, jSTerm8);
      assertNotSame(jSTerm11, jSTerm9);
      assertNotSame(jSTerm11, jSTerm1);
      assertNotSame(jSTerm11, jSTerm7);
      assertNotSame(jSTerm11, jSTerm10);
      assertNotSame(jSTerm11, jSTerm2);
      assertNotSame(jSTerm11, jSTerm5);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(595.4599F, 595.4599F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[595.4599]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("not", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[595.4599]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil((-2384.91F));
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[-2384.0]", jSTerm0.toString());
      
      jSTerm0.makeVariable();
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[-2384.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.print();
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[-2384.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      boolean boolean0 = jSTerm0.add((Object) "`>/`<y");
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertEquals("[-2384.0, `>/`<y]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
      
      Iterator iterator0 = jSTerm0.iterator();
      assertNotNull(iterator0);
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertEquals("[-2384.0, `>/`<y]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      
      boolean boolean1 = jSTerm0.add((Object) "*\"w+_Mu");
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(3, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[-2384.0, `>/`<y, *\"w+_Mu]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean1);
      
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("`>/`<y", jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(3, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[-2384.0, `>/`<y, *\"w+_Mu]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.maxOf((-2384.91F), 0.0F);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm3 = JSEvaluate.equal(0.0F, 3682.0F);
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isEmpty());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[]", jSTerm3.toString());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      
      JSTerm jSTerm4 = JSEvaluate.member(jSTerm3, jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertNotNull(jSTerm4);
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isEmpty());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEval());
      assertEquals(0, jSTerm4.size());
      assertTrue(jSTerm4.isEmpty());
      assertEquals("[]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm1);
      
      JSTerm jSTerm5 = JSEvaluate.floor(0.0F);
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertTrue(jSTerm5.equals((Object)jSTerm2));
      assertNotNull(jSTerm5);
      assertFalse(jSTerm5.isEmpty());
      assertTrue(jSTerm5.isConstant());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isVariable());
      assertEquals(10, jSTerm5.capacity());
      assertEquals(1, jSTerm5.size());
      assertEquals("[0.0]", jSTerm5.toString());
      assertFalse(jSTerm5.isFunction());
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm4);
      
      JSTerm jSTerm6 = JSEvaluate.ceil((-2384.91F));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertFalse(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertNotNull(jSTerm6);
      assertFalse(jSTerm6.isEmpty());
      assertEquals("[-2384.0]", jSTerm6.toString());
      assertFalse(jSTerm6.isEval());
      assertFalse(jSTerm6.isVariable());
      assertTrue(jSTerm6.isConstant());
      assertEquals(1, jSTerm6.size());
      assertFalse(jSTerm6.isFunction());
      assertEquals(10, jSTerm6.capacity());
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm5);
      
      JSTerm jSTerm7 = JSEvaluate.addsub((-2384.91F), 0.0F, 1338);
      assertFalse(jSTerm7.equals((Object)jSTerm0));
      assertFalse(jSTerm7.equals((Object)jSTerm6));
      assertFalse(jSTerm7.equals((Object)jSTerm3));
      assertFalse(jSTerm7.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm4));
      assertFalse(jSTerm7.equals((Object)jSTerm5));
      assertFalse(jSTerm7.equals((Object)jSTerm1));
      assertNotNull(jSTerm7);
      assertFalse(jSTerm7.isEmpty());
      assertEquals(1, jSTerm7.size());
      assertFalse(jSTerm7.isEval());
      assertEquals("[-2384.91]", jSTerm7.toString());
      assertFalse(jSTerm7.isVariable());
      assertTrue(jSTerm7.isConstant());
      assertEquals(10, jSTerm7.capacity());
      assertFalse(jSTerm7.isFunction());
      assertNotSame(jSTerm7, jSTerm0);
      assertNotSame(jSTerm7, jSTerm6);
      assertNotSame(jSTerm7, jSTerm3);
      assertNotSame(jSTerm7, jSTerm2);
      assertNotSame(jSTerm7, jSTerm4);
      assertNotSame(jSTerm7, jSTerm5);
      assertNotSame(jSTerm7, jSTerm1);
      
      JSTerm jSTerm8 = JSEvaluate.applyOperatorUnary("%iJ", jSTerm6);
      assertFalse(jSTerm6.equals((Object)jSTerm7));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertFalse(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm8.equals((Object)jSTerm5));
      assertFalse(jSTerm8.equals((Object)jSTerm7));
      assertTrue(jSTerm8.equals((Object)jSTerm4));
      assertTrue(jSTerm8.equals((Object)jSTerm1));
      assertTrue(jSTerm8.equals((Object)jSTerm3));
      assertFalse(jSTerm8.equals((Object)jSTerm2));
      assertFalse(jSTerm8.equals((Object)jSTerm0));
      assertFalse(jSTerm8.equals((Object)jSTerm6));
      assertNotNull(jSTerm8);
      assertFalse(jSTerm6.isEmpty());
      assertEquals("[-2384.0]", jSTerm6.toString());
      assertFalse(jSTerm6.isEval());
      assertFalse(jSTerm6.isVariable());
      assertTrue(jSTerm6.isConstant());
      assertEquals(1, jSTerm6.size());
      assertFalse(jSTerm6.isFunction());
      assertEquals(10, jSTerm6.capacity());
      assertTrue(jSTerm8.isEmpty());
      assertEquals("[]", jSTerm8.toString());
      assertEquals(10, jSTerm8.capacity());
      assertFalse(jSTerm8.isFunction());
      assertFalse(jSTerm8.isConstant());
      assertFalse(jSTerm8.isEval());
      assertEquals(0, jSTerm8.size());
      assertFalse(jSTerm8.isVariable());
      assertNotSame(jSTerm6, jSTerm7);
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm8);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm8, jSTerm1);
      assertNotSame(jSTerm8, jSTerm4);
      assertNotSame(jSTerm8, jSTerm5);
      assertNotSame(jSTerm8, jSTerm7);
      assertNotSame(jSTerm8, jSTerm3);
      assertNotSame(jSTerm8, jSTerm2);
      assertNotSame(jSTerm8, jSTerm0);
      assertNotSame(jSTerm8, jSTerm6);
      
      JSTerm jSTerm9 = JSEvaluate.member(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm6));
      assertFalse(jSTerm0.equals((Object)jSTerm4));
      assertFalse(jSTerm0.equals((Object)jSTerm7));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm5));
      assertFalse(jSTerm0.equals((Object)jSTerm8));
      assertFalse(jSTerm1.equals((Object)jSTerm7));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm6));
      assertTrue(jSTerm1.equals((Object)jSTerm8));
      assertFalse(jSTerm1.equals((Object)jSTerm5));
      assertTrue(jSTerm9.equals((Object)jSTerm8));
      assertFalse(jSTerm9.equals((Object)jSTerm5));
      assertFalse(jSTerm9.equals((Object)jSTerm7));
      assertFalse(jSTerm9.equals((Object)jSTerm0));
      assertFalse(jSTerm9.equals((Object)jSTerm6));
      assertTrue(jSTerm9.equals((Object)jSTerm1));
      assertTrue(jSTerm9.equals((Object)jSTerm3));
      assertFalse(jSTerm9.equals((Object)jSTerm2));
      assertTrue(jSTerm9.equals((Object)jSTerm4));
      assertNotNull(jSTerm9);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(3, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[-2384.0, `>/`<y, *\"w+_Mu]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm9.isVariable());
      assertTrue(jSTerm9.isEmpty());
      assertEquals("[]", jSTerm9.toString());
      assertEquals(10, jSTerm9.capacity());
      assertFalse(jSTerm9.isFunction());
      assertFalse(jSTerm9.isConstant());
      assertEquals(0, jSTerm9.size());
      assertFalse(jSTerm9.isEval());
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm6);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm7);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm9);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm5);
      assertNotSame(jSTerm0, jSTerm8);
      assertNotSame(jSTerm1, jSTerm7);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm9);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm8);
      assertNotSame(jSTerm1, jSTerm6);
      assertNotSame(jSTerm1, jSTerm5);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm9, jSTerm5);
      assertNotSame(jSTerm9, jSTerm1);
      assertNotSame(jSTerm9, jSTerm4);
      assertNotSame(jSTerm9, jSTerm7);
      assertNotSame(jSTerm9, jSTerm0);
      assertNotSame(jSTerm9, jSTerm6);
      assertNotSame(jSTerm9, jSTerm3);
      assertNotSame(jSTerm9, jSTerm2);
      assertNotSame(jSTerm9, jSTerm8);
      
      JSTerm jSTerm10 = JSEvaluate.floor(0.0F);
      assertFalse(jSTerm10.equals((Object)jSTerm0));
      assertFalse(jSTerm10.equals((Object)jSTerm6));
      assertFalse(jSTerm10.equals((Object)jSTerm9));
      assertTrue(jSTerm10.equals((Object)jSTerm5));
      assertFalse(jSTerm10.equals((Object)jSTerm1));
      assertFalse(jSTerm10.equals((Object)jSTerm7));
      assertTrue(jSTerm10.equals((Object)jSTerm2));
      assertFalse(jSTerm10.equals((Object)jSTerm8));
      assertFalse(jSTerm10.equals((Object)jSTerm4));
      assertFalse(jSTerm10.equals((Object)jSTerm3));
      assertNotNull(jSTerm10);
      assertFalse(jSTerm10.isEmpty());
      assertEquals("[0.0]", jSTerm10.toString());
      assertFalse(jSTerm10.isEval());
      assertFalse(jSTerm10.isVariable());
      assertTrue(jSTerm10.isConstant());
      assertEquals(10, jSTerm10.capacity());
      assertFalse(jSTerm10.isFunction());
      assertEquals(1, jSTerm10.size());
      assertNotSame(jSTerm10, jSTerm0);
      assertNotSame(jSTerm10, jSTerm6);
      assertNotSame(jSTerm10, jSTerm9);
      assertNotSame(jSTerm10, jSTerm2);
      assertNotSame(jSTerm10, jSTerm1);
      assertNotSame(jSTerm10, jSTerm7);
      assertNotSame(jSTerm10, jSTerm5);
      assertNotSame(jSTerm10, jSTerm8);
      assertNotSame(jSTerm10, jSTerm4);
      assertNotSame(jSTerm10, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(375.40662F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[375.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator(">", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[375.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = 1.0F;
      JSTerm jSTerm0 = JSEvaluate.equal(1.0F, 1.0F);
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[t]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[t]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary((String) null, jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(595.4599F, 595.4599F);
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[595.4599]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = JSEvaluate.div((-1.0F), 3.4028235E38F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[-2.938736E-39]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.applyOperator("/", jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[595.4599]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[-2.938736E-39]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[-Infinity]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = JSEvaluate.applyOperator("", jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertNotNull(jSTerm3);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[595.4599]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[-2.938736E-39]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm3.isConstant());
      assertEquals("[]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isEmpty());
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm0.add(object0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("(", jSTerm0, jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult((-1092.4F), (-1092.4F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[1193337.9]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("notequal", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[1193337.9]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("<", (JSTerm) null, (JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor((-684.006F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[-684.0]", jSTerm0.toString());
      
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[-684.0]", jSTerm0.toString());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = JSEvaluate.not(jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[-684.0]", jSTerm0.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm1.removeIf((Predicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal((-1.0F), (-1.0F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[t]", jSTerm0.toString());
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[t]", jSTerm0.toString());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary((String) null, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[t]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary("@[Z\\<U7y5 #Wt<.S]", jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(847.0499F, 847.0499F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = JSEvaluate.mult(847.0499F, 847.0499F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[717493.56]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.addsub(0, 0, 0);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[0.0]", jSTerm2.toString());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = JSEvaluate.greaterequal(245.715F, 245.715F);
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertNotNull(jSTerm3);
      assertEquals("[t]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm3.add(object0);
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals(2, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertTrue(boolean0);
      
      JSTerm jSTerm4 = JSEvaluate.greater(245.715F, 245.715F);
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertNotNull(jSTerm4);
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEval());
      assertEquals(0, jSTerm4.size());
      assertFalse(jSTerm4.isFunction());
      assertEquals(10, jSTerm4.capacity());
      assertEquals("[]", jSTerm4.toString());
      assertTrue(jSTerm4.isEmpty());
      assertFalse(jSTerm4.isVariable());
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm1);
      
      jSTerm3.makeEval(false);
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals(2, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = jSTerm3.add(object1);
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm3.isFunction());
      assertEquals(3, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(object1, object0);
      assertTrue(boolean1);
      
      Stream stream0 = jSTerm3.stream();
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertNotNull(stream0);
      assertFalse(jSTerm3.isFunction());
      assertEquals(3, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSTerm jSTerm5 = JSEvaluate.mult((-1855.55F), 245.715F);
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertNotNull(jSTerm5);
      assertTrue(jSTerm5.isConstant());
      assertEquals("[-455936.47]", jSTerm5.toString());
      assertEquals(1, jSTerm5.size());
      assertFalse(jSTerm5.isEval());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isFunction());
      assertFalse(jSTerm5.isEmpty());
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm0);
      
      JSTerm jSTerm6 = JSEvaluate.member(jSTerm3, jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm5));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertTrue(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertNotNull(jSTerm6);
      assertFalse(jSTerm3.isFunction());
      assertEquals(3, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm6.isFunction());
      assertFalse(jSTerm6.isEval());
      assertEquals(0, jSTerm6.size());
      assertFalse(jSTerm6.isConstant());
      assertEquals(10, jSTerm6.capacity());
      assertEquals("[]", jSTerm6.toString());
      assertTrue(jSTerm6.isEmpty());
      assertNotSame(jSTerm3, jSTerm5);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm6);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm4);
      
      JSTerm jSTerm7 = JSEvaluate.not(jSTerm6);
      assertFalse(jSTerm3.equals((Object)jSTerm5));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm6));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertTrue(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm6));
      assertFalse(jSTerm7.equals((Object)jSTerm5));
      assertFalse(jSTerm7.equals((Object)jSTerm3));
      assertFalse(jSTerm7.equals((Object)jSTerm0));
      assertFalse(jSTerm7.equals((Object)jSTerm1));
      assertFalse(jSTerm7.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm4));
      assertNotNull(jSTerm7);
      assertFalse(jSTerm3.isFunction());
      assertEquals(3, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm6.isFunction());
      assertFalse(jSTerm6.isEval());
      assertEquals(0, jSTerm6.size());
      assertFalse(jSTerm6.isConstant());
      assertEquals(10, jSTerm6.capacity());
      assertEquals("[]", jSTerm6.toString());
      assertTrue(jSTerm6.isEmpty());
      assertFalse(jSTerm7.isEval());
      assertEquals(10, jSTerm7.capacity());
      assertFalse(jSTerm7.isFunction());
      assertFalse(jSTerm7.isEmpty());
      assertEquals(1, jSTerm7.size());
      assertTrue(jSTerm7.isConstant());
      assertEquals("[t]", jSTerm7.toString());
      assertFalse(jSTerm7.isVariable());
      assertNotSame(jSTerm3, jSTerm5);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm7);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm6);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm7);
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm7, jSTerm6);
      assertNotSame(jSTerm7, jSTerm5);
      assertNotSame(jSTerm7, jSTerm3);
      assertNotSame(jSTerm7, jSTerm0);
      assertNotSame(jSTerm7, jSTerm1);
      assertNotSame(jSTerm7, jSTerm2);
      assertNotSame(jSTerm7, jSTerm4);
      
      JSTerm jSTerm8 = JSEvaluate.applyOperatorUnary("not", jSTerm7);
      assertFalse(jSTerm3.equals((Object)jSTerm5));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm7));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm6));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertTrue(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm7));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm6));
      assertFalse(jSTerm7.equals((Object)jSTerm5));
      assertFalse(jSTerm7.equals((Object)jSTerm3));
      assertFalse(jSTerm7.equals((Object)jSTerm0));
      assertFalse(jSTerm7.equals((Object)jSTerm1));
      assertFalse(jSTerm7.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm4));
      assertFalse(jSTerm8.equals((Object)jSTerm3));
      assertFalse(jSTerm8.equals((Object)jSTerm7));
      assertFalse(jSTerm8.equals((Object)jSTerm0));
      assertFalse(jSTerm8.equals((Object)jSTerm2));
      assertTrue(jSTerm8.equals((Object)jSTerm4));
      assertFalse(jSTerm8.equals((Object)jSTerm1));
      assertTrue(jSTerm8.equals((Object)jSTerm6));
      assertFalse(jSTerm8.equals((Object)jSTerm5));
      assertNotNull(jSTerm8);
      assertFalse(jSTerm3.isFunction());
      assertEquals(3, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm6.isFunction());
      assertFalse(jSTerm6.isEval());
      assertEquals(0, jSTerm6.size());
      assertFalse(jSTerm6.isConstant());
      assertEquals(10, jSTerm6.capacity());
      assertEquals("[]", jSTerm6.toString());
      assertTrue(jSTerm6.isEmpty());
      assertFalse(jSTerm7.isEval());
      assertEquals(10, jSTerm7.capacity());
      assertFalse(jSTerm7.isFunction());
      assertFalse(jSTerm7.isEmpty());
      assertEquals(1, jSTerm7.size());
      assertTrue(jSTerm7.isConstant());
      assertEquals("[t]", jSTerm7.toString());
      assertFalse(jSTerm7.isVariable());
      assertTrue(jSTerm8.isEmpty());
      assertEquals("[]", jSTerm8.toString());
      assertFalse(jSTerm8.isFunction());
      assertFalse(jSTerm8.isConstant());
      assertEquals(10, jSTerm8.capacity());
      assertFalse(jSTerm8.isVariable());
      assertFalse(jSTerm8.isEval());
      assertEquals(0, jSTerm8.size());
      assertNotSame(jSTerm3, jSTerm5);
      assertNotSame(jSTerm3, jSTerm8);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm7);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm6);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm8);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm7);
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm7, jSTerm6);
      assertNotSame(jSTerm7, jSTerm5);
      assertNotSame(jSTerm7, jSTerm8);
      assertNotSame(jSTerm7, jSTerm3);
      assertNotSame(jSTerm7, jSTerm0);
      assertNotSame(jSTerm7, jSTerm1);
      assertNotSame(jSTerm7, jSTerm2);
      assertNotSame(jSTerm7, jSTerm4);
      assertNotSame(jSTerm8, jSTerm4);
      assertNotSame(jSTerm8, jSTerm3);
      assertNotSame(jSTerm8, jSTerm6);
      assertNotSame(jSTerm8, jSTerm7);
      assertNotSame(jSTerm8, jSTerm0);
      assertNotSame(jSTerm8, jSTerm2);
      assertNotSame(jSTerm8, jSTerm1);
      assertNotSame(jSTerm8, jSTerm5);
      
      ListIterator listIterator0 = jSTerm8.listIterator(0);
      assertFalse(jSTerm3.equals((Object)jSTerm5));
      assertFalse(jSTerm3.equals((Object)jSTerm8));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm7));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm6));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertTrue(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm7));
      assertTrue(jSTerm6.equals((Object)jSTerm8));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm6));
      assertFalse(jSTerm7.equals((Object)jSTerm5));
      assertFalse(jSTerm7.equals((Object)jSTerm8));
      assertFalse(jSTerm7.equals((Object)jSTerm3));
      assertFalse(jSTerm7.equals((Object)jSTerm0));
      assertFalse(jSTerm7.equals((Object)jSTerm1));
      assertFalse(jSTerm7.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm4));
      assertFalse(jSTerm8.equals((Object)jSTerm3));
      assertFalse(jSTerm8.equals((Object)jSTerm7));
      assertFalse(jSTerm8.equals((Object)jSTerm0));
      assertFalse(jSTerm8.equals((Object)jSTerm2));
      assertTrue(jSTerm8.equals((Object)jSTerm4));
      assertFalse(jSTerm8.equals((Object)jSTerm1));
      assertTrue(jSTerm8.equals((Object)jSTerm6));
      assertFalse(jSTerm8.equals((Object)jSTerm5));
      assertNotNull(listIterator0);
      assertFalse(jSTerm3.isFunction());
      assertEquals(3, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm6.isFunction());
      assertFalse(jSTerm6.isEval());
      assertEquals(0, jSTerm6.size());
      assertFalse(jSTerm6.isConstant());
      assertEquals(10, jSTerm6.capacity());
      assertEquals("[]", jSTerm6.toString());
      assertTrue(jSTerm6.isEmpty());
      assertFalse(jSTerm7.isEval());
      assertEquals(10, jSTerm7.capacity());
      assertFalse(jSTerm7.isFunction());
      assertFalse(jSTerm7.isEmpty());
      assertEquals(1, jSTerm7.size());
      assertTrue(jSTerm7.isConstant());
      assertEquals("[t]", jSTerm7.toString());
      assertFalse(jSTerm7.isVariable());
      assertTrue(jSTerm8.isEmpty());
      assertEquals("[]", jSTerm8.toString());
      assertFalse(jSTerm8.isFunction());
      assertFalse(jSTerm8.isConstant());
      assertEquals(10, jSTerm8.capacity());
      assertFalse(jSTerm8.isVariable());
      assertFalse(jSTerm8.isEval());
      assertEquals(0, jSTerm8.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotSame(jSTerm3, jSTerm5);
      assertNotSame(jSTerm3, jSTerm8);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm7);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm6);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm8);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm7);
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm7, jSTerm6);
      assertNotSame(jSTerm7, jSTerm5);
      assertNotSame(jSTerm7, jSTerm8);
      assertNotSame(jSTerm7, jSTerm3);
      assertNotSame(jSTerm7, jSTerm0);
      assertNotSame(jSTerm7, jSTerm1);
      assertNotSame(jSTerm7, jSTerm2);
      assertNotSame(jSTerm7, jSTerm4);
      assertNotSame(jSTerm8, jSTerm4);
      assertNotSame(jSTerm8, jSTerm3);
      assertNotSame(jSTerm8, jSTerm6);
      assertNotSame(jSTerm8, jSTerm7);
      assertNotSame(jSTerm8, jSTerm0);
      assertNotSame(jSTerm8, jSTerm2);
      assertNotSame(jSTerm8, jSTerm1);
      assertNotSame(jSTerm8, jSTerm5);
      
      JSTerm jSTerm9 = JSEvaluate.member(jSTerm6, jSTerm8);
      assertTrue(jSTerm9.equals((Object)jSTerm6));
      assertFalse(jSTerm9.equals((Object)jSTerm5));
      assertTrue(jSTerm9.equals((Object)jSTerm8));
      assertFalse(jSTerm9.equals((Object)jSTerm3));
      assertFalse(jSTerm9.equals((Object)jSTerm7));
      assertFalse(jSTerm9.equals((Object)jSTerm2));
      assertFalse(jSTerm9.equals((Object)jSTerm1));
      assertFalse(jSTerm9.equals((Object)jSTerm0));
      assertTrue(jSTerm9.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm5));
      assertFalse(jSTerm3.equals((Object)jSTerm8));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm7));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm6));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertTrue(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm7));
      assertTrue(jSTerm6.equals((Object)jSTerm8));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm6));
      assertFalse(jSTerm7.equals((Object)jSTerm5));
      assertFalse(jSTerm7.equals((Object)jSTerm8));
      assertFalse(jSTerm7.equals((Object)jSTerm3));
      assertFalse(jSTerm7.equals((Object)jSTerm0));
      assertFalse(jSTerm7.equals((Object)jSTerm1));
      assertFalse(jSTerm7.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm4));
      assertFalse(jSTerm8.equals((Object)jSTerm3));
      assertFalse(jSTerm8.equals((Object)jSTerm7));
      assertFalse(jSTerm8.equals((Object)jSTerm0));
      assertFalse(jSTerm8.equals((Object)jSTerm2));
      assertTrue(jSTerm8.equals((Object)jSTerm4));
      assertFalse(jSTerm8.equals((Object)jSTerm1));
      assertTrue(jSTerm8.equals((Object)jSTerm6));
      assertFalse(jSTerm8.equals((Object)jSTerm5));
      assertNotNull(jSTerm9);
      assertEquals(0, jSTerm9.size());
      assertTrue(jSTerm9.isEmpty());
      assertFalse(jSTerm9.isEval());
      assertFalse(jSTerm9.isVariable());
      assertFalse(jSTerm9.isConstant());
      assertEquals("[]", jSTerm9.toString());
      assertEquals(10, jSTerm9.capacity());
      assertFalse(jSTerm9.isFunction());
      assertFalse(jSTerm3.isFunction());
      assertEquals(3, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm6.isFunction());
      assertFalse(jSTerm6.isEval());
      assertEquals(0, jSTerm6.size());
      assertFalse(jSTerm6.isConstant());
      assertEquals(10, jSTerm6.capacity());
      assertEquals("[]", jSTerm6.toString());
      assertTrue(jSTerm6.isEmpty());
      assertFalse(jSTerm7.isEval());
      assertEquals(10, jSTerm7.capacity());
      assertFalse(jSTerm7.isFunction());
      assertFalse(jSTerm7.isEmpty());
      assertEquals(1, jSTerm7.size());
      assertTrue(jSTerm7.isConstant());
      assertEquals("[t]", jSTerm7.toString());
      assertFalse(jSTerm7.isVariable());
      assertTrue(jSTerm8.isEmpty());
      assertEquals("[]", jSTerm8.toString());
      assertFalse(jSTerm8.isFunction());
      assertFalse(jSTerm8.isConstant());
      assertEquals(10, jSTerm8.capacity());
      assertFalse(jSTerm8.isVariable());
      assertFalse(jSTerm8.isEval());
      assertEquals(0, jSTerm8.size());
      assertNotSame(jSTerm9, jSTerm5);
      assertNotSame(jSTerm9, jSTerm4);
      assertNotSame(jSTerm9, jSTerm3);
      assertNotSame(jSTerm9, jSTerm7);
      assertNotSame(jSTerm9, jSTerm8);
      assertNotSame(jSTerm9, jSTerm2);
      assertNotSame(jSTerm9, jSTerm1);
      assertNotSame(jSTerm9, jSTerm0);
      assertNotSame(jSTerm9, jSTerm6);
      assertNotSame(jSTerm3, jSTerm5);
      assertNotSame(jSTerm3, jSTerm8);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm7);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm9);
      assertNotSame(jSTerm3, jSTerm6);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm8);
      assertNotSame(jSTerm6, jSTerm9);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm7);
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm7, jSTerm6);
      assertNotSame(jSTerm7, jSTerm5);
      assertNotSame(jSTerm7, jSTerm9);
      assertNotSame(jSTerm7, jSTerm8);
      assertNotSame(jSTerm7, jSTerm3);
      assertNotSame(jSTerm7, jSTerm0);
      assertNotSame(jSTerm7, jSTerm1);
      assertNotSame(jSTerm7, jSTerm2);
      assertNotSame(jSTerm7, jSTerm4);
      assertNotSame(jSTerm8, jSTerm4);
      assertNotSame(jSTerm8, jSTerm3);
      assertNotSame(jSTerm8, jSTerm6);
      assertNotSame(jSTerm8, jSTerm7);
      assertNotSame(jSTerm8, jSTerm0);
      assertNotSame(jSTerm8, jSTerm2);
      assertNotSame(jSTerm8, jSTerm1);
      assertNotSame(jSTerm8, jSTerm9);
      assertNotSame(jSTerm8, jSTerm5);
      
      JSTerm jSTerm10 = JSEvaluate.floor((-1855.55F));
      assertFalse(jSTerm10.equals((Object)jSTerm9));
      assertFalse(jSTerm10.equals((Object)jSTerm5));
      assertFalse(jSTerm10.equals((Object)jSTerm6));
      assertFalse(jSTerm10.equals((Object)jSTerm1));
      assertFalse(jSTerm10.equals((Object)jSTerm2));
      assertFalse(jSTerm10.equals((Object)jSTerm7));
      assertFalse(jSTerm10.equals((Object)jSTerm0));
      assertFalse(jSTerm10.equals((Object)jSTerm4));
      assertFalse(jSTerm10.equals((Object)jSTerm8));
      assertFalse(jSTerm10.equals((Object)jSTerm3));
      assertNotNull(jSTerm10);
      assertFalse(jSTerm10.isVariable());
      assertEquals(10, jSTerm10.capacity());
      assertEquals(1, jSTerm10.size());
      assertEquals("[-1855.0]", jSTerm10.toString());
      assertFalse(jSTerm10.isFunction());
      assertFalse(jSTerm10.isEmpty());
      assertTrue(jSTerm10.isConstant());
      assertFalse(jSTerm10.isEval());
      assertNotSame(jSTerm10, jSTerm9);
      assertNotSame(jSTerm10, jSTerm5);
      assertNotSame(jSTerm10, jSTerm6);
      assertNotSame(jSTerm10, jSTerm1);
      assertNotSame(jSTerm10, jSTerm2);
      assertNotSame(jSTerm10, jSTerm7);
      assertNotSame(jSTerm10, jSTerm0);
      assertNotSame(jSTerm10, jSTerm4);
      assertNotSame(jSTerm10, jSTerm8);
      assertNotSame(jSTerm10, jSTerm3);
      
      JSTerm jSTerm11 = new JSTerm();
      assertFalse(jSTerm11.equals((Object)jSTerm2));
      assertFalse(jSTerm11.equals((Object)jSTerm1));
      assertFalse(jSTerm11.equals((Object)jSTerm10));
      assertTrue(jSTerm11.equals((Object)jSTerm9));
      assertTrue(jSTerm11.equals((Object)jSTerm4));
      assertTrue(jSTerm11.equals((Object)jSTerm6));
      assertFalse(jSTerm11.equals((Object)jSTerm5));
      assertFalse(jSTerm11.equals((Object)jSTerm3));
      assertFalse(jSTerm11.equals((Object)jSTerm0));
      assertFalse(jSTerm11.equals((Object)jSTerm7));
      assertTrue(jSTerm11.equals((Object)jSTerm8));
      assertNotNull(jSTerm11);
      assertFalse(jSTerm11.isConstant());
      assertEquals(10, jSTerm11.capacity());
      assertFalse(jSTerm11.isEval());
      assertEquals(0, jSTerm11.size());
      assertTrue(jSTerm11.isEmpty());
      assertEquals("[]", jSTerm11.toString());
      assertFalse(jSTerm11.isVariable());
      assertFalse(jSTerm11.isFunction());
      
      JSTerm jSTerm12 = JSEvaluate.maxElement(jSTerm11);
      assertFalse(jSTerm11.equals((Object)jSTerm2));
      assertFalse(jSTerm11.equals((Object)jSTerm1));
      assertFalse(jSTerm11.equals((Object)jSTerm10));
      assertTrue(jSTerm11.equals((Object)jSTerm9));
      assertTrue(jSTerm11.equals((Object)jSTerm4));
      assertTrue(jSTerm11.equals((Object)jSTerm6));
      assertFalse(jSTerm11.equals((Object)jSTerm5));
      assertFalse(jSTerm11.equals((Object)jSTerm3));
      assertFalse(jSTerm11.equals((Object)jSTerm0));
      assertFalse(jSTerm11.equals((Object)jSTerm7));
      assertTrue(jSTerm11.equals((Object)jSTerm8));
      assertTrue(jSTerm12.equals((Object)jSTerm6));
      assertTrue(jSTerm12.equals((Object)jSTerm4));
      assertFalse(jSTerm12.equals((Object)jSTerm3));
      assertTrue(jSTerm12.equals((Object)jSTerm11));
      assertFalse(jSTerm12.equals((Object)jSTerm5));
      assertFalse(jSTerm12.equals((Object)jSTerm1));
      assertFalse(jSTerm12.equals((Object)jSTerm2));
      assertTrue(jSTerm12.equals((Object)jSTerm9));
      assertFalse(jSTerm12.equals((Object)jSTerm10));
      assertFalse(jSTerm12.equals((Object)jSTerm7));
      assertFalse(jSTerm12.equals((Object)jSTerm0));
      assertTrue(jSTerm12.equals((Object)jSTerm8));
      assertNotNull(jSTerm12);
      assertFalse(jSTerm11.isConstant());
      assertEquals(10, jSTerm11.capacity());
      assertFalse(jSTerm11.isEval());
      assertEquals(0, jSTerm11.size());
      assertTrue(jSTerm11.isEmpty());
      assertEquals("[]", jSTerm11.toString());
      assertFalse(jSTerm11.isVariable());
      assertFalse(jSTerm11.isFunction());
      assertTrue(jSTerm12.isEmpty());
      assertEquals(10, jSTerm12.capacity());
      assertEquals("[]", jSTerm12.toString());
      assertFalse(jSTerm12.isFunction());
      assertFalse(jSTerm12.isVariable());
      assertEquals(0, jSTerm12.size());
      assertFalse(jSTerm12.isEval());
      assertFalse(jSTerm12.isConstant());
      assertNotSame(jSTerm11, jSTerm2);
      assertNotSame(jSTerm11, jSTerm1);
      assertNotSame(jSTerm11, jSTerm10);
      assertNotSame(jSTerm11, jSTerm12);
      assertNotSame(jSTerm11, jSTerm9);
      assertNotSame(jSTerm11, jSTerm5);
      assertNotSame(jSTerm11, jSTerm8);
      assertNotSame(jSTerm11, jSTerm3);
      assertNotSame(jSTerm11, jSTerm6);
      assertNotSame(jSTerm11, jSTerm0);
      assertNotSame(jSTerm11, jSTerm7);
      assertNotSame(jSTerm11, jSTerm4);
      assertNotSame(jSTerm12, jSTerm9);
      assertNotSame(jSTerm12, jSTerm3);
      assertNotSame(jSTerm12, jSTerm8);
      assertNotSame(jSTerm12, jSTerm5);
      assertNotSame(jSTerm12, jSTerm1);
      assertNotSame(jSTerm12, jSTerm2);
      assertNotSame(jSTerm12, jSTerm10);
      assertNotSame(jSTerm12, jSTerm6);
      assertNotSame(jSTerm12, jSTerm11);
      assertNotSame(jSTerm12, jSTerm7);
      assertNotSame(jSTerm12, jSTerm4);
      assertNotSame(jSTerm12, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = JSEvaluate.not(jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = JSEvaluate.ceil(1.0F);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[1.0]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      int int0 = JSEvaluate.OperantNum("ceil");
      assertEquals(1, int0);
      
      boolean boolean0 = jSTerm0.add((Object) jSEvaluate0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = JSEvaluate.ceil(2800.701F);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[2801.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = jSTerm0.set(1, "Operator name expected");
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertNotNull(object1);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[1.0, Operator name expected]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(object1, jSEvaluate0);
      
      boolean boolean1 = jSTerm2.addAll((Collection) jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[1.0, Operator name expected]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals(3, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals("[2801.0, 1.0, Operator name expected]", jSTerm2.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jSTerm2.setSize((-144));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -144
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(0.0F, 1405.1666F);
      assertNotNull(jSTerm0);
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult(0.0F, 0.0F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = JSEvaluate.greater((-1.0F), 0.0F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertNotSame(jSTerm1, jSTerm0);
      
      int int0 = JSEvaluate.OperantNum(",+QKbJ/aNB&\"w");
      assertEquals(2, int0);
      
      JSTerm jSTerm2 = JSEvaluate.addsub(3158.73F, 2, 2);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertEquals("[3162.73]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = JSEvaluate.ceil(1.0F);
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertNotNull(jSTerm3);
      assertEquals("[1.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      
      boolean boolean0 = jSTerm3.isGround();
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertEquals("[1.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertTrue(boolean0);
      
      jSTerm3.sort((Comparator) null);
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertEquals("[1.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      
      jSTerm3.makeVariable();
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertEquals("[1.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSTerm jSTerm4 = JSEvaluate.minOf(0.0F, 3158.73F);
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertNotNull(jSTerm4);
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertEquals("[0.0]", jSTerm4.toString());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      
      JSTerm jSTerm5 = JSEvaluate.mult(57.0F, 1.0F);
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertNotNull(jSTerm5);
      assertEquals("[57.0]", jSTerm5.toString());
      assertTrue(jSTerm5.isConstant());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isFunction());
      assertEquals(1, jSTerm5.size());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isEmpty());
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm2);
      
      float float0 = JSEvaluate.numericValue(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm5));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertEquals("[1.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isConstant());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm5);
      assertNotSame(jSTerm3, jSTerm0);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean1 = jSTerm5.add((Object) jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm5));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm4));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertTrue(boolean1 == boolean0);
      assertEquals("[3162.73]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertTrue(jSTerm5.isConstant());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isFunction());
      assertEquals(2, jSTerm5.size());
      assertEquals("[57.0, [3162.73]]", jSTerm5.toString());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isEmpty());
      assertNotSame(jSTerm2, jSTerm5);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm2);
      assertTrue(boolean1);
      
      jSTerm5.trimToSize();
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertEquals(2, jSTerm5.capacity());
      assertTrue(jSTerm5.isConstant());
      assertFalse(jSTerm5.isFunction());
      assertEquals(2, jSTerm5.size());
      assertEquals("[57.0, [3162.73]]", jSTerm5.toString());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isEmpty());
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm2);
      
      JSTerm jSTerm6 = JSEvaluate.greater(0.0F, 1743.24F);
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm4));
      assertTrue(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertNotNull(jSTerm6);
      assertEquals(0, jSTerm6.size());
      assertFalse(jSTerm6.isEval());
      assertFalse(jSTerm6.isFunction());
      assertFalse(jSTerm6.isConstant());
      assertEquals(10, jSTerm6.capacity());
      assertEquals("[]", jSTerm6.toString());
      assertFalse(jSTerm6.isVariable());
      assertTrue(jSTerm6.isEmpty());
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm0);
      
      JSTerm jSTerm7 = JSEvaluate.member(jSTerm5, jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm5));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm4));
      assertFalse(jSTerm2.equals((Object)jSTerm6));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm6));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm3));
      assertFalse(jSTerm7.equals((Object)jSTerm0));
      assertTrue(jSTerm7.equals((Object)jSTerm1));
      assertFalse(jSTerm7.equals((Object)jSTerm2));
      assertTrue(jSTerm7.equals((Object)jSTerm6));
      assertFalse(jSTerm7.equals((Object)jSTerm5));
      assertFalse(jSTerm7.equals((Object)jSTerm4));
      assertNotNull(jSTerm7);
      assertEquals("[3162.73]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertEquals(2, jSTerm5.capacity());
      assertTrue(jSTerm5.isConstant());
      assertFalse(jSTerm5.isFunction());
      assertEquals(2, jSTerm5.size());
      assertEquals("[57.0, [3162.73]]", jSTerm5.toString());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isEmpty());
      assertEquals(0, jSTerm7.size());
      assertFalse(jSTerm7.isConstant());
      assertEquals(10, jSTerm7.capacity());
      assertFalse(jSTerm7.isVariable());
      assertFalse(jSTerm7.isEval());
      assertTrue(jSTerm7.isEmpty());
      assertEquals("[]", jSTerm7.toString());
      assertFalse(jSTerm7.isFunction());
      assertNotSame(jSTerm2, jSTerm5);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm7);
      assertNotSame(jSTerm2, jSTerm6);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm6);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm7);
      assertNotSame(jSTerm7, jSTerm3);
      assertNotSame(jSTerm7, jSTerm6);
      assertNotSame(jSTerm7, jSTerm0);
      assertNotSame(jSTerm7, jSTerm1);
      assertNotSame(jSTerm7, jSTerm2);
      assertNotSame(jSTerm7, jSTerm5);
      assertNotSame(jSTerm7, jSTerm4);
      
      JSTerm jSTerm8 = JSEvaluate.greaterequal((-1304.75F), 3158.73F);
      assertTrue(jSTerm8.equals((Object)jSTerm1));
      assertFalse(jSTerm8.equals((Object)jSTerm2));
      assertFalse(jSTerm8.equals((Object)jSTerm5));
      assertFalse(jSTerm8.equals((Object)jSTerm4));
      assertFalse(jSTerm8.equals((Object)jSTerm3));
      assertFalse(jSTerm8.equals((Object)jSTerm0));
      assertTrue(jSTerm8.equals((Object)jSTerm6));
      assertTrue(jSTerm8.equals((Object)jSTerm7));
      assertNotNull(jSTerm8);
      assertFalse(jSTerm8.isVariable());
      assertFalse(jSTerm8.isFunction());
      assertFalse(jSTerm8.isEval());
      assertEquals(10, jSTerm8.capacity());
      assertEquals(0, jSTerm8.size());
      assertEquals("[]", jSTerm8.toString());
      assertFalse(jSTerm8.isConstant());
      assertTrue(jSTerm8.isEmpty());
      assertNotSame(jSTerm8, jSTerm7);
      assertNotSame(jSTerm8, jSTerm1);
      assertNotSame(jSTerm8, jSTerm6);
      assertNotSame(jSTerm8, jSTerm2);
      assertNotSame(jSTerm8, jSTerm5);
      assertNotSame(jSTerm8, jSTerm4);
      assertNotSame(jSTerm8, jSTerm3);
      assertNotSame(jSTerm8, jSTerm0);
      
      JSTerm jSTerm9 = JSEvaluate.greaterequal(0.0F, 1743.24F);
      assertTrue(jSTerm9.equals((Object)jSTerm8));
      assertTrue(jSTerm9.equals((Object)jSTerm1));
      assertFalse(jSTerm9.equals((Object)jSTerm4));
      assertFalse(jSTerm9.equals((Object)jSTerm5));
      assertFalse(jSTerm9.equals((Object)jSTerm2));
      assertFalse(jSTerm9.equals((Object)jSTerm3));
      assertFalse(jSTerm9.equals((Object)jSTerm0));
      assertTrue(jSTerm9.equals((Object)jSTerm6));
      assertTrue(jSTerm9.equals((Object)jSTerm7));
      assertNotNull(jSTerm9);
      assertTrue(jSTerm9.isEmpty());
      assertEquals("[]", jSTerm9.toString());
      assertFalse(jSTerm9.isFunction());
      assertEquals(10, jSTerm9.capacity());
      assertFalse(jSTerm9.isConstant());
      assertEquals(0, jSTerm9.size());
      assertFalse(jSTerm9.isEval());
      assertFalse(jSTerm9.isVariable());
      assertNotSame(jSTerm9, jSTerm7);
      assertNotSame(jSTerm9, jSTerm4);
      assertNotSame(jSTerm9, jSTerm8);
      assertNotSame(jSTerm9, jSTerm5);
      assertNotSame(jSTerm9, jSTerm1);
      assertNotSame(jSTerm9, jSTerm6);
      assertNotSame(jSTerm9, jSTerm2);
      assertNotSame(jSTerm9, jSTerm3);
      assertNotSame(jSTerm9, jSTerm0);
      
      JSTerm jSTerm10 = JSEvaluate.greater(0.0F, (-844.19F));
      assertFalse(jSTerm10.equals((Object)jSTerm8));
      assertFalse(jSTerm10.equals((Object)jSTerm1));
      assertFalse(jSTerm10.equals((Object)jSTerm4));
      assertFalse(jSTerm10.equals((Object)jSTerm5));
      assertFalse(jSTerm10.equals((Object)jSTerm2));
      assertFalse(jSTerm10.equals((Object)jSTerm7));
      assertFalse(jSTerm10.equals((Object)jSTerm6));
      assertFalse(jSTerm10.equals((Object)jSTerm0));
      assertFalse(jSTerm10.equals((Object)jSTerm3));
      assertFalse(jSTerm10.equals((Object)jSTerm9));
      assertNotNull(jSTerm10);
      assertTrue(jSTerm10.isConstant());
      assertFalse(jSTerm10.isEmpty());
      assertEquals(1, jSTerm10.size());
      assertEquals(10, jSTerm10.capacity());
      assertEquals("[t]", jSTerm10.toString());
      assertFalse(jSTerm10.isFunction());
      assertFalse(jSTerm10.isEval());
      assertFalse(jSTerm10.isVariable());
      assertNotSame(jSTerm10, jSTerm8);
      assertNotSame(jSTerm10, jSTerm1);
      assertNotSame(jSTerm10, jSTerm4);
      assertNotSame(jSTerm10, jSTerm5);
      assertNotSame(jSTerm10, jSTerm2);
      assertNotSame(jSTerm10, jSTerm7);
      assertNotSame(jSTerm10, jSTerm6);
      assertNotSame(jSTerm10, jSTerm0);
      assertNotSame(jSTerm10, jSTerm3);
      assertNotSame(jSTerm10, jSTerm9);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("");
      assertEquals(2, int0);
      
      JSTerm jSTerm0 = JSEvaluate.mult(841.36F, 2);
      assertNotNull(jSTerm0);
      assertEquals("[1682.72]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary((String) null, jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor((-588.07F));
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[-588.0]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("equal", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[-588.0]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub(0.0F, 0.0F, 757);
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[0.0]", jSTerm0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm0.add(object0);
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(3, jSTerm0.size());
      assertTrue(boolean1);
      
      JSTerm jSTerm1 = JSEvaluate.notequal(1.0F, 60.64514F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[t]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.member(jSTerm1, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[t]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = JSEvaluate.applyOperator("", jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertNotNull(jSTerm3);
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(3, jSTerm0.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[t]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[]", jSTerm3.toString());
      assertTrue(jSTerm3.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSTerm jSTerm4 = JSEvaluate.notequal(60.64514F, (-885.957F));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertNotNull(jSTerm4);
      assertTrue(jSTerm4.isConstant());
      assertEquals("[t]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm0);
      
      int int0 = JSEvaluate.OperantNum("");
      assertEquals(2, int0);
      
      JSTerm jSTerm5 = JSEvaluate.minOf((-204.1F), 1.0F);
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertNotNull(jSTerm5);
      assertFalse(jSTerm5.isEval());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isFunction());
      assertFalse(jSTerm5.isEmpty());
      assertEquals(1, jSTerm5.size());
      assertTrue(jSTerm5.isConstant());
      assertEquals("[-204.1]", jSTerm5.toString());
      assertFalse(jSTerm5.isVariable());
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm0);
      
      JSTerm jSTerm6 = JSEvaluate.member(jSTerm5, jSTerm4);
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm5));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertTrue(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm4));
      assertTrue(jSTerm6.equals((Object)jSTerm3));
      assertNotNull(jSTerm6);
      assertTrue(jSTerm4.isConstant());
      assertEquals("[t]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm5.isEval());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isFunction());
      assertFalse(jSTerm5.isEmpty());
      assertEquals(1, jSTerm5.size());
      assertTrue(jSTerm5.isConstant());
      assertEquals("[-204.1]", jSTerm5.toString());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm6.isConstant());
      assertFalse(jSTerm6.isVariable());
      assertEquals(0, jSTerm6.size());
      assertFalse(jSTerm6.isEval());
      assertTrue(jSTerm6.isEmpty());
      assertEquals("[]", jSTerm6.toString());
      assertEquals(10, jSTerm6.capacity());
      assertFalse(jSTerm6.isFunction());
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm6);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm5);
      assertNotSame(jSTerm5, jSTerm6);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm2);
      
      JSTerm jSTerm7 = JSEvaluate.maxElement(jSTerm4);
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm6));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm5));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm7.equals((Object)jSTerm1));
      assertFalse(jSTerm7.equals((Object)jSTerm5));
      assertTrue(jSTerm7.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm0));
      assertFalse(jSTerm7.equals((Object)jSTerm4));
      assertTrue(jSTerm7.equals((Object)jSTerm6));
      assertTrue(jSTerm7.equals((Object)jSTerm3));
      assertNotNull(jSTerm7);
      assertTrue(jSTerm4.isConstant());
      assertEquals("[t]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm7.isFunction());
      assertEquals(10, jSTerm7.capacity());
      assertFalse(jSTerm7.isVariable());
      assertTrue(jSTerm7.isEmpty());
      assertEquals("[]", jSTerm7.toString());
      assertFalse(jSTerm7.isConstant());
      assertFalse(jSTerm7.isEval());
      assertEquals(0, jSTerm7.size());
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm7);
      assertNotSame(jSTerm4, jSTerm6);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm5);
      assertNotSame(jSTerm7, jSTerm3);
      assertNotSame(jSTerm7, jSTerm1);
      assertNotSame(jSTerm7, jSTerm5);
      assertNotSame(jSTerm7, jSTerm0);
      assertNotSame(jSTerm7, jSTerm4);
      assertNotSame(jSTerm7, jSTerm6);
      assertNotSame(jSTerm7, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.notequal((-3117.2615F), (-3117.2615F));
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub((-2653.5127F), (-2653.5127F), (-1));
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[1.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = JSEvaluate.floor(4945.3296F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[4945.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.applyOperator("min", jSTerm1, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[4945.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertTrue(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals("[4945.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = JSEvaluate.equal(1.0F, 1.0F);
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.isEval());
      assertEquals("[t]", jSTerm3.toString());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isFunction());
      assertEquals(10, jSTerm3.capacity());
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub(0.0F, 0.0F, 0);
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertNotNull(jSPredicateForm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals("[0.0]", jSPredicateForm0.toString());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(1, jSPredicateForm0.size());
      
      float float0 = JSEvaluate.numericValue(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[0.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(0.0F, float0, 0.01F);
      
      JSTerm jSTerm1 = JSEvaluate.ceil(0.0F);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[0.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.maxOf(0.0F, 0.0F);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("~jxhikdul`", jSTerm0, jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm0 = JSEvaluate.minOf((-1.0F), (-1.0F));
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[-1.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      
      float float0 = JSEvaluate.numericValue(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[-1.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals((-1.0F), float0, 0.01F);
      
      JSTerm jSTerm1 = JSEvaluate.maxOf(1555.0F, (-658.2F));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[1555.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div((-143.9403F), (-1282.7812F));
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[0.11220955]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      int int0 = 0;
      ListIterator listIterator0 = jSTerm0.listIterator(0);
      assertNotNull(listIterator0);
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[0.11220955]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = jSTerm0.add((Object) ">Ut/,<X");
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[0.11220955, >Ut/,<X]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[0.11220955, >Ut/,<X]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[0.11220955, >Ut/,<X]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean1 = jSTerm0.add((Object) ">Ut/,<X");
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertEquals("[0.11220955, >Ut/,<X, >Ut/,<X]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(3, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(boolean1);
      
      JSTerm jSTerm2 = JSEvaluate.applyOperatorUnary(">Ut/,<X", jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotNull(jSTerm2);
      assertEquals("[0.11220955, >Ut/,<X, >Ut/,<X]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(3, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(0, jSTerm2.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      float float0 = 1335.3F;
      JSTerm jSTerm3 = JSEvaluate.floor(1335.3F);
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertNotNull(jSTerm3);
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[1335.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      
      jSTerm3.removeAllElements();
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(0, jSTerm3.size());
      assertEquals("[]", jSTerm3.toString());
      assertTrue(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      
      JSTerm jSTerm4 = jSTerm3.call();
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertNotNull(jSTerm4);
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(0, jSTerm3.size());
      assertEquals("[]", jSTerm3.toString());
      assertTrue(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertEquals(0, jSTerm4.size());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isFunction());
      assertEquals("[]", jSTerm4.toString());
      assertEquals(0, jSTerm4.capacity());
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isVariable());
      assertTrue(jSTerm4.isEmpty());
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm2);
      
      StringReader stringReader0 = new StringReader(">Ut/,<X");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, (-3), (-1177));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("equal", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil((-399.38986F));
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[-399.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("-", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[-399.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[0.0]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(595.4599F, 595.4599F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[595.4599]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      
      JSTerm jSTerm1 = JSEvaluate.member(jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[595.4599]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.OperantNum((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = JSEvaluate.member(jSTerm0, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = JSEvaluate.maxElement(jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary("min", jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.maxElement((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("not");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      assertNotNull(jSTerm0);
      assertEquals("[1.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("+", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals("[1.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[2.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(984.0F, 984.0F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[t]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("umd.cs.shop.JSParserError", jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[t]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm1.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = 0.0F;
      JSTerm jSTerm0 = JSEvaluate.minOf(0.0F, (-1000.8F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[-1000.8]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      float float1 = 1.0F;
      JSTerm jSTerm1 = JSEvaluate.div(1.0F, (-1000.8F));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[-9.992006E-4]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSTerm0.removeAll(jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[-1000.8]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[-9.992006E-4]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(boolean0);
      
      JSTerm jSTerm2 = JSEvaluate.maxOf(1.0F, 1712.9421F);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[1712.9421]", jSTerm2.toString());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      jSTerm2.makeConstant();
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[1712.9421]", jSTerm2.toString());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      jSTerm2.removeElementAt(0);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = jSTerm2.add(object0);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertFalse(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        JSEvaluate.member(jSTerm0, jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("");
      assertEquals(2, int0);
      
      JSTerm jSTerm0 = JSEvaluate.mult(841.36F, 2);
      assertNotNull(jSTerm0);
      assertEquals("[1682.72]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("<", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals("[1682.72]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("ceil");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(0.0F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator(">=", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal((-391.38F), (-391.38F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[t]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal((-1815.2017F), (-963.562F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(595.4599F, 595.4599F);
      assertNotNull(jSTerm0);
      assertEquals("[t]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(1.0F, (-1.0F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[1.0]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(0.0F, 0.0F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = JSEvaluate.equal(0.0F, 0.0F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.mult((-84.65241F), (-2413.0F));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[204266.27]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = JSEvaluate.maxOf(0.0F, (-84.65241F));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertNotNull(jSTerm3);
      assertEquals("[0.0]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEmpty());
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      
      JSTerm jSTerm4 = JSEvaluate.notequal((-84.65241F), (-2413.0F));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertNotNull(jSTerm4);
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertEquals("[t]", jSTerm4.toString());
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(10, jSTerm4.capacity());
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      
      JSTerm jSTerm5 = JSEvaluate.ceil(0.0F);
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertTrue(jSTerm5.equals((Object)jSTerm0));
      assertTrue(jSTerm5.equals((Object)jSTerm3));
      assertNotNull(jSTerm5);
      assertFalse(jSTerm5.isEmpty());
      assertEquals("[0.0]", jSTerm5.toString());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isFunction());
      assertEquals(1, jSTerm5.size());
      assertEquals(10, jSTerm5.capacity());
      assertTrue(jSTerm5.isConstant());
      assertFalse(jSTerm5.isVariable());
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm0);
      
      JSTerm jSTerm6 = JSEvaluate.greater(0.0F, 1986.4F);
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertNotNull(jSTerm6);
      assertTrue(jSTerm6.isEmpty());
      assertEquals("[]", jSTerm6.toString());
      assertFalse(jSTerm6.isEval());
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm6.isConstant());
      assertEquals(0, jSTerm6.size());
      assertEquals(10, jSTerm6.capacity());
      assertFalse(jSTerm6.isFunction());
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm1);
      
      Iterator iterator0 = jSTerm6.iterator();
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertNotNull(iterator0);
      assertTrue(jSTerm6.isEmpty());
      assertEquals("[]", jSTerm6.toString());
      assertFalse(jSTerm6.isEval());
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm6.isConstant());
      assertEquals(0, jSTerm6.size());
      assertEquals(10, jSTerm6.capacity());
      assertFalse(jSTerm6.isFunction());
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm1);
      
      JSTerm jSTerm7 = JSEvaluate.not(jSTerm6);
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm7.equals((Object)jSTerm5));
      assertFalse(jSTerm7.equals((Object)jSTerm2));
      assertFalse(jSTerm7.equals((Object)jSTerm3));
      assertTrue(jSTerm7.equals((Object)jSTerm1));
      assertTrue(jSTerm7.equals((Object)jSTerm4));
      assertFalse(jSTerm7.equals((Object)jSTerm0));
      assertFalse(jSTerm7.equals((Object)jSTerm6));
      assertNotNull(jSTerm7);
      assertTrue(jSTerm6.isEmpty());
      assertEquals("[]", jSTerm6.toString());
      assertFalse(jSTerm6.isEval());
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm6.isConstant());
      assertEquals(0, jSTerm6.size());
      assertEquals(10, jSTerm6.capacity());
      assertFalse(jSTerm6.isFunction());
      assertTrue(jSTerm7.isConstant());
      assertFalse(jSTerm7.isEmpty());
      assertEquals(1, jSTerm7.size());
      assertFalse(jSTerm7.isEval());
      assertFalse(jSTerm7.isFunction());
      assertFalse(jSTerm7.isVariable());
      assertEquals(10, jSTerm7.capacity());
      assertEquals("[t]", jSTerm7.toString());
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm5);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm7);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm7, jSTerm5);
      assertNotSame(jSTerm7, jSTerm2);
      assertNotSame(jSTerm7, jSTerm3);
      assertNotSame(jSTerm7, jSTerm4);
      assertNotSame(jSTerm7, jSTerm0);
      assertNotSame(jSTerm7, jSTerm1);
      assertNotSame(jSTerm7, jSTerm6);
      
      JSTerm jSTerm8 = JSEvaluate.greaterequal((-1124.0F), (-2413.0F));
      assertFalse(jSTerm8.equals((Object)jSTerm5));
      assertFalse(jSTerm8.equals((Object)jSTerm2));
      assertFalse(jSTerm8.equals((Object)jSTerm3));
      assertTrue(jSTerm8.equals((Object)jSTerm1));
      assertTrue(jSTerm8.equals((Object)jSTerm7));
      assertFalse(jSTerm8.equals((Object)jSTerm0));
      assertTrue(jSTerm8.equals((Object)jSTerm4));
      assertFalse(jSTerm8.equals((Object)jSTerm6));
      assertNotNull(jSTerm8);
      assertTrue(jSTerm8.isConstant());
      assertFalse(jSTerm8.isEmpty());
      assertEquals(1, jSTerm8.size());
      assertFalse(jSTerm8.isEval());
      assertFalse(jSTerm8.isVariable());
      assertFalse(jSTerm8.isFunction());
      assertEquals(10, jSTerm8.capacity());
      assertEquals("[t]", jSTerm8.toString());
      assertNotSame(jSTerm8, jSTerm4);
      assertNotSame(jSTerm8, jSTerm5);
      assertNotSame(jSTerm8, jSTerm2);
      assertNotSame(jSTerm8, jSTerm3);
      assertNotSame(jSTerm8, jSTerm7);
      assertNotSame(jSTerm8, jSTerm0);
      assertNotSame(jSTerm8, jSTerm1);
      assertNotSame(jSTerm8, jSTerm6);
      
      JSTerm jSTerm9 = JSEvaluate.applyOperator("", jSTerm5, jSTerm8);
      assertFalse(jSTerm5.equals((Object)jSTerm8));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm7));
      assertTrue(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm6));
      assertTrue(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm8.equals((Object)jSTerm5));
      assertFalse(jSTerm8.equals((Object)jSTerm2));
      assertFalse(jSTerm8.equals((Object)jSTerm3));
      assertTrue(jSTerm8.equals((Object)jSTerm1));
      assertTrue(jSTerm8.equals((Object)jSTerm7));
      assertFalse(jSTerm8.equals((Object)jSTerm0));
      assertTrue(jSTerm8.equals((Object)jSTerm4));
      assertFalse(jSTerm8.equals((Object)jSTerm6));
      assertFalse(jSTerm9.equals((Object)jSTerm7));
      assertFalse(jSTerm9.equals((Object)jSTerm8));
      assertFalse(jSTerm9.equals((Object)jSTerm1));
      assertFalse(jSTerm9.equals((Object)jSTerm2));
      assertFalse(jSTerm9.equals((Object)jSTerm3));
      assertTrue(jSTerm9.equals((Object)jSTerm6));
      assertFalse(jSTerm9.equals((Object)jSTerm0));
      assertFalse(jSTerm9.equals((Object)jSTerm5));
      assertFalse(jSTerm9.equals((Object)jSTerm4));
      assertNotNull(jSTerm9);
      assertFalse(jSTerm5.isEmpty());
      assertEquals("[0.0]", jSTerm5.toString());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isFunction());
      assertEquals(1, jSTerm5.size());
      assertEquals(10, jSTerm5.capacity());
      assertTrue(jSTerm5.isConstant());
      assertFalse(jSTerm5.isVariable());
      assertTrue(jSTerm8.isConstant());
      assertFalse(jSTerm8.isEmpty());
      assertEquals(1, jSTerm8.size());
      assertFalse(jSTerm8.isEval());
      assertFalse(jSTerm8.isVariable());
      assertFalse(jSTerm8.isFunction());
      assertEquals(10, jSTerm8.capacity());
      assertEquals("[t]", jSTerm8.toString());
      assertFalse(jSTerm9.isConstant());
      assertEquals(10, jSTerm9.capacity());
      assertFalse(jSTerm9.isFunction());
      assertTrue(jSTerm9.isEmpty());
      assertEquals("[]", jSTerm9.toString());
      assertFalse(jSTerm9.isEval());
      assertEquals(0, jSTerm9.size());
      assertFalse(jSTerm9.isVariable());
      assertNotSame(jSTerm5, jSTerm8);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm9);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm7);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm6);
      assertNotSame(jSTerm8, jSTerm9);
      assertNotSame(jSTerm8, jSTerm4);
      assertNotSame(jSTerm8, jSTerm5);
      assertNotSame(jSTerm8, jSTerm2);
      assertNotSame(jSTerm8, jSTerm3);
      assertNotSame(jSTerm8, jSTerm7);
      assertNotSame(jSTerm8, jSTerm0);
      assertNotSame(jSTerm8, jSTerm1);
      assertNotSame(jSTerm8, jSTerm6);
      assertNotSame(jSTerm9, jSTerm7);
      assertNotSame(jSTerm9, jSTerm8);
      assertNotSame(jSTerm9, jSTerm1);
      assertNotSame(jSTerm9, jSTerm2);
      assertNotSame(jSTerm9, jSTerm3);
      assertNotSame(jSTerm9, jSTerm6);
      assertNotSame(jSTerm9, jSTerm0);
      assertNotSame(jSTerm9, jSTerm5);
      assertNotSame(jSTerm9, jSTerm4);
      
      JSTerm jSTerm10 = JSEvaluate.greater(0.0F, (-1329.834F));
      assertFalse(jSTerm10.equals((Object)jSTerm9));
      assertFalse(jSTerm10.equals((Object)jSTerm2));
      assertFalse(jSTerm10.equals((Object)jSTerm3));
      assertFalse(jSTerm10.equals((Object)jSTerm6));
      assertTrue(jSTerm10.equals((Object)jSTerm8));
      assertTrue(jSTerm10.equals((Object)jSTerm1));
      assertFalse(jSTerm10.equals((Object)jSTerm0));
      assertTrue(jSTerm10.equals((Object)jSTerm4));
      assertTrue(jSTerm10.equals((Object)jSTerm7));
      assertFalse(jSTerm10.equals((Object)jSTerm5));
      assertNotNull(jSTerm10);
      assertFalse(jSTerm10.isEmpty());
      assertEquals(10, jSTerm10.capacity());
      assertFalse(jSTerm10.isFunction());
      assertEquals(1, jSTerm10.size());
      assertTrue(jSTerm10.isConstant());
      assertFalse(jSTerm10.isEval());
      assertEquals("[t]", jSTerm10.toString());
      assertFalse(jSTerm10.isVariable());
      assertNotSame(jSTerm10, jSTerm1);
      assertNotSame(jSTerm10, jSTerm9);
      assertNotSame(jSTerm10, jSTerm4);
      assertNotSame(jSTerm10, jSTerm7);
      assertNotSame(jSTerm10, jSTerm2);
      assertNotSame(jSTerm10, jSTerm3);
      assertNotSame(jSTerm10, jSTerm6);
      assertNotSame(jSTerm10, jSTerm0);
      assertNotSame(jSTerm10, jSTerm5);
      assertNotSame(jSTerm10, jSTerm8);
      
      boolean boolean0 = jSTerm10.remove((Object) jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm4));
      assertFalse(jSTerm0.equals((Object)jSTerm7));
      assertFalse(jSTerm0.equals((Object)jSTerm10));
      assertFalse(jSTerm0.equals((Object)jSTerm8));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm9));
      assertTrue(jSTerm0.equals((Object)jSTerm5));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm6));
      assertFalse(jSTerm10.equals((Object)jSTerm9));
      assertFalse(jSTerm10.equals((Object)jSTerm2));
      assertFalse(jSTerm10.equals((Object)jSTerm3));
      assertFalse(jSTerm10.equals((Object)jSTerm6));
      assertTrue(jSTerm10.equals((Object)jSTerm8));
      assertTrue(jSTerm10.equals((Object)jSTerm1));
      assertFalse(jSTerm10.equals((Object)jSTerm0));
      assertTrue(jSTerm10.equals((Object)jSTerm4));
      assertTrue(jSTerm10.equals((Object)jSTerm7));
      assertFalse(jSTerm10.equals((Object)jSTerm5));
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm10.isEmpty());
      assertEquals(10, jSTerm10.capacity());
      assertFalse(jSTerm10.isFunction());
      assertEquals(1, jSTerm10.size());
      assertTrue(jSTerm10.isConstant());
      assertFalse(jSTerm10.isEval());
      assertEquals("[t]", jSTerm10.toString());
      assertFalse(jSTerm10.isVariable());
      assertNotSame(jSTerm0, jSTerm5);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm7);
      assertNotSame(jSTerm0, jSTerm10);
      assertNotSame(jSTerm0, jSTerm8);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm9);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm6);
      assertNotSame(jSTerm10, jSTerm1);
      assertNotSame(jSTerm10, jSTerm9);
      assertNotSame(jSTerm10, jSTerm4);
      assertNotSame(jSTerm10, jSTerm7);
      assertNotSame(jSTerm10, jSTerm2);
      assertNotSame(jSTerm10, jSTerm3);
      assertNotSame(jSTerm10, jSTerm6);
      assertNotSame(jSTerm10, jSTerm0);
      assertNotSame(jSTerm10, jSTerm5);
      assertNotSame(jSTerm10, jSTerm8);
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = jSTerm10.toStr();
      assertFalse(jSTerm10.equals((Object)jSTerm9));
      assertFalse(jSTerm10.equals((Object)jSTerm2));
      assertFalse(jSTerm10.equals((Object)jSTerm3));
      assertFalse(jSTerm10.equals((Object)jSTerm6));
      assertTrue(jSTerm10.equals((Object)jSTerm8));
      assertTrue(jSTerm10.equals((Object)jSTerm1));
      assertFalse(jSTerm10.equals((Object)jSTerm0));
      assertTrue(jSTerm10.equals((Object)jSTerm4));
      assertTrue(jSTerm10.equals((Object)jSTerm7));
      assertFalse(jSTerm10.equals((Object)jSTerm5));
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm10.isEmpty());
      assertEquals(10, jSTerm10.capacity());
      assertFalse(jSTerm10.isFunction());
      assertEquals(1, jSTerm10.size());
      assertTrue(jSTerm10.isConstant());
      assertFalse(jSTerm10.isEval());
      assertEquals("[t]", jSTerm10.toString());
      assertFalse(jSTerm10.isVariable());
      assertEquals("t ", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertNotSame(jSTerm10, jSTerm1);
      assertNotSame(jSTerm10, jSTerm9);
      assertNotSame(jSTerm10, jSTerm4);
      assertNotSame(jSTerm10, jSTerm7);
      assertNotSame(jSTerm10, jSTerm2);
      assertNotSame(jSTerm10, jSTerm3);
      assertNotSame(jSTerm10, jSTerm6);
      assertNotSame(jSTerm10, jSTerm0);
      assertNotSame(jSTerm10, jSTerm5);
      assertNotSame(jSTerm10, jSTerm8);
      
      float float0 = JSEvaluate.numericValue(jSTerm10);
      assertFalse(jSTerm10.equals((Object)jSTerm9));
      assertFalse(jSTerm10.equals((Object)jSTerm2));
      assertFalse(jSTerm10.equals((Object)jSTerm3));
      assertFalse(jSTerm10.equals((Object)jSTerm6));
      assertTrue(jSTerm10.equals((Object)jSTerm8));
      assertTrue(jSTerm10.equals((Object)jSTerm1));
      assertFalse(jSTerm10.equals((Object)jSTerm0));
      assertTrue(jSTerm10.equals((Object)jSTerm4));
      assertTrue(jSTerm10.equals((Object)jSTerm7));
      assertFalse(jSTerm10.equals((Object)jSTerm5));
      assertFalse(jSTerm10.isEmpty());
      assertEquals(10, jSTerm10.capacity());
      assertFalse(jSTerm10.isFunction());
      assertEquals(1, jSTerm10.size());
      assertTrue(jSTerm10.isConstant());
      assertFalse(jSTerm10.isEval());
      assertEquals("[t]", jSTerm10.toString());
      assertFalse(jSTerm10.isVariable());
      assertNotSame(jSTerm10, jSTerm1);
      assertNotSame(jSTerm10, jSTerm9);
      assertNotSame(jSTerm10, jSTerm4);
      assertNotSame(jSTerm10, jSTerm7);
      assertNotSame(jSTerm10, jSTerm2);
      assertNotSame(jSTerm10, jSTerm3);
      assertNotSame(jSTerm10, jSTerm6);
      assertNotSame(jSTerm10, jSTerm0);
      assertNotSame(jSTerm10, jSTerm5);
      assertNotSame(jSTerm10, jSTerm8);
      assertEquals(0.0F, float0, 0.01F);
      
      JSTerm jSTerm11 = JSEvaluate.minOf(1963.57F, 1963.57F);
      assertFalse(jSTerm11.equals((Object)jSTerm5));
      assertFalse(jSTerm11.equals((Object)jSTerm6));
      assertFalse(jSTerm11.equals((Object)jSTerm0));
      assertFalse(jSTerm11.equals((Object)jSTerm9));
      assertFalse(jSTerm11.equals((Object)jSTerm1));
      assertFalse(jSTerm11.equals((Object)jSTerm4));
      assertFalse(jSTerm11.equals((Object)jSTerm7));
      assertFalse(jSTerm11.equals((Object)jSTerm8));
      assertFalse(jSTerm11.equals((Object)jSTerm10));
      assertFalse(jSTerm11.equals((Object)jSTerm2));
      assertFalse(jSTerm11.equals((Object)jSTerm3));
      assertNotNull(jSTerm11);
      assertFalse(jSTerm11.isVariable());
      assertEquals(10, jSTerm11.capacity());
      assertFalse(jSTerm11.isFunction());
      assertTrue(jSTerm11.isConstant());
      assertEquals("[1963.57]", jSTerm11.toString());
      assertFalse(jSTerm11.isEval());
      assertEquals(1, jSTerm11.size());
      assertFalse(jSTerm11.isEmpty());
      assertNotSame(jSTerm11, jSTerm5);
      assertNotSame(jSTerm11, jSTerm6);
      assertNotSame(jSTerm11, jSTerm0);
      assertNotSame(jSTerm11, jSTerm9);
      assertNotSame(jSTerm11, jSTerm1);
      assertNotSame(jSTerm11, jSTerm4);
      assertNotSame(jSTerm11, jSTerm7);
      assertNotSame(jSTerm11, jSTerm8);
      assertNotSame(jSTerm11, jSTerm10);
      assertNotSame(jSTerm11, jSTerm2);
      assertNotSame(jSTerm11, jSTerm3);
      
      JSTerm jSTerm12 = JSEvaluate.minOf(0.0F, 0.0F);
      assertTrue(jSTerm12.equals((Object)jSTerm3));
      assertFalse(jSTerm12.equals((Object)jSTerm6));
      assertTrue(jSTerm12.equals((Object)jSTerm5));
      assertFalse(jSTerm12.equals((Object)jSTerm9));
      assertFalse(jSTerm12.equals((Object)jSTerm1));
      assertFalse(jSTerm12.equals((Object)jSTerm2));
      assertFalse(jSTerm12.equals((Object)jSTerm8));
      assertTrue(jSTerm12.equals((Object)jSTerm0));
      assertFalse(jSTerm12.equals((Object)jSTerm10));
      assertFalse(jSTerm12.equals((Object)jSTerm11));
      assertFalse(jSTerm12.equals((Object)jSTerm4));
      assertFalse(jSTerm12.equals((Object)jSTerm7));
      assertNotNull(jSTerm12);
      assertTrue(jSTerm12.isConstant());
      assertFalse(jSTerm12.isVariable());
      assertFalse(jSTerm12.isFunction());
      assertEquals("[0.0]", jSTerm12.toString());
      assertEquals(10, jSTerm12.capacity());
      assertFalse(jSTerm12.isEval());
      assertFalse(jSTerm12.isEmpty());
      assertEquals(1, jSTerm12.size());
      assertNotSame(jSTerm12, jSTerm0);
      assertNotSame(jSTerm12, jSTerm5);
      assertNotSame(jSTerm12, jSTerm6);
      assertNotSame(jSTerm12, jSTerm9);
      assertNotSame(jSTerm12, jSTerm1);
      assertNotSame(jSTerm12, jSTerm3);
      assertNotSame(jSTerm12, jSTerm2);
      assertNotSame(jSTerm12, jSTerm8);
      assertNotSame(jSTerm12, jSTerm10);
      assertNotSame(jSTerm12, jSTerm11);
      assertNotSame(jSTerm12, jSTerm4);
      assertNotSame(jSTerm12, jSTerm7);
      
      JSTerm jSTerm13 = JSEvaluate.minOf((-1123.264F), (-1.0F));
      assertFalse(jSTerm13.equals((Object)jSTerm9));
      assertFalse(jSTerm13.equals((Object)jSTerm7));
      assertFalse(jSTerm13.equals((Object)jSTerm3));
      assertFalse(jSTerm13.equals((Object)jSTerm5));
      assertFalse(jSTerm13.equals((Object)jSTerm6));
      assertFalse(jSTerm13.equals((Object)jSTerm12));
      assertFalse(jSTerm13.equals((Object)jSTerm1));
      assertFalse(jSTerm13.equals((Object)jSTerm4));
      assertFalse(jSTerm13.equals((Object)jSTerm8));
      assertFalse(jSTerm13.equals((Object)jSTerm11));
      assertFalse(jSTerm13.equals((Object)jSTerm10));
      assertFalse(jSTerm13.equals((Object)jSTerm2));
      assertFalse(jSTerm13.equals((Object)jSTerm0));
      assertNotNull(jSTerm13);
      assertFalse(jSTerm13.isEval());
      assertFalse(jSTerm13.isEmpty());
      assertEquals(1, jSTerm13.size());
      assertEquals(10, jSTerm13.capacity());
      assertFalse(jSTerm13.isFunction());
      assertFalse(jSTerm13.isVariable());
      assertTrue(jSTerm13.isConstant());
      assertEquals("[-1123.264]", jSTerm13.toString());
      assertNotSame(jSTerm13, jSTerm9);
      assertNotSame(jSTerm13, jSTerm7);
      assertNotSame(jSTerm13, jSTerm3);
      assertNotSame(jSTerm13, jSTerm5);
      assertNotSame(jSTerm13, jSTerm6);
      assertNotSame(jSTerm13, jSTerm12);
      assertNotSame(jSTerm13, jSTerm1);
      assertNotSame(jSTerm13, jSTerm4);
      assertNotSame(jSTerm13, jSTerm8);
      assertNotSame(jSTerm13, jSTerm11);
      assertNotSame(jSTerm13, jSTerm10);
      assertNotSame(jSTerm13, jSTerm2);
      assertNotSame(jSTerm13, jSTerm0);
      
      JSTerm jSTerm14 = JSEvaluate.not(jSTerm5);
      assertFalse(jSTerm14.equals((Object)jSTerm7));
      assertFalse(jSTerm14.equals((Object)jSTerm12));
      assertFalse(jSTerm14.equals((Object)jSTerm3));
      assertTrue(jSTerm14.equals((Object)jSTerm9));
      assertFalse(jSTerm14.equals((Object)jSTerm13));
      assertFalse(jSTerm14.equals((Object)jSTerm5));
      assertFalse(jSTerm14.equals((Object)jSTerm1));
      assertFalse(jSTerm14.equals((Object)jSTerm11));
      assertFalse(jSTerm14.equals((Object)jSTerm2));
      assertFalse(jSTerm14.equals((Object)jSTerm8));
      assertFalse(jSTerm14.equals((Object)jSTerm10));
      assertTrue(jSTerm14.equals((Object)jSTerm6));
      assertFalse(jSTerm14.equals((Object)jSTerm0));
      assertFalse(jSTerm14.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm9));
      assertFalse(jSTerm5.equals((Object)jSTerm7));
      assertTrue(jSTerm5.equals((Object)jSTerm12));
      assertFalse(jSTerm5.equals((Object)jSTerm13));
      assertFalse(jSTerm5.equals((Object)jSTerm6));
      assertFalse(jSTerm5.equals((Object)jSTerm8));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm10));
      assertTrue(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm11));
      assertTrue(jSTerm5.equals((Object)jSTerm3));
      assertNotNull(jSTerm14);
      assertFalse(jSTerm14.isConstant());
      assertFalse(jSTerm14.isFunction());
      assertFalse(jSTerm14.isVariable());
      assertEquals(10, jSTerm14.capacity());
      assertEquals("[]", jSTerm14.toString());
      assertTrue(jSTerm14.isEmpty());
      assertEquals(0, jSTerm14.size());
      assertFalse(jSTerm14.isEval());
      assertFalse(jSTerm5.isEmpty());
      assertEquals("[0.0]", jSTerm5.toString());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isFunction());
      assertEquals(1, jSTerm5.size());
      assertEquals(10, jSTerm5.capacity());
      assertTrue(jSTerm5.isConstant());
      assertFalse(jSTerm5.isVariable());
      assertNotSame(jSTerm14, jSTerm7);
      assertNotSame(jSTerm14, jSTerm12);
      assertNotSame(jSTerm14, jSTerm3);
      assertNotSame(jSTerm14, jSTerm6);
      assertNotSame(jSTerm14, jSTerm9);
      assertNotSame(jSTerm14, jSTerm13);
      assertNotSame(jSTerm14, jSTerm5);
      assertNotSame(jSTerm14, jSTerm1);
      assertNotSame(jSTerm14, jSTerm11);
      assertNotSame(jSTerm14, jSTerm2);
      assertNotSame(jSTerm14, jSTerm8);
      assertNotSame(jSTerm14, jSTerm10);
      assertNotSame(jSTerm14, jSTerm0);
      assertNotSame(jSTerm14, jSTerm4);
      assertNotSame(jSTerm5, jSTerm12);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm9);
      assertNotSame(jSTerm5, jSTerm14);
      assertNotSame(jSTerm5, jSTerm7);
      assertNotSame(jSTerm5, jSTerm13);
      assertNotSame(jSTerm5, jSTerm6);
      assertNotSame(jSTerm5, jSTerm8);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm10);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm11);
      
      JSTerm jSTerm15 = JSEvaluate.maxOf(1660.7355F, (-1.0F));
      assertFalse(jSTerm15.equals((Object)jSTerm10));
      assertFalse(jSTerm15.equals((Object)jSTerm2));
      assertFalse(jSTerm15.equals((Object)jSTerm6));
      assertFalse(jSTerm15.equals((Object)jSTerm1));
      assertFalse(jSTerm15.equals((Object)jSTerm8));
      assertFalse(jSTerm15.equals((Object)jSTerm5));
      assertFalse(jSTerm15.equals((Object)jSTerm12));
      assertFalse(jSTerm15.equals((Object)jSTerm7));
      assertFalse(jSTerm15.equals((Object)jSTerm9));
      assertFalse(jSTerm15.equals((Object)jSTerm3));
      assertFalse(jSTerm15.equals((Object)jSTerm13));
      assertFalse(jSTerm15.equals((Object)jSTerm14));
      assertFalse(jSTerm15.equals((Object)jSTerm4));
      assertFalse(jSTerm15.equals((Object)jSTerm11));
      assertFalse(jSTerm15.equals((Object)jSTerm0));
      assertNotNull(jSTerm15);
      assertEquals(1, jSTerm15.size());
      assertFalse(jSTerm15.isEval());
      assertFalse(jSTerm15.isEmpty());
      assertFalse(jSTerm15.isFunction());
      assertEquals(10, jSTerm15.capacity());
      assertTrue(jSTerm15.isConstant());
      assertFalse(jSTerm15.isVariable());
      assertEquals("[1660.7355]", jSTerm15.toString());
      assertNotSame(jSTerm15, jSTerm10);
      assertNotSame(jSTerm15, jSTerm2);
      assertNotSame(jSTerm15, jSTerm6);
      assertNotSame(jSTerm15, jSTerm1);
      assertNotSame(jSTerm15, jSTerm8);
      assertNotSame(jSTerm15, jSTerm5);
      assertNotSame(jSTerm15, jSTerm12);
      assertNotSame(jSTerm15, jSTerm7);
      assertNotSame(jSTerm15, jSTerm9);
      assertNotSame(jSTerm15, jSTerm3);
      assertNotSame(jSTerm15, jSTerm13);
      assertNotSame(jSTerm15, jSTerm14);
      assertNotSame(jSTerm15, jSTerm4);
      assertNotSame(jSTerm15, jSTerm11);
      assertNotSame(jSTerm15, jSTerm0);
      
      JSTerm jSTerm16 = JSEvaluate.applyOperator("", jSTerm1, jSTerm15);
      assertFalse(jSTerm1.equals((Object)jSTerm9));
      assertFalse(jSTerm1.equals((Object)jSTerm14));
      assertFalse(jSTerm1.equals((Object)jSTerm6));
      assertFalse(jSTerm1.equals((Object)jSTerm12));
      assertTrue(jSTerm1.equals((Object)jSTerm7));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm15));
      assertFalse(jSTerm1.equals((Object)jSTerm13));
      assertTrue(jSTerm1.equals((Object)jSTerm8));
      assertFalse(jSTerm1.equals((Object)jSTerm5));
      assertTrue(jSTerm1.equals((Object)jSTerm10));
      assertFalse(jSTerm1.equals((Object)jSTerm11));
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm15.equals((Object)jSTerm10));
      assertFalse(jSTerm15.equals((Object)jSTerm2));
      assertFalse(jSTerm15.equals((Object)jSTerm6));
      assertFalse(jSTerm15.equals((Object)jSTerm1));
      assertFalse(jSTerm15.equals((Object)jSTerm8));
      assertFalse(jSTerm15.equals((Object)jSTerm5));
      assertFalse(jSTerm15.equals((Object)jSTerm12));
      assertFalse(jSTerm15.equals((Object)jSTerm7));
      assertFalse(jSTerm15.equals((Object)jSTerm9));
      assertFalse(jSTerm15.equals((Object)jSTerm3));
      assertFalse(jSTerm15.equals((Object)jSTerm13));
      assertFalse(jSTerm15.equals((Object)jSTerm14));
      assertFalse(jSTerm15.equals((Object)jSTerm4));
      assertFalse(jSTerm15.equals((Object)jSTerm11));
      assertFalse(jSTerm15.equals((Object)jSTerm0));
      assertFalse(jSTerm16.equals((Object)jSTerm7));
      assertTrue(jSTerm16.equals((Object)jSTerm9));
      assertTrue(jSTerm16.equals((Object)jSTerm14));
      assertFalse(jSTerm16.equals((Object)jSTerm3));
      assertTrue(jSTerm16.equals((Object)jSTerm6));
      assertFalse(jSTerm16.equals((Object)jSTerm12));
      assertFalse(jSTerm16.equals((Object)jSTerm8));
      assertFalse(jSTerm16.equals((Object)jSTerm5));
      assertFalse(jSTerm16.equals((Object)jSTerm11));
      assertFalse(jSTerm16.equals((Object)jSTerm4));
      assertFalse(jSTerm16.equals((Object)jSTerm1));
      assertFalse(jSTerm16.equals((Object)jSTerm15));
      assertFalse(jSTerm16.equals((Object)jSTerm2));
      assertFalse(jSTerm16.equals((Object)jSTerm10));
      assertFalse(jSTerm16.equals((Object)jSTerm13));
      assertFalse(jSTerm16.equals((Object)jSTerm0));
      assertNotNull(jSTerm16);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm15.size());
      assertFalse(jSTerm15.isEval());
      assertFalse(jSTerm15.isEmpty());
      assertFalse(jSTerm15.isFunction());
      assertEquals(10, jSTerm15.capacity());
      assertTrue(jSTerm15.isConstant());
      assertFalse(jSTerm15.isVariable());
      assertEquals("[1660.7355]", jSTerm15.toString());
      assertEquals("[]", jSTerm16.toString());
      assertEquals(0, jSTerm16.size());
      assertFalse(jSTerm16.isConstant());
      assertFalse(jSTerm16.isFunction());
      assertEquals(10, jSTerm16.capacity());
      assertFalse(jSTerm16.isVariable());
      assertFalse(jSTerm16.isEval());
      assertTrue(jSTerm16.isEmpty());
      assertNotSame(jSTerm1, jSTerm9);
      assertNotSame(jSTerm1, jSTerm14);
      assertNotSame(jSTerm1, jSTerm6);
      assertNotSame(jSTerm1, jSTerm12);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm10);
      assertNotSame(jSTerm1, jSTerm8);
      assertNotSame(jSTerm1, jSTerm15);
      assertNotSame(jSTerm1, jSTerm7);
      assertNotSame(jSTerm1, jSTerm13);
      assertNotSame(jSTerm1, jSTerm5);
      assertNotSame(jSTerm1, jSTerm11);
      assertNotSame(jSTerm1, jSTerm16);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm15, jSTerm10);
      assertNotSame(jSTerm15, jSTerm2);
      assertNotSame(jSTerm15, jSTerm16);
      assertNotSame(jSTerm15, jSTerm6);
      assertNotSame(jSTerm15, jSTerm1);
      assertNotSame(jSTerm15, jSTerm8);
      assertNotSame(jSTerm15, jSTerm5);
      assertNotSame(jSTerm15, jSTerm12);
      assertNotSame(jSTerm15, jSTerm7);
      assertNotSame(jSTerm15, jSTerm9);
      assertNotSame(jSTerm15, jSTerm3);
      assertNotSame(jSTerm15, jSTerm13);
      assertNotSame(jSTerm15, jSTerm14);
      assertNotSame(jSTerm15, jSTerm4);
      assertNotSame(jSTerm15, jSTerm11);
      assertNotSame(jSTerm15, jSTerm0);
      assertNotSame(jSTerm16, jSTerm14);
      assertNotSame(jSTerm16, jSTerm6);
      assertNotSame(jSTerm16, jSTerm7);
      assertNotSame(jSTerm16, jSTerm9);
      assertNotSame(jSTerm16, jSTerm3);
      assertNotSame(jSTerm16, jSTerm12);
      assertNotSame(jSTerm16, jSTerm8);
      assertNotSame(jSTerm16, jSTerm5);
      assertNotSame(jSTerm16, jSTerm11);
      assertNotSame(jSTerm16, jSTerm4);
      assertNotSame(jSTerm16, jSTerm1);
      assertNotSame(jSTerm16, jSTerm15);
      assertNotSame(jSTerm16, jSTerm2);
      assertNotSame(jSTerm16, jSTerm10);
      assertNotSame(jSTerm16, jSTerm13);
      assertNotSame(jSTerm16, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = 0.0F;
      JSTerm jSTerm0 = JSEvaluate.ceil(0.0F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm0.add(object0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = JSEvaluate.greaterequal(0.0F, 0.0F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.ceil(0.0F);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotNull(jSTerm2);
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[0.0]", jSTerm2.toString());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = JSEvaluate.member(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertNotNull(jSTerm3);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[0.0]", jSTerm2.toString());
      assertFalse(jSTerm3.isConstant());
      assertEquals("[]", jSTerm3.toString());
      assertEquals(0, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      
      boolean boolean1 = jSTerm2.removeAll(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(boolean1 == boolean0);
      assertEquals("[t]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[0.0]", jSTerm2.toString());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(boolean1);
      
      int int0 = (-99);
      boolean boolean2 = jSTerm1.add((Object) "");
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[t, ]", jSTerm1.toString());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        jSTerm3.listIterator((-99));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -99
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor((-3980.951F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[-3980.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("/", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[-3980.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[1.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater(0.0F, 0.0F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = JSEvaluate.equal((-2038.0815F), 0.0F);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.size());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.ceil(1.0F);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[1.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      int int0 = JSEvaluate.OperantNum("ybvK.-aggrP-KOwo0|");
      assertEquals(2, int0);
      
      JSTerm jSTerm3 = JSEvaluate.div(0.0F, 1.0F);
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertNotNull(jSTerm3);
      assertEquals("[0.0]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSTerm jSTerm4 = JSEvaluate.mult((-2038.0815F), 0.0F);
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertNotNull(jSTerm4);
      assertTrue(jSTerm4.isConstant());
      assertEquals("[-0.0]", jSTerm4.toString());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isEmpty());
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm2;
      objectArray0[1] = (Object) jSTerm3;
      objectArray0[2] = (Object) jSTerm0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm3.add(object0);
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(2, jSTerm3.size());
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm0);
      assertTrue(boolean0);
      
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm4;
      Object[] objectArray1 = jSTerm4.toArray(objectArray0);
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertNotNull(objectArray1);
      assertTrue(jSTerm4.isConstant());
      assertEquals("[-0.0]", jSTerm4.toString());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("ybvK.-aggrP-KOwo0|", jSTerm1, jSTerm4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor((-923.24066F));
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertEquals("[-923.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("min", jSTerm0, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertEquals("[-923.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[-923.0]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(595.4599F, 595.4599F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      int int0 = JSEvaluate.OperantNum("floor");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div((-34.76571F), (-34.76571F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[1.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(2483.0F);
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[2483.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      
      int int0 = JSEvaluate.OperantNum("1=@`sE");
      assertEquals(2, int0);
      
      JSTerm jSTerm1 = JSEvaluate.floor(39.444588F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals("[39.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.greaterequal(39.444588F, (-5486.2F));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotNull(jSTerm2);
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals("[t]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      
      JSTerm jSTerm3 = JSEvaluate.member(jSTerm1, jSTerm2);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertNotNull(jSTerm3);
      assertEquals("[39.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals("[t]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertTrue(jSTerm3.isEmpty());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isConstant());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      
      JSTerm jSTerm4 = JSEvaluate.floor(47.541565F);
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertNotNull(jSTerm4);
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isConstant());
      assertEquals("[47.0]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      
      JSTerm jSTerm5 = JSEvaluate.applyOperator(">", jSTerm0, jSTerm4);
      assertFalse(jSTerm0.equals((Object)jSTerm4));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertTrue(jSTerm5.equals((Object)jSTerm2));
      assertNotNull(jSTerm5);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[2483.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isConstant());
      assertEquals("[47.0]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertTrue(jSTerm5.isConstant());
      assertEquals("[t]", jSTerm5.toString());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isFunction());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isEval());
      assertFalse(jSTerm5.isEmpty());
      assertEquals(1, jSTerm5.size());
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm5);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm5);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub(0.0F, 0.0F, (-2553));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[0.0]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm1 = JSEvaluate.addsub((-1.0F), 1678.58F, (-2553));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[-4285415.5]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.floor((-1.0F));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[-1.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm0.add(object0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader(">=");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[1.0]", jSTerm0.toString());
      
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm1 = JSEvaluate.minOf(1.0F, 1.0F);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[1.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.member(jSTerm0, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[1.0]", jSTerm0.toString());
      assertEquals("[]", jSTerm2.toString());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      int int0 = JSEvaluate.OperantNum("floor");
      assertEquals(1, int0);
      
      JSTerm jSTerm3 = JSEvaluate.applyOperatorUnary("floor", jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertNotNull(jSTerm3);
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[1.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[1.0]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSEvaluate jSEvaluate0 = new JSEvaluate();
      assertNotNull(jSEvaluate0);
      
      JSTerm jSTerm0 = JSEvaluate.div((-1770.2991F), (-1770.2991F));
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[1.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      JSTerm jSTerm1 = JSEvaluate.floor(325.31F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[325.0]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.minOf(325.31F, 0.0F);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[0.0]", jSTerm2.toString());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      boolean boolean0 = jSTerm1.add((Object) jSEvaluate0);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm1.add((Object) jSTerm2);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[0.0]", jSTerm2.toString());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(boolean1);
      
      JSTerm jSTerm3 = JSEvaluate.minOf(325.31F, 2461.0F);
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertNotNull(jSTerm3);
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertEquals("[325.31]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      
      JSTerm jSTerm4 = JSEvaluate.applyOperator("%%%", jSTerm3, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertNotNull(jSTerm4);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(3, jSTerm1.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertEquals("[325.31]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm4.isEmpty());
      assertEquals("[]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertEquals(0, jSTerm4.size());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isFunction());
      assertEquals(10, jSTerm4.capacity());
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      
      jSTerm3.trimToSize();
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.isFunction());
      assertEquals("[325.31]", jSTerm3.toString());
      assertEquals(1, jSTerm3.capacity());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm1);
      
      JSTerm jSTerm5 = JSEvaluate.minOf(325.31F, 1082.0F);
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertTrue(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertNotNull(jSTerm5);
      assertFalse(jSTerm5.isVariable());
      assertTrue(jSTerm5.isConstant());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isFunction());
      assertEquals("[325.31]", jSTerm5.toString());
      assertFalse(jSTerm5.isEmpty());
      assertEquals(1, jSTerm5.size());
      assertFalse(jSTerm5.isEval());
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm4);
      
      JSTerm jSTerm6 = JSEvaluate.minElement(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm4));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm5));
      assertFalse(jSTerm6.equals((Object)jSTerm2));
      assertFalse(jSTerm6.equals((Object)jSTerm1));
      assertFalse(jSTerm6.equals((Object)jSTerm0));
      assertTrue(jSTerm6.equals((Object)jSTerm4));
      assertFalse(jSTerm6.equals((Object)jSTerm3));
      assertFalse(jSTerm6.equals((Object)jSTerm5));
      assertNotNull(jSTerm6);
      assertFalse(jSTerm3.isFunction());
      assertEquals("[325.31]", jSTerm3.toString());
      assertEquals(1, jSTerm3.capacity());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm6.isEmpty());
      assertFalse(jSTerm6.isVariable());
      assertFalse(jSTerm6.isEval());
      assertEquals(0, jSTerm6.size());
      assertFalse(jSTerm6.isConstant());
      assertEquals(10, jSTerm6.capacity());
      assertEquals("[]", jSTerm6.toString());
      assertFalse(jSTerm6.isFunction());
      assertNotSame(jSTerm3, jSTerm5);
      assertNotSame(jSTerm3, jSTerm6);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm6, jSTerm2);
      assertNotSame(jSTerm6, jSTerm4);
      assertNotSame(jSTerm6, jSTerm1);
      assertNotSame(jSTerm6, jSTerm0);
      assertNotSame(jSTerm6, jSTerm3);
      assertNotSame(jSTerm6, jSTerm5);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(0.0F, 0.0F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf((-1639.45F), 0.0F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = JSEvaluate.div((-261.4679F), 595.4599F);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[-0.43910244]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm1, jSTerm0);
      
      JSTerm jSTerm2 = JSEvaluate.floor(758.711F);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[758.0]", jSTerm2.toString());
      assertEquals(1, jSTerm2.size());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      JSTerm jSTerm3 = JSEvaluate.applyOperator(">=", jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertNotNull(jSTerm3);
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[0.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[758.0]", jSTerm2.toString());
      assertEquals(1, jSTerm2.size());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isEmpty());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(1087.7186F, 1087.7186F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[1087.7186]", jSTerm0.toString());
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[1087.7186]", jSTerm0.toString());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("*", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[1087.7186]", jSTerm0.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("floor");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult(697.981F, 697.981F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[487177.5]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(595.4599F);
      assertNotNull(jSTerm0);
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[596.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("3997.04", jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals("[596.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(48.658558F, 48.658558F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[t]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("<", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[t]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub((-2403.0F), (-2403.0F), 1);
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[-4806.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jSTerm0.add(object0);
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = jSTerm0.add(object1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm0.isFunction());
      assertEquals(3, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(object1, object0);
      assertTrue(boolean1);
      
      JSTerm jSTerm2 = JSEvaluate.maxElement(jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.isFunction());
      assertEquals(3, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      StringReader stringReader0 = new StringReader("0.0");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertNotNull(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[0.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = JSEvaluate.applyOperator("notequal", jSTerm1, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertNotNull(jSTerm2);
      assertEquals("Token[n=0.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[0.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(616.16516F, 616.16516F);
      assertNotNull(jSTerm0);
      assertFalse(jSTerm0.isVariable());
      assertEquals("[t]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertFalse(jSTerm0.isVariable());
      assertEquals("[t]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSTerm1.add((Object) jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm0.isVariable());
      assertEquals("[t]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[[t]]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        JSEvaluate.member(jSTerm0, jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(595.4599F);
      assertNotNull(jSTerm0);
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[595.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm1 = JSEvaluate.applyOperator("<", jSTerm0, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertNotNull(jSTerm1);
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[595.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[t]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.notequal(1231.7571F, (-1.0F));
      assertNotNull(jSTerm0);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[t]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult((-1594.7F), 0.0F);
      JSEvaluate.addsub((-1594.7F), 0.0F, (-3018));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.add((Object) "umd.cs.shop.JSSubstitution");
      jSTerm0.add((Object) "umd.cs.shop.JSSubstitution");
      JSEvaluate.div(0.0F, (-1594.7F));
      JSEvaluate.numericValue(jSTerm0);
      assertEquals("[-0.0, umd.cs.shop.JSSubstitution, umd.cs.shop.JSSubstitution]", jSTerm0.toString());
      
      JSTerm jSTerm1 = JSEvaluate.mult(0.0F, 606.47046F);
      JSEvaluate.maxElement(jSTerm1);
      JSEvaluate.ceil(1.0F);
      JSTerm jSTerm2 = JSEvaluate.div(1.0F, (-3018));
      assertEquals("[-3.3134528E-4]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      JSEvaluate.greaterequal(1869.9717F, 1.0F);
      JSTerm jSTerm1 = JSEvaluate.div(1869.9717F, 1869.9717F);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = JSEvaluate.maxOf(383.41F, (-789.5F));
      JSTerm jSTerm4 = JSEvaluate.applyOperator("*", jSTerm3, jSTerm2);
      jSTerm1.add((Object) jSTerm4);
      JSTerm jSTerm5 = JSEvaluate.applyOperator("Cy !4Zu=", jSTerm0, jSTerm1);
      assertEquals("[1.0, [383.41]]", jSTerm1.toString());
      assertFalse(jSTerm5.equals((Object)jSTerm4));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(0.0F);
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      assertFalse(jSTerm1.isConstant());
      assertEquals("[0.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(595.4599F, 595.4599F);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("list", jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = JSEvaluate.applyOperator("max", jSTerm0, jSTerm0);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      
      JSTerm jSTerm3 = JSEvaluate.floor(1.0F);
      assertEquals("[1.0]", jSTerm3.toString());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal((-1.0F), (-1.0F));
      JSEvaluate.greaterequal(534.28F, 819.3666F);
      JSEvaluate.maxOf(173.76195F, (-1233.3942F));
      JSTerm jSTerm1 = JSEvaluate.notequal(277.1997F, (-1.0F));
      JSTerm jSTerm2 = JSEvaluate.div((-1233.3942F), 0.0F);
      JSEvaluate.maxOf((-707.5316F), 1.4E-45F);
      jSTerm0.add((Object) jSTerm2);
      JSTerm jSTerm3 = JSEvaluate.greater(3108.6506F, 1079.5382F);
      JSEvaluate.addsub(2373.2195F, 1.0F, (-1617781622));
      JSEvaluate.applyOperator("<=", jSTerm3, jSTerm0);
      assertEquals("[t, []]", jSTerm0.toString());
      
      JSEvaluate.not(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float float0 = (-717.0F);
      JSTerm jSTerm0 = JSEvaluate.equal(0.0F, (-717.0F));
      jSTerm0.listIterator();
      JSEvaluate.minOf((-717.0F), 2366.7703F);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(1.0F);
      JSTerm jSTerm1 = JSEvaluate.equal(1.0F, 1.0F);
      JSEvaluate.applyOperator("JSTerm", jSTerm0, jSTerm1);
      assertEquals("[t]", jSTerm1.toString());
      assertEquals("[1.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("3");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(595.4599F, 263.65F);
      JSTerm jSTerm1 = JSEvaluate.div(595.4599F, 263.65F);
      jSTerm0.makeVariable();
      JSEvaluate.applyOperator("not", jSTerm1, jSTerm0);
      JSEvaluate.applyOperator("not", jSTerm0, jSTerm1);
      assertEquals("[595.4599]", jSTerm0.toString());
      assertEquals("[2.2585242]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.minElement((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        JSEvaluate.maxElement(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(797.0F, 1123.28F);
      jSTerm0.add((Object) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      jSTerm0.isGround();
      jSTerm0.sort(comparator0);
      JSEvaluate.notequal(797.0F, (-3492.37F));
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      assertEquals("[0.7095292, null]", jSTerm0.toString());
      
      JSEvaluate.notequal(1769.939F, 1769.939F);
      JSEvaluate.mult(797.0F, 1.0F);
      JSTerm jSTerm2 = JSEvaluate.greater((-1.0F), 5347.7F);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = JSEvaluate.mult((-797.3F), (-797.3F));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      JSTerm jSTerm2 = JSEvaluate.applyOperatorUnary("floor", jSTerm1);
      assertEquals("[635687.0]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(1087.7186F, 1087.7186F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("<=", jSTerm0, jSTerm0);
      assertEquals(0, jSTerm1.size());
      assertEquals("[1087.7186]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(595.4599F, 595.4599F);
      assertEquals("[595.4599]", jSTerm0.toString());
      
      int int0 = JSEvaluate.OperantNum("not");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSEvaluate.floor(1.0F);
      JSEvaluate.ceil(1.0F);
      float float0 = (-1872.27F);
      JSEvaluate.greaterequal((-1872.27F), 985.63F);
      JSEvaluate.maxOf(2373.2195F, 1.0F);
      JSEvaluate.notequal(1.4E-45F, (-1872.27F));
      float float1 = (-2120.21F);
      JSEvaluate.div((-2120.21F), 1.4E-45F);
      JSEvaluate.maxOf(1.0F, (-3063.68F));
      JSEvaluate.addsub((-4352.5044F), (-3063.68F), 1);
      float float2 = (-3712.5193F);
      JSEvaluate.div((-1.0F), (-3712.5193F));
      JSEvaluate.floor((-2120.21F));
      String string0 = null;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater(0.0F, 0.0F);
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object1 = new Object();
      jSSubstitution0.print();
      jSTerm0.add(object1);
      jSSubstitution0.add(object1);
      // Undeclared exception!
      try { 
        jSSubstitution0.removeElementAt(1969);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1969 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }
}
