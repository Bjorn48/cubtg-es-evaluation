[MASTER] 19:06:07.929 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.minisat.core.Solver<D> : Type points to itself
[MASTER] 19:06:07.930 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 19:06:07.930 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 19:06:15.454 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielWL>> : Invalid generic instance
[MASTER] 19:06:40.420 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 19:06:48.963 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 19:07:23.580 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 19:07:30.692 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<S> : Type points to itself
[MASTER] 19:07:54.044 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 19:07:56.374 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 19:09:51.060 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 19:09:57.675 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:279) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:543) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:254) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:160) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1580) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 13 common frames omitted
[MASTER] 19:10:08.243 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 3), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 19:10:08.390 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_25_1550513408236/org/sat4j/minisat/core/Solver_25_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_25_1550513408236/org/sat4j/minisat/core/Solver_25_tmp__ESTest_scaffolding.java]]
[MASTER] 19:10:08.390 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 19:10:08.390 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 19:10:08.407 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>[] cannot be converted to org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>: 144
[MASTER] 19:10:08.407 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_25_1550513408236/org/sat4j/minisat/core/Solver_25_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 19:10:08.408 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 19:10:08.408 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_25_1550513408236/org/sat4j/minisat/core/Solver_25_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:10:08.408 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:10:08.419 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_25_1550513408236/org/sat4j/minisat/core/Solver_25_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Feb 18 18:10:08 GMT 2019
4:  */
5: 
6: package org.sat4j.minisat.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.lang.reflect.Array;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: import org.sat4j.minisat.constraints.CardinalityDataStructure;
16: import org.sat4j.minisat.core.SearchParams;
17: import org.sat4j.minisat.core.Solver;
18: import org.sat4j.minisat.learning.FixedLengthLearning;
19: import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
20: import org.sat4j.minisat.orders.RandomWalkDecorator;
21: import org.sat4j.minisat.restarts.MiniSATRestarts;
22: import org.sat4j.opt.MaxSatDecorator;
23: import org.sat4j.specs.IVecInt;
24: import org.sat4j.tools.ManyCore;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
27: public class Solver_25_tmp__ESTest extends Solver_25_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
32:       assertNotNull(fixedLengthLearning0);
33:       assertEquals(3, fixedLengthLearning0.getMaxLength());
34:       
35:       CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
36:       assertNotNull(cardinalityDataStructure0);
37:       
38:       LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
39:       assertNotNull(levelBasedVarOrderHeap0);
40:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
41:       
42:       double[] doubleArray0 = levelBasedVarOrderHeap0.getVariableHeuristics();
43:       assertNotNull(doubleArray0);
44:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
45:       assertEquals(1, doubleArray0.length);
46:       assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
47:       
48:       RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
49:       assertNotNull(randomWalkDecorator0);
50:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
51:       assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
52:       
53:       MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
54:       assertNotNull(miniSATRestarts0);
55:       assertTrue(miniSATRestarts0.shouldRestart());
56:       assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
57:       assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
58:       
59:       Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, miniSATRestarts0);
60:       assertNotNull(solver0);
61:       assertEquals(3, fixedLengthLearning0.getMaxLength());
62:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
63:       assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
64:       assertTrue(miniSATRestarts0.shouldRestart());
65:       assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
66:       assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
67:       assertFalse(solver0.isDBSimplificationAllowed());
68:       assertEquals(0, solver0.nConstraints());
69:       assertEquals(2147483, solver0.getTimeout());
70:       assertFalse(solver0.isSolverKeptHot());
71:       assertEquals(2, solver0.nVars());
72:       assertEquals(0, solver0.decisionLevel());
73:       assertEquals(0, solver0.getPropagationLevel());
74:       assertEquals(2, solver0.newVar());
75:       assertEquals(0, solver0.currentDecisionLevel());
76:       assertFalse(solver0.isVerbose());
77:       assertEquals(2, solver0.realNumberOfVariables());
78:       assertEquals("c ", solver0.getLogPrefix());
79:       
80:       SearchParams searchParams0 = solver0.getSearchParams();
81:       assertNotNull(searchParams0);
82:       assertEquals(3, fixedLengthLearning0.getMaxLength());
83:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
84:       assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
85:       assertTrue(miniSATRestarts0.shouldRestart());
86:       assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
87:       assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
88:       assertFalse(solver0.isDBSimplificationAllowed());
89:       assertEquals(4, solver0.nVars());
90:       assertEquals(0, solver0.nConstraints());
91:       assertEquals(2147483, solver0.getTimeout());
92:       assertFalse(solver0.isSolverKeptHot());
93:       assertEquals(0, solver0.decisionLevel());
94:       assertEquals(0, solver0.getPropagationLevel());
95:       assertEquals(0, solver0.currentDecisionLevel());
96:       assertFalse(solver0.isVerbose());
97:       assertEquals(4, solver0.newVar());
98:       assertEquals(4, solver0.realNumberOfVariables());
99:       assertEquals("c ", solver0.getLogPrefix());
100:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
101:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
102:       assertEquals(100, searchParams0.getInitConflictBound());
103:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
104:       
105:       Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
106:       assertNotNull(solver1);
107:       assertEquals(3, fixedLengthLearning0.getMaxLength());
108:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
109:       assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
110:       assertTrue(miniSATRestarts0.shouldRestart());
111:       assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
112:       assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
113:       assertEquals(8, solver0.realNumberOfVariables());
114:       assertFalse(solver0.isDBSimplificationAllowed());
115:       assertEquals(0, solver0.nConstraints());
116:       assertEquals(2147483, solver0.getTimeout());
117:       assertFalse(solver0.isSolverKeptHot());
118:       assertEquals(0, solver0.decisionLevel());
119:       assertEquals(0, solver0.getPropagationLevel());
120:       assertEquals(0, solver0.currentDecisionLevel());
121:       assertFalse(solver0.isVerbose());
122:       assertEquals("c ", solver0.getLogPrefix());
123:       assertEquals(8, solver0.nVars());
124:       assertEquals(8, solver0.newVar());
125:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
126:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
127:       assertEquals(100, searchParams0.getInitConflictBound());
128:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
129:       assertEquals(7, solver1.realNumberOfVariables());
130:       assertFalse(solver1.isDBSimplificationAllowed());
131:       assertEquals(7, solver1.newVar());
132:       assertEquals("c ", solver1.getLogPrefix());
133:       assertFalse(solver1.isSolverKeptHot());
134:       assertEquals(0, solver1.nConstraints());
135:       assertEquals(0, solver1.decisionLevel());
136:       assertEquals(2147483, solver1.getTimeout());
137:       assertEquals(0, solver1.currentDecisionLevel());
138:       assertEquals(7, solver1.nVars());
139:       assertFalse(solver1.isVerbose());
140:       assertEquals(0, solver1.getPropagationLevel());
141:       assertFalse(solver1.equals((Object)solver0));
142:       
143:       Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 3);
144:       solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0;
145:   }
146: }
RegularFileObject[/tmp/EvoSuite_25_1550513408236/org/sat4j/minisat/core/Solver_25_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Feb 18 18:10:08 GMT 2019
5:  */
6: 
7: package org.sat4j.minisat.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Solver_25_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.minisat.core.Solver"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Solver_25_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.minisat.core.ConflictTimerAdapter",
82:       "org.sat4j.tools.ManyCore",
83:       "org.sat4j.specs.UnitPropagationListener",
84:       "org.sat4j.minisat.core.SizeComparator",
85:       "org.sat4j.tools.FullClauseSelectorSolver",
86:       "org.sat4j.reader.LecteurDimacs",
87:       "org.sat4j.tools.SolverDecorator",
88:       "org.sat4j.specs.Propagatable",
89:       "org.sat4j.minisat.core.Counter",
90:       "org.sat4j.minisat.learning.FixedLengthLearning",
91:       "org.sat4j.ILauncherMode",
92:       "org.sat4j.minisat.core.Undoable",
93:       "org.sat4j.minisat.core.Pair",
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.ExitCode",
96:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
97:       "org.sat4j.specs.IVec",
98:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
99:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
100:       "org.sat4j.specs.Lbool",
101:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
102:       "org.sat4j.AbstractLauncher$2",
103:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
104:       "org.sat4j.AbstractLauncher$1",
105:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
106:       "org.sat4j.specs.IOptimizationProblem",
107:       "org.sat4j.specs.SearchListener",
108:       "org.sat4j.minisat.core.SimplificationType",
109:       "org.sat4j.minisat.learning.MiniSATLearning",
110:       "org.sat4j.minisat.core.SearchParams",
111:       "org.sat4j.tools.AbstractMinimalModel",
112:       "org.sat4j.minisat.core.Heap",
113:       "org.sat4j.specs.ILogAble$1",
114:       "org.sat4j.specs.TimeoutException",
115:       "org.sat4j.specs.Constr",
116:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
117:       "org.sat4j.minisat.core.ConflictTimerContainer",
118:       "org.sat4j.specs.ISolverService",
119:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
120:       "org.sat4j.minisat.core.LearningStrategy",
121:       "org.sat4j.minisat.constraints.cnf.WLClause",
122:       "org.sat4j.specs.IGroupSolver",
123:       "org.sat4j.opt.MaxSatDecorator",
124:       "org.sat4j.DecisionMode",
125:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
126:       "org.sat4j.specs.IteratorInt",
127:       "org.sat4j.specs.ISolver",
128:       "org.sat4j.minisat.orders.RandomWalkDecorator",
129:       "org.sat4j.specs.UnitClauseProvider$1",
130:       "org.sat4j.minisat.core.CircularBuffer",
131:       "org.sat4j.minisat.learning.LimitedLearning",
132:       "org.sat4j.minisat.restarts.LubyRestarts",
133:       "org.sat4j.minisat.core.VoidTracing",
134:       "org.sat4j.minisat.core.ActivityListener",
135:       "org.sat4j.minisat.restarts.Glucose21Restarts",
136:       "org.sat4j.minisat.core.GlucoseLCDS",
137:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
138:       "org.sat4j.minisat.core.ILits",
139:       "org.sat4j.BasicLauncher",
140:       "org.sat4j.minisat.constraints.card.AtLeast",
141:       "org.sat4j.specs.ILogAble",
142:       "org.sat4j.specs.ContradictionException",
143:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
144:       "org.sat4j.reader.GroupedCNFReader",
145:       "org.sat4j.minisat.constraints.card.MinWatchCard",
146:       "org.sat4j.core.LiteralsUtils",
147:       "org.sat4j.minisat.learning.PercentLengthLearning",
148:       "org.sat4j.specs.IConstr",
149:       "org.sat4j.specs.IVecInt",
150:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
151:       "org.sat4j.tools.SolutionFoundListener",
152:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
153:       "org.sat4j.minisat.restarts.EMARestarts",
154:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
155:       "org.sat4j.OptimizationMode",
156:       "org.sat4j.minisat.core.Learner",
157:       "org.sat4j.tools.DimacsStringSolver",
158:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
159:       "org.sat4j.minisat.core.ActivityComparator",
160:       "org.sat4j.specs.MandatoryLiteralListener",
161:       "org.sat4j.specs.IProblem",
162:       "org.sat4j.minisat.restarts.MiniSATRestarts",
163:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
164:       "org.sat4j.core.VecInt",
165:       "org.sat4j.minisat.core.Solver",
166:       "org.sat4j.tools.xplain.HighLevelXplain",
167:       "org.sat4j.minisat.constraints.cnf.Lits",
168:       "org.sat4j.minisat.core.Solver$2",
169:       "org.sat4j.minisat.core.Solver$1",
170:       "org.sat4j.specs.UnitClauseProvider",
171:       "org.sat4j.minisat.constraints.cnf.LearntBinaryClause",
172:       "org.sat4j.minisat.learning.AbstractLearning",
173:       "org.sat4j.AbstractLauncher",
174:       "org.sat4j.minisat.core.Solver$4",
175:       "org.sat4j.minisat.core.Solver$3",
176:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
177:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
178:       "org.sat4j.core.VecInt$1",
179:       "org.sat4j.core.ASolverFactory",
180:       "org.sat4j.core.Vec$1",
181:       "org.sat4j.reader.DimacsReader",
182:       "org.sat4j.minisat.core.DataStructureFactory",
183:       "org.sat4j.core.Vec",
184:       "org.sat4j.minisat.core.Glucose2LCDS",
185:       "org.sat4j.minisat.core.Solver$6",
186:       "org.sat4j.minisat.core.SolverStats",
187:       "org.sat4j.minisat.core.Solver$8",
188:       "org.sat4j.minisat.core.Solver$7",
189:       "org.sat4j.minisat.core.Solver$10",
190:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
191:       "org.sat4j.minisat.core.ConstrActivityListener",
192:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
193:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
194:       "org.sat4j.minisat.orders.SubsetVarOrder",
195:       "org.sat4j.core.ReadOnlyVec",
196:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
197:       "org.sat4j.minisat.restarts.ArminRestarts",
198:       "org.sat4j.tools.GroupClauseSelectorSolver",
199:       "org.sat4j.specs.SearchListenerAdapter",
200:       "org.sat4j.tools.xplain.Xplain",
201:       "org.sat4j.reader.ParseFormatException",
202:       "org.sat4j.tools.AbstractClauseSelectorSolver",
203:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
204:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
205:       "org.sat4j.tools.OutcomeListener",
206:       "org.sat4j.minisat.core.ActivityLCDS",
207:       "org.sat4j.tools.AbstractOutputSolver",
208:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
209:       "org.sat4j.minisat.learning.ActiveLearning",
210:       "org.sat4j.MUSLauncher",
211:       "org.sat4j.minisat.orders.VarOrderHeap",
212:       "org.sat4j.minisat.constraints.xor.Xor",
213:       "org.sat4j.minisat.orders.NaturalStaticOrder",
214:       "org.sat4j.minisat.core.ISimplifier",
215:       "org.sat4j.reader.InstanceReader",
216:       "org.sat4j.minisat.core.ConflictTimer",
217:       "org.sat4j.minisat.core.VarActivityListener",
218:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
219:       "org.sat4j.specs.VarMapper",
220:       "org.sat4j.specs.RandomAccessModel",
221:       "org.sat4j.minisat.SolverFactory",
222:       "org.sat4j.minisat.core.LBDConflictTimer",
223:       "org.sat4j.tools.DimacsOutputSolver",
224:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
225:       "org.sat4j.minisat.orders.TabuListDecorator",
226:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
227:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
228:       "org.sat4j.minisat.orders.PureOrder",
229:       "org.sat4j.minisat.core.SizeLCDS",
230:       "org.sat4j.minisat.core.RestartStrategy",
231:       "org.sat4j.minisat.core.AgeLCDS",
232:       "org.sat4j.opt.MinOneDecorator",
233:       "org.sat4j.tools.xplain.Explainer",
234:       "org.sat4j.reader.Reader",
235:       "org.sat4j.core.ReadOnlyVecInt",
236:       "org.sat4j.minisat.core.IOrder",
237:       "org.sat4j.minisat.orders.VariableComparator",
238:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
239:       "org.sat4j.minisat.core.ICDCL",
240:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
241:       "org.sat4j.minisat.restarts.NoRestarts",
242:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
243:       "org.sat4j.core.EmptyVecInt$1",
244:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
245:     );
246:   } 
247: 
248:   private static void resetClasses() {
249:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Solver_25_tmp__ESTest_scaffolding.class.getClassLoader()); 
250: 
251:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
252:       "org.sat4j.minisat.core.Solver$1",
253:       "org.sat4j.minisat.core.Solver",
254:       "org.sat4j.minisat.core.Solver$2",
255:       "org.sat4j.minisat.core.Solver$3",
256:       "org.sat4j.minisat.core.Solver$4",
257:       "org.sat4j.minisat.core.Solver$5",
258:       "org.sat4j.minisat.core.Solver$9",
259:       "org.sat4j.minisat.core.Solver$6",
260:       "org.sat4j.minisat.core.Solver$GlucoseLCDS",
261:       "org.sat4j.minisat.core.Solver$Glucose2LCDS",
262:       "org.sat4j.minisat.core.ConflictTimerAdapter",
263:       "org.sat4j.minisat.core.Solver$7",
264:       "org.sat4j.minisat.core.Solver$8",
265:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
266:       "org.sat4j.minisat.core.Solver$10",
267:       "org.sat4j.minisat.core.Solver$11",
268:       "org.sat4j.specs.ILogAble$1",
269:       "org.sat4j.specs.ILogAble",
270:       "org.sat4j.specs.UnitClauseProvider$1",
271:       "org.sat4j.specs.UnitClauseProvider",
272:       "org.sat4j.core.LiteralsUtils",
273:       "org.sat4j.specs.Lbool",
274:       "org.sat4j.core.EmptyVecInt",
275:       "org.sat4j.core.VecInt",
276:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
277:       "org.sat4j.minisat.restarts.Glucose21Restarts",
278:       "org.sat4j.minisat.core.CircularBuffer",
279:       "org.sat4j.minisat.learning.LimitedLearning",
280:       "org.sat4j.minisat.learning.ActiveLearning",
281:       "org.sat4j.minisat.learning.AbstractLearning",
282:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
283:       "org.sat4j.minisat.learning.MiniSATLearning",
284:       "org.sat4j.core.Vec",
285:       "org.sat4j.minisat.constraints.cnf.Lits",
286:       "org.sat4j.minisat.core.ActivityComparator",
287:       "org.sat4j.specs.SearchListenerAdapter",
288:       "org.sat4j.minisat.core.VoidTracing",
289:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
290:       "org.sat4j.minisat.core.ActivityLCDS",
291:       "org.sat4j.minisat.core.LBDConflictTimer",
292:       "org.sat4j.minisat.core.GlucoseLCDS",
293:       "org.sat4j.minisat.core.Glucose2LCDS",
294:       "org.sat4j.minisat.core.AgeLCDS",
295:       "org.sat4j.minisat.core.SizeComparator",
296:       "org.sat4j.minisat.core.SizeLCDS",
297:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
298:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
299:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
300:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
301:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
302:       "org.sat4j.AbstractLauncher",
303:       "org.sat4j.MUSLauncher",
304:       "org.sat4j.AbstractLauncher$1",
305:       "org.sat4j.DecisionMode",
306:       "org.sat4j.ExitCode",
307:       "org.sat4j.OptimizationMode",
308:       "org.sat4j.ILauncherMode",
309:       "org.sat4j.minisat.learning.PercentLengthLearning",
310:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
311:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
312:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
313:       "org.sat4j.minisat.restarts.LubyRestarts",
314:       "org.sat4j.minisat.learning.FixedLengthLearning",
315:       "org.sat4j.minisat.orders.TabuListDecorator",
316:       "org.sat4j.minisat.restarts.MiniSATRestarts",
317:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
318:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
319:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
320:       "org.sat4j.minisat.orders.NaturalStaticOrder",
321:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
322:       "org.sat4j.minisat.orders.PureOrder",
323:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
324:       "org.sat4j.minisat.orders.SubsetVarOrder",
325:       "org.sat4j.minisat.orders.RandomWalkDecorator",
326:       "org.sat4j.minisat.restarts.EMARestarts",
327:       "org.sat4j.minisat.restarts.ArminRestarts",
328:       "org.sat4j.minisat.restarts.NoRestarts",
329:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
330:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
331:       "org.sat4j.tools.AbstractMinimalModel",
332:       "org.sat4j.minisat.constraints.cnf.WLClause",
333:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
334:       "org.sat4j.core.ASolverFactory",
335:       "org.sat4j.tools.ManyCore",
336:       "org.sat4j.minisat.constraints.card.AtLeast",
337:       "org.sat4j.core.EmptyVecInt$1",
338:       "org.sat4j.minisat.core.Heap",
339:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
340:       "org.sat4j.core.VecInt$1",
341:       "org.sat4j.minisat.core.ConflictTimerContainer",
342:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
343:       "org.sat4j.minisat.constraints.card.MinWatchCard",
344:       "org.sat4j.tools.StatisticsSolver",
345:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
346:       "org.sat4j.core.ReadOnlyVec",
347:       "org.sat4j.core.Vec$1",
348:       "org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy",
349:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
350:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
351:       "org.sat4j.tools.DimacsStringSolver",
352:       "org.sat4j.specs.ContradictionException",
353:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
354:       "org.sat4j.minisat.constraints.cnf.LearntBinaryClause",
355:       "org.sat4j.minisat.constraints.cnf.HTClause",
356:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
357:       "org.sat4j.minisat.core.Counter",
358:       "org.sat4j.specs.FakeConstr",
359:       "org.sat4j.tools.MultiTracing",
360:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
361:       "org.sat4j.minisat.constraints.cnf.UnitClause",
362:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
363:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
364:       "org.sat4j.minisat.orders.VarOrderHeap",
365:       "org.sat4j.minisat.core.SearchParams",
366:       "org.sat4j.minisat.core.SolverStats",
367:       "org.sat4j.minisat.core.Pair",
368:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
369:       "org.sat4j.minisat.constraints.xor.Xor",
370:       "org.sat4j.tools.AbstractOutputSolver",
371:       "org.sat4j.specs.TimeoutException",
372:       "org.sat4j.tools.SolverDecorator",
373:       "org.sat4j.opt.MinOneDecorator"
374:     );
375:   }
376: }

[MASTER] 19:10:08.422 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

double[] doubleArray0 = levelBasedVarOrderHeap0.getVariableHeuristics();
assertNotNull(doubleArray0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1, doubleArray0.length);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(4, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
assertNotNull(solver1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(8, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.nVars());
assertEquals(8, solver0.newVar());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(7, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(7, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(7, solver1.nVars());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.equals((Object)solver0));

Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 3);
solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0;

[MASTER] 19:10:58.187 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: org.sat4j.minisat.core.Solver with seed 1550513124804. Configuration id : null
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectTestGenerationResult(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:164) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1286) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1427) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1577) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 9 common frames omitted
