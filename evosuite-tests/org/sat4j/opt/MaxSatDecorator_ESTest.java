/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:29:32 GMT 2019
 */

package org.sat4j.opt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MaxSatDecorator_ESTest extends MaxSatDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      gateTranslator0.isSatisfiable();
      int[] intArray0 = gateTranslator0.primeImplicant();
      VecInt vecInt0 = new VecInt(intArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, true);
      maxSatDecorator0.registerLiteral((-37));
      boolean boolean0 = maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(statisticsSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(groupClauseSelectorSolver0, true);
      maxSatDecorator0.discardCurrentSolution();
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, true);
      VecInt vecInt0 = new VecInt();
      maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
      maxSatDecorator0.calculateObjectiveValue();
      assertFalse(maxSatDecorator0.isSolutionOptimal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0, false);
      maxSatDecorator0.reset();
      assertFalse(maxSatDecorator0.isSolutionOptimal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      maxSatDecorator0.forceObjectiveValueTo(1014);
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[6];
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(statisticsSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      statisticsSolverArray0[0] = statisticsSolver0;
      statisticsSolverArray0[1] = statisticsSolver0;
      statisticsSolverArray0[2] = statisticsSolver0;
      statisticsSolverArray0[3] = statisticsSolver0;
      statisticsSolverArray0[4] = statisticsSolver0;
      statisticsSolverArray0[5] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(statisticsSolverArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      maxSatDecorator0.discard();
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, true);
      VecInt vecInt0 = new VecInt();
      maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
      Number number0 = maxSatDecorator0.calculateObjective();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(subModelIterator0, false);
      maxSatDecorator0.addClause(iVecInt0);
      assertEquals(0, iVecInt0.last());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(gateTranslator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0, true);
      Float float0 = new Float((-1403.6));
      try { 
        maxSatDecorator0.forceObjectiveValueTo(float0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1322.4892349502936), (-1322.4892349502936), (-1322.4892349502936), 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      NegationDecorator<Solver<CardinalityDataStructure>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructure>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0);
      Number number0 = maxSatDecorator0.getObjectiveValue();
      // Undeclared exception!
      try { 
        maxSatDecorator0.forceObjectiveValueTo(number0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(optToSatAdapter0);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discardCurrentSolution();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discardCurrentSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      try { 
        maxSatDecorator0.discard();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.calculateObjectiveValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.MaxSatDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0);
      try { 
        maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, true);
      VecInt vecInt0 = new VecInt(2147483);
      vecInt0.unsafePush(2147483);
      // Undeclared exception!
      maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, false);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1322.4892349502936), (-1322.4892349502936), (-1322.4892349502936), 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      NegationDecorator<Solver<CardinalityDataStructure>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructure>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0);
      VecInt vecInt0 = new VecInt();
      maxSatDecorator0.addClause(vecInt0);
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1322.4892349502936), (-1322.4892349502936), (-1322.4892349502936), 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      NegationDecorator<Solver<CardinalityDataStructure>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructure>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      VecInt vecInt0 = new VecInt();
      maxSatDecorator0.addClause(vecInt0);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // removed unit clause which caused propagations
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, true);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(2928);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0, false);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1322.4892349502936), (-1322.4892349502936), (-1322.4892349502936), (-26));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      NegationDecorator<Solver<CardinalityDataStructure>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructure>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0);
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(205);
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, true);
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-1));
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause(vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, true);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo((-3594));
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3594
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      try { 
        maxSatDecorator0.discardCurrentSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      boolean boolean0 = gateTranslator0.isSatisfiable();
      int[] intArray0 = iSolver0.primeImplicant();
      VecInt vecInt0 = new VecInt(intArray0);
      gateTranslator0.or((-2226), vecInt0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(gateTranslator0, 1418L, (SolutionFoundListener) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(modelIteratorToSATAdapter0, true);
      boolean boolean1 = maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1322.4892349502936), (-1322.4892349502936), (-1322.4892349502936), (-26));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      NegationDecorator<Solver<CardinalityDataStructure>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructure>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0);
      VecInt vecInt0 = new VecInt();
      boolean boolean0 = maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      VecInt vecInt0 = new VecInt();
      MaxSatDecorator maxSatDecorator1 = new MaxSatDecorator(maxSatDecorator0, true);
      maxSatDecorator1.addClause(vecInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(3, iSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[6];
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      statisticsSolverArray0[0] = statisticsSolver0;
      statisticsSolverArray0[1] = statisticsSolver0;
      statisticsSolverArray0[2] = statisticsSolver0;
      statisticsSolverArray0[3] = statisticsSolver0;
      statisticsSolverArray0[4] = statisticsSolver0;
      statisticsSolverArray0[5] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(statisticsSolverArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      maxSatDecorator0.setExpectedNumberOfClauses((-1369));
      assertEquals((-1369), maxSatDecorator0.getNbexpectedclauses());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1322.4892349502936), (-1322.4892349502936), (-1322.4892349502936), 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      NegationDecorator<Solver<CardinalityDataStructure>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructure>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discard();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.setTimeoutForFindingBetterSolution(679);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No implemented yet
         //
         verifyException("org.sat4j.opt.MaxSatDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0);
      // Undeclared exception!
      try { 
        maxSatDecorator0.calculateObjective();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.MaxSatDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      boolean boolean0 = maxSatDecorator0.hasNoObjectiveFunction();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<StatisticsSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<StatisticsSolver>(statisticsSolver0);
      VecInt vecInt0 = new VecInt();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(clausalCardinalitiesDecorator0, vecInt0, checkMUSSolutionListener0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4CardinalityModel0, true);
      // Undeclared exception!
      try { 
        maxSatDecorator0.forceObjectiveValueTo((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.MaxSatDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      boolean boolean0 = maxSatDecorator0.nonOptimalMeansSatisfiable();
      assertFalse(boolean0);
  }
}
