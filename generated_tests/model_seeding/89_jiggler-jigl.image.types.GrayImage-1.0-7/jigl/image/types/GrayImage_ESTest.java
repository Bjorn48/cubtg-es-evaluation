/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 22:56:52 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import javax.swing.JLayeredPane;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GrayImage_ESTest extends GrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      GrayImage grayImage1 = interpolatedGrayImage0.add((int) (short) (-32768));
      int int0 = new Integer((short) (-32768));
      grayImage0.multiply((Image<Integer>) grayImage1);
      // Undeclared exception!
      try { 
        grayImage0.subtract((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.add((int) (short) (-32768));
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.Y();
      rOI1.Y();
      rOI1.X();
      // Undeclared exception!
      try { 
        grayImage0.add(1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1629);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      Integer integer1 = grayImage0.min();
      assertNull(integer1);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 3079, 509);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(3079, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer2 = new Integer(3079);
      assertEquals(3079, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      
      GrayImage grayImage2 = grayImage0.clear();
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.uy();
      assertEquals(4, int1);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.lx();
      assertEquals(4, int3);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.uy();
      assertEquals(4, int4);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertTrue(int6 == int0);
      
      int int7 = rOI0.lx();
      assertEquals(4, int7);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      
      int int8 = rOI0.ux();
      assertEquals(0, int8);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int8 == int1);
      assertTrue(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int7);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertFalse(int8 == int3);
      assertTrue(int8 == int5);
      
      int int9 = rOI0.ux();
      assertEquals(0, int9);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int9 == int8);
      assertTrue(int9 == int0);
      assertTrue(int9 == int2);
      assertFalse(int9 == int1);
      assertTrue(int9 == int6);
      assertFalse(int9 == int3);
      assertFalse(int9 == int4);
      assertTrue(int9 == int5);
      assertFalse(int9 == int7);
      
      int int10 = rOI0.ux();
      assertEquals(0, int10);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int10 == int7);
      assertTrue(int10 == int6);
      assertFalse(int10 == int4);
      assertTrue(int10 == int2);
      assertFalse(int10 == int3);
      assertTrue(int10 == int5);
      assertTrue(int10 == int9);
      assertTrue(int10 == int0);
      assertFalse(int10 == int1);
      assertTrue(int10 == int8);
      
      int int11 = rOI0.ly();
      assertEquals(1620, int11);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int11 == int10);
      assertFalse(int11 == int3);
      assertFalse(int11 == int5);
      assertFalse(int11 == int4);
      assertFalse(int11 == int9);
      assertFalse(int11 == int7);
      assertFalse(int11 == int8);
      assertFalse(int11 == int0);
      assertFalse(int11 == int2);
      assertFalse(int11 == int1);
      assertFalse(int11 == int6);
      
      // Undeclared exception!
      try { 
        grayImage0.set(8, 0, (Integer) null, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 8);
      int int0 = 985;
      int int1 = (-375);
      int int2 = (-132);
      int int3 = 4;
      int int4 = 0;
      int int5 = 1620;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      short[] shortArray0 = new short[1];
      grayImage0.copy();
      GrayImage grayImage1 = new GrayImage(grayImage0);
      short short0 = (short) (-32768);
      grayImage0.max();
      grayImage0.copy();
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-32773), 0, (-1368), 2340, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      interpolatedGrayImage0.addSum();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)516;
      shortArray0[1] = (short)1308;
      shortArray0[2] = (short)3382;
      shortArray0[3] = (short)0;
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      int int0 = 4;
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1629);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      grayImage1.min();
      grayImage1.min();
      grayImage1.addbuffer(0, 3079, 509);
      GrayImage grayImage2 = grayImage1.subtract((Image<Integer>) grayImage0);
      GrayImage grayImage3 = grayImage0.multiply(127);
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.ux();
      rOI0.ly();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.X();
      grayImage0.multiply((Image<Integer>) grayImage3);
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) grayImage2, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 2094;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 8);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.setROI(8, 0, 3809, 1);
      rOI0.setROI(1, 8, 8, (-2418));
      rOI0.Y();
      rOI0.X();
      int int0 = new Integer(0);
      rOI0.setROI((-2754), 1, 3809, 1498);
      int int1 = new Integer(8);
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((-2754), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2754
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      short[] shortArray0 = new short[1];
      short short0 = (short) (-32768);
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-32768), 0, (-1368), 2340, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 3230;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 3230);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.setROI(1, 3230, 8, (-2404));
      rOI0.setROI(1, Integer.MAX_VALUE, Integer.MAX_VALUE, (-2754));
      rOI0.setROI(3230, 3230, 1, (-2754));
      rOI0.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(8, 8, 8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2746
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      short[] shortArray0 = new short[1];
      grayImage0.addbuffer(0, 0, 0, (-1368), 0);
      short short0 = (short) (-32768);
      grayImage0.max();
      grayImage0.copy();
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-32768), 0, (-1368), 2340, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.add((int) (short) (-32768));
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(1418, 1262, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.Y();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage1.multiply((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      grayImage0.sqrSum();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.add((int) (short) (-32768));
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(1418, 1262, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-449);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)8;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-1873);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(2421, 2421, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      int int0 = 1620;
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.setROI(0, (short) (-32768), 3079, (short) (-32768));
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 287);
      double double0 = 0.587;
      int int1 = 269;
      // Undeclared exception!
      interpolatedGrayImage0.median(287);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = (-4);
      int int1 = 2325;
      GrayImage grayImage0 = new GrayImage(2325, 2325);
      // Undeclared exception!
      grayImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.setROI(0, (short) (-32768), (short) (-32768), (short) (-32768));
      rOI0.ux();
      grayImage0.min();
      grayImage0.min();
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.Y();
      GrayImage grayImage1 = interpolatedGrayImage0.add((int) (short) (-32768));
      Integer integer0 = new Integer((short) (-32768));
      grayImage0.multiply((Image<Integer>) grayImage1);
      // Undeclared exception!
      try { 
        grayImage0.subtract((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-3063), (-3063));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage((short)8, 8);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      grayImage0.min();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.min();
      int int0 = new Short((short)8);
      ROI rOI1 = new ROI();
      rOI0.X();
      rOI1.Y();
      rOI1.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage0.min(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      GrayImage grayImage1 = interpolatedGrayImage0.add((int) (short) (-32768));
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      GrayImage grayImage2 = grayImage0.multiply((Image<Integer>) grayImage1);
      // Undeclared exception!
      try { 
        grayImage2.divide(8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      grayImage0.sqrSum();
      // Undeclared exception!
      try { 
        grayImage0.get(8, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      grayImage0.toString();
      GrayImage grayImage1 = grayImage0.addbuffer(2, 1488, 1488, 0, 3076);
      int int0 = 127;
      // Undeclared exception!
      try { 
        grayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      // Undeclared exception!
      try { 
        grayImage0.divide(4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      int int0 = 4;
      int int1 = 0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BHy,)c";
      stringArray0[1] = "UNSHARP";
      stringArray0[2] = "Gg";
      stringArray0[3] = "ThM2]vty|";
      stringArray0[4] = "Rk4>T1wku";
      stringArray0[5] = "UNSHARP";
      stringArray0[6] = "O}(pxXf]fB)";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 3315);
      ROI rOI0 = new ROI();
      rOI0.X();
      grayImage0.min();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.X();
      rOI0.setROI(Integer.MAX_VALUE, 3119, (-32768), 4);
      rOI0.setROI(406, 1, 1546, 0);
      // Undeclared exception!
      try { 
        grayImage0.clip(0, 3315, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 406
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      GrayImage grayImage2 = new GrayImage(255, 3315);
      grayImage0.divide(491);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      GrayImage grayImage3 = interpolatedGrayImage0.add((int) (short) (-32768));
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        grayImage3.add((int) (short) (-32768), 1, (-2133));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(8, (short)8);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.get(480, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 480
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 3230);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.setROI(1, 3230, 8, (-2404));
      rOI0.X();
      ROI rOI1 = new ROI((-4583), 2601, 5, 2);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      // Undeclared exception!
      interpolatedGrayImage0.clear();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 287);
      // Undeclared exception!
      interpolatedGrayImage0.median(287);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(5, rOI0.X());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      
      GrayImage grayImage1 = grayImage0.subtract(238);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      
      grayImage0.median(2);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(16, 1677);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      grayImage0.subtract(238);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      integer0.intValue();
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      integer1.intValue();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.ly();
      // Undeclared exception!
      try { 
        grayImage0.set(680, 3, integer1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      GrayImage grayImage2 = new GrayImage(255, 3315);
      grayImage0.divide(491);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.get(240, 2402);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2402
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      int int1 = 32767;
      int[] intArray0 = new int[14];
      intArray0[0] = 32767;
      GrayImage grayImage0 = new GrayImage(0, 32767, intArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ROI rOI0 = null;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-1714), 255);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(394, 0, intArray0);
      short[] shortArray0 = new short[0];
      GrayImage grayImage1 = new GrayImage(grayImage0);
      grayImage1.min();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      grayImage1.addbuffer(0, 0, 0);
      grayImage1.subtract((Image<Integer>) grayImage0);
      GrayImage grayImage2 = grayImage1.multiply(3042);
      Integer integer1 = new Integer(0);
      grayImage2.clear();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 8;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 3230);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.setROI(3230, 0, 3810, 1);
      rOI0.setROI(1, 3230, 8, (-2404));
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      int int1 = (-2754);
      rOI0.setROI((-2754), 1, 3810, 1498);
      rOI0.Y();
      rOI0.setROI(0, Integer.MAX_VALUE, Integer.MAX_VALUE, (-2754));
      rOI0.setROI(3230, 3230, (-2438), (-2754));
      rOI0.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(8, 8, 8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2746
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.uy());
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 1488, 1488, 0, 3076);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(9154176, grayImage1.addSum());
      assertEquals(1488, grayImage1.Y());
      assertEquals(28158245376L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(9154176, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      int int0 = 127;
      ImageProducer imageProducer0 = grayImage1.getJavaImage();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(imageProducer0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(9154176, grayImage1.addSum());
      assertEquals(1488, grayImage1.Y());
      assertEquals(28158245376L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(9154176, grayImage1.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      int int1 = 8;
      grayImage1.divide(int1, intArray0[0], int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 2325;
      GrayImage grayImage0 = new GrayImage(2325, 2325);
      assertNotNull(grayImage0);
      assertEquals(2325, grayImage0.X());
      assertEquals(2325, grayImage0.Y());
      
      String[] stringArray0 = new String[5];
      String string0 = "E'%(bxu;i%Ks{i!";
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(4, int2);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.lx();
      assertEquals(4, int4);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      int int5 = rOI0.uy();
      assertEquals(4, int5);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertTrue(int6 == int1);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertFalse(int7 == int2);
      assertTrue(int7 == int3);
      assertFalse(int7 == int5);
      
      int int8 = rOI0.lx();
      assertEquals(4, int8);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertTrue(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int7);
      assertTrue(int8 == int4);
      assertFalse(int8 == int6);
      assertTrue(int8 == int2);
      
      int int9 = rOI0.ux();
      assertEquals(0, int9);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertTrue(int9 == int6);
      assertFalse(int9 == int2);
      assertFalse(int9 == int8);
      assertTrue(int9 == int7);
      assertTrue(int9 == int1);
      assertFalse(int9 == int4);
      assertFalse(int9 == int0);
      assertTrue(int9 == int3);
      assertFalse(int9 == int5);
      
      int int10 = rOI0.ux();
      assertEquals(0, int10);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertTrue(int10 == int1);
      assertFalse(int10 == int5);
      assertTrue(int10 == int7);
      assertFalse(int10 == int2);
      assertFalse(int10 == int4);
      assertFalse(int10 == int0);
      assertTrue(int10 == int3);
      assertFalse(int10 == int8);
      assertTrue(int10 == int6);
      assertTrue(int10 == int9);
      
      int int11 = rOI0.ux();
      assertEquals(0, int11);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertTrue(int11 == int9);
      assertFalse(int11 == int8);
      assertTrue(int11 == int6);
      assertFalse(int11 == int2);
      assertTrue(int11 == int1);
      assertFalse(int11 == int0);
      assertFalse(int11 == int4);
      assertTrue(int11 == int7);
      assertFalse(int11 == int5);
      assertTrue(int11 == int10);
      assertTrue(int11 == int3);
      
      int int12 = rOI0.ly();
      assertEquals(1620, int12);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(int12 == int3);
      assertFalse(int12 == int10);
      assertFalse(int12 == int4);
      assertFalse(int12 == int11);
      assertFalse(int12 == int6);
      assertFalse(int12 == int5);
      assertFalse(int12 == int9);
      assertFalse(int12 == int7);
      assertFalse(int12 == int8);
      assertFalse(int12 == int1);
      assertFalse(int12 == int0);
      assertFalse(int12 == int2);
      
      // Undeclared exception!
      try { 
        grayImage0.add(2325, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = new GrayImage(255, 3315);
      assertNotNull(grayImage2);
      assertEquals(255, grayImage2.X());
      assertEquals(3315, grayImage2.Y());
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      GrayImage grayImage3 = grayImage0.divide(491);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage3, grayImage1);
      assertSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotNull(grayImage3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage3));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((int) (short) (-32768));
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage3));
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.X();
      assertEquals(1, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((Image<Integer>) grayImage3, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short[] shortArray0 = new short[37];
      shortArray0[0] = (short) (-32768);
      ROI rOI0 = new ROI((-4583), (-4583), (-4583), (-4583));
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-4583), rOI0.lx());
      assertEquals((-4583), rOI0.ly());
      assertEquals((-4583), rOI0.uy());
      assertEquals((-4583), rOI0.ux());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2601, 2601);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2601, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2601, interpolatedGrayImage0.Y());
      
      // Undeclared exception!
      interpolatedGrayImage0.clear();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)516;
      shortArray0[1] = (short)1308;
      shortArray0[2] = (short)3382;
      int[] intArray0 = new int[0];
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.X();
      assertEquals(1, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int4 = rOI1.X();
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      
      int int5 = rOI1.Y();
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      
      int int6 = rOI1.X();
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertTrue(int6 == int2);
      
      int int7 = rOI1.Y();
      assertEquals(1, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertFalse(int7 == int0);
      assertTrue(int7 == int1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int8 = rOI1.Y();
      assertEquals(1, int8);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertTrue(int8 == int4);
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertFalse(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int5);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int9 = rOI1.X();
      assertEquals(1, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertTrue(int9 == int1);
      assertTrue(int9 == int3);
      assertFalse(int9 == int0);
      assertTrue(int9 == int8);
      assertTrue(int9 == int2);
      assertTrue(int9 == int7);
      assertTrue(int9 == int5);
      assertTrue(int9 == int4);
      assertTrue(int9 == int6);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int10 = rOI1.Y();
      assertEquals(1, int10);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertTrue(int10 == int4);
      assertTrue(int10 == int6);
      assertTrue(int10 == int7);
      assertTrue(int10 == int8);
      assertTrue(int10 == int9);
      assertFalse(int10 == int0);
      assertTrue(int10 == int5);
      assertTrue(int10 == int2);
      assertTrue(int10 == int3);
      assertTrue(int10 == int1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int11 = rOI0.Y();
      assertEquals(1, int11);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int11 == int10);
      assertFalse(int11 == int0);
      assertTrue(int11 == int9);
      assertTrue(int11 == int2);
      assertTrue(int11 == int8);
      assertTrue(int11 == int3);
      assertTrue(int11 == int7);
      assertTrue(int11 == int1);
      assertTrue(int11 == int4);
      assertTrue(int11 == int5);
      assertTrue(int11 == int6);
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int12 = rOI0.X();
      assertEquals(1, int12);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int12 == int10);
      assertTrue(int12 == int6);
      assertTrue(int12 == int4);
      assertTrue(int12 == int7);
      assertTrue(int12 == int1);
      assertTrue(int12 == int5);
      assertTrue(int12 == int3);
      assertTrue(int12 == int11);
      assertTrue(int12 == int9);
      assertTrue(int12 == int2);
      assertFalse(int12 == int0);
      assertTrue(int12 == int8);
      assertFalse(rOI0.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      
      GrayImage grayImage1 = grayImage0.subtract(238);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals(300, int0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      GrayImage grayImage2 = grayImage0.multiply(599);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      
      int int1 = grayImage0.addSum();
      assertEquals(0, int1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((int) (short) (-32768));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.X();
      assertEquals(1, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) interpolatedGrayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      int int1 = (-1534);
      Integer integer0 = interpolatedGrayImage0.min();
      assertNull(integer0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.accum((-0.5), (-0.5), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.InterpolatedGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      
      rOI0.setROI(0, (short) (-32768), (short) (-32768), 0);
      assertEquals(32769, rOI0.X());
      assertEquals(32769, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-32768), rOI0.uy());
      assertEquals((-32768), rOI0.ux());
      
      String string0 = grayImage0.toString();
      assertEquals("0:0\n", string0);
      assertNotSame(grayImage0, grayImage1);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      
      rOI0.setROI(0, 4, 0, 50);
      assertEquals(47, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(50, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(47, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(50, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.uy();
      assertEquals(4, int1);
      assertEquals(47, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(50, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(47, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(50, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0L, long0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      Integer integer0 = Integer.valueOf((-1570));
      assertEquals((-1570), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = integer0.intValue();
      assertEquals((-1570), int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      int int2 = Integer.compare((-1570), 133);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      
      int int3 = Integer.divideUnsigned((-1570), (-1570));
      assertEquals(1, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        grayImage0.divide(0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0L, long0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      
      GrayImage grayImage1 = new GrayImage(717, 0, (int[]) null);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(717, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) grayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0L, long0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      int int0 = 682;
      int int1 = 566;
      int int2 = 2;
      // Undeclared exception!
      grayImage0.addbuffer(int0, int1, int1, int2, int2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      
      int int1 = rOI0.uy();
      assertEquals(4, int1);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(4, int3);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.uy();
      assertEquals(4, int4);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertTrue(int6 == int0);
      assertFalse(int6 == int4);
      assertTrue(int6 == int2);
      assertFalse(int6 == int3);
      
      int int7 = rOI0.lx();
      assertEquals(4, int7);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertTrue(int7 == int3);
      assertFalse(int7 == int2);
      assertTrue(int7 == int1);
      assertFalse(int7 == int0);
      assertTrue(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int5);
      
      int int8 = rOI0.ux();
      assertEquals(0, int8);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertFalse(int8 == int7);
      assertFalse(int8 == int4);
      assertTrue(int8 == int2);
      assertTrue(int8 == int0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int5);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      
      int int9 = rOI0.ux();
      assertEquals(0, int9);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertTrue(int9 == int2);
      assertFalse(int9 == int7);
      assertTrue(int9 == int8);
      assertFalse(int9 == int3);
      assertFalse(int9 == int1);
      assertTrue(int9 == int5);
      assertTrue(int9 == int6);
      assertTrue(int9 == int0);
      assertFalse(int9 == int4);
      
      int int10 = rOI0.ux();
      assertEquals(0, int10);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertTrue(int10 == int8);
      assertTrue(int10 == int9);
      assertTrue(int10 == int2);
      assertFalse(int10 == int7);
      assertTrue(int10 == int0);
      assertFalse(int10 == int1);
      assertTrue(int10 == int6);
      assertFalse(int10 == int3);
      assertTrue(int10 == int5);
      assertFalse(int10 == int4);
      
      int int11 = rOI0.ly();
      assertEquals(1620, int11);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertFalse(int11 == int10);
      assertFalse(int11 == int6);
      assertFalse(int11 == int5);
      assertFalse(int11 == int7);
      assertFalse(int11 == int1);
      assertFalse(int11 == int9);
      assertFalse(int11 == int3);
      assertFalse(int11 == int8);
      assertFalse(int11 == int2);
      assertFalse(int11 == int4);
      assertFalse(int11 == int0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(985, (-375), (-132), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -371
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 3230);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(3230, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI(1, 3230, 8, (-2404));
      assertEquals(8, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(5635, rOI0.Y());
      assertEquals(3230, rOI0.ly());
      assertEquals((-2404), rOI0.uy());
      assertEquals(8, rOI0.X());
      
      int int1 = rOI0.X();
      assertEquals(8, int1);
      assertEquals(8, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(5635, rOI0.Y());
      assertEquals(3230, rOI0.ly());
      assertEquals((-2404), rOI0.uy());
      assertEquals(8, rOI0.X());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI((-4583), 2601, 5, 2);
      assertNotNull(rOI1);
      assertEquals((-4583), rOI1.ux());
      assertEquals(4589, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals(2600, rOI1.Y());
      assertEquals(2601, rOI1.ly());
      assertEquals(2, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(3315);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short[][] shortArray0 = new short[3][7];
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.subtract((Image<Integer>) grayImage0);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      
      short[][] shortArray0 = new short[0][2];
      GrayImage grayImage2 = new GrayImage(shortArray0);
      assertNotNull(grayImage2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      GrayImage grayImage3 = new GrayImage(grayImage0);
      assertNotNull(grayImage3);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage3);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      short short0 = (short)8;
      GrayImage grayImage0 = new GrayImage((short)8, (short)8);
      assertNotNull(grayImage0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)32765;
      GrayImage grayImage1 = new GrayImage(255, 3315);
      assertNotNull(grayImage1);
      assertEquals(255, grayImage1.X());
      assertEquals(3315, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((int) (short)32765);
      assertNotSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.X();
      assertEquals(1, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(5, rOI0.X());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      
      GrayImage grayImage1 = grayImage0.subtract(238);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals(300, int0);
      
      int int1 = integer0.intValue();
      assertEquals(300, int1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      
      float float0 = ((Integer)0).floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        grayImage1.set(2, 4, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 8;
      GrayImage grayImage0 = new GrayImage((short)8, 8);
      assertNotNull(grayImage0);
      assertEquals(8, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(8, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = 9;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      
      GrayImage grayImage1 = grayImage0.subtract(238);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      
      GrayImage grayImage2 = grayImage1.addbuffer(0, 5, 0);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(5, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.X());
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      Integer integer0 = grayImage2.max();
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNull(integer0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(5, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      GrayImage grayImage3 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertNotNull(grayImage3);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI((-1), (-1), 0, 1620);
      assertNotNull(rOI0);
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(1622, rOI0.Y());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(2, rOI0.X());
      
      GrayImage grayImage1 = grayImage0.addbuffer(5, 0, 238);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(5, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.copy();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(5, grayImage1.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(5, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      // Undeclared exception!
      try { 
        grayImage1.divide(1472, (-4833), 1774, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4834
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      GrayImage grayImage1 = grayImage0.subtract(238);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals(300, int0);
      
      int int1 = integer0.intValue();
      assertEquals(300, int1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      
      float float0 = ((Integer)0).floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        grayImage1.set(2, 1893, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1893
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((int) (short) (-32768));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      int int5 = rOI0.X();
      assertEquals(1, int5);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(5, 5);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(5, interpolatedGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      int int0 = interpolatedGrayImage0.absSum();
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((int) (short) (-32768));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.X();
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.X();
      assertEquals(1, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int6 = rOI1.X();
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      
      rOI1.setROI(7, 1, (-32768), (short) (-32768));
      assertNotSame(rOI1, rOI0);
      assertEquals(32770, rOI1.Y());
      assertEquals((-32768), rOI1.uy());
      assertEquals(7, rOI1.lx());
      assertEquals((-32768), rOI1.ux());
      assertEquals(32776, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int7 = rOI1.Y();
      assertEquals(32770, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(32770, rOI1.Y());
      assertEquals((-32768), rOI1.uy());
      assertEquals(7, rOI1.lx());
      assertEquals((-32768), rOI1.ux());
      assertEquals(32776, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int8 = rOI1.Y();
      assertEquals(32770, int8);
      assertNotSame(rOI1, rOI0);
      assertEquals(32770, rOI1.Y());
      assertEquals((-32768), rOI1.uy());
      assertEquals(7, rOI1.lx());
      assertEquals((-32768), rOI1.ux());
      assertEquals(32776, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertTrue(int8 == int7);
      assertFalse(int8 == int6);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int9 = rOI1.Y();
      assertEquals(32770, int9);
      assertNotSame(rOI1, rOI0);
      assertEquals(32770, rOI1.Y());
      assertEquals((-32768), rOI1.uy());
      assertEquals(7, rOI1.lx());
      assertEquals((-32768), rOI1.ux());
      assertEquals(32776, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int0);
      assertFalse(int9 == int6);
      assertFalse(int9 == int4);
      assertTrue(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertTrue(int9 == int7);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        grayImage0.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      
      GrayImage grayImage1 = grayImage0.subtract(238);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      
      int int0 = ((Integer)0).intValue();
      assertEquals(0, int0);
      
      int int1 = ((Integer)0).intValue();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      float float0 = ((Integer)0).floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        grayImage1.set(2, 1893, (Integer) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1893
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1152);
      intArray0[1] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.X();
      assertEquals(1, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      
      rOI0.setROI(2032, 1, Integer.MAX_VALUE, 1);
      assertEquals(2147481616, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(2032, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      
      rOI0.setROI(Integer.MIN_VALUE, 2, Integer.MIN_VALUE, 4);
      assertEquals(2, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.lx());
      assertEquals(4, rOI0.ly());
      
      int int6 = rOI0.X();
      assertEquals(1, int6);
      assertEquals(2, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.lx());
      assertEquals(4, rOI0.ly());
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 4);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1, interpolatedGrayImage0.X());
      assertEquals(4, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(1, interpolatedGrayImage0.X());
      assertEquals(4, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(1, interpolatedGrayImage1.X());
      assertEquals(4, interpolatedGrayImage1.Y());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add(106, 1, (-1152), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483542
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(12, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1629);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer0 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer0);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer1 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer1);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.addbuffer(0, 3079, 509);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(3079, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      GrayImage grayImage3 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotNull(grayImage3);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(12, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      
      GrayImage grayImage4 = grayImage0.multiply(127);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage3);
      assertNotNull(grayImage4);
      assertEquals(12, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage4.absSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage3));
      
      Integer integer2 = new Integer(3079);
      assertEquals(3079, (int)integer2);
      assertNotNull(integer2);
      
      GrayImage grayImage5 = grayImage3.clear();
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage5);
      assertSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage3, grayImage4);
      assertSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertSame(grayImage3, grayImage5);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage5, grayImage4);
      assertNotSame(grayImage5, grayImage2);
      assertNotSame(grayImage5, grayImage0);
      assertSame(grayImage5, grayImage3);
      assertSame(grayImage5, grayImage1);
      assertNotNull(grayImage5);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(12, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage5.addSum());
      assertEquals(0L, grayImage5.sqrSum());
      assertEquals(0, grayImage5.Y());
      assertEquals(0, grayImage5.X());
      assertEquals(0, grayImage5.absSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage4));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage4));
      assertFalse(grayImage5.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      short[] shortArray0 = new short[1];
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.X();
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      
      int int5 = rOI0.X();
      assertEquals(1, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[1];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      Integer integer1 = grayImage0.min();
      assertNull(integer1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      int int0 = grayImage0.absSum();
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[][] intArray0 = new int[8][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 732;
      intArray1[1] = (-591);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-591);
      intArray2[1] = (-591);
      intArray2[2] = 5;
      intArray2[3] = (-1102);
      intArray2[4] = 732;
      intArray2[5] = 732;
      intArray2[6] = (-591);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-1102);
      intArray3[1] = 732;
      intArray3[2] = (-1265);
      intArray3[3] = 732;
      intArray3[4] = 5;
      intArray3[5] = (-1102);
      intArray3[6] = 5;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-3872);
      intArray4[1] = 732;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 5;
      intArray5[1] = (-1265);
      intArray5[2] = (-1265);
      intArray5[3] = (-1265);
      intArray5[4] = 16;
      intArray5[5] = (-1102);
      intArray5[6] = 732;
      intArray5[7] = (-1265);
      intArray5[8] = (-1265);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = (-32768);
      intArray6[1] = (-1265);
      intArray6[2] = 16;
      intArray6[3] = 732;
      intArray6[4] = (-3872);
      intArray6[5] = (-591);
      intArray6[6] = (-3872);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray5));
      
      intArray7[0] = 16;
      intArray7[1] = 5;
      intArray7[2] = 732;
      intArray7[3] = (-1102);
      intArray7[4] = 732;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray1));
      
      intArray8[0] = (-32768);
      intArray8[1] = 16;
      intArray8[2] = (-32768);
      intArray8[3] = (-1102);
      intArray8[4] = (-591);
      intArray8[5] = (-1265);
      intArray8[6] = (-1265);
      intArray8[7] = 732;
      intArray0[7] = intArray8;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0L, long0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(Integer.MIN_VALUE, 246, Integer.MIN_VALUE, (-1342));
      assertEquals(Integer.MIN_VALUE, rOI0.lx());
      assertEquals((-1342), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(246, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.ux());
      assertEquals(1589, rOI0.Y());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(Integer.MIN_VALUE, rOI0.lx());
      assertEquals((-1342), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(246, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.ux());
      assertEquals(1589, rOI0.Y());
      assertFalse(int1 == int0);
      
      GrayImage grayImage1 = new GrayImage(717, 0, (int[]) null);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(717, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) grayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1152);
      intArray0[1] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = new Integer((-1152));
      assertEquals((-1152), int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      
      int int5 = rOI0.X();
      assertEquals(1, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      
      rOI0.setROI(2032, 1, Integer.MAX_VALUE, (-1152));
      assertEquals((-1152), rOI0.uy());
      assertEquals(2032, rOI0.ux());
      assertEquals(2147481616, rOI0.X());
      assertEquals(1154, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.ly());
      
      rOI0.setROI(Integer.MIN_VALUE, 2, Integer.MIN_VALUE, 4);
      assertEquals(4, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.lx());
      
      int int6 = rOI0.X();
      assertEquals(1, int6);
      assertEquals(4, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(3, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.lx());
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertFalse(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 4);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4, interpolatedGrayImage0.Y());
      assertEquals(1, interpolatedGrayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4, interpolatedGrayImage0.Y());
      assertEquals(1, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(4, interpolatedGrayImage1.Y());
      assertEquals(1, interpolatedGrayImage1.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.get(2, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      
      int int2 = new Integer(1);
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = (-2754);
      int int4 = 1498;
      int int5 = rOI0.Y();
      assertEquals(1, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(1317, 1, 2038);
      assertNotNull(grayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(1317, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      
      int int6 = rOI0.Y();
      assertEquals(1, int6);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int6 == int0);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(6, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.X();
      assertEquals(1, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.Y();
      assertEquals(1, int5);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.X();
      assertEquals(1, int6);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertFalse(int6 == int0);
      
      int int7 = rOI0.Y();
      assertEquals(1, int7);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      
      int int8 = rOI0.Y();
      assertEquals(1, int8);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int2);
      
      int int9 = rOI0.X();
      assertEquals(1, int9);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int9 == int2);
      assertTrue(int9 == int1);
      assertTrue(int9 == int3);
      assertTrue(int9 == int4);
      assertTrue(int9 == int8);
      assertFalse(int9 == int0);
      assertTrue(int9 == int6);
      assertTrue(int9 == int5);
      assertTrue(int9 == int7);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(404, 1);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(404, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      GrayImage grayImage1 = interpolatedGrayImage0.copy(rOI0);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(404, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1, grayImage1.Y());
      assertEquals(1, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addbuffer(392, (-788), (-32768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = new GrayImage(255, 3315);
      assertNotNull(grayImage2);
      assertEquals(255, grayImage2.X());
      assertEquals(3315, grayImage2.Y());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      GrayImage grayImage3 = grayImage0.divide(491);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage3, grayImage1);
      assertSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotNull(grayImage3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage4 = grayImage1.multiply(345);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage4);
      assertSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage0);
      assertNotNull(grayImage4);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage4.X());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0, grayImage4.addSum());
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      
      String string0 = grayImage4.toString();
      assertEquals("0:0\n", string0);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage4);
      assertSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage0);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage4.X());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0, grayImage4.addSum());
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      
      // Undeclared exception!
      try { 
        grayImage0.set(Integer.MAX_VALUE, 345, (Integer) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 345
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(5, 0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer0 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer1 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(12, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      GrayImage grayImage3 = grayImage0.multiply(127);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage3, grayImage2);
      assertSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage1);
      assertNotNull(grayImage3);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      
      Integer integer2 = new Integer(3079);
      assertEquals(3079, (int)integer2);
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      short[][] shortArray0 = new short[2][0];
      short[] shortArray1 = new short[9];
      shortArray1[0] = (short)4;
      shortArray1[1] = (short)8;
      shortArray1[2] = (short)1911;
      shortArray1[3] = (short) (-32768);
      shortArray1[4] = (short) (-2784);
      shortArray1[5] = (short)0;
      shortArray1[6] = (short) (-1807);
      shortArray1[7] = (short) (-2325);
      shortArray1[8] = (short) (-368);
      shortArray0[0] = shortArray1;
      shortArray0[1] = shortArray1;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 3230);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(3230, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI(1, 3230, 8, (-2404));
      assertEquals(5635, rOI0.Y());
      assertEquals(8, rOI0.X());
      assertEquals(3230, rOI0.ly());
      assertEquals((-2404), rOI0.uy());
      assertEquals(8, rOI0.lx());
      assertEquals(1, rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(8, int1);
      assertEquals(5635, rOI0.Y());
      assertEquals(8, rOI0.X());
      assertEquals(3230, rOI0.ly());
      assertEquals((-2404), rOI0.uy());
      assertEquals(8, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = (-4583);
      int int3 = 2601;
      // Undeclared exception!
      interpolatedGrayImage0.max();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[0];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(544, 255, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      short[][] shortArray1 = new short[0][2];
      GrayImage grayImage0 = new GrayImage(shortArray1);
      assertNotNull(grayImage0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      int[][] intArray1 = new int[4][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      GrayImage grayImage0 = new GrayImage(intArray1);
      assertNotNull(grayImage0);
      assertEquals(4, intArray1.length);
      assertEquals(4, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(2599);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short[] shortArray0 = new short[0];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1636, 1636, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1373;
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[7];
      intArray1[0] = 1373;
      intArray1[1] = 1373;
      intArray1[2] = Integer.MIN_VALUE;
      intArray1[3] = 2159;
      intArray1[4] = 1373;
      intArray1[5] = 1373;
      intArray1[6] = 1373;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = Integer.MIN_VALUE;
      intArray2[1] = 1373;
      intArray2[2] = 2159;
      intArray2[3] = Integer.MIN_VALUE;
      intArray2[4] = (-2583);
      intArray2[5] = 2159;
      intArray2[6] = 2159;
      intArray0[1] = intArray2;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(2, intArray0.length);
      assertEquals(7, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(355);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(5, 0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer0 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer1 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(12, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      short[][] shortArray1 = new short[0][2];
      GrayImage grayImage3 = new GrayImage(shortArray1);
      assertNotNull(grayImage3);
      assertEquals(0, shortArray1.length);
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(34, 34);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(34, interpolatedGrayImage0.X());
      assertEquals(34, interpolatedGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(5, rOI0.X());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 5, 0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(5, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      int int0 = 985;
      int int1 = (-375);
      ROI rOI0 = new ROI((-132), (-132), 0, 1620);
      assertNotNull(rOI0);
      assertEquals(133, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.uy());
      assertEquals((-132), rOI0.ux());
      
      int int2 = rOI0.ux();
      assertEquals((-132), int2);
      assertEquals(133, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.uy());
      assertEquals((-132), rOI0.ux());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI0.uy();
      assertEquals((-132), int3);
      assertEquals(133, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.uy());
      assertEquals((-132), rOI0.ux());
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals((-132), int4);
      assertEquals(133, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.uy());
      assertEquals((-132), rOI0.ux());
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      int int5 = 43;
      int[][] intArray0 = new int[0][2];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short[][] shortArray0 = new short[6][6];
      short[] shortArray1 = new short[7];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)689;
      shortArray1[2] = (short)0;
      shortArray1[3] = (short)0;
      shortArray1[4] = (short) (-861);
      shortArray1[5] = (short)0;
      shortArray1[6] = (short) (-2952);
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      shortArray2[1] = (short)0;
      shortArray2[2] = (short)0;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[5];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      shortArray3[0] = (short)0;
      shortArray3[1] = (short)689;
      shortArray3[2] = (short) (-861);
      shortArray3[3] = (short)0;
      shortArray3[4] = (short)0;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[5];
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray2));
      
      shortArray4[0] = (short)0;
      shortArray4[1] = (short) (-2952);
      shortArray4[2] = (short)0;
      shortArray4[3] = (short)0;
      shortArray4[4] = (short) (-2952);
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[8];
      assertFalse(shortArray5.equals((Object)shortArray2));
      assertFalse(shortArray5.equals((Object)shortArray1));
      assertFalse(shortArray5.equals((Object)shortArray3));
      assertFalse(shortArray5.equals((Object)shortArray4));
      
      shortArray5[0] = (short) (-861);
      shortArray5[1] = (short)0;
      shortArray5[2] = (short)0;
      shortArray5[3] = (short)0;
      shortArray5[4] = (short)0;
      shortArray5[5] = (short) (-861);
      shortArray5[6] = (short)0;
      shortArray5[7] = (short) (-2952);
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[3];
      assertFalse(shortArray6.equals((Object)shortArray5));
      assertFalse(shortArray6.equals((Object)shortArray3));
      assertFalse(shortArray6.equals((Object)shortArray1));
      assertFalse(shortArray6.equals((Object)shortArray4));
      assertFalse(shortArray6.equals((Object)shortArray2));
      
      shortArray6[0] = (short)0;
      shortArray6[1] = (short)0;
      shortArray6[2] = (short)0;
      shortArray0[5] = shortArray6;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      int int0 = (-4583);
      int int1 = 2601;
      ROI rOI0 = new ROI((-4583), 1541, (-1), 875);
      assertNotNull(rOI0);
      assertEquals(875, rOI0.uy());
      assertEquals(1541, rOI0.ly());
      assertEquals(667, rOI0.Y());
      assertEquals((-4583), rOI0.ux());
      assertEquals(4583, rOI0.X());
      assertEquals((-1), rOI0.lx());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(875, 2601);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(875, interpolatedGrayImage0.X());
      assertEquals(2601, interpolatedGrayImage0.Y());
      
      // Undeclared exception!
      interpolatedGrayImage0.min();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(5, rOI0.X());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      
      GrayImage grayImage1 = grayImage0.addbuffer(5, 0, 238);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(5, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.copy();
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(5, grayImage1.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(5, grayImage2.X());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      
      int int0 = 682;
      GrayImage grayImage1 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      int int1 = 566;
      int int2 = 2;
      // Undeclared exception!
      grayImage0.addbuffer(int0, int1, int1, int2, int2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.X();
      assertEquals(1, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(25, 1, 25, (-1019), (-697));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(17425, grayImage1.absSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(12145225L, grayImage1.sqrSum());
      assertEquals((-17425), grayImage1.addSum());
      assertEquals(25, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      try { 
        Integer.parseInt("he.QfbS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"he.QfbS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 287);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(287, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1, interpolatedGrayImage0.X());
      
      ROI rOI0 = new ROI(210, 0, (-1930), 1222);
      assertNotNull(rOI0);
      assertEquals(1223, rOI0.Y());
      assertEquals(210, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(1222, rOI0.ly());
      assertEquals(2141, rOI0.X());
      assertEquals((-1930), rOI0.ux());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(1, 210);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(210, interpolatedGrayImage1.Y());
      assertEquals(1, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage1.setInterpolationMethod(interpolationMethod0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(210, interpolatedGrayImage1.Y());
      assertEquals(1, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.clear();
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(210, interpolatedGrayImage1.Y());
      assertEquals(1, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(210, interpolatedGrayImage2.Y());
      assertEquals(1, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI((-132), (-132), 0, 1620);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals((-132), int0);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      
      int int1 = rOI0.uy();
      assertEquals((-132), int1);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals((-132), int2);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.uy();
      assertEquals((-132), int4);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.ux();
      assertEquals((-132), int5);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.ux();
      assertEquals((-132), int6);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      
      int int7 = rOI0.lx();
      assertEquals(0, int7);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertTrue(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      
      int int8 = rOI0.ux();
      assertEquals((-132), int8);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertTrue(int8 == int2);
      assertFalse(int8 == int7);
      assertTrue(int8 == int5);
      assertFalse(int8 == int3);
      assertTrue(int8 == int1);
      assertTrue(int8 == int0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      
      int int9 = rOI0.ux();
      assertEquals((-132), int9);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertTrue(int9 == int5);
      assertTrue(int9 == int1);
      assertTrue(int9 == int0);
      assertTrue(int9 == int6);
      assertTrue(int9 == int4);
      assertTrue(int9 == int8);
      assertFalse(int9 == int7);
      assertTrue(int9 == int2);
      assertFalse(int9 == int3);
      
      int int10 = rOI0.ux();
      assertEquals((-132), int10);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertTrue(int10 == int2);
      assertTrue(int10 == int6);
      assertTrue(int10 == int8);
      assertTrue(int10 == int4);
      assertFalse(int10 == int7);
      assertTrue(int10 == int9);
      assertTrue(int10 == int0);
      assertFalse(int10 == int3);
      assertTrue(int10 == int1);
      assertTrue(int10 == int5);
      
      int int11 = rOI0.ly();
      assertEquals(1620, int11);
      assertEquals(0, rOI0.lx());
      assertEquals(133, rOI0.X());
      assertEquals(1753, rOI0.Y());
      assertEquals((-132), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals((-132), rOI0.uy());
      assertFalse(int11 == int1);
      assertFalse(int11 == int0);
      assertFalse(int11 == int6);
      assertFalse(int11 == int5);
      assertFalse(int11 == int8);
      assertFalse(int11 == int7);
      assertFalse(int11 == int2);
      assertFalse(int11 == int9);
      assertFalse(int11 == int10);
      assertFalse(int11 == int3);
      assertFalse(int11 == int4);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(985, (-375), (-132), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -507
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = (-32);
      int[] intArray0 = new int[12];
      intArray0[0] = (-32);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-32), (-32), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage0.divide(491);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotNull(grayImage2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      String string0 = grayImage1.toString();
      assertEquals("0:0\n", string0);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      
      GrayImage grayImage3 = grayImage1.multiply(345);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage3);
      assertSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotNull(grayImage3);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      
      // Undeclared exception!
      try { 
        grayImage0.add(0, 0, (int) (short) (-32768));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2094, 6);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(6, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2094, interpolatedGrayImage0.X());
      
      // Undeclared exception!
      interpolatedGrayImage0.addbuffer(2881, 2881, 2094);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(12, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      short[] shortArray0 = new short[1];
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(12, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.subtract((Image<Integer>) grayImage0);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(12, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      
      short[][] shortArray1 = new short[0][2];
      GrayImage grayImage2 = new GrayImage(shortArray1);
      assertNotNull(grayImage2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      rOI0.setROI(1, 1, 0, 1);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.X();
      assertEquals(2, int5);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      
      // Undeclared exception!
      try { 
        grayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 3230);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(3230, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI(1, 3230, 8, (-2404));
      assertEquals((-2404), rOI0.uy());
      assertEquals(8, rOI0.X());
      assertEquals(8, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(5635, rOI0.Y());
      assertEquals(3230, rOI0.ly());
      
      int int1 = rOI0.X();
      assertEquals(8, int1);
      assertEquals((-2404), rOI0.uy());
      assertEquals(8, rOI0.X());
      assertEquals(8, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(5635, rOI0.Y());
      assertEquals(3230, rOI0.ly());
      assertFalse(int1 == int0);
      
      ROI rOI1 = new ROI((-4583), 2601, 5, 2);
      assertNotNull(rOI1);
      assertEquals(4589, rOI1.X());
      assertEquals(5, rOI1.lx());
      assertEquals((-4583), rOI1.ux());
      assertEquals(2600, rOI1.Y());
      assertEquals(2601, rOI1.ly());
      assertEquals(2, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI1.setROI((-4583), 2025, 249, 8);
      assertNotSame(rOI1, rOI0);
      assertEquals(4833, rOI1.X());
      assertEquals(2018, rOI1.Y());
      assertEquals(8, rOI1.uy());
      assertEquals((-4583), rOI1.ux());
      assertEquals(249, rOI1.lx());
      assertEquals(2025, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(3230, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4583
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      ROI rOI0 = new ROI(4, 4, (short) (-32768), 1620);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.lx());
      assertEquals(32773, rOI0.X());
      assertEquals((-32768), rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      
      GrayImage grayImage2 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      GrayImage grayImage3 = grayImage0.addbuffer(4, 3, 3, (int) (short) (-32768), 43);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotNull(grayImage3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(516, grayImage3.absSum());
      assertEquals(516, grayImage3.addSum());
      assertEquals(4, grayImage3.X());
      assertEquals(3, grayImage3.Y());
      assertEquals(22188L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      
      GrayImage grayImage4 = null;
      try {
        grayImage4 = new GrayImage(3, 2340, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      Integer integer0 = interpolatedGrayImage0.min();
      assertNull(integer0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      Integer integer1 = interpolatedGrayImage0.min();
      assertNull(integer1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      int int0 = interpolatedGrayImage0.absSum();
      assertEquals(0, int0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.uy());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1617, rOI0.Y());
      assertEquals(0, rOI0.ux());
      
      GrayImage grayImage1 = grayImage0.subtract(238);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals(300, int0);
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      
      int int1 = integer1.intValue();
      assertEquals(300, int1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(int1 == int0);
      
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      
      float float0 = ((Integer)0).floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        grayImage1.set(2, 1893, integer2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1893
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      Integer integer0 = interpolatedGrayImage0.min();
      assertNull(integer0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      int int0 = interpolatedGrayImage0.addSum();
      assertEquals(0, int0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)516;
      shortArray0[1] = (short)1308;
      shortArray0[2] = (short)3382;
      shortArray0[3] = (short)0;
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)516, (short)1308, (short)3382, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      rOI0.setROI(1472, 5, 0, (short)1308);
      assertEquals(1304, rOI0.Y());
      assertEquals(1472, rOI0.lx());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(5, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertEquals(1304, int2);
      assertEquals(1304, rOI0.Y());
      assertEquals(1472, rOI0.lx());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(5, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.X();
      assertEquals(1473, int3);
      assertEquals(1304, rOI0.Y());
      assertEquals(1472, rOI0.lx());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(5, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = rOI0.Y();
      assertEquals(1304, int4);
      assertEquals(1304, rOI0.Y());
      assertEquals(1472, rOI0.lx());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(5, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.Y();
      assertEquals(1304, int5);
      assertEquals(1304, rOI0.Y());
      assertEquals(1472, rOI0.lx());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(5, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      
      int int6 = rOI0.X();
      assertEquals(1473, int6);
      assertEquals(1304, rOI0.Y());
      assertEquals(1472, rOI0.lx());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(5, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int6 == int0);
      assertTrue(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[3];
      intArray1[0] = (-1152);
      intArray1[1] = 0;
      intArray1[2] = 2032;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)8;
      GrayImage grayImage0 = new GrayImage(3315, 8);
      assertNotNull(grayImage0);
      assertEquals(3315, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      
      short[][] shortArray1 = new short[1][2];
      shortArray1[0] = shortArray0;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(shortArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      short[] shortArray0 = new short[1];
      GrayImage grayImage1 = grayImage0.addbuffer(0, 8, 0, (-1368), 0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      short short0 = (short) (-32768);
      Integer integer0 = grayImage0.max();
      assertNotSame(grayImage0, grayImage1);
      assertNull(integer0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      
      GrayImage grayImage2 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotNull(grayImage2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-32768), 0, (-1368), 2340, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1859, 1859);
      assertNotNull(grayImage0);
      assertEquals(1859, grayImage0.Y());
      assertEquals(1859, grayImage0.X());
      
      int int0 = 5;
      Integer integer0 = grayImage0.get(8, 5);
      assertNull(integer0);
      assertEquals(1859, grayImage0.Y());
      assertEquals(1859, grayImage0.X());
      
      GrayImage grayImage1 = new GrayImage(grayImage0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(8, 8);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage1.Y());
      assertEquals(8, interpolatedGrayImage1.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int1 = rOI1.X();
      assertEquals(1, int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      
      int int2 = rOI1.X();
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI2 = new ROI(1, 2601, 1, 1);
      assertNotNull(rOI2);
      assertEquals(2601, rOI2.Y());
      assertEquals(1, rOI2.uy());
      assertEquals(2601, rOI2.ly());
      assertEquals(1, rOI2.ux());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.lx());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage0.subtract(682);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals(300, int0);
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      
      Integer integer2 = Integer.valueOf((-687));
      assertEquals((-687), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      
      byte byte0 = integer3.byteValue();
      assertEquals((byte)44, byte0);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      
      int int1 = integer3.intValue();
      assertEquals(300, int1);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(int1 == int0);
      
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      
      float float0 = integer4.floatValue();
      assertEquals(200.0F, float0, 0.01F);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      
      // Undeclared exception!
      try { 
        grayImage1.set((int) (byte)44, 300, integer2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 300
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1629);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer0 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer0);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer1 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer1);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.addbuffer(0, 3079, 509);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(3079, grayImage2.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      GrayImage grayImage3 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage0);
      assertSame(grayImage3, grayImage1);
      assertNotNull(grayImage3);
      assertArrayEquals(new short[] {(short) (-1629)}, shortArray0);
      assertEquals(12, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      
      GrayImage grayImage4 = grayImage0.multiply(127);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage2);
      assertNotNull(grayImage4);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage2));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      int int5 = rOI0.X();
      assertEquals(1, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      
      rOI0.setROI(1, (short) (-1629), 3079, 4);
      assertEquals((-1629), rOI0.uy());
      assertEquals(3079, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(3079, rOI0.X());
      assertEquals(4, rOI0.ly());
      assertEquals(1634, rOI0.Y());
      
      // Undeclared exception!
      try { 
        grayImage1.multiply(1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1629
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      int int0 = interpolatedGrayImage0.addSum();
      assertEquals(0, int0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)516;
      shortArray0[1] = (short)1308;
      shortArray0[2] = (short)3382;
      shortArray0[3] = (short)0;
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)516, (short)1308, (short)3382, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      
      int int1 = 4;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      rOI0.setROI(1472, 5, 0, (short)1308);
      assertEquals(5, rOI0.uy());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(1472, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1304, rOI0.Y());
      
      int int3 = rOI0.Y();
      assertEquals(1304, int3);
      assertEquals(5, rOI0.uy());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(1472, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1304, rOI0.Y());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.X();
      assertEquals(1473, int4);
      assertEquals(5, rOI0.uy());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(1472, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1304, rOI0.Y());
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      
      int int5 = rOI0.Y();
      assertEquals(1304, int5);
      assertEquals(5, rOI0.uy());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(1472, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1304, rOI0.Y());
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      
      int int6 = rOI0.Y();
      assertEquals(1304, int6);
      assertEquals(5, rOI0.uy());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(1472, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1304, rOI0.Y());
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      
      int int7 = rOI0.X();
      assertEquals(1473, int7);
      assertEquals(5, rOI0.uy());
      assertEquals(1473, rOI0.X());
      assertEquals(1308, rOI0.ly());
      assertEquals(1472, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1304, rOI0.Y());
      assertFalse(int7 == int2);
      assertTrue(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      GrayImage grayImage1 = grayImage0.subtract(238);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      
      GrayImage grayImage2 = grayImage1.addbuffer(0, 5, 0);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(5, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      GrayImage grayImage3 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertNotNull(grayImage3);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short[] shortArray0 = new short[3];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 287;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 287);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(287, interpolatedGrayImage0.Y());
      assertEquals(1, interpolatedGrayImage0.X());
      
      int int1 = 1541;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      int int2 = integer0.intValue();
      assertEquals(0, int2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      
      int int3 = rOI0.ux();
      assertEquals(0, int3);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = rOI0.uy();
      assertEquals(4, int4);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      
      int int6 = rOI0.lx();
      assertEquals(4, int6);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      
      int int7 = rOI0.uy();
      assertEquals(4, int7);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int7 == int2);
      assertTrue(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertTrue(int7 == int6);
      
      int int8 = rOI0.ux();
      assertEquals(0, int8);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int8 == int6);
      assertTrue(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertFalse(int8 == int7);
      
      int int9 = rOI0.ux();
      assertEquals(0, int9);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertTrue(int9 == int3);
      assertFalse(int9 == int1);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertTrue(int9 == int8);
      assertTrue(int9 == int5);
      assertFalse(int9 == int4);
      assertTrue(int9 == int2);
      assertFalse(int9 == int6);
      
      int int10 = rOI0.lx();
      assertEquals(4, int10);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertTrue(int10 == int4);
      assertFalse(int10 == int0);
      assertFalse(int10 == int8);
      assertFalse(int10 == int1);
      assertFalse(int10 == int2);
      assertTrue(int10 == int7);
      assertFalse(int10 == int3);
      assertTrue(int10 == int6);
      assertFalse(int10 == int9);
      assertFalse(int10 == int5);
      
      int int11 = rOI0.ux();
      assertEquals(0, int11);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int11 == int0);
      assertTrue(int11 == int3);
      assertFalse(int11 == int6);
      assertTrue(int11 == int9);
      assertTrue(int11 == int5);
      assertFalse(int11 == int4);
      assertFalse(int11 == int10);
      assertTrue(int11 == int8);
      assertFalse(int11 == int7);
      assertFalse(int11 == int1);
      assertTrue(int11 == int2);
      
      int int12 = rOI0.ux();
      assertEquals(0, int12);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertTrue(int12 == int8);
      assertTrue(int12 == int2);
      assertFalse(int12 == int1);
      assertFalse(int12 == int0);
      assertTrue(int12 == int5);
      assertTrue(int12 == int3);
      assertTrue(int12 == int11);
      assertFalse(int12 == int10);
      assertFalse(int12 == int6);
      assertFalse(int12 == int4);
      assertFalse(int12 == int7);
      assertTrue(int12 == int9);
      
      int int13 = rOI0.ux();
      assertEquals(0, int13);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int13 == int1);
      assertFalse(int13 == int6);
      assertTrue(int13 == int8);
      assertTrue(int13 == int9);
      assertFalse(int13 == int10);
      assertTrue(int13 == int5);
      assertFalse(int13 == int0);
      assertFalse(int13 == int7);
      assertTrue(int13 == int3);
      assertTrue(int13 == int2);
      assertTrue(int13 == int11);
      assertFalse(int13 == int4);
      assertTrue(int13 == int12);
      
      int int14 = rOI0.ly();
      assertEquals(1620, int14);
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int14 == int9);
      assertFalse(int14 == int7);
      assertFalse(int14 == int11);
      assertFalse(int14 == int4);
      assertFalse(int14 == int2);
      assertFalse(int14 == int1);
      assertFalse(int14 == int6);
      assertFalse(int14 == int12);
      assertFalse(int14 == int5);
      assertFalse(int14 == int10);
      assertFalse(int14 == int13);
      assertFalse(int14 == int8);
      assertFalse(int14 == int0);
      assertFalse(int14 == int3);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(1541, 128, (Integer) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1541
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      short[] shortArray0 = new short[1];
      GrayImage grayImage1 = grayImage0.addbuffer(0, 8, 0, (-1368), 0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      short short0 = (short) (-32768);
      Integer integer0 = grayImage0.max();
      assertNotSame(grayImage0, grayImage1);
      assertNull(integer0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-32768), 0, (-1368), 2340, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      
      int int1 = rOI0.uy();
      assertEquals(4, int1);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(4, int3);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage1 = grayImage0.subtract((Image<Integer>) interpolatedGrayImage1);
      assertSame(grayImage0, grayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(4, int2);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI0.uy();
      assertEquals(4, int3);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int4 = rOI1.X();
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      int int5 = rOI0.Y();
      assertEquals(1617, int5);
      assertNotSame(rOI0, rOI1);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      
      int int6 = rOI1.X();
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int7 = rOI2.X();
      assertEquals(1, int7);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertTrue(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      
      int int8 = rOI2.Y();
      assertEquals(1, int8);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertTrue(int8 == int7);
      assertFalse(int8 == int1);
      assertTrue(int8 == int6);
      assertFalse(int8 == int2);
      assertTrue(int8 == int4);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int9 = rOI2.X();
      assertEquals(1, int9);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertFalse(int9 == int2);
      assertFalse(int9 == int5);
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertTrue(int9 == int8);
      assertFalse(int9 == int3);
      assertTrue(int9 == int6);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int10 = rOI2.Y();
      assertEquals(1, int10);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertTrue(int10 == int4);
      assertTrue(int10 == int7);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int5);
      assertTrue(int10 == int9);
      assertTrue(int10 == int8);
      assertTrue(int10 == int6);
      assertFalse(int10 == int0);
      assertFalse(int10 == int1);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int11 = rOI2.Y();
      assertEquals(1, int11);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertTrue(int11 == int6);
      assertFalse(int11 == int3);
      assertTrue(int11 == int4);
      assertTrue(int11 == int8);
      assertTrue(int11 == int9);
      assertFalse(int11 == int2);
      assertTrue(int11 == int10);
      assertFalse(int11 == int0);
      assertFalse(int11 == int1);
      assertFalse(int11 == int5);
      assertTrue(int11 == int7);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int12 = rOI2.X();
      assertEquals(1, int12);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertFalse(int12 == int5);
      assertTrue(int12 == int7);
      assertFalse(int12 == int0);
      assertFalse(int12 == int1);
      assertFalse(int12 == int2);
      assertTrue(int12 == int4);
      assertFalse(int12 == int3);
      assertTrue(int12 == int10);
      assertTrue(int12 == int11);
      assertTrue(int12 == int9);
      assertTrue(int12 == int6);
      assertTrue(int12 == int8);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int13 = rOI2.Y();
      assertEquals(1, int13);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertTrue(int13 == int9);
      assertFalse(int13 == int0);
      assertFalse(int13 == int3);
      assertFalse(int13 == int2);
      assertTrue(int13 == int10);
      assertFalse(int13 == int1);
      assertTrue(int13 == int8);
      assertTrue(int13 == int11);
      assertTrue(int13 == int12);
      assertFalse(int13 == int5);
      assertTrue(int13 == int4);
      assertTrue(int13 == int7);
      assertTrue(int13 == int6);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int14 = rOI1.Y();
      assertEquals(1, int14);
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertTrue(int14 == int9);
      assertFalse(int14 == int0);
      assertTrue(int14 == int10);
      assertTrue(int14 == int6);
      assertTrue(int14 == int4);
      assertTrue(int14 == int7);
      assertTrue(int14 == int13);
      assertTrue(int14 == int11);
      assertFalse(int14 == int1);
      assertTrue(int14 == int12);
      assertFalse(int14 == int5);
      assertFalse(int14 == int3);
      assertTrue(int14 == int8);
      assertFalse(int14 == int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      
      int int15 = rOI2.X();
      assertEquals(1, int15);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertFalse(int15 == int2);
      assertTrue(int15 == int8);
      assertFalse(int15 == int3);
      assertTrue(int15 == int6);
      assertFalse(int15 == int1);
      assertFalse(int15 == int0);
      assertTrue(int15 == int10);
      assertTrue(int15 == int11);
      assertTrue(int15 == int9);
      assertTrue(int15 == int4);
      assertTrue(int15 == int7);
      assertTrue(int15 == int13);
      assertTrue(int15 == int14);
      assertTrue(int15 == int12);
      assertFalse(int15 == int5);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      int int16 = rOI1.Y();
      assertEquals(1, int16);
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertTrue(int16 == int11);
      assertTrue(int16 == int7);
      assertTrue(int16 == int12);
      assertTrue(int16 == int13);
      assertTrue(int16 == int6);
      assertTrue(int16 == int4);
      assertTrue(int16 == int9);
      assertTrue(int16 == int10);
      assertTrue(int16 == int14);
      assertFalse(int16 == int0);
      assertFalse(int16 == int5);
      assertTrue(int16 == int15);
      assertFalse(int16 == int1);
      assertFalse(int16 == int2);
      assertFalse(int16 == int3);
      assertTrue(int16 == int8);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      
      int int17 = rOI0.Y();
      assertEquals(1617, int17);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(5, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(int17 == int8);
      assertFalse(int17 == int6);
      assertFalse(int17 == int11);
      assertFalse(int17 == int2);
      assertFalse(int17 == int12);
      assertFalse(int17 == int13);
      assertFalse(int17 == int15);
      assertFalse(int17 == int1);
      assertFalse(int17 == int16);
      assertFalse(int17 == int7);
      assertFalse(int17 == int3);
      assertFalse(int17 == int14);
      assertFalse(int17 == int9);
      assertFalse(int17 == int0);
      assertFalse(int17 == int4);
      assertFalse(int17 == int10);
      assertTrue(int17 == int5);
      
      int int18 = rOI2.X();
      assertEquals(1, int18);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertTrue(int18 == int14);
      assertFalse(int18 == int1);
      assertTrue(int18 == int7);
      assertTrue(int18 == int10);
      assertFalse(int18 == int3);
      assertTrue(int18 == int16);
      assertTrue(int18 == int8);
      assertFalse(int18 == int17);
      assertTrue(int18 == int9);
      assertFalse(int18 == int2);
      assertTrue(int18 == int11);
      assertTrue(int18 == int6);
      assertTrue(int18 == int15);
      assertFalse(int18 == int0);
      assertFalse(int18 == int5);
      assertTrue(int18 == int12);
      assertTrue(int18 == int13);
      assertTrue(int18 == int4);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      
      int int1 = rOI0.uy();
      assertEquals(4, int1);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.lx();
      assertEquals(4, int3);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.uy();
      assertEquals(4, int4);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      
      rOI0.setROI(0, (short) (-32768), 3079, (short) (-32768));
      assertEquals(3080, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(3079, rOI0.lx());
      assertEquals((-32768), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-32768), rOI0.uy());
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(3080, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(3079, rOI0.lx());
      assertEquals((-32768), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-32768), rOI0.uy());
      assertTrue(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      
      Integer integer0 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer1 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotNull(grayImage2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      // Undeclared exception!
      try { 
        grayImage2.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = new GrayImage(255, 3315);
      assertNotNull(grayImage2);
      assertEquals(3315, grayImage2.Y());
      assertEquals(255, grayImage2.X());
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      GrayImage grayImage3 = grayImage0.divide(491);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage3, grayImage1);
      assertSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotNull(grayImage3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.X());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((int) (short) (-32768));
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.X();
      assertEquals(1, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      
      short[] shortArray0 = new short[1];
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      int int1 = rOI0.uy();
      assertEquals(4, int1);
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(4, int3);
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.uy();
      assertEquals(4, int4);
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(4, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.X());
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      
      rOI0.setROI(0, (short)0, 3079, (short) (-32768));
      assertEquals(0, rOI0.ux());
      assertEquals(3079, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3080, rOI0.X());
      assertEquals(32769, rOI0.Y());
      assertEquals((-32768), rOI0.uy());
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(3079, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3080, rOI0.X());
      assertEquals(32769, rOI0.Y());
      assertEquals((-32768), rOI0.uy());
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      
      Integer integer0 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      Integer integer1 = grayImage1.min();
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      // Undeclared exception!
      try { 
        grayImage2.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 24;
      int[] intArray0 = new int[12];
      intArray0[0] = 24;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(0, 24, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      Integer integer0 = interpolatedGrayImage0.min();
      assertNull(integer0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      Integer integer1 = interpolatedGrayImage0.min();
      assertNull(integer1);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      
      int int1 = rOI0.uy();
      assertEquals(4, int1);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(4, int3);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.uy();
      assertEquals(4, int4);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      
      int int7 = rOI0.lx();
      assertEquals(4, int7);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertFalse(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertFalse(int7 == int2);
      assertTrue(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      
      int int8 = rOI0.ux();
      assertEquals(0, int8);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertFalse(int8 == int3);
      assertTrue(int8 == int0);
      assertFalse(int8 == int4);
      assertTrue(int8 == int6);
      assertFalse(int8 == int1);
      assertTrue(int8 == int2);
      assertFalse(int8 == int7);
      assertTrue(int8 == int5);
      
      int int9 = rOI0.ux();
      assertEquals(0, int9);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertFalse(int9 == int3);
      assertTrue(int9 == int5);
      assertTrue(int9 == int0);
      assertFalse(int9 == int4);
      assertFalse(int9 == int1);
      assertTrue(int9 == int6);
      assertTrue(int9 == int2);
      assertTrue(int9 == int8);
      assertFalse(int9 == int7);
      
      int int10 = rOI0.ux();
      assertEquals(0, int10);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertTrue(int10 == int9);
      assertTrue(int10 == int6);
      assertTrue(int10 == int0);
      assertFalse(int10 == int1);
      assertFalse(int10 == int3);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertTrue(int10 == int2);
      assertTrue(int10 == int5);
      assertTrue(int10 == int8);
      
      int int11 = rOI0.ly();
      assertEquals(1620, int11);
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertFalse(int11 == int7);
      assertFalse(int11 == int10);
      assertFalse(int11 == int3);
      assertFalse(int11 == int2);
      assertFalse(int11 == int5);
      assertFalse(int11 == int8);
      assertFalse(int11 == int1);
      assertFalse(int11 == int9);
      assertFalse(int11 == int6);
      assertFalse(int11 == int4);
      assertFalse(int11 == int0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(17, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((short[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((int) (short) (-32768));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI1.Y();
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI1.X();
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.Y();
      assertEquals(1, int5);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      
      int int6 = rOI0.Y();
      assertEquals(1, int6);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      
      int int7 = rOI1.X();
      assertEquals(1, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      int int8 = rOI2.X();
      assertEquals(1, int8);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int0);
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      
      int int9 = rOI2.Y();
      assertEquals(1, int9);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int9 == int3);
      assertTrue(int9 == int6);
      assertTrue(int9 == int7);
      assertTrue(int9 == int0);
      assertTrue(int9 == int1);
      assertTrue(int9 == int8);
      assertTrue(int9 == int2);
      assertTrue(int9 == int4);
      assertTrue(int9 == int5);
      
      int int10 = rOI2.X();
      assertEquals(1, int10);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int10 == int1);
      assertTrue(int10 == int0);
      assertTrue(int10 == int7);
      assertTrue(int10 == int2);
      assertTrue(int10 == int6);
      assertTrue(int10 == int3);
      assertTrue(int10 == int8);
      assertTrue(int10 == int9);
      assertTrue(int10 == int4);
      assertTrue(int10 == int5);
      
      int int11 = rOI2.Y();
      assertEquals(1, int11);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int11 == int3);
      assertTrue(int11 == int10);
      assertTrue(int11 == int5);
      assertTrue(int11 == int1);
      assertTrue(int11 == int8);
      assertTrue(int11 == int7);
      assertTrue(int11 == int4);
      assertTrue(int11 == int2);
      assertTrue(int11 == int9);
      assertTrue(int11 == int0);
      assertTrue(int11 == int6);
      
      int int12 = rOI2.Y();
      assertEquals(1, int12);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int12 == int7);
      assertTrue(int12 == int3);
      assertTrue(int12 == int1);
      assertTrue(int12 == int8);
      assertTrue(int12 == int5);
      assertTrue(int12 == int4);
      assertTrue(int12 == int11);
      assertTrue(int12 == int9);
      assertTrue(int12 == int2);
      assertTrue(int12 == int10);
      assertTrue(int12 == int6);
      assertTrue(int12 == int0);
      
      int int13 = rOI2.X();
      assertEquals(1, int13);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int13 == int2);
      assertTrue(int13 == int12);
      assertTrue(int13 == int4);
      assertTrue(int13 == int11);
      assertTrue(int13 == int5);
      assertTrue(int13 == int3);
      assertTrue(int13 == int7);
      assertTrue(int13 == int1);
      assertTrue(int13 == int10);
      assertTrue(int13 == int9);
      assertTrue(int13 == int6);
      assertTrue(int13 == int8);
      assertTrue(int13 == int0);
      
      rOI2.setROI((-3455), 1, 533, (-1215));
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1217, rOI2.Y());
      assertEquals(1, rOI2.ly());
      assertEquals(3989, rOI2.X());
      assertEquals(533, rOI2.lx());
      assertEquals((-3455), rOI2.ux());
      assertEquals((-1215), rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.multiply(1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage((short)8, 8);
      assertNotNull(grayImage0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      
      Integer integer1 = interpolatedGrayImage0.min();
      assertNull(integer1);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
      assertNotNull(short0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI1.Y();
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(8, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      int int4 = rOI1.X();
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      int int5 = rOI1.X();
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      
      GrayImage grayImage2 = grayImage0.addbuffer(1, 236, 821);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotNull(grayImage2);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(1, grayImage2.X());
      assertEquals(236, grayImage2.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      
      rOI0.setROI(236, 1, 11, 236);
      assertNotSame(rOI0, rOI1);
      assertEquals(236, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(236, rOI0.lx());
      assertEquals(226, rOI0.X());
      assertEquals(236, rOI0.ly());
      assertEquals(11, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      
      rOI1.setROI(8, 128, 44, 1);
      assertNotSame(rOI1, rOI0);
      assertEquals(8, rOI1.ux());
      assertEquals(128, rOI1.Y());
      assertEquals(37, rOI1.X());
      assertEquals(128, rOI1.ly());
      assertEquals(44, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int6 = rOI1.Y();
      assertEquals(128, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(8, rOI1.ux());
      assertEquals(128, rOI1.Y());
      assertEquals(37, rOI1.X());
      assertEquals(128, rOI1.ly());
      assertEquals(44, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      short short0 = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 8;
      int[][] intArray0 = new int[0][2];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = (-4);
      GrayImage grayImage0 = new GrayImage(2350, 2350);
      assertNotNull(grayImage0);
      assertEquals(2350, grayImage0.Y());
      assertEquals(2350, grayImage0.X());
      
      int int1 = 233;
      // Undeclared exception!
      try { 
        grayImage0.divide(233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[1];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      
      GrayImage grayImage1 = new GrayImage(255, 3315);
      assertNotNull(grayImage1);
      assertEquals(255, grayImage1.X());
      assertEquals(3315, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((int) (short) (-32768));
      assertNotSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      rOI0.setROI(255, 3315, 8, 0);
      assertEquals(3315, rOI0.ly());
      assertEquals(3316, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(8, rOI0.ux());
      assertEquals(248, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      int int0 = 0;
      int int1 = 1620;
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      String string0 = grayImage0.toString();
      assertEquals("0:0\n", string0);
      assertNotSame(grayImage0, grayImage1);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.uy();
      assertEquals(4, int3);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(4, rOI0.uy());
      assertEquals(1617, rOI0.Y());
      assertEquals(5, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(1620, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage((short)8, 8);
      assertNotNull(grayImage0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      
      Integer integer1 = interpolatedGrayImage0.min();
      assertNull(integer1);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
      assertNotNull(short0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      rOI1.setROI((-122), (-122), 8, 1598);
      assertNotSame(rOI1, rOI0);
      assertEquals(131, rOI1.X());
      assertEquals(1598, rOI1.ly());
      assertEquals((-122), rOI1.uy());
      assertEquals((-122), rOI1.ux());
      assertEquals(8, rOI1.lx());
      assertEquals(1721, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int3 = rOI1.Y();
      assertEquals(1721, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(131, rOI1.X());
      assertEquals(1598, rOI1.ly());
      assertEquals((-122), rOI1.uy());
      assertEquals((-122), rOI1.ux());
      assertEquals(8, rOI1.lx());
      assertEquals(1721, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      int int4 = rOI1.X();
      assertEquals(131, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(131, rOI1.X());
      assertEquals(1598, rOI1.ly());
      assertEquals((-122), rOI1.uy());
      assertEquals((-122), rOI1.ux());
      assertEquals(8, rOI1.lx());
      assertEquals(1721, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      
      int int5 = rOI1.X();
      assertEquals(131, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(131, rOI1.X());
      assertEquals(1598, rOI1.ly());
      assertEquals((-122), rOI1.uy());
      assertEquals((-122), rOI1.ux());
      assertEquals(8, rOI1.lx());
      assertEquals(1721, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      
      Image<Integer> image0 = interpolatedGrayImage0.clear((Integer) null);
      assertNotSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertNotNull(image0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(8, image0.Y());
      assertEquals(8, image0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      
      GrayImage grayImage2 = new GrayImage(2325, 1);
      assertNotNull(grayImage2);
      assertEquals(1, grayImage2.Y());
      assertEquals(2325, grayImage2.X());
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(131);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.clear();
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.add((int) (short) (-32768));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.Y());
      
      Integer integer0 = new Integer((short) (-32768));
      assertEquals((-32768), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) interpolatedGrayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short) (-32768)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage((short)8, 8);
      assertNotNull(grayImage0);
      assertEquals(8, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(8, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(8, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      
      Integer integer1 = interpolatedGrayImage0.min();
      assertNull(integer1);
      assertEquals(8, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
      assertNotNull(short0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI1.Y();
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(8, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      int int4 = rOI1.X();
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      int int5 = rOI1.X();
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      
      rOI0.setROI(236, 1, 11, 236);
      assertNotSame(rOI0, rOI1);
      assertEquals(11, rOI0.ux());
      assertEquals(236, rOI0.lx());
      assertEquals(236, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(236, rOI0.ly());
      assertEquals(226, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int6 = rOI1.Y();
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      String string0 = grayImage0.toString();
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      int int0 = (-560);
      int int1 = (-280);
      // Undeclared exception!
      try { 
        grayImage0.subtract(204, (-560), 204, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage0.addbuffer(0, 566, 566, 2, 2);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(566, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      
      // Undeclared exception!
      try { 
        grayImage0.divide((-1759), 127, (-1759));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      int int0 = 2881;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI0.X();
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.Y();
      assertEquals(1, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      
      int int6 = rOI0.X();
      assertEquals(1, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-32751);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-35), (-35), shortArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(6, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(6, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addbuffer((-1926), 0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      Integer integer0 = interpolatedGrayImage0.min();
      assertNull(integer0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      String string0 = interpolatedGrayImage0.toString();
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      Integer integer1 = interpolatedGrayImage0.min();
      assertNull(integer1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      
      int int0 = interpolatedGrayImage0.absSum();
      assertEquals(0, int0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 8;
      GrayImage grayImage0 = new GrayImage(8, (short)8);
      assertNotNull(grayImage0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(8, grayImage0.X());
      assertEquals(8, grayImage0.Y());
      assertEquals(8, interpolatedGrayImage0.X());
      assertEquals(8, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addbuffer(8, (-831), (-542), (-831), (-831));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = (-4);
      GrayImage grayImage0 = new GrayImage(2325, 2325);
      assertNotNull(grayImage0);
      assertEquals(2325, grayImage0.Y());
      assertEquals(2325, grayImage0.X());
      
      int int1 = 233;
      // Undeclared exception!
      try { 
        grayImage0.divide(233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[19];
      intArray0[10] = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(8, 0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.add(232);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage1.multiply((Image<Integer>) interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(8, interpolatedGrayImage3.X());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      
      Integer integer1 = interpolatedGrayImage2.min();
      assertSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNull(integer1);
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(8, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage0 = new GrayImage(2325, 2325);
      assertNotNull(grayImage0);
      assertEquals(2325, grayImage0.X());
      assertEquals(2325, grayImage0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.divide(233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(12, intArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      short[] shortArray0 = new short[1];
      GrayImage grayImage1 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      GrayImage grayImage2 = grayImage0.multiply((Image<Integer>) grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(12, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      int int1 = 4;
      int int2 = 1620;
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      assertNotNull(rOI0);
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = 238;
      GrayImage grayImage1 = grayImage0.subtract(238);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      
      int int4 = integer0.intValue();
      assertEquals(300, int4);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int3));
      
      int int5 = integer1.intValue();
      assertEquals(300, int5);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      
      int int6 = rOI0.lx();
      assertEquals(4, int6);
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int6 == int2);
      assertTrue(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertTrue(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      
      int int8 = rOI0.ux();
      assertEquals(0, int8);
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertFalse(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int6);
      
      int int9 = rOI0.ly();
      assertEquals(1620, int9);
      assertEquals(1620, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(5, rOI0.X());
      assertEquals(1617, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int9 == int4);
      assertFalse(int9 == int1);
      assertFalse(int9 == int6);
      assertFalse(int9 == int8);
      assertFalse(int9 == int3);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertTrue(int9 == int2);
      assertFalse(int9 == int5);
      
      int int10 = 3;
      // Undeclared exception!
      try { 
        grayImage0.set(680, 3, integer1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      ROI rOI0 = new ROI(4, 4, 0, 1620);
      grayImage0.subtract(238);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      integer0.intValue();
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      Integer integer2 = Integer.valueOf(4247);
      integer2.byteValue();
      integer2.floatValue();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 238);
      interpolatedGrayImage0.clear(integer0);
      GrayImage grayImage1 = new GrayImage(2325, 2325);
      // Undeclared exception!
      try { 
        grayImage1.divide(233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[1];
      short short0 = (short) (-32768);
      shortArray0[0] = (short) (-32768);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.Y();
      GrayImage grayImage1 = interpolatedGrayImage0.add((int) (short) (-32768));
      Integer integer0 = new Integer((short) (-32768));
      grayImage0.multiply((Image<Integer>) grayImage1);
      rOI0.setROI(0, (short) (-32768), (short) (-32768), 0);
      // Undeclared exception!
      try { 
        grayImage0.subtract((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }
}
