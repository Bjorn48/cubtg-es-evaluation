/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:47:55 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.IndexColorModel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import jigl.image.ROI;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealGrayImage_ESTest extends RealGrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1650, 735);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((-1), 1356, (float) 1650);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1356
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(30, 0);
      realGrayImage0.copy();
      ROI rOI0 = new ROI();
      rOI0.setROI(30, (-288), 8, 664);
      // Undeclared exception!
      try { 
        realGrayImage0.median(30, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -288
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 1360;
      float[] floatArray0 = null;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(2876, 2876, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 0, floatArray0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.clip(255, 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0);
      realGrayImage0.multiply(realGrayImage1);
      realGrayImage0.addbuffer(0, 10, (-1021), (-2147418619), (float) (-1021));
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(0, 255, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      rOI0.setROI(1, (-1497), 0, (-1497));
      rOI0.Y();
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) null);
      realGrayImage1.divide(264.36743F);
      realGrayImage1.min();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      realGrayImage1.copy();
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      ROI rOI1 = new ROI();
      rOI1.setROI(227, 227, 1520, 0);
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(0.0F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 227
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      int int0 = (-609);
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer((-609), 1349, (float) 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 0, floatArray0);
      int int2 = 801;
      int int3 = 823;
      ROI rOI0 = new ROI(801, 823, (-1563), (-1563));
      // Undeclared exception!
      try { 
        realGrayImage0.add((-1.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1563
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      int int1 = 399;
      ROI rOI0 = new ROI(399, 0, 0, 425);
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      double double0 = new Integer(1349);
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(realGrayImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 1349;
      int int1 = 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      // Undeclared exception!
      try { 
        realGrayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage0.addSum();
      RealGrayImage realGrayImage2 = new RealGrayImage(128, 2969);
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI();
      rOI1.X();
      // Undeclared exception!
      try { 
        realGrayImage2.multiply((float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      rOI0.setROI(8, 8, 8, 0);
      rOI0.setROI(0, 1, 32, 0);
      rOI0.setROI(11, 0, 12, 18);
      // Undeclared exception!
      try { 
        realGrayImage0.median(572, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          RealGrayImage realGrayImage0 = new RealGrayImage(1602, 0);
          RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
          RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(34, 1, (float) 1602);
          realGrayImage2.toString();
          // Undeclared exception!
          try { 
            realGrayImage2.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1360, 84);
      ROI rOI0 = new ROI();
      realGrayImage0.toString();
      int int0 = (-1456);
      realGrayImage0.median(int0, rOI0);
      realGrayImage0.sqrSum();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 255.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 521;
      RealGrayImage realGrayImage0 = new RealGrayImage(521, 3227);
      int int1 = 415;
      float float0 = (-1222.27F);
      // Undeclared exception!
      realGrayImage0.addbuffer(521, 415, (-1222.27F));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(1, 11, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      realGrayImage2.toString();
      Integer integer0 = new Integer(8);
      realGrayImage1.diff(realGrayImage0);
      realGrayImage0.min();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 0, floatArray0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 0, floatArray0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      ROI rOI1 = new ROI();
      rOI1.setROI(227, 227, 1520, 0);
      realGrayImage0.sqrSum();
      Float.valueOf(0.0F);
      Float float0 = Float.valueOf(0.0F);
      // Undeclared exception!
      try { 
        realGrayImage0.set(2, 1520, float0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1520
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(567, 567);
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      ROI rOI1 = new ROI();
      rOI1.setROI(227, 227, 1520, 0);
      realGrayImage0.diff((RealGrayImage) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      realGrayImage0.divide((float) 8);
      // Undeclared exception!
      try { 
        realGrayImage0.clip(1344, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 0, floatArray0);
      ROI rOI0 = new ROI();
      rOI0.setROI((-1042), 0, 0, (-1541));
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(344, 0, (-3770), (-1541), 2400.665F);
      rOI0.X();
      realGrayImage1.absSum();
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      // Undeclared exception!
      try { 
        realGrayImage2.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1541
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI();
      realGrayImage0.toString();
      // Undeclared exception!
      try { 
        realGrayImage0.median(4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(15, 1360);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      ROI rOI1 = new ROI();
      rOI0.setROI((-1), 691, 227, (-1));
      RealGrayImage realGrayImage1 = null;
      // Undeclared exception!
      try { 
        realGrayImage0.diff((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(472, 472);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.diff(realGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      ROI rOI1 = new ROI();
      int int0 = 1555;
      realGrayImage0.addbuffer(0, 1, 0, 1520, (float) 0);
      // Undeclared exception!
      try { 
        realGrayImage0.add(760.0F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 1520;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      ROI rOI1 = new ROI();
      float float0 = 1255.3F;
      // Undeclared exception!
      realGrayImage0.addbuffer(1555, 1520, 1520, 1520, 760.0F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Image image0 = null;
      RealGrayImage realGrayImage0 = new RealGrayImage(567, 567);
      // Undeclared exception!
      try { 
        realGrayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 2;
      RealGrayImage realGrayImage0 = new RealGrayImage(2, 1210);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      // Undeclared exception!
      try { 
        realGrayImage0.divide((float) 1210);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.setROI(0, 4, 0, 0);
      RealGrayImage realGrayImage0 = new RealGrayImage(128, 2969);
      ROI rOI1 = new ROI();
      realGrayImage0.median(4, rOI0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      float float0 = realGrayImage0.absSum();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      String string0 = realGrayImage1.toString();
      assertNotNull(string0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals("0:8\n", string0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      Integer integer0 = new Integer((-1302));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1302), (int)integer0);
      
      RealGrayImage realGrayImage2 = realGrayImage0.diff(realGrayImage1);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(8, realGrayImage2.Y());
      
      realGrayImage0.byteSize();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 388;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 388;
      floatArray0[1] = 32767.0F;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(754, 388, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1360);
      realGrayImage0.clip(1360, (-623));
      float[][] floatArray0 = new float[9][4];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) (-623);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = (float) 0;
      floatArray2[1] = (float) (-623);
      floatArray2[2] = (float) 1360;
      floatArray2[3] = (float) (-623);
      floatArray2[4] = (float) (-623);
      floatArray2[5] = (float) 0;
      floatArray2[6] = (float) (-623);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = (float) 1360;
      floatArray3[1] = (float) 1360;
      floatArray3[2] = (float) 0;
      floatArray3[3] = (float) (-623);
      floatArray3[4] = (float) 1360;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = (float) (-623);
      floatArray4[1] = (float) (-623);
      floatArray4[2] = (float) (-623);
      floatArray4[3] = (float) 0;
      floatArray4[4] = (float) 1360;
      floatArray4[5] = (float) 1360;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[8];
      floatArray5[0] = (float) (-623);
      floatArray5[1] = (float) (-623);
      floatArray5[2] = (float) (-623);
      floatArray5[3] = (float) 1360;
      floatArray5[4] = (float) 0;
      floatArray5[5] = (float) 0;
      floatArray5[6] = (float) (-623);
      floatArray5[7] = (float) (-623);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = (float) 0;
      floatArray6[1] = (-392.0F);
      floatArray6[2] = (float) 1360;
      floatArray6[3] = (float) 1360;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[0];
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[7];
      floatArray8[0] = (-392.0F);
      floatArray8[1] = (float) (-623);
      floatArray8[2] = (float) (-623);
      floatArray8[3] = (float) 1360;
      floatArray8[4] = (float) 0;
      floatArray8[5] = (float) (-623);
      floatArray8[6] = (-392.0F);
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[9];
      floatArray9[0] = (float) (-623);
      floatArray9[1] = (float) (-623);
      floatArray9[2] = (float) (-623);
      floatArray9[3] = (float) (-623);
      floatArray9[4] = (float) 0;
      floatArray9[5] = (float) (-623);
      floatArray9[6] = (float) (-623);
      floatArray9[7] = (-1579.0F);
      floatArray9[8] = (float) 0;
      floatArray0[8] = floatArray9;
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 0, floatArray0);
      ROI rOI0 = new ROI();
      rOI0.setROI((-1042), 0, 0, (-1541));
      int int0 = (-3770);
      realGrayImage0.addbuffer(344, 0, (-3770), (-1541), 2400.665F);
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-3770), (-3879), (float) (-1042), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5420
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.clip(0, (-623));
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage((-623), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.addbuffer(34, 1, (float) 1);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      // Undeclared exception!
      realGrayImage1.addbuffer(34, 1495, (float) 1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      realGrayImage1.toString();
      // Undeclared exception!
      realGrayImage1.median(1349, rOI0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          float[] floatArray0 = new float[2];
          floatArray0[0] = (float) 0;
          floatArray0[1] = (float) 1;
          RealGrayImage realGrayImage0 = new RealGrayImage(1, 0, floatArray0);
          assertNotNull(realGrayImage0);
          assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
          assertEquals(2, floatArray0.length);
          assertEquals(0, realGrayImage0.Y());
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          assertEquals(1, realGrayImage0.X());
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          
          RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
          assertNotNull(realGrayImage1);
          assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
          assertFalse(realGrayImage1.equals((Object)realGrayImage0));
          assertEquals(2, floatArray0.length);
          assertEquals(0, realGrayImage0.Y());
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          assertEquals(1, realGrayImage0.X());
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
          assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
          assertEquals(1, realGrayImage1.X());
          assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
          assertEquals(0, realGrayImage1.Y());
          assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
          assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
          
          float float0 = realGrayImage0.addSum();
          assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
          assertFalse(realGrayImage0.equals((Object)realGrayImage1));
          assertEquals(0.0F, float0, 0.01F);
          assertNotSame(realGrayImage0, realGrayImage1);
          assertEquals(2, floatArray0.length);
          assertEquals(0, realGrayImage0.Y());
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          assertEquals(1, realGrayImage0.X());
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          
          byte[] byteArray0 = new byte[3];
          byteArray0[0] = (byte)41;
          byte byte0 = (byte)0;
          byteArray0[1] = (byte)0;
          IndexColorModel indexColorModel0 = null;
          try {
            indexColorModel0 = new IndexColorModel(0, 4, byteArray0, byteArray0, byteArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.IndexColorModel.<init>(IndexColorModel.java:169)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      realGrayImage0.addbuffer(1, 0, 70, 8, 926.888F);
      ROI rOI2 = new ROI();
      realGrayImage0.X();
      RealGrayImage realGrayImage1 = new RealGrayImage(8, 8);
      // Undeclared exception!
      try { 
        realGrayImage1.clip((-2963), 0, rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 32);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      realGrayImage0.clear((Float) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 0;
      Image image0 = null;
      RealGrayImage realGrayImage0 = new RealGrayImage(30, 0);
      realGrayImage0.copy();
      realGrayImage0.absSum();
      // Undeclared exception!
      realGrayImage0.addbuffer(30, 3424, (float) 3424);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.copy();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
          ROI rOI0 = new ROI();
          realGrayImage0.X();
          RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
          realGrayImage1.toString();
          // Undeclared exception!
          try { 
            realGrayImage0.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          float[][] floatArray0 = new float[0][3];
          RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
          // Undeclared exception!
          try { 
            realGrayImage0.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1360);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 8, 0.0F);
      realGrayImage1.addbuffer(0, 0, 0, 0, 327.0F);
      realGrayImage0.toString();
      realGrayImage0.X();
      rOI0.setROI(1360, (-1456), 0, (-1456));
      ROI rOI1 = new ROI(1360, 1360, 591, 591);
      realGrayImage0.toString();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      realGrayImage1.addbuffer(8, 8, 693, 544, 0.0F);
      realGrayImage2.toString();
      Integer integer0 = new Integer(8);
      realGrayImage1.diff(realGrayImage0);
      realGrayImage0.min();
      // Undeclared exception!
      try { 
        realGrayImage1.add(realGrayImage0, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      // Undeclared exception!
      try { 
        realGrayImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1602, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.addbuffer(8, 1, (float) 1602);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(0, (-3240), (float) 1602);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 1602;
      int int1 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(1602, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(0, (-3240), (float) 1602);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(474, 1533);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      float[][] floatArray0 = new float[0][0];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      Integer integer0 = new Integer(1533);
      realGrayImage1.diff(realGrayImage0);
      realGrayImage1.add(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(544, 544);
      assertNotNull(realGrayImage0);
      assertEquals(544, realGrayImage0.X());
      assertEquals(544, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = realGrayImage0.X();
      assertEquals(544, int0);
      assertEquals(544, realGrayImage0.X());
      assertEquals(544, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(544, realGrayImage0.X());
      assertEquals(544, realGrayImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1, realGrayImage1.X());
      
      int int1 = 1340;
      // Undeclared exception!
      realGrayImage0.clear();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(1602, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1602, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(34, 1, (float) 1602);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1602, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(8.7257736E7, realGrayImage1.sqrSum(), 0.01);
      assertEquals(54468.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(34, realGrayImage1.X());
      assertEquals(54468.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1602.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1602.0F, realGrayImage1.min(), 0.01F);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1602, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1602, realGrayImage2.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(realGrayImage2, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(30, 0);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(30, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(30, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(30, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      
      float float0 = realGrayImage0.absSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(30, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(30, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(30, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      RealGrayImage realGrayImage3 = realGrayImage2.diff(realGrayImage1);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(30, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(30, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(30, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(30, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      assertNotNull(realGrayImage0);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1349, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1349, realGrayImage0.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1349, realGrayImage1.X());
      
      // Undeclared exception!
      try { 
        realGrayImage1.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(544, 544);
      assertNotNull(realGrayImage0);
      assertEquals(544, realGrayImage0.X());
      assertEquals(544, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = realGrayImage0.X();
      assertEquals(544, int0);
      assertEquals(544, realGrayImage0.X());
      assertEquals(544, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(544, realGrayImage0.X());
      assertEquals(544, realGrayImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      
      int int1 = 1340;
      String string0 = realGrayImage1.toString(rOI0);
      assertNotNull(string0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals("1:1\nnull \n", string0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(544, realGrayImage0.X());
      assertEquals(544, realGrayImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      
      rOI0.setROI(1353, (-2491), 1339, 1400);
      assertEquals(1339, rOI0.ux());
      assertEquals((-2491), rOI0.uy());
      assertEquals(3892, rOI0.Y());
      assertEquals(1400, rOI0.ly());
      assertEquals(1353, rOI0.lx());
      assertEquals(15, rOI0.X());
      
      // Undeclared exception!
      realGrayImage0.clear();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 2;
      RealGrayImage realGrayImage0 = new RealGrayImage(2, 1210);
      assertNotNull(realGrayImage0);
      assertEquals(1210, realGrayImage0.Y());
      assertEquals(2, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = realGrayImage0.X();
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertEquals(1210, realGrayImage0.Y());
      assertEquals(2, realGrayImage0.X());
      
      // Undeclared exception!
      try { 
        realGrayImage0.divide(635.962F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      float float0 = realGrayImage0.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      RealGrayImage realGrayImage2 = realGrayImage1.clear((Float) null);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(8, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage1.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) null);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      float float0 = realGrayImage0.absSum();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      String string0 = realGrayImage1.toString();
      assertNotNull(string0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals("0:8\n", string0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage1.median(8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      
      int int1 = 1340;
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(0, 255, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1602, 361);
      assertNotNull(realGrayImage0);
      assertEquals(361, realGrayImage0.Y());
      assertEquals(1602, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI((-823), (-823), (-823), 361);
      assertEquals((-823), rOI0.lx());
      assertEquals(361, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1185, rOI0.Y());
      assertEquals((-823), rOI0.uy());
      assertEquals((-823), rOI0.ux());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(1185, int1);
      assertEquals((-823), rOI0.lx());
      assertEquals(361, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1185, rOI0.Y());
      assertEquals((-823), rOI0.uy());
      assertEquals((-823), rOI0.ux());
      
      // Undeclared exception!
      try { 
        realGrayImage0.clip(710, 710, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -823
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1602, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(1602, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(1602, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1602, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(34, 1, 1602, 1555, 4170.889F);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(1602, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(141810.27F, realGrayImage2.absSum(), 0.01F);
      assertEquals(4170.889F, realGrayImage2.max(), 0.01F);
      assertEquals(34, realGrayImage2.X());
      assertEquals(5.91474744E8, realGrayImage2.sqrSum(), 0.01);
      assertEquals(4170.889F, realGrayImage2.min(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(141810.27F, realGrayImage2.addSum(), 0.01F);
      
      RealGrayImage realGrayImage3 = null;
      try {
        realGrayImage3 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realGrayImage0.add((float) 1340, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      
      rOI0.setROI(0, 0, (-1456), 0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals((-1456), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1457, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realGrayImage0.median(8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 3379);
      assertNotNull(realGrayImage0);
      assertEquals(1, realGrayImage0.X());
      assertEquals(3379, realGrayImage0.Y());
      
      ROI rOI0 = new ROI((-1315), 0, (-1315), (-1315));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals((-1315), int0);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1315), int2);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1315), int3);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals((-1315), int4);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int5 = rOI0.uy();
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals((-1315), int5);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int6 = rOI0.ux();
      assertFalse(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertEquals((-1315), int6);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int7 = rOI0.lx();
      assertTrue(int7 == int3);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertFalse(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertEquals((-1315), int7);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int8 = rOI0.uy();
      assertTrue(int8 == int2);
      assertTrue(int8 == int5);
      assertTrue(int8 == int3);
      assertFalse(int8 == int1);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertEquals((-1315), int8);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int9 = rOI0.ly();
      assertFalse(int9 == int0);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int3);
      assertFalse(int9 == int6);
      assertTrue(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int2);
      assertEquals(0, int9);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int10 = rOI0.ux();
      assertFalse(int10 == int9);
      assertTrue(int10 == int3);
      assertFalse(int10 == int1);
      assertTrue(int10 == int5);
      assertTrue(int10 == int4);
      assertTrue(int10 == int7);
      assertTrue(int10 == int8);
      assertTrue(int10 == int2);
      assertTrue(int10 == int0);
      assertTrue(int10 == int6);
      assertEquals((-1315), int10);
      assertEquals(0, rOI0.ly());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      rOI0.setROI(1001, (-16777216), (-16777216), (-1315));
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      int int11 = new Integer((-1315));
      assertFalse(int11 == int1);
      assertTrue(int11 == int10);
      assertTrue(int11 == int5);
      assertTrue(int11 == int8);
      assertTrue(int11 == int4);
      assertTrue(int11 == int7);
      assertTrue(int11 == int2);
      assertTrue(int11 == int0);
      assertTrue(int11 == int6);
      assertFalse(int11 == int9);
      assertTrue(int11 == int3);
      assertEquals((-1315), int11);
      
      int int12 = rOI0.lx();
      assertFalse(int12 == int2);
      assertFalse(int12 == int1);
      assertFalse(int12 == int4);
      assertFalse(int12 == int7);
      assertFalse(int12 == int9);
      assertFalse(int12 == int8);
      assertFalse(int12 == int10);
      assertFalse(int12 == int5);
      assertFalse(int12 == int3);
      assertFalse(int12 == int6);
      assertFalse(int12 == int0);
      assertFalse(int12 == int11);
      assertEquals(1001, int12);
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      int int13 = rOI0.ux();
      assertFalse(int13 == int4);
      assertFalse(int13 == int7);
      assertFalse(int13 == int8);
      assertFalse(int13 == int9);
      assertFalse(int13 == int2);
      assertFalse(int13 == int12);
      assertFalse(int13 == int6);
      assertFalse(int13 == int3);
      assertFalse(int13 == int5);
      assertFalse(int13 == int10);
      assertFalse(int13 == int1);
      assertFalse(int13 == int11);
      assertFalse(int13 == int0);
      assertEquals((-16777216), int13);
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      int int14 = rOI0.lx();
      assertFalse(int14 == int8);
      assertFalse(int14 == int9);
      assertFalse(int14 == int13);
      assertFalse(int14 == int11);
      assertFalse(int14 == int0);
      assertFalse(int14 == int5);
      assertFalse(int14 == int1);
      assertFalse(int14 == int4);
      assertFalse(int14 == int7);
      assertTrue(int14 == int12);
      assertFalse(int14 == int3);
      assertFalse(int14 == int6);
      assertFalse(int14 == int10);
      assertFalse(int14 == int2);
      assertEquals(1001, int14);
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      int int15 = rOI0.ux();
      assertFalse(int15 == int8);
      assertFalse(int15 == int2);
      assertFalse(int15 == int9);
      assertFalse(int15 == int11);
      assertFalse(int15 == int0);
      assertFalse(int15 == int3);
      assertFalse(int15 == int10);
      assertFalse(int15 == int6);
      assertFalse(int15 == int1);
      assertFalse(int15 == int12);
      assertFalse(int15 == int14);
      assertFalse(int15 == int4);
      assertFalse(int15 == int7);
      assertTrue(int15 == int13);
      assertFalse(int15 == int5);
      assertEquals((-16777216), int15);
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      int int16 = rOI0.ux();
      assertTrue(int16 == int15);
      assertFalse(int16 == int5);
      assertFalse(int16 == int14);
      assertFalse(int16 == int1);
      assertFalse(int16 == int0);
      assertTrue(int16 == int13);
      assertFalse(int16 == int11);
      assertFalse(int16 == int8);
      assertFalse(int16 == int9);
      assertFalse(int16 == int4);
      assertFalse(int16 == int7);
      assertFalse(int16 == int2);
      assertFalse(int16 == int10);
      assertFalse(int16 == int12);
      assertFalse(int16 == int3);
      assertFalse(int16 == int6);
      assertEquals((-16777216), int16);
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      int int17 = rOI0.ux();
      assertFalse(int17 == int8);
      assertFalse(int17 == int9);
      assertTrue(int17 == int16);
      assertFalse(int17 == int11);
      assertFalse(int17 == int0);
      assertTrue(int17 == int13);
      assertFalse(int17 == int5);
      assertFalse(int17 == int1);
      assertFalse(int17 == int12);
      assertTrue(int17 == int15);
      assertFalse(int17 == int4);
      assertFalse(int17 == int7);
      assertFalse(int17 == int14);
      assertFalse(int17 == int3);
      assertFalse(int17 == int6);
      assertFalse(int17 == int10);
      assertFalse(int17 == int2);
      assertEquals((-16777216), int17);
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      int int18 = rOI0.lx();
      assertFalse(int18 == int5);
      assertFalse(int18 == int17);
      assertFalse(int18 == int1);
      assertFalse(int18 == int15);
      assertFalse(int18 == int6);
      assertFalse(int18 == int4);
      assertFalse(int18 == int7);
      assertTrue(int18 == int12);
      assertFalse(int18 == int10);
      assertTrue(int18 == int14);
      assertFalse(int18 == int3);
      assertFalse(int18 == int16);
      assertFalse(int18 == int2);
      assertFalse(int18 == int11);
      assertFalse(int18 == int8);
      assertFalse(int18 == int9);
      assertFalse(int18 == int13);
      assertFalse(int18 == int0);
      assertEquals(1001, int18);
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      int int19 = rOI0.ux();
      assertFalse(int19 == int5);
      assertFalse(int19 == int10);
      assertFalse(int19 == int18);
      assertFalse(int19 == int3);
      assertTrue(int19 == int13);
      assertFalse(int19 == int0);
      assertTrue(int19 == int15);
      assertFalse(int19 == int14);
      assertFalse(int19 == int4);
      assertFalse(int19 == int7);
      assertFalse(int19 == int11);
      assertFalse(int19 == int12);
      assertTrue(int19 == int16);
      assertFalse(int19 == int1);
      assertFalse(int19 == int6);
      assertTrue(int19 == int17);
      assertFalse(int19 == int8);
      assertFalse(int19 == int9);
      assertFalse(int19 == int2);
      assertEquals((-16777216), int19);
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      int int20 = rOI0.ly();
      assertFalse(int20 == int15);
      assertTrue(int20 == int8);
      assertFalse(int20 == int18);
      assertTrue(int20 == int2);
      assertFalse(int20 == int9);
      assertFalse(int20 == int1);
      assertTrue(int20 == int10);
      assertFalse(int20 == int19);
      assertFalse(int20 == int13);
      assertFalse(int20 == int16);
      assertFalse(int20 == int17);
      assertFalse(int20 == int12);
      assertTrue(int20 == int3);
      assertTrue(int20 == int6);
      assertTrue(int20 == int4);
      assertTrue(int20 == int7);
      assertTrue(int20 == int5);
      assertFalse(int20 == int14);
      assertTrue(int20 == int11);
      assertTrue(int20 == int0);
      assertEquals((-1315), int20);
      assertEquals((-1315), rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16778218, rOI0.X());
      assertEquals(16775902, rOI0.Y());
      assertEquals(1001, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((float) 3379, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 0;
          RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, (float[]) null);
          assertNotNull(realGrayImage0);
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0, realGrayImage0.X());
          assertEquals(0, realGrayImage0.Y());
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          
          String string0 = realGrayImage0.toString();
          assertNotNull(string0);
          assertEquals("0:0\n", string0);
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0, realGrayImage0.X());
          assertEquals(0, realGrayImage0.Y());
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          
          // Undeclared exception!
          try { 
            realGrayImage0.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1360);
      assertNotNull(realGrayImage0);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1360, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      
      int int0 = 1330;
      RealGrayImage realGrayImage2 = new RealGrayImage(0, 1330);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(1330, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage1.multiply(realGrayImage2);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1360, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(1330, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1360, realGrayImage3.Y());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      
      // Undeclared exception!
      realGrayImage1.addbuffer(640, 5811, (float) 640);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 1349;
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      assertNotNull(realGrayImage0);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1349, realGrayImage0.X());
      
      int int1 = (-623);
      int int2 = 744;
      // Undeclared exception!
      try { 
        realGrayImage0.clip(1, 744);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 0;
      Image image0 = null;
      int int1 = 30;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 30);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(30, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(30, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(30, realGrayImage1.Y());
      
      float float0 = new Integer(30);
      assertEquals(30, float0, 0.01F);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(30, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(30, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(30, realGrayImage2.Y());
      assertEquals(0, realGrayImage2.X());
      
      // Undeclared exception!
      try { 
        realGrayImage2.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.median((-516), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 1349;
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      assertNotNull(realGrayImage0);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1349, realGrayImage0.X());
      
      int int1 = 744;
      // Undeclared exception!
      try { 
        realGrayImage0.clip(1, 744);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-2261);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((-2261), (-2261));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 3379);
      assertNotNull(realGrayImage0);
      assertEquals(3379, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      
      ROI rOI0 = new ROI((-1315), 0, (-1315), (-1315));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals((-1315), int0);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1315), int2);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1315), int3);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals((-1315), int4);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int5 = rOI0.uy();
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals((-1315), int5);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int6 = rOI0.ux();
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertEquals((-1315), int6);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int7 = rOI0.lx();
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertFalse(int7 == int1);
      assertEquals((-1315), int7);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int8 = rOI0.uy();
      assertTrue(int8 == int4);
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertFalse(int8 == int1);
      assertTrue(int8 == int6);
      assertEquals((-1315), int8);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int9 = rOI0.ly();
      assertFalse(int9 == int3);
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int8);
      assertFalse(int9 == int6);
      assertTrue(int9 == int1);
      assertFalse(int9 == int2);
      assertFalse(int9 == int5);
      assertEquals(0, int9);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int10 = rOI0.ux();
      assertFalse(int10 == int1);
      assertFalse(int10 == int9);
      assertTrue(int10 == int2);
      assertTrue(int10 == int6);
      assertTrue(int10 == int8);
      assertTrue(int10 == int5);
      assertTrue(int10 == int3);
      assertTrue(int10 == int0);
      assertTrue(int10 == int4);
      assertTrue(int10 == int7);
      assertEquals((-1315), int10);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int11 = rOI0.ux();
      assertTrue(int11 == int3);
      assertTrue(int11 == int0);
      assertTrue(int11 == int2);
      assertTrue(int11 == int7);
      assertFalse(int11 == int9);
      assertTrue(int11 == int5);
      assertTrue(int11 == int4);
      assertTrue(int11 == int8);
      assertTrue(int11 == int10);
      assertFalse(int11 == int1);
      assertTrue(int11 == int6);
      assertEquals((-1315), int11);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int12 = rOI0.lx();
      assertTrue(int12 == int0);
      assertTrue(int12 == int2);
      assertTrue(int12 == int8);
      assertTrue(int12 == int6);
      assertFalse(int12 == int9);
      assertTrue(int12 == int4);
      assertFalse(int12 == int1);
      assertTrue(int12 == int11);
      assertTrue(int12 == int5);
      assertTrue(int12 == int10);
      assertTrue(int12 == int7);
      assertTrue(int12 == int3);
      assertEquals((-1315), int12);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int13 = rOI0.ux();
      assertTrue(int13 == int5);
      assertTrue(int13 == int0);
      assertTrue(int13 == int12);
      assertTrue(int13 == int11);
      assertTrue(int13 == int4);
      assertTrue(int13 == int6);
      assertTrue(int13 == int3);
      assertTrue(int13 == int7);
      assertTrue(int13 == int2);
      assertTrue(int13 == int10);
      assertFalse(int13 == int9);
      assertFalse(int13 == int1);
      assertTrue(int13 == int8);
      assertEquals((-1315), int13);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int14 = rOI0.lx();
      assertTrue(int14 == int5);
      assertTrue(int14 == int0);
      assertTrue(int14 == int7);
      assertTrue(int14 == int4);
      assertTrue(int14 == int12);
      assertTrue(int14 == int6);
      assertTrue(int14 == int13);
      assertTrue(int14 == int11);
      assertTrue(int14 == int3);
      assertTrue(int14 == int2);
      assertTrue(int14 == int10);
      assertFalse(int14 == int9);
      assertFalse(int14 == int1);
      assertTrue(int14 == int8);
      assertEquals((-1315), int14);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int15 = rOI0.ux();
      assertTrue(int15 == int10);
      assertTrue(int15 == int2);
      assertTrue(int15 == int7);
      assertTrue(int15 == int3);
      assertTrue(int15 == int6);
      assertTrue(int15 == int13);
      assertTrue(int15 == int11);
      assertTrue(int15 == int12);
      assertFalse(int15 == int1);
      assertFalse(int15 == int9);
      assertTrue(int15 == int5);
      assertTrue(int15 == int4);
      assertTrue(int15 == int0);
      assertTrue(int15 == int14);
      assertTrue(int15 == int8);
      assertEquals((-1315), int15);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int16 = rOI0.ux();
      assertTrue(int16 == int5);
      assertTrue(int16 == int6);
      assertFalse(int16 == int1);
      assertFalse(int16 == int9);
      assertTrue(int16 == int12);
      assertTrue(int16 == int14);
      assertTrue(int16 == int8);
      assertTrue(int16 == int15);
      assertTrue(int16 == int7);
      assertTrue(int16 == int10);
      assertTrue(int16 == int2);
      assertTrue(int16 == int0);
      assertTrue(int16 == int13);
      assertTrue(int16 == int11);
      assertTrue(int16 == int4);
      assertTrue(int16 == int3);
      assertEquals((-1315), int16);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int17 = rOI0.ux();
      assertTrue(int17 == int4);
      assertTrue(int17 == int12);
      assertFalse(int17 == int9);
      assertTrue(int17 == int5);
      assertTrue(int17 == int15);
      assertFalse(int17 == int1);
      assertTrue(int17 == int16);
      assertTrue(int17 == int8);
      assertTrue(int17 == int14);
      assertTrue(int17 == int13);
      assertTrue(int17 == int7);
      assertTrue(int17 == int0);
      assertTrue(int17 == int2);
      assertTrue(int17 == int10);
      assertTrue(int17 == int6);
      assertTrue(int17 == int3);
      assertTrue(int17 == int11);
      assertEquals((-1315), int17);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int18 = rOI0.lx();
      assertTrue(int18 == int3);
      assertTrue(int18 == int15);
      assertTrue(int18 == int14);
      assertTrue(int18 == int8);
      assertTrue(int18 == int11);
      assertTrue(int18 == int16);
      assertFalse(int18 == int1);
      assertFalse(int18 == int9);
      assertTrue(int18 == int7);
      assertTrue(int18 == int4);
      assertTrue(int18 == int2);
      assertTrue(int18 == int10);
      assertTrue(int18 == int0);
      assertTrue(int18 == int6);
      assertTrue(int18 == int13);
      assertTrue(int18 == int12);
      assertTrue(int18 == int17);
      assertTrue(int18 == int5);
      assertEquals((-1315), int18);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int19 = rOI0.ux();
      assertTrue(int19 == int6);
      assertTrue(int19 == int17);
      assertTrue(int19 == int5);
      assertTrue(int19 == int0);
      assertTrue(int19 == int4);
      assertTrue(int19 == int13);
      assertTrue(int19 == int11);
      assertTrue(int19 == int12);
      assertTrue(int19 == int2);
      assertTrue(int19 == int15);
      assertTrue(int19 == int10);
      assertTrue(int19 == int8);
      assertTrue(int19 == int16);
      assertTrue(int19 == int7);
      assertTrue(int19 == int3);
      assertTrue(int19 == int18);
      assertTrue(int19 == int14);
      assertFalse(int19 == int1);
      assertFalse(int19 == int9);
      assertEquals((-1315), int19);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      int int20 = rOI0.ly();
      assertFalse(int20 == int3);
      assertFalse(int20 == int16);
      assertFalse(int20 == int4);
      assertFalse(int20 == int2);
      assertFalse(int20 == int10);
      assertTrue(int20 == int9);
      assertFalse(int20 == int15);
      assertFalse(int20 == int14);
      assertFalse(int20 == int8);
      assertFalse(int20 == int18);
      assertFalse(int20 == int0);
      assertFalse(int20 == int5);
      assertFalse(int20 == int7);
      assertFalse(int20 == int19);
      assertFalse(int20 == int17);
      assertTrue(int20 == int1);
      assertFalse(int20 == int13);
      assertFalse(int20 == int12);
      assertFalse(int20 == int11);
      assertFalse(int20 == int6);
      assertEquals(0, int20);
      assertEquals(0, rOI0.ly());
      assertEquals(1316, rOI0.Y());
      assertEquals((-1315), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-1315), rOI0.ux());
      assertEquals((-1315), rOI0.uy());
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((float) 3379, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1315
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      float[][] floatArray0 = new float[2][1];
      float[] floatArray1 = new float[6];
      floatArray1[1] = (float) 0;
      floatArray1[2] = 1.0F;
      floatArray1[4] = (float) 1520;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 1520;
      floatArray2[1] = 1.0F;
      floatArray0[1] = floatArray2;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      assertNotNull(realGrayImage0);
      assertEquals(1520, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals(1520, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, floatArray0.length);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      Integer integer0 = new Integer(1520);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1520, (int)integer0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.diff(realGrayImage0);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertEquals(1520, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage1.add(realGrayImage0);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertEquals(1520, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      
      realGrayImage2.median(0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage3);
      assertEquals(0, floatArray0.length);
      assertEquals(1520, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1520, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1520, realGrayImage0.Y());
      
      rOI0.setROI(0, 1520, 8, 0);
      assertEquals(1521, rOI0.Y());
      assertEquals(1520, rOI0.ly());
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.diff(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1520, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1520, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      String string0 = realGrayImage0.toString();
      assertNotNull(string0);
      assertEquals("0:1520\n", string0);
      assertSame(realGrayImage0, realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1520, realGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage0.divide(realGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1360);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      rOI0.setROI((-1), 691, 227, (-1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals((-1), rOI0.uy());
      assertEquals((-1), rOI0.ux());
      assertEquals(693, rOI0.Y());
      assertEquals(227, rOI0.lx());
      assertEquals(691, rOI0.ly());
      assertEquals(229, rOI0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.diff((RealGrayImage) null);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(1360, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.divide((RealGrayImage) null, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 0;
          int int1 = 0;
          float[] floatArray0 = new float[6];
          floatArray0[0] = (float) 0;
          floatArray0[1] = (float) 0;
          floatArray0[2] = 0.0F;
          floatArray0[3] = (float) 0;
          floatArray0[4] = (float) 0;
          floatArray0[5] = (float) 0;
          RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
          assertNotNull(realGrayImage0);
          assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
          assertEquals(6, floatArray0.length);
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          assertEquals(0, realGrayImage0.X());
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0, realGrayImage0.Y());
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          
          float float0 = 1.0F;
          // Undeclared exception!
          try { 
            realGrayImage0.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear();
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      RealGrayImage realGrayImage2 = null;
      try {
        realGrayImage2 = new RealGrayImage((-654), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1360);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      realGrayImage0.clip(1360, (-623));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage((-623), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      float float0 = realGrayImage0.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(128, 2946);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(2946, realGrayImage2.Y());
      assertEquals(128, realGrayImage2.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      RealGrayImage realGrayImage3 = new RealGrayImage(255, 1);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(255, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      
      int int0 = realGrayImage0.X();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0, int0);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 0;
      Image image0 = null;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      float float0 = realGrayImage0.absSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(0, 3424, (float) 3424);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(3424, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realGrayImage3.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(18, 8);
      assertNotNull(realGrayImage0);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(18, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(8, realGrayImage0.Y());
      assertEquals(18, realGrayImage0.X());
      assertEquals(18, realGrayImage1.X());
      assertEquals(8, realGrayImage1.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(6, 6);
      assertNotNull(realGrayImage0);
      assertEquals(6, realGrayImage0.Y());
      assertEquals(6, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) null);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(6, realGrayImage0.Y());
      assertEquals(6, realGrayImage0.X());
      assertEquals(6, realGrayImage1.X());
      assertEquals(6, realGrayImage1.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage1.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 8;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = 1;
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int2 = (-467);
      int int3 = (-1283);
      rOI0.setROI(0, (-1042), (-467), (-1283));
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(468, rOI0.X());
      assertEquals((-1042), rOI0.ly());
      assertEquals(242, rOI0.Y());
      assertEquals((-1283), rOI0.uy());
      assertEquals((-467), rOI0.ux());
      
      int int4 = (-3770);
      int int5 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int6 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertEquals(242, int6);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(468, rOI0.X());
      assertEquals((-1042), rOI0.ly());
      assertEquals(242, rOI0.Y());
      assertEquals((-1283), rOI0.uy());
      assertEquals((-467), rOI0.ux());
      
      int int7 = (-3879);
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-1283), 1, 403.0F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1283
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      assertNotNull(realGrayImage0);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1349, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(744, 1349);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(744, realGrayImage1.X());
      assertEquals(1349, realGrayImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realGrayImage0.add(480.72546F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1360);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      int int0 = (-623);
      int int1 = (-2147418619);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1360, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      
      int int2 = 1330;
      RealGrayImage realGrayImage2 = new RealGrayImage(0, 1330);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(1330, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage1.multiply(realGrayImage2);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1360, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(1360, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1330, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1360, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      
      float[][] floatArray0 = new float[2][3];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 1360;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 1330;
      floatArray0[1] = floatArray2;
      RealGrayImage realGrayImage4 = null;
      try {
        realGrayImage4 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 1520;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1520, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = realGrayImage0.X();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1520, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      // Undeclared exception!
      realGrayImage0.addbuffer(693, 1520, 652, 10, 1292.0F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-2591);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(1355, (-2591));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      float float0 = realGrayImage0.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      
      RealGrayImage realGrayImage2 = new RealGrayImage(128, 2969);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(2969, realGrayImage2.Y());
      assertEquals(128, realGrayImage2.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.lx();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.lx();
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int5 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int6 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int7 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int0);
      assertFalse(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertFalse(int7 == int6);
      assertTrue(int7 == int1);
      assertEquals(0, int7);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      
      int int8 = rOI2.ux();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int8 == int4);
      assertFalse(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertFalse(int8 == int6);
      assertTrue(int8 == int3);
      assertTrue(int8 == int2);
      assertEquals(0, int8);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      
      int int9 = rOI1.ux();
      assertFalse(int9 == int5);
      assertTrue(int9 == int2);
      assertTrue(int9 == int4);
      assertTrue(int9 == int1);
      assertTrue(int9 == int3);
      assertTrue(int9 == int8);
      assertTrue(int9 == int7);
      assertTrue(int9 == int0);
      assertFalse(int9 == int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      assertEquals(0, int9);
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      int int10 = rOI0.lx();
      assertTrue(int10 == int0);
      assertTrue(int10 == int8);
      assertTrue(int10 == int3);
      assertFalse(int10 == int5);
      assertTrue(int10 == int4);
      assertFalse(int10 == int6);
      assertTrue(int10 == int1);
      assertTrue(int10 == int2);
      assertTrue(int10 == int9);
      assertTrue(int10 == int7);
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, int10);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int11 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int11 == int8);
      assertTrue(int11 == int0);
      assertTrue(int11 == int3);
      assertTrue(int11 == int10);
      assertFalse(int11 == int6);
      assertTrue(int11 == int2);
      assertFalse(int11 == int5);
      assertTrue(int11 == int9);
      assertTrue(int11 == int4);
      assertTrue(int11 == int1);
      assertTrue(int11 == int7);
      assertEquals(0, int11);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int12 = rOI1.ly();
      assertTrue(int12 == int3);
      assertTrue(int12 == int0);
      assertTrue(int12 == int4);
      assertTrue(int12 == int8);
      assertTrue(int12 == int2);
      assertFalse(int12 == int6);
      assertTrue(int12 == int10);
      assertFalse(int12 == int5);
      assertTrue(int12 == int1);
      assertTrue(int12 == int11);
      assertTrue(int12 == int9);
      assertTrue(int12 == int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      assertEquals(0, int12);
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      // Undeclared exception!
      try { 
        realGrayImage1.subtract(32767.0F, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1520, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1520, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      int int1 = (-1);
      int int2 = 3242;
      // Undeclared exception!
      try { 
        realGrayImage1.multiply((-1647.4F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 0, floatArray0);
      assertNotNull(realGrayImage0);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1351, 1424, 1347, 2758);
      assertEquals(5, rOI0.X());
      assertEquals(1335, rOI0.Y());
      assertEquals(1347, rOI0.ux());
      assertEquals(2758, rOI0.ly());
      assertEquals(1424, rOI0.uy());
      assertEquals(1351, rOI0.lx());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(2758, 0, (-2758.4F));
      assertNotNull(realGrayImage1);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2758, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-3770), (-3879), (float) (-1042), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2455
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 1602;
          RealGrayImage realGrayImage0 = new RealGrayImage(1602, 0);
          assertNotNull(realGrayImage0);
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          assertEquals(0, realGrayImage0.Y());
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(1602, realGrayImage0.X());
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          
          RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
          assertNotNull(realGrayImage1);
          assertFalse(realGrayImage1.equals((Object)realGrayImage0));
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          assertEquals(0, realGrayImage0.Y());
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(1602, realGrayImage0.X());
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
          assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
          assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
          assertEquals(1602, realGrayImage1.X());
          assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
          assertEquals(0, realGrayImage1.Y());
          assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
          
          RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(34, 1, (float) 1602);
          assertNotNull(realGrayImage2);
          assertFalse(realGrayImage0.equals((Object)realGrayImage1));
          assertFalse(realGrayImage1.equals((Object)realGrayImage0));
          assertFalse(realGrayImage2.equals((Object)realGrayImage0));
          assertFalse(realGrayImage2.equals((Object)realGrayImage1));
          assertNotSame(realGrayImage0, realGrayImage2);
          assertNotSame(realGrayImage0, realGrayImage1);
          assertNotSame(realGrayImage1, realGrayImage0);
          assertNotSame(realGrayImage1, realGrayImage2);
          assertNotSame(realGrayImage2, realGrayImage0);
          assertNotSame(realGrayImage2, realGrayImage1);
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          assertEquals(0, realGrayImage0.Y());
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(1602, realGrayImage0.X());
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
          assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
          assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
          assertEquals(1602, realGrayImage1.X());
          assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
          assertEquals(0, realGrayImage1.Y());
          assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
          assertEquals(8.7257736E7, realGrayImage2.sqrSum(), 0.01);
          assertEquals(1602.0F, realGrayImage2.min(), 0.01F);
          assertEquals(1602.0F, realGrayImage2.max(), 0.01F);
          assertEquals(34, realGrayImage2.X());
          assertEquals(54468.0F, realGrayImage2.addSum(), 0.01F);
          assertEquals(1, realGrayImage2.Y());
          assertEquals(54468.0F, realGrayImage2.absSum(), 0.01F);
          
          // Undeclared exception!
          try { 
            realGrayImage2.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
          assertNotNull(realGrayImage0);
          assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
          assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
          assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
          assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
          assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
          assertEquals(0, realGrayImage0.X());
          assertEquals(0, realGrayImage0.Y());
          
          // Undeclared exception!
          try { 
            realGrayImage0.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 0, floatArray0);
      assertNotNull(realGrayImage0);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-3770), (-3879), (float) (-1042), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3879
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      int int1 = 1356;
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(255, 1356, (float) 1340);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1356
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(27, 8);
      assertNotNull(realGrayImage0);
      assertEquals(27, realGrayImage0.X());
      assertEquals(8, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(27, realGrayImage0.X());
      assertEquals(8, realGrayImage0.Y());
      assertEquals(8, realGrayImage1.Y());
      assertEquals(27, realGrayImage1.X());
      
      realGrayImage0.median((-516), rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(27, realGrayImage0.X());
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1349);
      assertNotNull(realGrayImage0);
      assertEquals(1349, realGrayImage0.X());
      assertEquals(1349, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Image image0 = null;
      RealGrayImage realGrayImage0 = new RealGrayImage(567, 567);
      assertNotNull(realGrayImage0);
      assertEquals(567, realGrayImage0.Y());
      assertEquals(567, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      realGrayImage0.absSum();
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      int int0 = 4458;
      Integer integer0 = new Integer(int0);
      RealGrayImage realGrayImage3 = new RealGrayImage(image0);
      realGrayImage1.diff(realGrayImage2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 1602;
      RealGrayImage realGrayImage0 = new RealGrayImage(1602, 1602);
      assertNotNull(realGrayImage0);
      assertEquals(1602, realGrayImage0.Y());
      assertEquals(1602, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(34, 1, (float) 1602);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(1602, realGrayImage0.Y());
      assertEquals(1602, realGrayImage0.X());
      assertEquals(34, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[][] floatArray0 = new float[7][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 1543.6045F;
      floatArray1[1] = 1673.584F;
      floatArray1[2] = (-628.439F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-504.87F);
      floatArray1[6] = (-2147.8657F);
      floatArray1[7] = 32767.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-2147.8657F);
      floatArray2[1] = 32767.0F;
      floatArray2[2] = 1673.584F;
      floatArray2[3] = 32767.0F;
      floatArray2[4] = (-628.439F);
      floatArray2[5] = (-2147.8657F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (-504.87F);
      floatArray3[1] = (-2147.8657F);
      floatArray3[2] = 1673.584F;
      floatArray3[3] = 32767.0F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = (-2147.8657F);
      floatArray3[6] = (-2147.8657F);
      floatArray3[7] = (-2147.8657F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 1673.584F;
      floatArray4[1] = (-2147.8657F);
      floatArray4[2] = (-628.439F);
      floatArray4[3] = (-628.439F);
      floatArray4[4] = (-504.87F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 1543.6045F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = (-839.7F);
      floatArray6[1] = 1673.584F;
      floatArray6[2] = (-504.87F);
      floatArray6[3] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[0];
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray5));
      
      floatArray0[6] = floatArray7;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      
      int int0 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(1, int0);
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      RealGrayImage realGrayImage2 = new RealGrayImage(824, 1);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(1, realGrayImage2.Y());
      assertEquals(824, realGrayImage2.X());
      
      Float float0 = Float.valueOf((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = Float.valueOf(32767.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(32767.0F, (float)float1, 0.01F);
      
      Float float2 = Float.valueOf(329.05F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(329.05F, (float)float2, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage2.clear(float2);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertEquals(329.05F, realGrayImage2.max(), 0.01F);
      assertEquals(8.9217685875E7, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(271135.78F, realGrayImage2.absSum(), 0.01F);
      assertEquals(329.05F, realGrayImage2.min(), 0.01F);
      assertEquals(271135.78F, realGrayImage2.addSum(), 0.01F);
      assertEquals(824, realGrayImage2.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(271135.78F, realGrayImage3.absSum(), 0.01F);
      assertEquals(271135.78F, realGrayImage3.addSum(), 0.01F);
      assertEquals(824, realGrayImage3.X());
      assertEquals(329.05F, realGrayImage3.max(), 0.01F);
      assertEquals(8.9217685875E7, realGrayImage3.sqrSum(), 0.01);
      assertEquals(329.05F, realGrayImage3.min(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      assertNotNull(realGrayImage0);
      assertEquals(1520, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        realGrayImage0.add(934, 360, 1721.1671F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 934
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1602, 0);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1602, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1602, realGrayImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1602, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(8, 1, (float) 1602);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1602, realGrayImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1602, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(12816.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(2.0531232E7, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1602.0F, realGrayImage2.min(), 0.01F);
      assertEquals(8, realGrayImage2.X());
      assertEquals(1602.0F, realGrayImage2.max(), 0.01F);
      assertEquals(12816.0F, realGrayImage2.addSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage3 = new RealGrayImage(8, 0);
      assertNotNull(realGrayImage3);
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(8, realGrayImage3.X());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        realGrayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-436);
      floatArray0[1] = (float) (-436);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-436);
      floatArray0[4] = (float) (-436);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(0, (-436), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(1, (-1497), 0, (-1497));
      assertEquals((-1497), rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-1497), rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals((-1497), rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-1497), rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) null);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      
      RealGrayImage realGrayImage2 = realGrayImage1.divide(264.36743F);
      assertNotNull(realGrayImage2);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(8, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      
      // Undeclared exception!
      try { 
        realGrayImage0.clip(0, 1857, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1497
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      double double0 = realGrayImage0.sqrSum();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = realGrayImage0.X();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      float float0 = realGrayImage0.absSum();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      String string0 = realGrayImage1.toString();
      assertNotNull(string0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals("0:8\n", string0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(8, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage1.addbuffer(0, (-1), 0, 1321, 255.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(17, 8);
      assertNotNull(realGrayImage0);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(17, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(8, realGrayImage0.Y());
      assertEquals(17, realGrayImage0.X());
      assertEquals(17, realGrayImage1.X());
      assertEquals(8, realGrayImage1.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.clear((Float) null);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.divide(0.0F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage1.clip((-1456), 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(2074, 2074);
      assertNotNull(realGrayImage0);
      assertEquals(2074, realGrayImage0.X());
      assertEquals(2074, realGrayImage0.Y());
      
      int int0 = (-1);
      Float float0 = Float.valueOf((-2033.426F));
      assertNotNull(float0);
      assertEquals((-2033.426F), (float)float0, 0.01F);
      
      Float float1 = Float.valueOf(457.62485F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(457.62485F, (float)float1, 0.01F);
      
      float float2 = (-3819.0F);
      Float float3 = Float.valueOf((-3819.0F));
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-3819.0F), (float)float3, 0.01F);
      
      Float float4 = Float.valueOf(1804.874F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(1804.874F, (float)float4, 0.01F);
      
      float float5 = Float.max(1.0F, (-2033.426F));
      assertNotEquals(float5, float2, 0.01F);
      assertEquals(1.0F, float5, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.set((-1), 13, float4, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      rOI0.Y();
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) null);
      assertSame(realGrayImage0, realGrayImage1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1520);
      ROI rOI0 = new ROI();
      realGrayImage0.X();
      ROI rOI1 = new ROI();
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      RealGrayImage realGrayImage2 = realGrayImage0.diff(realGrayImage1);
      // Undeclared exception!
      try { 
        realGrayImage2.divide(realGrayImage1, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 8);
      ROI rOI0 = new ROI();
      int int0 = realGrayImage0.X();
      assertEquals(0, int0);
      
      ROI rOI1 = new ROI();
      rOI0.setROI(0, 0, (-1456), 0);
      double double0 = realGrayImage0.sqrSum();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          RealGrayImage realGrayImage0 = new RealGrayImage(1602, 0);
          RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
          RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(34, 1, (float) 1602);
          // Undeclared exception!
          try { 
            realGrayImage2.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // sun.reflect.GeneratedMethodAccessor65.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-5640.333F);
      floatArray1[3] = (-1210.1F);
      floatArray1[4] = 32767.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (-5640.333F);
      floatArray2[1] = 1.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 0.0F;
      floatArray2[6] = 0.0F;
      floatArray2[7] = 0.0F;
      floatArray2[8] = 32767.0F;
      floatArray0[1] = floatArray2;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1349, 1);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      realGrayImage2.copy();
      realGrayImage1.toString();
      realGrayImage1.median(1349, rOI0);
  }
}
