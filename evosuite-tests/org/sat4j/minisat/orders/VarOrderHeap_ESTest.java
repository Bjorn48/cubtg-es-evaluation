/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:08:37 GMT 2019
 */

package org.sat4j.minisat.orders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.Heap;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.VarOrderHeap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VarOrderHeap_ESTest extends VarOrderHeap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      Lits lits0 = new Lits();
      lits0.ensurePool(2);
      levelBasedVarOrderHeap0.setLits(lits0);
      levelBasedVarOrderHeap0.init();
      levelBasedVarOrderHeap0.setLits(iLits0);
      levelBasedVarOrderHeap0.init();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      lits0.getFromPool(795);
      levelBasedVarOrderHeap0.setLits(lits0);
      levelBasedVarOrderHeap0.init();
      levelBasedVarOrderHeap0.updateVar(1590);
      int int0 = levelBasedVarOrderHeap0.numberOfInterestingVariables();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.setVarDecay(0.0);
      levelBasedVarOrderHeap0.varDecayActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[5];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      subsetVarOrder0.printStat(mockPrintWriter0, "/");
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.updateActivity(0);
      double double0 = levelBasedVarOrderHeap0.varActivity(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      double double0 = pureOrder0.varActivity(1);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      lits0.getFromPool(501);
      levelBasedVarOrderHeap0.setLits(lits0);
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertEquals(1, iLits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      pureOrder0.setLits(iLits0);
      ILits iLits1 = pureOrder0.getVocabulary();
      assertEquals(0, iLits1.realnVars());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = varOrderHeap0.getPhaseSelectionStrategy();
      assertNull(iPhaseSelectionStrategy0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Heap heap0 = pureOrder0.createHeap((double[]) null);
      assertEquals(0, heap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.varActivity((-2554));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1277
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      // Undeclared exception!
      try { 
        varOrderHeap0.updateVarAtDecisionLevel(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      rSATLastLearnedClausesPhaseSelectionStrategy0.init(1);
      levelBasedVarOrderHeap0.phaseStrategy = (IPhaseSelectionStrategy) rSATLastLearnedClausesPhaseSelectionStrategy0;
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.updateVarAtDecisionLevel(1439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 719
         //
         verifyException("org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      // Undeclared exception!
      try { 
        pureOrder0.updateVar(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.updateVar((-830));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -415
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.updateActivity(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.undo(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      levelBasedVarOrderHeap0.setLits(iLits0);
      levelBasedVarOrderHeap0.init();
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.undo(1222);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      // Undeclared exception!
      try { 
        pureOrder0.select();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.PureOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.getFromPool(16384);
      levelBasedVarOrderHeap0.setLits(iLits0);
      // Undeclared exception!
      levelBasedVarOrderHeap0.init();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      // Undeclared exception!
      try { 
        pureOrder0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      int[] intArray0 = new int[2];
      intArray0[0] = (-449);
      levelBasedVarOrderHeap0.addLevel(intArray0);
      Lits lits0 = new Lits();
      levelBasedVarOrderHeap0.setLits(lits0);
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.init();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -449
         //
         verifyException("org.sat4j.minisat.orders.LevelBasedVarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[8];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      subsetVarOrder0.setPhaseSelectionStrategy(rSATPhaseSelectionStrategy0);
      // Undeclared exception!
      try { 
        subsetVarOrder0.assignLiteral(739);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RSATPhaseSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      double[] doubleArray0 = new double[6];
      varOrderHeap0.activity = doubleArray0;
      doubleArray0[3] = 2.0;
      int int0 = varOrderHeap0.numberOfInterestingVariables();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      levelBasedVarOrderHeap0.setLits(iLits0);
      iLits0.getFromPool((-344));
      levelBasedVarOrderHeap0.init();
      levelBasedVarOrderHeap0.updateVar(462);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      lits0.getFromPool(795);
      levelBasedVarOrderHeap0.setLits(lits0);
      levelBasedVarOrderHeap0.init();
      levelBasedVarOrderHeap0.updateVar(1590);
      int int0 = levelBasedVarOrderHeap0.select();
      assertEquals(1590, int0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      levelBasedVarOrderHeap0.setLits(iLits0);
      iLits0.getFromPool((-344));
      iLits0.satisfies(689);
      levelBasedVarOrderHeap0.init();
      int int0 = levelBasedVarOrderHeap0.select();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      String string0 = varOrderHeap0.toString();
      assertEquals("VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      double[] doubleArray0 = pureOrder0.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.updateVarAtDecisionLevel(1439);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      pureOrder0.undo(0);
      pureOrder0.undo(0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral((-1821));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      double double0 = pureOrder0.varActivity(1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)pureOrder0.getPhaseSelectionStrategy();
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.varDecayActivity();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      levelBasedVarOrderHeap0.setLits(iLits0);
      iLits0.getFromPool((-344));
      levelBasedVarOrderHeap0.init();
      int int0 = levelBasedVarOrderHeap0.select();
      assertEquals(689, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.printStat((PrintWriter) null, "X");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }
}
