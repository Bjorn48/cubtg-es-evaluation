/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:36:11 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt(291);
      int[] intArray0 = new int[1];
      intArray0[0] = 1319;
      vecInt0.moveTo(intArray0);
      vecInt0.clone();
      vecInt0.push(1319);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 34, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5100);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.clear();
      vecInt0.iterator();
      vecInt0.isEmpty();
      vecInt0.growTo(5100, 5100);
      vecInt0.moveTo(2, 2);
      vecInt0.insertFirst((-1));
      vecInt0.hashCode();
      int[] intArray0 = new int[1];
      intArray0[0] = 5100;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.isSubsetOf(vecInt0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 1134;
      VecInt vecInt0 = new VecInt(1134, 1134);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      vecInt0.iterator();
      vecInt0.sort(2, 0);
      iVecInt0.clone();
      vecInt0.growTo(0, 35);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      VecInt vecInt0 = new VecInt(406);
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort((Comparator<Integer>) null);
      vecInt0.containsAt((-1), (-1));
      vecInt0.push(0);
      vecInt0.hashCode();
      vecInt0.sort();
      vecInt0.containsAt((-1), 1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      vecInt0.iterator();
      vecInt0.sort(2, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 3882, 589, 2, 847).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(0, 1119, comparator0);
      VecInt vecInt1 = (VecInt)vecInt0.clone();
      vecInt1.toArray();
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.insertFirst(2);
      vecInt0.unsafeGet(2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      vecInt0.iterator();
      vecInt0.sort(2, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(0, 1119, comparator0);
      vecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2236
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = (VecInt)vecInt0.push((-2225));
      vecInt1.equals(vecInt0);
      vecInt1.sortUnique();
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.indexOf(1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clone();
      vecInt0.sortUnique();
      vecInt0.subset(5);
      // Undeclared exception!
      try { 
        vecInt0.remove(936);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 1703;
      VecInt vecInt0 = new VecInt(1703);
      vecInt0.iterator();
      VecInt vecInt1 = new VecInt();
      vecInt1.shrinkTo(1703);
      // Undeclared exception!
      try { 
        vecInt0.pushAll(vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 1119;
      VecInt vecInt0 = new VecInt(1119, 1119);
      VecInt vecInt1 = new VecInt(1090, 1119);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2661), 61, (-2661), 1090, (-2268)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt1.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1090
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 935;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 457;
      intArray0[4] = 1335;
      intArray0[5] = 0;
      intArray0[6] = (-1888);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.contains(0);
      vecInt0.remove(457);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      vecInt0.equals(emptyVecInt0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.containsAt((-1553));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      int int0 = (-612);
      vecInt0.push((-612));
      vecInt0.remove((-612));
      int[] intArray0 = new int[2];
      intArray0[0] = 1335;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.shrink(1335);
      // Undeclared exception!
      try { 
        vecInt1.ensure(992);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.subset(1);
      int int2 = 5387;
      // Undeclared exception!
      try { 
        vecInt0.set(1, 5387);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      VecInt vecInt0 = new VecInt(605, 605);
      vecInt0.contains(605);
      vecInt0.sortUnique();
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      IVecInt iVecInt0 = emptyVecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.moveTo(iVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      VecInt vecInt0 = new VecInt(37, 0);
      vecInt0.subset(1);
      int int0 = 5376;
      vecInt0.set(1, 5376);
      vecInt0.toArray();
      vecInt0.shrink(20);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      IVecInt iVecInt1 = vecInt0.pop();
      iVecInt1.ensure(2404);
      vecInt0.sort(20, 0);
      vecInt0.sortUnique();
      // Undeclared exception!
      try { 
        vecInt0.set((-71), 5376);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt0.pushAll(vecInt1);
      vecInt0.iterator();
      vecInt0.moveTo(2, 0);
      vecInt1.hashCode();
      int[] intArray0 = new int[3];
      intArray0[0] = 4848;
      intArray0[1] = 2;
      intArray0[2] = 1119;
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt1.isSubsetOf(vecInt2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VecInt vecInt0 = new VecInt(569, 569);
      vecInt0.contains(569);
      vecInt0.sortUnique();
      vecInt0.toString();
      vecInt0.clear();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-5);
      intArray0[0] = (-5);
      int int1 = (-1126);
      intArray0[1] = (-1126);
      intArray0[2] = (-1);
      intArray0[3] = 64;
      intArray0[4] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.iterator();
      vecInt0.shrink(0);
      int int2 = (-3645);
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-5), (-3645));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3644
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      VecInt vecInt0 = new VecInt(605, 605);
      VecInt vecInt1 = (VecInt)vecInt0.clone();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-842), (-842), 605, 1, 1).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.sortUnique();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(605, 605, comparator1);
      vecInt0.subset(605);
      vecInt0.iterator();
      vecInt0.insertFirst(395);
      VecInt vecInt2 = new VecInt(69, 605);
      vecInt2.containsAt(580);
      VecInt vecInt3 = (VecInt)vecInt2.push(605);
      VecInt vecInt4 = new VecInt(69, 69);
      vecInt4.sortUnique();
      vecInt2.equals(vecInt3);
      vecInt2.shrink((-2336));
      vecInt2.shrinkTo(605);
      vecInt2.clear();
      vecInt1.toString();
      vecInt2.toArray();
      vecInt1.isSubsetOf(vecInt0);
      VecInt vecInt5 = new VecInt(605, (-1));
      vecInt5.insertFirst(605);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort((Comparator<Integer>) null);
      vecInt0.containsAt((-1), (-1));
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.hashCode();
      vecInt0.sort();
      iVecInt0.shrink(1113);
      // Undeclared exception!
      try { 
        vecInt0.subset(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt(678);
      int int0 = 1068;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(678, 1068, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 873
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 247;
      VecInt vecInt0 = new VecInt(247);
      int int1 = 2229;
      int int2 = 0;
      // Undeclared exception!
      try { 
        vecInt0.set(2229, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1337);
      intArray0[0] = (-1337);
      intArray0[1] = 4256;
      intArray0[2] = 1;
      int int1 = 0;
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.iterator();
      vecInt0.last();
      IVecInt iVecInt0 = vecInt0.push(236);
      vecInt0.moveTo2(iVecInt0);
      vecInt0.containsAt(4256);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      // Undeclared exception!
      try { 
        readOnlyVecInt0.shrink(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      VecInt vecInt1 = new VecInt(1090, 1119);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt1.sort(comparator0);
      vecInt0.clear();
      vecInt0.isEmpty();
      vecInt1.indexOf((-2412));
      vecInt1.push(1119);
      vecInt1.selectionSort((-440), (-5088));
      int int0 = 1;
      vecInt0.shrinkTo(1);
      // Undeclared exception!
      try { 
        vecInt0.set(832, (-3427));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      VecInt vecInt1 = new VecInt(0);
      vecInt0.moveTo2(vecInt1);
      vecInt0.growTo(0, (-1));
      vecInt1.containsAt(1);
      // Undeclared exception!
      try { 
        vecInt1.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-554);
      intArray0[1] = (-656);
      intArray0[2] = 2;
      intArray0[3] = 1060;
      intArray0[4] = 1527;
      intArray0[5] = (-591);
      intArray0[6] = 6271;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.delete(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-656), 2385, 2, 1372, (-591)).when(comparator0).compare(anyInt() , anyInt());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, (-1935), comparator1);
      vecInt0.sort(comparator0);
      vecInt0.selectionSort(6271, (-530));
      vecInt0.subset((-554));
      vecInt0.set(1, 2);
      vecInt0.pop();
      vecInt0.size();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt0.pushAll(vecInt1);
      vecInt0.iterator();
      VecInt vecInt2 = new VecInt(1119);
      vecInt1.toString();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(3038);
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-1553));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      VecInt vecInt1 = new VecInt(1090, 1119);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1090, 1332, 1119, 1332, 15).when(comparator0).compare(anyInt() , anyInt());
      vecInt1.sort(comparator0);
      vecInt0.clear();
      vecInt0.isEmpty();
      vecInt1.indexOf((-2412));
      VecInt vecInt2 = (VecInt)vecInt1.push(1119);
      vecInt1.selectionSort((-440), (-5088));
      int int0 = 1;
      vecInt2.shrink(1119);
      vecInt0.shrinkTo(1);
      int int1 = 832;
      vecInt1.isSubsetOf(vecInt2);
      // Undeclared exception!
      try { 
        vecInt1.containsAt(1119, (-440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -439
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2782);
      // Undeclared exception!
      try { 
        vecInt0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.push((-2225));
      vecInt0.moveTo(iVecInt0);
      int int0 = (-1225);
      vecInt0.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1225), (-1225), comparator0);
      int int1 = 0;
      vecInt0.subset(0);
      vecInt0.iterator();
      vecInt0.insertFirst(69);
      vecInt0.containsAt(69);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 5;
      VecInt vecInt0 = new VecInt(5);
      VecInt vecInt1 = new VecInt();
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.copyTo((IVecInt) vecInt0);
      vecInt0.iterator();
      int int1 = (-248);
      int int2 = 1550;
      // Undeclared exception!
      try { 
        vecInt1.remove(1550);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 0);
      vecInt0.ensure(0);
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VecInt vecInt0 = new VecInt(560, 560);
      vecInt0.subset(1);
      VecInt vecInt1 = new VecInt(1493, 560);
      vecInt1.toArray();
      vecInt0.shrink(1493);
      vecInt1.toString();
      vecInt1.hashCode();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      vecInt0.shrink(366);
      vecInt0.contains(1080);
      vecInt0.sortUnique();
      vecInt0.toString();
      vecInt0.clear();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1108, 1108);
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      VecInt vecInt1 = new VecInt(1119, 1119);
      vecInt0.pushAll(vecInt1);
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 58;
      VecInt vecInt0 = new VecInt(58, (-3367));
      int[] intArray0 = new int[5];
      intArray0[0] = 58;
      intArray0[1] = 58;
      intArray0[2] = 58;
      intArray0[3] = 58;
      intArray0[4] = 58;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 2631;
      intArray0[0] = 2631;
      intArray0[1] = 1;
      intArray0[2] = (-1806);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.get((-1173));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-1), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      VecInt vecInt1 = new VecInt(2, 650);
      vecInt1.equals((Object) null);
      VecInt vecInt2 = new VecInt();
      vecInt2.sortUnique();
      vecInt2.toString();
      // Undeclared exception!
      try { 
        vecInt0.moveTo(52, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VecInt vecInt0 = new VecInt(615, 615);
      Object object0 = new Object();
      vecInt0.equals(object0);
      // Undeclared exception!
      try { 
        vecInt0.remove((-2001));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 615
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      vecInt0.toString();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      vecInt0.moveTo(0, intArray0);
      vecInt0.unsafePush(0);
      vecInt0.pop();
      vecInt0.shrink(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(0, (-1), comparator0);
      vecInt0.pushAll(iVecInt0);
      vecInt0.unsafeGet(0);
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      VecInt vecInt0 = new VecInt(15);
      Comparator<Integer> comparator0 = null;
      vecInt0.sort((Comparator<Integer>) null);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.iterator();
      vecInt0.push(0);
      VecInt vecInt1 = new VecInt(15, 15);
      vecInt0.moveTo((IVecInt) vecInt1);
      int int0 = new Integer(0);
      vecInt0.sort(15, 0, comparator1);
      vecInt0.sortUnique();
      vecInt0.shrink(15);
      vecInt0.hashCode();
      vecInt0.shrink(0);
      vecInt0.ensure((-2622));
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.iterator();
      vecInt0.sort(5, 0, (Comparator<Integer>) null);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1108);
      vecInt0.toString();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(1421, 1108, comparator0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 2112;
          VecInt vecInt0 = new VecInt(2112, 2112);
          vecInt0.insertFirst(2112);
          // Undeclared exception!
          try { 
            vecInt0.pushAll((IVecInt) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.sat4j.core.VecInt", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      VecInt vecInt1 = new VecInt(0, 0);
      vecInt0.pushAll(vecInt1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt1.isSubsetOf(vecInt0);
      vecInt0.equals(iVecInt0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.selectionSort(0, 0, comparator1);
      vecInt1.copyTo(iVecInt0);
      vecInt1.pop();
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.sort(comparator2);
      vecInt1.isEmpty();
      vecInt1.toString();
      vecInt1.clear();
      int int0 = 0;
      Comparator<Integer> comparator3 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt1.sort(0, 1158, comparator3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 579
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      VecInt vecInt0 = new VecInt(560, 560);
      vecInt0.sortUnique();
      vecInt0.sortUnique();
      vecInt0.subset(560);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1746);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.last();
      vecInt0.clone();
      vecInt0.subset(83);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1746), (-1), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 15;
      VecInt vecInt0 = new VecInt(15);
      int int1 = 0;
      Comparator<Integer> comparator0 = null;
      vecInt0.sort((Comparator<Integer>) null);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.iterator();
      vecInt0.push(0);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.moveTo(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      VecInt vecInt1 = new VecInt(0);
      vecInt0.moveTo2(vecInt1);
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.growTo(0, (-1));
      vecInt1.containsAt(1);
      // Undeclared exception!
      try { 
        vecInt1.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.subset(1);
      vecInt0.toArray();
      vecInt0.shrink((-1));
      // Undeclared exception!
      try { 
        vecInt0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      VecInt vecInt0 = new VecInt(605, 605);
      IVecInt iVecInt0 = vecInt0.clone();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.moveTo(iVecInt0);
      vecInt0.sortUnique();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(605, 605, comparator1);
      vecInt0.subset(605);
      vecInt0.iterator();
      vecInt0.insertFirst(395);
      VecInt vecInt1 = new VecInt(69, 605);
      vecInt1.containsAt(580);
      IVecInt iVecInt1 = vecInt1.push(605);
      VecInt vecInt2 = new VecInt(69, 69);
      vecInt2.sortUnique();
      vecInt1.equals(iVecInt1);
      vecInt1.shrink((-2378));
      vecInt1.shrinkTo(605);
      vecInt2.clear();
      vecInt0.toString();
      iVecInt0.toArray();
      vecInt0.isSubsetOf(vecInt1);
      // Undeclared exception!
      try { 
        vecInt1.insertFirst(605);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = (-4501);
      VecInt vecInt0 = new VecInt(0, (-4501));
      VecInt vecInt1 = new VecInt();
      vecInt0.copyTo((IVecInt) vecInt1);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      vecInt1.equals(readOnlyVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.delete((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      VecInt vecInt1 = new VecInt(0);
      vecInt0.insertFirst(0);
      vecInt0.insertFirst(0);
      vecInt0.growTo(0, (-1));
      vecInt0.equals(vecInt1);
      vecInt1.containsAt(1);
      vecInt0.subset(0);
      vecInt1.containsAt(1127);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VecInt vecInt0 = new VecInt(560, 560);
      vecInt0.sortUnique();
      vecInt0.toString();
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      vecInt0.iterator();
      int int0 = 2;
      vecInt0.sort(2, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1119, 0, 2, 1119, (-1)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 1119, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2236
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = (VecInt)vecInt0.push((-2225));
      vecInt1.equals(vecInt0);
      vecInt1.sortUnique();
      vecInt1.toString();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-2225), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.isEmpty();
      vecInt0.sortUnique();
      VecInt vecInt1 = new VecInt(0, 0);
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.isEmpty();
      int int0 = (-398);
      int int1 = 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-398), 0, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-5261), (-5261));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VecInt vecInt0 = new VecInt(605, 605);
      vecInt0.equals((Object) null);
      vecInt0.sortUnique();
      vecInt0.toString();
      int[] intArray0 = new int[5];
      intArray0[0] = 605;
      intArray0[1] = 605;
      intArray0[2] = 605;
      intArray0[3] = 605;
      intArray0[4] = 605;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(605, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      boolean boolean0 = vecInt0.contains(605);
      assertFalse(boolean0);
      
      vecInt0.sortUnique();
      String string0 = vecInt0.toString();
      assertEquals("", string0);
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      
      vecInt0.indexOf(605);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.get(0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      vecInt0.iterator();
      int int0 = 2;
      vecInt0.sort(2, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1119, (-1120), 0, (-3428), (-3428)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 1119, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2236
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[7];
      intArray0[0] = 2125;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 5;
      intArray0[5] = 0;
      intArray0[6] = 0;
      vecInt0.copyTo(intArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-554);
      intArray0[1] = (-656);
      intArray0[2] = 2;
      intArray0[3] = 1060;
      intArray0[4] = 1527;
      intArray0[5] = (-591);
      intArray0[6] = 6271;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.delete(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, (-1935), comparator1);
      vecInt0.sort(comparator0);
      vecInt0.selectionSort(6271, (-530));
      vecInt0.subset((-554));
      vecInt0.set(1, 1060);
      vecInt0.pop();
      vecInt0.size();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clone();
      Comparator<Integer> comparator0 = null;
      vecInt0.clone();
      vecInt0.sort((Comparator<Integer>) null);
      vecInt0.equals((Object) null);
      int int0 = 2;
      vecInt0.iterator();
      vecInt0.push(2);
      int int1 = 0;
      VecInt vecInt1 = new VecInt();
      vecInt0.clone();
      vecInt1.insertFirst(2467);
      // Undeclared exception!
      try { 
        vecInt0.delete((-408));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -408
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1988);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1988), (-1988), comparator0);
      int int1 = (-1);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        vecInt0.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.size();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = (-403);
      VecInt vecInt0 = new VecInt(1357, (-403));
      // Undeclared exception!
      try { 
        vecInt0.set(1357, (-1822));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = (VecInt)vecInt0.push((-2225));
      vecInt1.equals(vecInt0);
      vecInt1.sortUnique();
      vecInt1.toString();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-2225), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.subset(1);
      vecInt0.toArray();
      vecInt0.shrink((-1));
      // Undeclared exception!
      try { 
        vecInt0.set(0, 156);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      VecInt vecInt0 = new VecInt(37, 0);
      vecInt0.subset(1);
      int int0 = 5376;
      vecInt0.set(1, 5376);
      vecInt0.toArray();
      vecInt0.shrink((-1));
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      vecInt0.pop();
      vecInt0.sort((-1), 0);
      vecInt0.sortUnique();
      // Undeclared exception!
      try { 
        vecInt0.set((-71), 5376);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      vecInt0.shrinkTo(633);
      // Undeclared exception!
      try { 
        vecInt0.push(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 5100;
      VecInt vecInt0 = new VecInt(5100);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.clear();
      vecInt0.isEmpty();
      vecInt0.indexOf(5100);
      vecInt0.push((-1));
      vecInt0.selectionSort((-1), (-1));
      vecInt0.shrinkTo(1);
      // Undeclared exception!
      try { 
        vecInt0.set(5100, (-2276));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.sortUnique();
      // Undeclared exception!
      try { 
        vecInt0.set((-997), (-997));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      VecInt vecInt1 = new VecInt(0);
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.insertFirst(0);
      vecInt0.indexOf(1);
      IVecInt iVecInt0 = vecInt0.push((-1));
      vecInt1.moveTo2(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt1.selectionSort((-1454), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 1452;
      vecInt0.growTo(15, 1452);
      int int1 = 0;
      VecInt vecInt1 = new VecInt(1119);
      int int2 = (-1648);
      // Undeclared exception!
      try { 
        vecInt1.set(1119, (-1648));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(2);
      vecInt0.sortUnique();
      vecInt0.ensure(760);
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 562;
      VecInt vecInt0 = new VecInt(562);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 562;
      intArray0[2] = 562;
      intArray0[3] = 562;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.moveTo2(vecInt1);
      // Undeclared exception!
      try { 
        vecInt0.sort(2, 562);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 282
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      VecInt vecInt1 = new VecInt();
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.copyTo((IVecInt) vecInt0);
      vecInt0.iterator();
      VecInt vecInt2 = new VecInt();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt2.selectionSort(1103, 490, comparator1);
      int[] intArray0 = new int[1];
      VecInt vecInt3 = new VecInt(intArray0);
      vecInt2.contains(490);
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt3.sort(490, 2, comparator2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 292;
      VecInt vecInt0 = new VecInt(6618, 292);
      int int1 = (-573);
      vecInt0.selectionSort(6618, (-573));
      int[] intArray0 = new int[7];
      intArray0[0] = 6618;
      intArray0[1] = (-573);
      intArray0[2] = 292;
      intArray0[3] = (-573);
      intArray0[4] = 6618;
      intArray0[5] = (-573);
      intArray0[6] = (-573);
      // Undeclared exception!
      try { 
        vecInt0.copyTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1357, (-394));
      vecInt0.sortUnique();
      vecInt0.subset(936);
      vecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.delete((-394));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -394
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1251;
      intArray0[1] = 15;
      intArray0[2] = 1307;
      intArray0[3] = 6593;
      intArray0[4] = 0;
      intArray0[5] = (-2714);
      intArray0[6] = 2092;
      intArray0[7] = 6607;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.containsAt(6593, 1307);
      vecInt0.toString();
      vecInt0.equals((Object) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(6607, 904, comparator0);
      // Undeclared exception!
      try { 
        vecInt0.growTo(15, (-2681));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.clear();
      vecInt0.toString();
      vecInt0.clone();
      vecInt0.sort();
      vecInt0.toArray();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      IVecInt iVecInt0 = vecInt0.pop();
      VecInt vecInt1 = new VecInt(1119);
      int[] intArray0 = new int[7];
      intArray0[0] = 1119;
      intArray0[1] = 1119;
      intArray0[2] = 1119;
      intArray0[3] = 1119;
      intArray0[4] = 1119;
      intArray0[5] = 1119;
      intArray0[6] = 1119;
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.copyTo(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.growTo(1757, 1119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2236
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VecInt vecInt0 = new VecInt(37, 0);
      vecInt0.subset(1);
      vecInt0.set(1, 5376);
      int[] intArray0 = vecInt0.toArray();
      vecInt0.shrink((-1));
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt0.pushAll(vecInt1);
      VecInt vecInt2 = (VecInt)vecInt0.pop();
      vecInt0.sort((-1), 0);
      vecInt0.sortUnique();
      VecInt vecInt3 = new VecInt(intArray0);
      vecInt2.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-1074);
      intArray0[0] = (-1074);
      intArray0[1] = 0;
      intArray0[2] = (-930);
      intArray0[3] = (-3483);
      intArray0[4] = (-1559);
      VecInt vecInt0 = new VecInt(intArray0);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      int int1 = 1;
      // Undeclared exception!
      try { 
        emptyVecInt0.push(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt1.clone();
      vecInt0.insertFirst((-1553));
      VecInt vecInt2 = new VecInt(5100, (-408));
      int int0 = 577;
      vecInt2.delete(577);
      vecInt2.pop();
      vecInt2.push((-2240));
      vecInt0.moveTo((IVecInt) vecInt1);
      // Undeclared exception!
      try { 
        vecInt1.get((-408));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1357;
      VecInt vecInt0 = new VecInt(1357, (-403));
      vecInt0.toArray();
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((-403));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0, 1616);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.sortUnique();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(325);
      int int0 = (-1);
      int[] intArray0 = new int[1];
      vecInt0.pop();
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-1), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      VecInt vecInt0 = new VecInt(605, 605);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.moveTo(iVecInt0);
      vecInt0.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(605, 605, comparator0);
      vecInt0.subset(605);
      vecInt0.iterator();
      int int0 = 395;
      vecInt0.insertFirst(395);
      VecInt vecInt1 = new VecInt(69, 605);
      vecInt1.containsAt(580);
      IVecInt iVecInt1 = vecInt1.push(605);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt2 = new VecInt(69, 69);
      vecInt2.sortUnique();
      vecInt1.equals(iVecInt1);
      vecInt1.shrink((-2378));
      vecInt1.shrinkTo(605);
      vecInt2.clear();
      vecInt0.toString();
      // Undeclared exception!
      try { 
        vecInt1.unsafePush((-2619));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 605
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.equals("o+DQ`Zs+KFIjt5");
      // Undeclared exception!
      try { 
        vecInt0.remove((-622));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sort(2, (-181));
      int int0 = (-1399);
      int int1 = (-1457);
      Comparator<Integer> comparator0 = null;
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt((IVecInt) null);
      // Undeclared exception!
      try { 
        vecInt0.equals(readOnlyVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2479, (-1380));
      vecInt0.insertFirst(2479);
      vecInt0.contains(1095);
      vecInt0.containsAt(1);
      vecInt0.containsAt((-1744));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.subset(5);
      vecInt0.insertFirst(378);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.moveTo(0, intArray0);
      vecInt0.clear();
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.moveTo(iVecInt0);
      vecInt0.unsafeGet(0);
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-461);
      intArray0[1] = 594;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = 15;
      intArray0[6] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      VecInt vecInt1 = new VecInt(0);
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.insertFirst(0);
      vecInt0.growTo(0, (-1));
      vecInt1.containsAt(1);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-3235), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3235
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 605;
      VecInt vecInt0 = new VecInt();
      vecInt0.contains(605);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.copyTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1700;
      intArray0[1] = (-2605);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1447;
      intArray0[5] = (-1);
      intArray0[6] = 5;
      intArray0[7] = 918;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.last();
      vecInt0.subset((-984));
      vecInt0.moveTo(intArray0);
      vecInt0.push((-2605));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      VecInt vecInt0 = new VecInt(560, 560);
      vecInt0.sortUnique();
      vecInt0.push(2345);
      VecInt vecInt1 = new VecInt(342, (-1444));
      vecInt0.sortUnique();
      VecInt vecInt2 = new VecInt(2345);
      vecInt0.equals(vecInt2);
      vecInt0.shrink(342);
      vecInt1.shrinkTo((-1108));
      vecInt2.clear();
      vecInt1.toString();
      vecInt1.isEmpty();
      // Undeclared exception!
      try { 
        vecInt1.insertFirst(2345);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1108
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      int int1 = (-612);
      vecInt0.push((-612));
      int int2 = (-497);
      // Undeclared exception!
      try { 
        vecInt0.remove((-497));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(0);
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.insertFirst(0);
      VecInt vecInt2 = new VecInt(0, 0);
      vecInt2.pop();
      vecInt1.sortUnique();
      // Undeclared exception!
      try { 
        vecInt2.subset((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      VecInt vecInt1 = new VecInt();
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.copyTo((IVecInt) vecInt0);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 4211;
      VecInt vecInt0 = new VecInt(4211);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      int int1 = (-585);
      vecInt0.growTo((-585), (-585));
      int int2 = (-2843);
      // Undeclared exception!
      try { 
        vecInt0.set(0, (-585));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.push((-2225));
      vecInt0.moveTo(iVecInt0);
      vecInt0.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1225), (-1225), comparator0);
      vecInt0.subset(0);
      vecInt0.iterator();
      vecInt0.insertFirst(69);
      vecInt0.containsAt(69);
      int[] intArray1 = new int[2];
      intArray1[0] = 69;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(956, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.size();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VecInt vecInt0 = new VecInt(560, 560);
      vecInt0.iterator();
      int int0 = 0;
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 1119;
      VecInt vecInt0 = new VecInt(1119, 1119);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      vecInt0.iterator();
      int int1 = (-19);
      int int2 = 0;
      // Undeclared exception!
      try { 
        vecInt0.sort((-19), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, (-1260));
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1260), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-2736);
      vecInt0.ensure((-2736));
      vecInt0.clone();
      int int1 = (-8);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrink((-8));
      vecInt0.selectionSort((-8), (-8), comparator0);
      vecInt0.ensure((-8));
      // Undeclared exception!
      try { 
        vecInt0.push((-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      VecInt vecInt0 = new VecInt(605, 605);
      IVecInt iVecInt0 = vecInt0.clone();
      int int0 = 1;
      vecInt0.copyTo(iVecInt0);
      VecInt vecInt1 = new VecInt(170, 1);
      vecInt1.insertFirst(170);
      int int1 = (-1);
      vecInt1.indexOf(170);
      VecInt vecInt2 = new VecInt(170);
      vecInt2.push(1);
      iVecInt0.moveTo2(vecInt2);
      // Undeclared exception!
      try { 
        vecInt1.selectionSort((-1454), 605);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      VecInt vecInt0 = new VecInt(605, 605);
      IVecInt iVecInt0 = vecInt0.clone();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-842), (-842), 605, 1, 1).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.moveTo(iVecInt0);
      vecInt0.sortUnique();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      iVecInt0.isEmpty();
      VecInt vecInt1 = new VecInt(1, 5062);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.moveTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 3260);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator1);
      vecInt0.selectionSort(3260, 3260, comparator0);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      VecInt vecInt1 = new VecInt(0);
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.insertFirst(0);
      vecInt0.growTo(0, (-1));
      vecInt1.containsAt(1);
      vecInt0.shrink((-1536));
      vecInt1.shrinkTo(2056);
      vecInt0.clear();
      vecInt0.toString();
      vecInt0.toArray();
      vecInt1.isSubsetOf(vecInt0);
      // Undeclared exception!
      try { 
        vecInt1.insertFirst((-1246));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1011));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      VecInt vecInt0 = new VecInt(560, 560);
      VecInt vecInt1 = new VecInt();
      vecInt1.shrinkTo(678);
      // Undeclared exception!
      try { 
        vecInt1.sortUnique();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 339
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 1108;
      VecInt vecInt0 = new VecInt(1108, 1108);
      int int1 = 770;
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1108;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1108;
      intArray0[4] = 1108;
      intArray0[5] = 1108;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.containsAt((-1), 1108);
      IVecInt iVecInt0 = vecInt0.push((-1));
      vecInt0.subset(1);
      vecInt0.hashCode();
      VecInt vecInt1 = new VecInt(1108);
      vecInt1.sort();
      vecInt0.containsAt((-1), (-1));
      vecInt1.equals(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort((Comparator<Integer>) null);
      vecInt0.containsAt((-1), (-1));
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.hashCode();
      vecInt0.sort();
      iVecInt0.size();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt(0);
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      VecInt vecInt1 = new VecInt();
      vecInt0.isSubsetOf(vecInt1);
      vecInt0.iterator();
      vecInt0.growTo(1333, 5);
      vecInt0.containsAt(15);
      vecInt0.moveTo(1, 1);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1357, (-394));
      VecInt vecInt1 = (VecInt)vecInt0.clone();
      vecInt0.contains(2025);
      vecInt1.sortUnique();
      vecInt1.toString();
      vecInt1.unsafePush(1);
      vecInt1.clear();
      vecInt0.unsafeGet(1082);
      // Undeclared exception!
      try { 
        vecInt1.remove(1082);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      VecInt vecInt0 = new VecInt(42);
      vecInt0.insertFirst((-4930));
      vecInt0.containsAt(2204);
      int[] intArray0 = new int[8];
      intArray0[0] = 42;
      intArray0[1] = (-1);
      intArray0[0] = 42;
      intArray0[3] = (-1011);
      intArray0[4] = (-4930);
      intArray0[5] = (-4930);
      intArray0[6] = (-1);
      intArray0[7] = (-1011);
      vecInt0.moveTo(intArray0);
      vecInt0.push((-1011));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.sortUnique();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      vecInt0.isEmpty();
      VecInt vecInt1 = new VecInt();
      vecInt1.shrink(0);
      vecInt1.copyTo(intArray0);
      vecInt1.clone();
      vecInt1.push(2204);
      vecInt0.shrinkTo(0);
      vecInt1.clear();
      vecInt0.toString();
      vecInt1.unsafePush(2260);
      vecInt0.shrink((-4930));
      // Undeclared exception!
      try { 
        vecInt0.delete((-1168));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1168
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      VecInt vecInt0 = new VecInt(560, 560);
      VecInt vecInt1 = new VecInt(551, (-1468));
      VecInt vecInt2 = new VecInt(5, 23);
      // Undeclared exception!
      try { 
        vecInt2.unsafePush(472);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VecInt vecInt0 = new VecInt(36);
      vecInt0.sortUnique();
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      VecInt vecInt1 = new VecInt();
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.growTo(0, (-1));
      // Undeclared exception!
      try { 
        vecInt1.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2782);
      int int0 = (-1);
      vecInt0.shrink(2782);
      // Undeclared exception!
      try { 
        vecInt0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      EmptyVecInt emptyVecInt1 = (EmptyVecInt)VecInt.EMPTY;
      vecInt0.equals(emptyVecInt1);
      vecInt0.equals(emptyVecInt0);
      int int0 = (-2113);
      // Undeclared exception!
      try { 
        vecInt0.set((-2113), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1119, 1119);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      vecInt0.iterator();
      vecInt0.sort(2, 0);
      vecInt0.delete(2);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      iVecInt0.clear();
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(481, 0, comparator0);
      vecInt0.clone();
      Comparator<Integer> comparator1 = null;
      vecInt0.clone();
      vecInt0.sort((Comparator<Integer>) null);
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(0, 1301, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
      vecInt0.sortUnique();
      int[] intArray0 = new int[4];
      intArray0[0] = (-25);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2008);
      vecInt0.moveTo(intArray0);
      assertTrue(vecInt0.isEmpty());
      assertArrayEquals(new int[] {(-25), 0, 0, (-2008)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.isEmpty();
      VecInt vecInt1 = new VecInt(0, 0);
      int[] intArray0 = new int[1];
      vecInt1.moveTo(0, intArray0);
      assertTrue(vecInt1.isEmpty());
  }
}
