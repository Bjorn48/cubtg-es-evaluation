/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:39:33 GMT 2019
 */

package org.ow2.proactive.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Serializable;
import java.net.URL;
import java.net.URLStreamHandler;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.script.Bindings;
import javax.script.SimpleBindings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.ow2.proactive.scripting.ForkEnvironmentScript;
import org.ow2.proactive.scripting.Script;
import org.ow2.proactive.scripting.ScriptTest;
import org.ow2.proactive.scripting.SelectionScript;
import org.ow2.proactive.scripting.SimpleScript;
import org.ow2.proactive.scripting.TaskScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Script_ESTest extends Script_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (Serializable[]) null);
      String string0 = simpleScript0.display();
      assertEquals(" { \nScript '/fooExample'\n\tscriptEngineLookupName = 'null'\n\tscript = \nnull\n\tid = \nhttp://www.someFakeButWellFormedURL.org/fooExample\n\tparameters = null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, "/ydg[");
      String string0 = simpleScript0.display();
      assertEquals(" { \nScript 'SimpleScript'\n\tscriptEngineLookupName = '/ydg['\n\tscript = \nnull\n\tid = \nnull\n\tparameters = null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, ">}'PAV- 65L", false);
      scriptTest_ScriptForTests0.hashCode();
      assertEquals(">}'PAV- 65L", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("ForkEnvironmentScript", "9");
      String string0 = simpleScript0.getEngineName();
      assertEquals("ForkEnvironmentScript", simpleScript0.getScript());
      assertEquals("9", string0);
      assertEquals("ForkEnvironmentScript", simpleScript0.getId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      SimpleScript simpleScript0 = new SimpleScript("MD5", "MD5");
      URL uRL0 = MockURL.getFtpExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "", false);
      boolean boolean0 = simpleScript0.equals(scriptTest_ScriptForTests0);
      assertEquals("MD5", simpleScript0.getEngineName());
      assertEquals("MD5", simpleScript0.getScript());
      assertEquals("", scriptTest_ScriptForTests0.getEngineName());
      assertFalse(boolean0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", scriptTest_ScriptForTests0.getId());
      assertEquals("MD5", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("z0JHk17", "MD5");
      simpleScript0.execute();
      assertEquals("z0JHk17", simpleScript0.getScript());
      assertEquals("MD5", simpleScript0.getEngineName());
      assertEquals("z0JHk17", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("ForkEnvironmentScript", "9");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      TaskScript taskScript0 = new TaskScript(forkEnvironmentScript0);
      String string0 = taskScript0.fetchScriptWithExceptionHandling();
      assertEquals("ForkEnvironmentScript", taskScript0.getId());
      assertEquals("9", taskScript0.getEngineName());
      assertEquals("SimpleScript", taskScript0.getScriptName());
      assertNotNull(string0);
      assertEquals("ForkEnvironmentScript", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      forkEnvironmentScript0.id = "===BEGIN PRIVATE DOMAINS===";
      String string0 = forkEnvironmentScript0.fetchScriptWithExceptionHandling();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("z)", "bB}");
      String string0 = scriptTest_ScriptForTests0.fetchScript();
      assertEquals("z)", scriptTest_ScriptForTests0.getId());
      assertEquals("z)", string0);
      assertEquals("bB}", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      forkEnvironmentScript0.id = "===BEGIN PRIVATE DOMAINS===";
      String string0 = forkEnvironmentScript0.fetchScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("MD5", " _S9r}k]JU(^#c&^");
      boolean boolean0 = simpleScript0.equals(simpleScript0);
      assertEquals("MD5", simpleScript0.getScript());
      assertTrue(boolean0);
      assertEquals("MD5", simpleScript0.getId());
      assertEquals(" _S9r}k]JU(^#c&^", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = new File("");
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = null;
      try {
        simpleScript0 = new SimpleScript(file0, serializableArray0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to read script : /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      String string0 = taskScript0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("", "");
      assertEquals("TestScript", scriptTest_ScriptForTests0.getScriptName());
      
      scriptTest_ScriptForTests0.overrideDefaultScriptName("");
      String string0 = scriptTest_ScriptForTests0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (String) null, (Serializable[]) null);
      URL uRL1 = simpleScript0.getScriptUrl();
      assertNull(uRL1.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("$9Z}G*vm", "$9Z}G*vm");
      String string0 = scriptTest_ScriptForTests0.getScriptName();
      assertEquals("TestScript", string0);
      assertEquals("$9Z}G*vm", scriptTest_ScriptForTests0.getId());
      assertEquals("$9Z}G*vm", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("$9Z}G*vm", scriptTest_ScriptForTests0.getScript());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, ">}'PAV- 65L", false);
      String string0 = scriptTest_ScriptForTests0.getScript();
      assertNull(string0);
      assertEquals(">}'PAV- 65L", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("Could not dtermine script engine for script ", ";i!+I");
      String string0 = scriptTest_ScriptForTests0.getScript();
      assertEquals("Could not dtermine script engine for script ", scriptTest_ScriptForTests0.getId());
      assertEquals("Could not dtermine script engine for script ", string0);
      assertEquals(";i!+I", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("", "");
      String string0 = simpleScript0.getScript();
      assertEquals("", simpleScript0.getId());
      assertEquals("", simpleScript0.getEngineName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("={4-XAo<{Xn.Y", "*at");
      simpleScript0.getParameters();
      assertEquals("={4-XAo<{Xn.Y", simpleScript0.getId());
      assertEquals("={4-XAo<{Xn.Y", simpleScript0.getScript());
      assertEquals("*at", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      String string0 = simpleScript0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("z0JHk17", "MD5");
      String string0 = simpleScript0.getId();
      assertNotNull(string0);
      assertEquals("MD5", simpleScript0.getEngineName());
      assertEquals("z0JHk17", string0);
      assertEquals("z0JHk17", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Script<ChronoLocalDate> script0 = (Script<ChronoLocalDate>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      String string0 = simpleScript0.getEngineName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "could not dtermine script engine for script ", serializableArray0);
      simpleScript0.createScriptEngine();
      assertEquals("could not dtermine script engine for script ", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.readFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0");
      try { 
        Script.readFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Script<ScriptTest.ScriptForTests> script0 = (Script<ScriptTest.ScriptForTests>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      // Undeclared exception!
      try { 
        simpleScript0.overrideDefaultScriptName("args");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "result", (Serializable[]) null);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      // Undeclared exception!
      try { 
        forkEnvironmentScript0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (String) null, (Serializable[]) null);
      // Undeclared exception!
      simpleScript0.fetchUrlIfNeeded();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[1];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "en", serializableArray0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      // Undeclared exception!
      forkEnvironmentScript0.fetchScriptWithExceptionHandling();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.digest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      File file0 = MockFile.createTempFile("selected", "selected");
      String string0 = Script.readFile(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[3];
      SimpleScript simpleScript0 = new SimpleScript("9", "9", serializableArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("?u%K^.NoDS");
      simpleScript0.execute((Map<String, Object>) hashtable0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertEquals("9", simpleScript0.getEngineName());
      assertEquals("9", simpleScript0.getScript());
      assertEquals("9", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Serializable[] serializableArray0 = new Serializable[8];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "TestScript", serializableArray0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      MockPrintStream mockPrintStream0 = new MockPrintStream("TestScript");
      simpleScript0.execute((Map<String, Object>) simpleBindings0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertEquals("TestScript", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[1];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "en", serializableArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("?u%K^.NoDS");
      simpleScript0.execute((Map<String, Object>) hashMap0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertEquals("en", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("MD5", "MD5");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      forkEnvironmentScript0.overrideDefaultScriptName("args");
      assertEquals("MD5", forkEnvironmentScript0.getId());
      assertEquals("MD5", forkEnvironmentScript0.getEngineName());
      assertEquals("MD5", forkEnvironmentScript0.getScript());
      assertEquals("SimpleScript", forkEnvironmentScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("en", "en");
      SelectionScript selectionScript0 = new SelectionScript((String) null, "tjyzsgok.", false);
      boolean boolean0 = simpleScript0.equals(selectionScript0);
      assertFalse(boolean0);
      assertEquals("en", simpleScript0.getScript());
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("en", simpleScript0.getId());
      assertEquals("tjyzsgok.", selectionScript0.getEngineName());
      assertEquals("en", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("en", "9");
      SimpleScript simpleScript1 = new SimpleScript((String) null, "9", (Serializable[]) null);
      boolean boolean0 = simpleScript1.equals(simpleScript0);
      assertEquals("en", simpleScript0.getScript());
      assertFalse(boolean0);
      assertEquals("9", simpleScript1.getEngineName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Script<ScriptTest.ScriptForTests> script0 = (Script<ScriptTest.ScriptForTests>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript((String) null, "/ydg[");
      boolean boolean0 = simpleScript0.equals(script0);
      assertEquals("/ydg[", simpleScript0.getEngineName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("args", "args");
      boolean boolean0 = simpleScript0.equals((Object) null);
      assertEquals("args", simpleScript0.getScript());
      assertEquals("args", simpleScript0.getId());
      assertEquals("args", simpleScript0.getEngineName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("#y", "#y");
      boolean boolean0 = simpleScript0.equals("#y");
      assertEquals("#y", simpleScript0.getScript());
      assertEquals("#y", simpleScript0.getId());
      assertFalse(boolean0);
      assertEquals("#y", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, (String) null);
      simpleScript0.hashCode();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      File file0 = MockFile.createTempFile("MD5", "MD5");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Script.readFile(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "en", serializableArray0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      simpleScript0.prepareBindings(simpleBindings0);
      assertEquals("en", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Script<ChronoLocalDate> script0 = (Script<ChronoLocalDate>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      simpleScript0.prepareBindings((Bindings) null);
      assertEquals(1048576, Script.DEFAULT_OUTPUT_MAX_SIZE);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("https", "https", 747, "https", uRLStreamHandler0);
      Serializable[] serializableArray0 = new Serializable[8];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "https", serializableArray0);
      simpleScript0.fetchScript();
      assertEquals("https", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      taskScript0.fetchUrlIfNeeded();
      assertNull(taskScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "8e|y@W4b7", (Serializable[]) null);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      // Undeclared exception!
      try { 
        forkEnvironmentScript0.fetchScriptWithExceptionHandling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0, "ALL", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = Script.digest("ALL");
      assertEquals("_\uFFFD\uFFFDU\uFFFD^8\uFFFD\u0017\uFFFD(j\u0017\uFFFD9\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("4(>hX$2GMgRX?|6l-}", "\tparameters = ");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      boolean boolean0 = simpleScript0.equals(forkEnvironmentScript0);
      assertEquals("\tparameters = ", forkEnvironmentScript0.getEngineName());
      assertEquals("4(>hX$2GMgRX?|6l-}", forkEnvironmentScript0.getId());
      assertEquals("SimpleScript", forkEnvironmentScript0.getScriptName());
      assertTrue(boolean0);
      assertEquals("4(>hX$2GMgRX?|6l-}", forkEnvironmentScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("Gpyr*NcxSyDH0ZXcT", "Gpyr*NcxSyDH0ZXcT");
      scriptTest_ScriptForTests0.getScriptUrl();
      assertEquals("Gpyr*NcxSyDH0ZXcT", scriptTest_ScriptForTests0.getScript());
      assertEquals("Gpyr*NcxSyDH0ZXcT", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("Gpyr*NcxSyDH0ZXcT", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("en", "en");
      simpleScript0.setScript("en");
      assertEquals("en", simpleScript0.getScript());
      assertEquals("en", simpleScript0.getEngineName());
      assertEquals("en", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      File file0 = MockFile.createTempFile("d-|f4|p2", (String) null);
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(file0);
      assertEquals("d-|f4|p20.tmp", scriptTest_ScriptForTests0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      assertNull(selectionScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("selected", "0");
      scriptTest_ScriptForTests0.getReader();
      assertEquals("selected", scriptTest_ScriptForTests0.getId());
      assertEquals("selected", scriptTest_ScriptForTests0.getScript());
      assertEquals("0", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0");
      URL uRL0 = mockFile0.toURL();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (Serializable[]) null);
      // Undeclared exception!
      try { 
        simpleScript0.fetchUrlIfNeeded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SimpleScript simpleScript0 = new SimpleScript("js", "js");
          // Undeclared exception!
          try { 
            simpleScript0.execute();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"nashorn.createContext\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:492)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:463)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:129)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:125)
             // java.security.AccessController.doPrivileged(Native Method)
             // jdk.nashorn.api.scripting.NashornScriptEngine.<init>(NashornScriptEngine.java:125)
             // jdk.nashorn.api.scripting.NashornScriptEngineFactory.getScriptEngine(NashornScriptEngineFactory.java:148)
             // org.ow2.proactive.scripting.Script.findScriptEngineCandidates(Script.java:545)
             // org.ow2.proactive.scripting.Script.createScriptEngine(Script.java:521)
             // org.ow2.proactive.scripting.Script.execute(Script.java:375)
             // org.ow2.proactive.scripting.Script.execute(Script.java:352)
             // sun.reflect.GeneratedMethodAccessor145.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("o)U,5|tjCmZ`YZ", "o)U,5|tjCmZ`YZ");
      String string0 = simpleScript0.toString();
      assertEquals("o)U,5|tjCmZ`YZ", simpleScript0.getId());
      assertEquals("o)U,5|tjCmZ`YZ", simpleScript0.getEngineName());
      assertEquals("SimpleScript", string0);
      assertEquals("o)U,5|tjCmZ`YZ", simpleScript0.getScript());
  }
}
