/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 07:48:02 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ConflictTimerContainer;
import org.sat4j.minisat.core.Glucose2LCDS;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Glucose2LCDS_ESTest extends Glucose2LCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      PureOrder pureOrder0 = new PureOrder();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      UnitClause unitClause0 = new UnitClause(32);
      unitClause0.setActivity(2.0);
      SearchParams searchParams0 = new SearchParams((-347));
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, pureOrder0, arminRestarts0, iLogAble0);
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>(solver0, lubyRestarts0);
      glucose2LCDS0.onPropagation(unitClause0);
      assertEquals(2.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConflictTimerContainer conflictTimerContainer0 = new ConflictTimerContainer();
      Glucose2LCDS<CardinalityDataStructureYanMin> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMin>((Solver<CardinalityDataStructureYanMin>) null, conflictTimerContainer0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onPropagation((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Glucose2LCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, arminRestarts0);
      UnitClause unitClause0 = new UnitClause(32);
      unitClause0.setActivity(5);
      Glucose2LCDS<MixedDataStructureDanielWLConciseBinary> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWLConciseBinary>(solver0, lubyRestarts0);
      glucose2LCDS0.onPropagation(unitClause0);
      assertEquals(1.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, arminRestarts0);
      UnitClause unitClause0 = new UnitClause(32);
      Glucose2LCDS<MixedDataStructureDanielWLConciseBinary> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWLConciseBinary>(solver0, lubyRestarts0);
      glucose2LCDS0.onPropagation(unitClause0);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>((Solver<CardinalityDataStructureYanMax>) null, lubyRestarts0);
      String string0 = glucose2LCDS0.toString();
      assertEquals("Glucose 2 learned constraints deletion strategy (LBD updated on propagation) with timer luby style (SATZ_rand, TiniSAT) restarts strategy with factor 32", string0);
  }
}
