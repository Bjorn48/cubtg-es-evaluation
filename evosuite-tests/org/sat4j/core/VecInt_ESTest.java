/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:02:53 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      VecInt vecInt1 = new VecInt(15, 15);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(15, 1520, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = vecInt0.unsafeGet(0);
      assertEquals(0, int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.moveTo2(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet((-13));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      VecInt vecInt0 = new VecInt(45, 45);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = new VecInt();
      vecInt0.equals(vecInt1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      VecInt vecInt0 = new VecInt(2);
      VecInt vecInt1 = new VecInt();
      vecInt0.shrinkTo((-1457));
      vecInt1.ensure((-1068));
      // Undeclared exception!
      try { 
        vecInt0.subset(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2626);
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt();
      vecInt0.insertFirst(1598);
      vecInt1.moveTo2(vecInt0);
      vecInt1.copyTo((IVecInt) vecInt0);
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.moveTo(intArray0);
      vecInt0.moveTo2(vecInt1);
      vecInt1.indexOf((-1102));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(1, 1);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.subset((-3240));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.contains(0);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(15, (-4592));
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = (-1800);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1800), (-1800));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Integer integer0 = new Integer(0);
      vecInt0.equals(integer0);
      vecInt0.growTo((-629), (-629));
      vecInt0.sort();
      vecInt0.shrinkTo(0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 5;
      intArray0[4] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.remove(0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 438);
      vecInt0.iterator();
      Integer integer0 = new Integer(0);
      VecInt vecInt1 = new VecInt(438, (-1628));
      vecInt1.delete(2);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-3540), 4, 2, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt1.sort(comparator0);
      vecInt0.sort();
      vecInt1.selectionSort(1400, 438);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      int[] intArray1 = new int[0];
      VecInt vecInt1 = new VecInt(intArray1);
      vecInt1.toString();
      vecInt0.containsAt(5575, 0);
      VecInt vecInt2 = new VecInt(intArray1);
      VecInt vecInt3 = new VecInt(intArray0);
      vecInt1.isSubsetOf(vecInt2);
      // Undeclared exception!
      try { 
        vecInt3.unsafeGet(247);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 247
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      vecInt0.iterator();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 0;
      vecInt0.unsafePush(0);
      vecInt0.indexOf((-1152));
      VecInt vecInt1 = (VecInt)vecInt0.push((-1));
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      vecInt1.pushAll(vecInt0);
      int int1 = 1972;
      VecInt vecInt2 = new VecInt(5, 0);
      // Undeclared exception!
      try { 
        vecInt2.unsafePush(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 854;
      intArray0[3] = 1;
      intArray0[4] = 3579;
      intArray0[5] = (-1);
      intArray0[6] = 5;
      intArray0[7] = (-619);
      intArray0[8] = 2115;
      VecInt vecInt0 = new VecInt(intArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1520, 1520);
      int int0 = 1497;
      VecInt vecInt1 = new VecInt(1497, 15);
      vecInt0.sort();
      // Undeclared exception!
      vecInt1.sort();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      int[] intArray0 = new int[7];
      vecInt0.toString();
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      vecInt0.ensure(0);
      // Undeclared exception!
      try { 
        vecInt0.set(0, (-414));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      vecInt0.isEmpty();
      vecInt0.containsAt(1517, 1517);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.insertFirst(0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(431, 431);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 45;
      intArray0[1] = 1792;
      intArray0[2] = 0;
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      int int0 = (-2855);
      vecInt0.contains((-2855));
      int int1 = (-4479);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet((-4479));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4479
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 438);
      Integer integer0 = new Integer(0);
      vecInt0.equals(integer0);
      vecInt0.toString();
      vecInt0.clone();
      IVecInt iVecInt0 = vecInt0.clone();
      IVecInt iVecInt1 = vecInt0.pop();
      vecInt0.growTo(0, 0);
      vecInt0.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      iVecInt0.shrinkTo(0);
      iVecInt1.moveTo(iVecInt0);
      vecInt0.clear();
      iVecInt0.pop();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      EmptyVecInt emptyVecInt1 = (EmptyVecInt)VecInt.EMPTY;
      // Undeclared exception!
      try { 
        emptyVecInt1.pop();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      VecInt vecInt0 = new VecInt(45);
      VecInt vecInt1 = new VecInt(148, 148);
      vecInt0.moveTo2(vecInt1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      VecInt vecInt2 = new VecInt();
      vecInt1.equals(vecInt2);
      vecInt1.moveTo((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 2;
      VecInt vecInt0 = new VecInt(2, 438);
      Integer integer0 = new Integer(0);
      VecInt vecInt1 = new VecInt(438, (-1628));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2, (-410), (-1628), (-410)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt1.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 438
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      VecInt vecInt1 = new VecInt(5);
      vecInt1.iterator();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      vecInt1.equals(emptyVecInt0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      VecInt vecInt1 = new VecInt(1520, 1520);
      int[] intArray0 = new int[3];
      VecInt vecInt2 = new VecInt(intArray0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1520, 2, (-1), (-1), 2).when(comparator1).compare(anyInt() , anyInt());
      vecInt1.sort(comparator1);
      vecInt0.sort();
      vecInt0.size();
      int int0 = 1491;
      int int1 = 3;
      vecInt0.sort(int0, int1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[5];
      intArray0[0] = (-541);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 393;
      VecInt vecInt1 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.copyTo(intArray0);
      vecInt0.iterator();
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.sortUnique();
      vecInt1.clone();
      vecInt0.sort();
      vecInt1.size();
      vecInt1.sort(393, 393);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      int[] intArray0 = new int[3];
      intArray0[0] = 5342;
      intArray0[1] = (-1347);
      intArray0[2] = (-4592);
      VecInt vecInt1 = new VecInt(256, (-4592));
      vecInt1.sortUnique();
      vecInt1.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 5;
      intArray0[4] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.toString();
      vecInt0.containsAt((-367), 0);
      vecInt0.shrinkTo(0);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.get(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5, 5);
      vecInt0.hashCode();
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VecInt vecInt0 = new VecInt(435);
      vecInt0.containsAt(0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-3374));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      vecInt0.equals(object0);
      VecInt vecInt1 = new VecInt(1520, 1520);
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.moveTo((IVecInt) vecInt1);
      IVecInt iVecInt0 = null;
      vecInt1.delete(1);
      vecInt0.sortUnique();
      vecInt1.contains(1);
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-802);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-802), (-802));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.insertFirst((-1));
      vecInt0.sortUnique();
      vecInt0.insertFirst(2);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo((-1));
      vecInt0.containsAt(408);
      // Undeclared exception!
      try { 
        vecInt0.push((-128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1199;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 1957;
      intArray0[6] = (-845);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.remove(0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1152);
      vecInt0.unsafePush(0);
      vecInt0.indexOf((-1152));
      vecInt0.push((-1));
      VecInt vecInt1 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.pop();
      int int1 = 0;
      vecInt0.set(0, 1);
      vecInt0.isSubsetOf(vecInt1);
      iVecInt0.last();
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt1.clear();
      // Undeclared exception!
      try { 
        vecInt1.delete(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-50));
      vecInt0.indexOf((-1152));
      IVecInt iVecInt0 = vecInt0.push((-1));
      int[] intArray0 = new int[4];
      iVecInt0.contains((-1));
      VecInt vecInt1 = new VecInt(36);
      // Undeclared exception!
      try { 
        vecInt1.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.iterator();
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.toString();
      vecInt1.moveTo(intArray0);
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      vecInt0.isEmpty();
      VecInt vecInt1 = new VecInt(1520, 1520);
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt1.delete(1);
      vecInt0.sortUnique();
      vecInt1.contains(1);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1975, 1422);
      assertNotNull(vecInt0);
      assertEquals(1422, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1975, vecInt0.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      
      String string0 = vecInt1.toString();
      assertEquals("0", string0);
      assertEquals(1, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(string0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      VecInt vecInt0 = new VecInt(1520, 1520);
      assertNotNull(vecInt0);
      assertEquals(1520, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1520, vecInt0.last());
      
      int[] intArray0 = new int[3];
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(3, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      vecInt0.insertFirst((-1538));
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(1521, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1520, vecInt0.last());
      
      vecInt0.sortUnique();
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(1520, vecInt0.last());
      
      String string0 = vecInt1.toString();
      assertEquals("0,0,0", string0);
      assertEquals(3, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(string0);
      assertEquals(3, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertEquals(3, intArray0.length);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(3, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(3, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      
      int int0 = vecInt1.last();
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      VecInt vecInt0 = new VecInt(423, 423);
      assertNotNull(vecInt0);
      assertEquals(423, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(423, vecInt0.last());
      
      vecInt0.insertFirst((-2157));
      assertFalse(vecInt0.isEmpty());
      assertEquals(423, vecInt0.last());
      assertEquals(424, vecInt0.size());
      
      vecInt0.sortUnique();
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(423, vecInt0.last());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(11);
      assertEquals(0, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(423, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int1 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      IVecInt iVecInt0 = vecInt0.pop();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      vecInt0.moveTo2(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      intArray0[1] = 0;
      int int2 = 0;
      // Undeclared exception!
      try { 
        vecInt0.set(930, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      String string0 = vecInt0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1370);
      assertEquals(1, intArray0.length);
      assertEquals(0, iVecIntArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(iVecIntArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      int[] intArray1 = vecInt0.toArray();
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush((-33));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-33), vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      // Undeclared exception!
      try { 
        vecInt1.sort((-33), 1464);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 715
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 438);
      assertNotNull(vecInt0);
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      
      vecInt0.insertFirst(2);
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      
      vecInt0.sortUnique();
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1423);
      assertEquals(0, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 2;
      int int1 = 438;
      VecInt vecInt0 = new VecInt(438, (-1628));
      assertNotNull(vecInt0);
      assertEquals(438, vecInt0.size());
      assertEquals((-1628), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.remove(680);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 438
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      VecInt vecInt0 = new VecInt(1520, 1520);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1520, vecInt0.size());
      assertEquals(1520, vecInt0.last());
      
      int[] intArray0 = new int[3];
      int int0 = 1;
      vecInt0.ensure(1520);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1520, vecInt0.size());
      assertEquals(1520, vecInt0.last());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.last());
      assertEquals(3, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, (-698), 0, (-1686)).when(comparator1).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush((-50));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-50), vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertTrue(boolean0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-50), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 3617;
      VecInt vecInt0 = new VecInt(3617);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3617;
      intArray0[1] = 3617;
      vecInt0.growTo(3617, 3617);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3617, vecInt0.size());
      assertEquals(3617, vecInt0.last());
      
      intArray0[2] = 3617;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 1975;
      VecInt vecInt0 = new VecInt(1975, 1422);
      assertNotNull(vecInt0);
      assertEquals(1422, vecInt0.last());
      assertEquals(1975, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(404, (-3783), 1013, 1422, 1975).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.unsafePush((-33));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-33), vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      boolean boolean0 = vecInt0.contains((-1));
      assertFalse(boolean0);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-33), vecInt0.last());
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1291);
      intArray0[1] = (-1255);
      intArray0[2] = (-639);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 5;
      intArray0[6] = 2894;
      intArray0[7] = 0;
      intArray0[8] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1291), (-1255), (-639), 0, 0, 5, 2894, 0, (-1)}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.last());
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2894;
      intArray1[1] = (-1);
      intArray1[2] = (-639);
      // Undeclared exception!
      try { 
        vecInt0.copyTo(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[7];
      int int0 = 1910;
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 1898;
      VecInt vecInt0 = new VecInt(1898);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      vecInt1.shrinkTo(1898);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.isEmpty());
      assertEquals(1898, vecInt1.size());
      
      // Undeclared exception!
      try { 
        vecInt1.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1101);
      intArray0[1] = 1479;
      intArray0[2] = 4526;
      intArray0[3] = 2408;
      intArray0[4] = (-105);
      intArray0[5] = (-1378);
      intArray0[6] = (-1866);
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1101), 1479, 4526, 2408, (-105), (-1378), (-1866)}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1866), vecInt0.last());
      assertEquals(7, vecInt0.size());
      
      int int0 = vecInt0.last();
      assertEquals((-1866), int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1101), 1479, 4526, 2408, (-105), (-1378), (-1866)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1866), vecInt0.last());
      assertEquals(7, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(1, 1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(1, vecInt1.size());
      assertEquals(1, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      boolean boolean0 = vecInt0.equals(vecInt1);
      assertFalse(boolean0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(1, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      vecInt0.ensure(0);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean1 = vecInt0.isEmpty();
      assertTrue(boolean1);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1743, 2);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertEquals(1743, vecInt0.size());
      
      int[] intArray0 = vecInt0.toArray();
      assertEquals(1743, intArray0.length);
      assertNotNull(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertEquals(1743, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.insertFirst(1506);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1506, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      int int0 = vecInt0.containsAt(1496, 1496);
      assertEquals((-1), int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1506, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      int[] intArray0 = vecInt0.toArray();
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1506, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1506, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      boolean boolean0 = vecInt0.contains(27);
      assertFalse(boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1506, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      int int1 = vecInt0.last();
      assertEquals(1506, int1);
      assertFalse(int1 == int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1506, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push((-61));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-61), vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertEquals((-61), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      
      boolean boolean1 = vecInt0.isEmpty();
      assertFalse(boolean1);
      assertSame(vecInt0, iVecInt0);
      assertTrue(boolean1 == boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-61), vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      String string0 = vecInt0.toString();
      assertEquals("1506,-61", string0);
      assertSame(vecInt0, iVecInt0);
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-61), vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(554);
      assertEquals(0, iVecIntArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertNotNull(iVecIntArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-61), vecInt0.last());
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 438);
      assertNotNull(vecInt0);
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      
      vecInt0.insertFirst(2);
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      
      vecInt0.sortUnique();
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(2, (-1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(2, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.last());
      
      boolean boolean0 = vecInt0.equals(vecInt1);
      assertFalse(boolean0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(2, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.ensure(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      intArray0[4] = 0;
      IVecInt iVecInt1 = vecInt1.push(0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(0, iVecInt1.last());
      assertEquals(1, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      
      boolean boolean0 = vecInt1.isEmpty();
      assertFalse(boolean0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, iVecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      VecInt vecInt2 = new VecInt(intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)iVecInt1));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(0, vecInt2.last());
      assertEquals(8, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      
      String string0 = vecInt2.toString();
      assertEquals("0,0,0,0,0,0,0,0", string0);
      assertEquals(8, intArray0.length);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, iVecInt1);
      assertNotSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)iVecInt1));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      assertEquals(0, vecInt2.last());
      assertEquals(8, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt1.subset(1);
      assertEquals(1, iVecIntArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertNotNull(iVecIntArray0);
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(7, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.growTo(763, 184);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 763
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-1327), (-1327));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1326
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.ensure(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      int int0 = (-2233);
      intArray0[1] = (-2233);
      int int1 = 583;
      IVecInt iVecInt0 = vecInt0.pop();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      VecInt vecInt0 = new VecInt(112, 438);
      assertNotNull(vecInt0);
      assertEquals(112, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Integer integer0 = new Integer(138);
      assertEquals(138, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vecInt0.equals(integer0);
      assertFalse(boolean0);
      assertEquals(112, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      String string0 = vecInt0.toString();
      assertEquals("438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438,438", string0);
      assertNotNull(string0);
      assertEquals(112, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(112, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(112, iVecInt0.size());
      
      IVecInt iVecInt1 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertNotNull(iVecInt1);
      assertEquals(112, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(112, iVecInt1.size());
      assertEquals(438, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      
      IVecInt iVecInt2 = vecInt0.pop();
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt2, iVecInt1);
      assertSame(iVecInt2, vecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertNotNull(iVecInt2);
      assertEquals(438, vecInt0.last());
      assertEquals(111, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, iVecInt2.last());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(111, iVecInt2.size());
      
      vecInt0.insertFirst((-2657));
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(112, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1200, 1200);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1200, vecInt0.size());
      assertEquals(1200, vecInt0.last());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1200, vecInt0.size());
      assertEquals(1200, vecInt0.last());
      assertEquals(1200, iVecInt0.last());
      assertEquals(1200, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1910;
      intArray0[1] = (-476);
      intArray0[2] = (-4592);
      intArray0[3] = 0;
      intArray0[4] = 3675;
      intArray0[5] = 1;
      intArray0[6] = 2941;
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1910, (-476), (-4592), 0, 3675, 1, 2941}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(7, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2941, vecInt1.last());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1910, (-476), (-4592), 0, 3675, 1, 2941}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(7, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2941, vecInt1.last());
      
      // Undeclared exception!
      try { 
        vecInt0.set((-69), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 0;
      VecInt vecInt0 = new VecInt(5);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrinkTo(1496);
      assertEquals(1496, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.sort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 748
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.ensure(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2294, 2294);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2294, vecInt0.last());
      assertEquals(2294, vecInt0.size());
      
      int[] intArray0 = new int[6];
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      intArray0[0] = 2294;
      intArray0[1] = 2294;
      intArray0[2] = 2294;
      intArray0[3] = 2294;
      intArray0[4] = 2294;
      intArray0[5] = 2294;
      vecInt0.moveTo(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2294, 2294, 2294, 2294, 2294, 2294}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {2294, 2294, 2294, 2294, 2294, 2294}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(6, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2294, vecInt1.last());
      
      vecInt1.shrink(2294);
      assertEquals(6, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {2294, 2294, 2294, 2294, 2294, 2294}, intArray0);
      assertEquals((-2288), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.delete(312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.unsafePush((-50));
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-50), vecInt0.last());
      
      int int0 = vecInt0.indexOf((-1152));
      assertEquals((-1), int0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-50), vecInt0.last());
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      vecInt1.insertFirst((-1));
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.last());
      assertEquals(1, vecInt1.size());
      
      vecInt0.sortUnique();
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-50), vecInt0.last());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-50);
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 2;
      VecInt vecInt2 = new VecInt(intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {(-50), 2, (-1), 1, 2, 2}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(6, vecInt2.size());
      assertEquals(2, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      
      boolean boolean0 = vecInt2.isSubsetOf(vecInt1);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {(-50), 2, (-1), 1, 2, 2}, intArray0);
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertEquals(6, vecInt2.size());
      assertEquals(2, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      
      int int1 = vecInt2.unsafeGet(2);
      assertEquals((-1), int1);
      assertEquals(6, intArray0.length);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-50), 2, (-1), 1, 2, 2}, intArray0);
      assertEquals(6, vecInt2.size());
      assertEquals(2, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(7, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      String string0 = vecInt1.toString();
      assertEquals("0,0,0,0,0,0,0", string0);
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      assertEquals(7, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      VecInt vecInt2 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(7, vecInt2.size());
      assertEquals(0, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      
      vecInt2.sortUnique();
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt2.last());
      assertEquals(1, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt2);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt2));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(7, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      
      vecInt2.sort();
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt2.last());
      assertEquals(1, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      
      int int0 = vecInt0.size();
      assertEquals(7, int0);
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.sort(7, 1204);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 605
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1), 3408);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 28;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {28, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(15, 28);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(28, vecInt1.last());
      assertEquals(15, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {28, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertEquals(28, vecInt1.last());
      assertEquals(15, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[2] = 1199;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 1957;
      intArray0[6] = (-845);
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 1199, 2, 0, 1957, (-845)}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertEquals((-845), vecInt0.last());
      
      vecInt0.remove(0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 1199, 2, 0, 1957, (-845), (-845)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertEquals((-845), vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      
      vecInt0.sort();
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-800);
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-800), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      
      String string0 = vecInt0.toString();
      assertEquals("-800,0,0,0,0,0,0,0,0", string0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-800), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      
      int int0 = vecInt0.containsAt(0, 7);
      assertEquals(8, int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-800), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      
      vecInt0.shrinkTo((-434));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-800), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-434), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      EmptyVecInt emptyVecInt1 = (EmptyVecInt)VecInt.EMPTY;
      assertNotSame(emptyVecInt1, emptyVecInt0);
      assertTrue(emptyVecInt1.equals((Object)emptyVecInt0));
      assertNotNull(emptyVecInt1);
      assertTrue(emptyVecInt1.isEmpty());
      assertEquals(0, emptyVecInt1.size());
      assertEquals("[]", emptyVecInt1.toString());
      
      // Undeclared exception!
      try { 
        emptyVecInt1.get(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 2043;
      int int1 = (-719);
      VecInt vecInt0 = new VecInt(2043, (-719));
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2043, vecInt0.size());
      assertEquals((-719), vecInt0.last());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-719);
      intArray0[1] = (-719);
      intArray0[2] = 2043;
      intArray0[3] = (-719);
      intArray0[4] = (-719);
      intArray0[5] = 2043;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.equals("");
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      VecInt vecInt0 = new VecInt(438);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push((-1264));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1264), vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1264), iVecInt0.last());
      
      vecInt0.growTo((-1152), 438);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1264), vecInt0.last());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vecInt0.selectionSort(129, 438, comparator0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-813);
      intArray0[2] = (-232);
      intArray0[3] = 3507;
      intArray0[4] = (-1);
      intArray0[5] = 5;
      intArray0[6] = (-541);
      intArray0[7] = 0;
      intArray0[8] = 393;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-813), (-232), 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 3507, 15, (-232), (-541)).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {393, 0, (-813), (-232), 3507, (-1), 5, (-541), 0}, intArray0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      vecInt0.copyTo(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {393, 0, (-813), (-232), 3507, (-1), 5, (-541), 0}, intArray0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {393, 0, (-813), (-232), 3507, (-1), 5, (-541), 0}, intArray0);
      assertNotNull(iteratorInt0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int[] intArray1 = vecInt0.toArray();
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {393, 0, (-813), (-232), 3507, (-1), 5, (-541), 0}, intArray1);
      assertArrayEquals(new int[] {393, 0, (-813), (-232), 3507, (-1), 5, (-541), 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.delete((-232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -232
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = (-731);
      int int1 = vecInt0.containsAt((-731));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push((-1));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.last());
      assertEquals((-1), iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-731);
      intArray0[2] = (-1);
      intArray0[3] = (-731);
      intArray0[4] = (-731);
      intArray0[5] = (-731);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-83), 1, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-813);
      intArray0[2] = (-232);
      intArray0[3] = 3507;
      intArray0[4] = (-1);
      intArray0[5] = 5;
      intArray0[6] = (-541);
      intArray0[7] = 0;
      intArray0[8] = 393;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-813), (-232), 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-813), (-232), 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      vecInt0.copyTo(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-813), (-232), 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-813), (-232), 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.delete((-232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -232
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-800);
      intArray0[1] = 0;
      intArray0[2] = (-2598);
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-800), 0, (-2598), 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-800), 0, (-2598), 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.remove((-1152));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 2134;
      int int1 = (-1);
      VecInt vecInt0 = new VecInt(2134, (-1));
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.last());
      assertEquals(2134, vecInt0.size());
      
      int[] intArray0 = null;
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        vecInt0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 438;
      VecInt vecInt0 = new VecInt(2, 438);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean0 = vecInt0.equals(integer0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      String string0 = vecInt0.toString();
      assertEquals("438,438", string0);
      assertNotNull(string0);
      assertEquals(2, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals(438, iVecInt0.last());
      
      IVecInt iVecInt1 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertEquals(2, vecInt0.size());
      assertEquals(438, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertEquals(438, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      
      IVecInt iVecInt2 = vecInt0.pop();
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(iVecInt2, vecInt0);
      assertNotSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt2, iVecInt1);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertNotNull(iVecInt2);
      assertEquals(438, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt2.size());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(438, iVecInt2.last());
      
      vecInt0.growTo(0, 0);
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(438, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(438, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.selectionSort(0, 2, comparator0);
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(438, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort((-830), 0, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -415
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.contains((-1));
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = (-1);
      IVecInt iVecInt0 = vecInt0.pop();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.insertFirst((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VecInt vecInt0 = new VecInt(45);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push(148);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals(148, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt0.size());
      assertEquals(148, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 45;
      intArray0[1] = 148;
      intArray0[2] = 45;
      intArray0[3] = 45;
      intArray0[4] = 45;
      intArray0[5] = 45;
      intArray0[6] = 148;
      intArray0[7] = 148;
      intArray0[8] = 148;
      iVecInt0.moveTo(intArray0);
      assertEquals(9, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertArrayEquals(new int[] {148, 148, 45, 45, 45, 45, 148, 148, 148}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      vecInt0.growTo((-3370), 119);
      assertSame(vecInt0, iVecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      iVecInt0.growTo((-3370), (-309));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 119;
      intArray1[1] = 45;
      intArray1[3] = (-309);
      intArray1[4] = (-309);
      intArray1[5] = 0;
      IVecInt iVecInt1 = iVecInt0.clone();
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, iVecInt1);
      assertSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      
      IVecInt iVecInt2 = iVecInt0.pop();
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, iVecInt2);
      assertNotSame(iVecInt0, iVecInt1);
      assertSame(iVecInt0, vecInt0);
      assertSame(iVecInt2, vecInt0);
      assertNotSame(iVecInt2, iVecInt1);
      assertSame(iVecInt2, iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertNotNull(iVecInt2);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt2.size());
      assertFalse(iVecInt2.isEmpty());
      
      IVecInt iVecInt3 = vecInt0.pop();
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt3);
      assertNotSame(iVecInt3, iVecInt1);
      assertSame(iVecInt3, vecInt0);
      assertSame(iVecInt3, iVecInt2);
      assertSame(iVecInt3, iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt3.equals((Object)iVecInt1));
      assertNotNull(iVecInt3);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2), vecInt0.size());
      assertFalse(iVecInt3.isEmpty());
      assertEquals((-2), iVecInt3.size());
      
      // Undeclared exception!
      try { 
        vecInt0.insertFirst(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      String string0 = vecInt0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(15, (-4592));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(15, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-4592), vecInt1.last());
      
      boolean boolean0 = vecInt0.contains(0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      String string0 = vecInt0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      IVecInt iVecInt1 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      
      IVecInt iVecInt2 = vecInt0.pop();
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt2, iVecInt1);
      assertSame(iVecInt2, vecInt0);
      assertNotSame(iVecInt2, iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertNotNull(iVecInt2);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt2.size());
      assertFalse(iVecInt2.isEmpty());
      
      vecInt0.growTo(0, 1900);
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      
      vecInt0.sortUnique();
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      vecInt0.selectionSort(1888, 0, (Comparator<Integer>) null);
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 1900, (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 950
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(7, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      String string0 = vecInt1.toString();
      assertEquals("0,0,0,0,0,0,0", string0);
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      assertEquals(7, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      VecInt vecInt2 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(7, vecInt2.size());
      assertEquals(0, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      
      boolean boolean0 = vecInt2.isSubsetOf(vecInt1);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)vecInt2));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(7, vecInt2.size());
      assertEquals(0, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      
      EmptyVecInt emptyVecInt1 = (EmptyVecInt)emptyVecInt0.clone();
      assertNotSame(emptyVecInt0, emptyVecInt1);
      assertNotSame(emptyVecInt1, emptyVecInt0);
      assertTrue(emptyVecInt1.equals((Object)emptyVecInt0));
      assertNotNull(emptyVecInt1);
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt1.toString());
      assertEquals(0, emptyVecInt1.size());
      assertTrue(emptyVecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) emptyVecInt1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      VecInt vecInt0 = new VecInt(1520, 1520);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1520, vecInt0.last());
      assertEquals(1520, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(1497, 15);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(15, vecInt1.last());
      assertEquals(1497, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      vecInt0.sort();
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.isEmpty());
      assertEquals(1520, vecInt0.last());
      assertEquals(1520, vecInt0.size());
      
      // Undeclared exception!
      vecInt0.selectionSort(605, 1497);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 940;
      intArray0[5] = 0;
      intArray0[6] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 940, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int int0 = vecInt0.get(0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 940, 0, 0}, intArray0);
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = 1;
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertEquals(0, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      boolean boolean0 = vecInt0.contains(0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.moveTo(0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = 1972;
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(1972);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 28;
      int int0 = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {28, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(7, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 438;
      VecInt vecInt0 = new VecInt(2, 438);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean0 = vecInt0.equals(integer0);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      String string0 = vecInt0.toString();
      assertEquals("438,438", string0);
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(438, iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      
      IVecInt iVecInt1 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertNotNull(iVecInt1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertEquals(2, iVecInt1.size());
      assertEquals(438, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      
      IVecInt iVecInt2 = vecInt0.pop();
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertSame(iVecInt2, vecInt0);
      assertNotSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt2, iVecInt1);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertNotNull(iVecInt2);
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt2.size());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(438, iVecInt2.last());
      
      vecInt0.growTo(0, 0);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      vecInt0.sortUnique();
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1504).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.selectionSort(0, 2, comparator0);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort((-830), 0, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -415
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = 3601;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(3601, 165, comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3601;
      intArray0[1] = 165;
      intArray0[2] = 165;
      intArray0[3] = 165;
      intArray0[4] = 165;
      intArray0[5] = 165;
      intArray0[6] = 165;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(3601, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink((-2091));
      assertEquals(2091, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.contains(1488);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VecInt vecInt0 = new VecInt(994);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 994;
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      intArray0[1] = 994;
      intArray0[2] = 994;
      intArray0[3] = 994;
      intArray0[4] = 994;
      intArray0[5] = (-1339);
      vecInt0.moveTo(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {994, 994, 994, 994, 994, (-1339)}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = 112;
      vecInt0.shrink(112);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-112), vecInt0.size());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertFalse(boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-112), vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.set((-2002), 994);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vecInt0.equals(object0);
      assertFalse(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(1520, 1520);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(1520, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1520, vecInt1.size());
      
      vecInt0.moveTo((IVecInt) vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1520, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1520, vecInt1.size());
      
      vecInt0.moveTo((IVecInt) vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1520, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1520, vecInt1.size());
      
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-869);
      intArray0[7] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 0, 0, 0, (-869), 1}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertEquals(8, intArray0.length);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 1, 0, 0, 0, 0, (-869), 1}, intArray0);
      assertNotNull(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(8, iVecInt0.size());
      
      vecInt0.moveTo(0, 0);
      assertEquals(8, intArray0.length);
      assertNotSame(vecInt0, iVecInt0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertArrayEquals(new int[] {0, 1, 0, 0, 0, 0, (-869), 1}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, 0, comparator0);
      assertEquals(8, intArray0.length);
      assertNotSame(vecInt0, iVecInt0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertArrayEquals(new int[] {0, 1, 0, 0, 0, 0, (-869), 1}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      assertEquals(1, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sort();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(2430, 2096, comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 28;
      VecInt vecInt0 = new VecInt(1965);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.equals(emptyVecInt0);
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      vecInt0.hashCode();
      assertSame(vecInt0, iVecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      String string0 = vecInt0.toString();
      assertEquals("", string0);
      assertSame(vecInt0, iVecInt0);
      assertNotNull(string0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.containsAt(28, 861);
      assertEquals((-1), int0);
      assertSame(vecInt0, iVecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      VecInt vecInt0 = new VecInt(1511, 1511);
      assertNotNull(vecInt0);
      assertEquals(1511, vecInt0.size());
      assertEquals(1511, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.equals(emptyVecInt0);
      assertFalse(boolean0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(1511, vecInt0.size());
      assertEquals(1511, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.shrinkTo((-398));
      assertEquals((-398), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.indexOf((-3289));
      assertEquals((-1), int0);
      assertEquals((-398), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      VecInt vecInt0 = new VecInt(320, 1520);
      assertNotNull(vecInt0);
      assertEquals(320, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1520, vecInt0.last());
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      
      vecInt0.set(1, 116);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 116, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 116, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(7, vecInt1.size());
      assertEquals(0, vecInt1.last());
      
      // Undeclared exception!
      try { 
        vecInt0.remove(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = (-1152);
      vecInt0.unsafePush(0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int1 = vecInt0.indexOf((-1152));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push((-1));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals((-1), vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      vecInt0.moveTo2(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      VecInt vecInt1 = new VecInt(0);
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      IVecInt iVecInt1 = vecInt0.pop();
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertNotNull(iVecInt1);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-1), iVecInt1.size());
      
      // Undeclared exception!
      try { 
        vecInt0.set(0, 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-800);
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(15);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-800), (-800), comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      vecInt1.insertFirst(2355);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2355, vecInt1.last());
      
      VecInt vecInt2 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {(-800), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(9, vecInt2.size());
      assertEquals(0, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      
      vecInt2.pushAll(vecInt1);
      assertEquals(9, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {(-800), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2355, vecInt1.last());
      assertEquals(10, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals(2355, vecInt2.last());
      
      IVecInt iVecInt0 = vecInt2.push(0);
      assertEquals(9, intArray0.length);
      assertNotSame(vecInt2, vecInt0);
      assertSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertSame(iVecInt0, vecInt2);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertArrayEquals(new int[] {(-800), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(11, vecInt2.size());
      assertEquals(0, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(11, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      
      vecInt0.shrinkTo(2355);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(2355, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt1.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-800);
      intArray0[1] = 0;
      intArray0[2] = (-2598);
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = (-865);
      intArray0[7] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-800), 0, (-2598), 2, 1, 0, (-865), 5, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-800);
      intArray1[2] = (-2598);
      intArray1[3] = 2;
      intArray1[4] = (-2598);
      int int0 = vecInt0.delete(5);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-800), 0, (-2598), 2, 1, 0, (-865), 5, 0}, intArray0);
      assertEquals(5, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      
      intArray1[5] = 0;
      intArray1[6] = (-2598);
      intArray1[7] = 0;
      VecInt vecInt1 = new VecInt(intArray1);
      assertEquals(8, intArray1.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-800), (-2598), 2, (-2598), 0, (-2598), 0}, intArray1);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(8, vecInt1.size());
      assertEquals(0, vecInt1.last());
      
      boolean boolean0 = vecInt1.isSubsetOf(vecInt0);
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-800), 0, (-2598), 2, 1, 0, (-865), 5, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-800), (-2598), 2, (-2598), 0, (-2598), 0}, intArray1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(8, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertEquals(5, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertEquals(9, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertArrayEquals(new int[] {(-800), 0, (-2598), 2, 1, 0, (-865), 5, 0}, intArray0);
      assertNotNull(iteratorInt0);
      assertEquals(5, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.ensure(5);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(5);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      IteratorInt iteratorInt0 = vecInt1.iterator();
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(iteratorInt0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      boolean boolean0 = vecInt1.equals(emptyVecInt0);
      assertTrue(boolean0);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink((-1346));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1347, vecInt0.size());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        vecInt0.sort((Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 673
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3639);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = vecInt0.indexOf(3639);
      assertEquals((-1), int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push((-860));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-860), vecInt0.last());
      assertEquals((-860), iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      vecInt0.moveTo(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      
      boolean boolean0 = vecInt1.isSubsetOf(vecInt1);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      VecInt vecInt0 = new VecInt(1520, 1520);
      assertNotNull(vecInt0);
      assertEquals(1520, vecInt0.last());
      assertEquals(1520, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.insertFirst((-1514));
      assertEquals(1520, vecInt0.last());
      assertEquals(1521, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(2, vecInt0.size());
      assertEquals(1520, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      String string0 = vecInt0.toString();
      assertEquals("-1514,1520", string0);
      assertNotNull(string0);
      assertEquals(2, vecInt0.size());
      assertEquals(1520, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.indexOf(1520);
      assertEquals(1, int0);
      assertEquals(2, vecInt0.size());
      assertEquals(1520, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(1520, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.get(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 438);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vecInt0.equals(integer0);
      assertFalse(boolean0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      
      String string0 = vecInt0.toString();
      assertEquals("438,438", string0);
      assertNotNull(string0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertEquals(438, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      vecInt0.ensure(2447);
      assertNotSame(vecInt0, iVecInt0);
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(438, vecInt0.last());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2447;
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertArrayEquals(new int[] {2, 2447}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(2447, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      
      boolean boolean1 = vecInt1.isEmpty();
      assertFalse(boolean1);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {2, 2447}, intArray0);
      assertEquals(2447, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      boolean boolean0 = vecInt0.isSubsetOf((VecInt) null);
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = 169;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(169, 670, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 419
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.insertFirst(0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      vecInt0.moveTo((IVecInt) vecInt1);
      assertEquals(0, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      assertEquals(0, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(readOnlyVecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertEquals(1, readOnlyVecInt0.size());
      
      VecInt vecInt2 = new VecInt(1478);
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      
      boolean boolean0 = vecInt1.equals(vecInt2);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-737);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1104;
      intArray0[4] = (-1681);
      intArray0[5] = 1;
      intArray0[6] = 853;
      intArray0[7] = 0;
      intArray0[8] = 1420;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-737), 0, 0, 1104, (-1681), 1, 853, 0, 1420}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1420, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.get((-737));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = (-4592);
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int1 = 15;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(15, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(7, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      VecInt vecInt2 = new VecInt(796, 796);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertEquals(796, vecInt2.size());
      assertEquals(796, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      
      boolean boolean0 = vecInt2.isSubsetOf(vecInt1);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(796, vecInt2.size());
      assertEquals(796, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, (-3374));
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3374);
      intArray0[1] = 0;
      intArray0[2] = (-3374);
      intArray0[3] = (-3374);
      intArray0[4] = (-3374);
      vecInt0.copyTo(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-3374), 0, (-3374), (-3374), (-3374)}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(0);
      assertEquals(0, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      VecInt vecInt0 = new VecInt(402);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.set((-3580), 402);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-813);
      intArray0[2] = (-232);
      intArray0[3] = 3507;
      intArray0[4] = (-1);
      intArray0[5] = 5;
      intArray0[6] = (-541);
      intArray0[7] = 0;
      intArray0[8] = 393;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-813), (-232), 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(3345);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, (-813), (-232), 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      int int0 = vecInt1.unsafeGet(1404);
      assertEquals(0, int0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt1.remove(5);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7, 7);
      assertNotNull(vecInt0);
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.unsafePush((-5729));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[7];
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(0, vecInt1.last());
      assertEquals(7, vecInt1.size());
      
      VecInt vecInt2 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(0, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(7, vecInt2.size());
      
      VecInt vecInt3 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertTrue(vecInt3.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt3);
      assertFalse(vecInt3.isEmpty());
      assertEquals(7, vecInt3.size());
      assertEquals(0, vecInt3.last());
      
      // Undeclared exception!
      try { 
        vecInt3.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-813);
      intArray0[2] = (-232);
      intArray0[3] = 3507;
      intArray0[4] = (-1);
      intArray0[5] = 5;
      intArray0[6] = (-541);
      intArray0[7] = 0;
      intArray0[8] = 393;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-813), (-232), 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1489, (-1283), 1476, 0, 1476).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-232), (-813), 0, 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      vecInt0.copyTo(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-232), (-813), 0, 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-232), (-813), 0, 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(393, vecInt0.last());
      assertEquals(9, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {(-232), (-813), 0, 3507, (-1), 5, (-541), 0, 393}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(9, vecInt1.size());
      assertEquals(393, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      vecInt1.sort();
      assertEquals(9, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {(-813), (-541), (-232), (-1), 0, 0, 5, 393, 3507}, intArray0);
      assertEquals(9, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3507, vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4002);
      intArray0[3] = (-3012);
      intArray0[4] = 0;
      intArray0[5] = (-144);
      intArray0[6] = (-2405);
      intArray0[7] = 3203;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-4002), (-3012), 0, (-144), (-2405), 3203}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(8, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3203, vecInt0.last());
      
      vecInt0.ensure(0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-4002), (-3012), 0, (-144), (-2405), 3203}, intArray0);
      assertEquals(8, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3203, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[13];
      intArray0[0] = 1486;
      intArray0[0] = 1486;
      intArray0[2] = (-1);
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(13, intArray0.length);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(13, vecInt1.size());
      
      int int0 = vecInt1.indexOf(0);
      assertEquals(1, int0);
      assertEquals(13, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(13, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.insertFirst(1506);
      assertEquals(1506, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.containsAt(1496, 1496);
      assertEquals((-1), int0);
      assertEquals(1506, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int[] intArray0 = vecInt0.toArray();
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1506, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1506, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      vecInt0.growTo(141, 1);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(141, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      VecInt vecInt1 = new VecInt(intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      String string0 = vecInt1.toString();
      assertEquals("", string0);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(string0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(iVecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      int int0 = vecInt0.containsAt(5575, 0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(141, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      vecInt1.shrinkTo((-2449));
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(vecInt1.isEmpty());
      assertEquals((-2449), vecInt1.size());
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      
      // Undeclared exception!
      try { 
        emptyVecInt0.get(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(7, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(readOnlyVecInt0);
      assertEquals(7, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertEquals(7, readOnlyVecInt0.size());
      
      boolean boolean0 = vecInt0.equals(readOnlyVecInt0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertEquals(7, readOnlyVecInt0.size());
      
      VecInt vecInt1 = new VecInt(1520, 1228);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(1520, vecInt1.size());
      assertEquals(1228, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-815);
      intArray1[3] = 0;
      VecInt vecInt2 = new VecInt(1520);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      
      VecInt vecInt3 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt3);
      assertEquals(0, vecInt3.last());
      assertEquals(7, vecInt3.size());
      assertFalse(vecInt3.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt3.sort(comparator0);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(vecInt3, vecInt0);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt3.last());
      assertEquals(7, vecInt3.size());
      assertFalse(vecInt3.isEmpty());
      
      VecInt vecInt4 = new VecInt();
      assertFalse(vecInt4.equals((Object)vecInt3));
      assertFalse(vecInt4.equals((Object)vecInt1));
      assertFalse(vecInt4.equals((Object)vecInt0));
      assertTrue(vecInt4.equals((Object)vecInt2));
      assertNotNull(vecInt4);
      assertTrue(vecInt4.isEmpty());
      assertEquals(0, vecInt4.size());
      
      vecInt4.sort();
      assertNotSame(vecInt4, vecInt2);
      assertNotSame(vecInt4, vecInt3);
      assertNotSame(vecInt4, vecInt1);
      assertNotSame(vecInt4, vecInt0);
      assertFalse(vecInt4.equals((Object)vecInt3));
      assertFalse(vecInt4.equals((Object)vecInt1));
      assertFalse(vecInt4.equals((Object)vecInt0));
      assertTrue(vecInt4.equals((Object)vecInt2));
      assertTrue(vecInt4.isEmpty());
      assertEquals(0, vecInt4.size());
      
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(1520, 3789);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 22;
      VecInt vecInt0 = new VecInt(22);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.delete(1773);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1773
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.ensure(5);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.contains(5);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.set(1650, 1650);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vecInt0.equals(object0);
      assertFalse(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(1520, 1520);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(1520, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1520, vecInt1.last());
      
      int[] intArray0 = new int[3];
      VecInt vecInt2 = new VecInt(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(vecInt2);
      assertFalse(vecInt2.isEmpty());
      assertEquals(3, vecInt2.size());
      assertEquals(0, vecInt2.last());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      vecInt1.sort(comparator1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertEquals(1520, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1520, vecInt1.last());
      
      vecInt0.sort();
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt2.selectionSort(1, 1400);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset((-564));
      assertEquals(0, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1791);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.selectionSort(1791, 1217);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush((-50));
      assertEquals(1, vecInt0.size());
      assertEquals((-50), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.indexOf((-1152));
      assertEquals((-1), int0);
      assertEquals(1, vecInt0.size());
      assertEquals((-50), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      vecInt1.insertFirst((-1));
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.last());
      assertEquals(1, vecInt1.size());
      
      vecInt0.sortUnique();
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(1, vecInt0.size());
      assertEquals((-50), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.equals(vecInt1);
      assertFalse(boolean0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(1, vecInt0.size());
      assertEquals((-50), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.last());
      assertEquals(1, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush((-50));
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-50), vecInt0.last());
      
      vecInt0.sort();
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-50), vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[1];
      vecInt0.unsafePush(439);
      assertFalse(vecInt0.isEmpty());
      assertEquals(439, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      intArray0[0] = 439;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(439, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 415;
      VecInt vecInt0 = new VecInt(415);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Integer integer0 = new Integer(415);
      assertEquals(415, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      
      int int1 = Integer.min(2285, 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = Integer.compare(415, 0);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      vecInt0.growTo(710, 2285);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2285, vecInt0.last());
      assertEquals(710, vecInt0.size());
      
      int int3 = 0;
      int int4 = Integer.divideUnsigned(415, (-1425));
      assertEquals(0, int4);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      
      // Undeclared exception!
      try { 
        emptyVecInt0.set(0, (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = 1;
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertEquals(0, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int1 = new Integer(1);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int2 = (-67);
      // Undeclared exception!
      try { 
        vecInt0.remove((-67));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = (-1152);
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      VecInt vecInt0 = new VecInt(45);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(148, 148);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(148, vecInt1.size());
      assertEquals(148, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      vecInt0.moveTo2(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      String string0 = vecInt0.toString();
      assertEquals("", string0);
      assertNotSame(vecInt0, vecInt1);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(string0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt2 = new VecInt(355);
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      
      IVecInt iVecInt0 = vecInt2.clone();
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt2);
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt2));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertNotNull(iVecInt0);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      IVecInt iVecInt1 = vecInt1.clone();
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, vecInt2);
      assertNotSame(iVecInt1, vecInt1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)vecInt2));
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt2));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt1));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertNotNull(iVecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertTrue(iVecInt1.isEmpty());
      
      VecInt vecInt3 = new VecInt(232, 45);
      assertFalse(vecInt3.equals((Object)iVecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertFalse(vecInt3.equals((Object)iVecInt1));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertNotNull(vecInt3);
      assertEquals(45, vecInt3.last());
      assertFalse(vecInt3.isEmpty());
      assertEquals(232, vecInt3.size());
      
      IVecInt iVecInt2 = vecInt3.pop();
      assertNotSame(vecInt3, iVecInt0);
      assertNotSame(vecInt3, vecInt1);
      assertNotSame(vecInt3, iVecInt1);
      assertSame(vecInt3, iVecInt2);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt0);
      assertNotSame(iVecInt2, vecInt1);
      assertNotSame(iVecInt2, iVecInt1);
      assertNotSame(iVecInt2, vecInt0);
      assertNotSame(iVecInt2, vecInt2);
      assertSame(iVecInt2, vecInt3);
      assertNotSame(iVecInt2, iVecInt0);
      assertFalse(vecInt3.equals((Object)iVecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertFalse(vecInt3.equals((Object)iVecInt1));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertFalse(iVecInt2.equals((Object)vecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertFalse(iVecInt2.equals((Object)vecInt0));
      assertFalse(iVecInt2.equals((Object)vecInt2));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertNotNull(iVecInt2);
      assertEquals(45, vecInt3.last());
      assertFalse(vecInt3.isEmpty());
      assertEquals(231, vecInt3.size());
      assertEquals(231, iVecInt2.size());
      assertEquals(45, iVecInt2.last());
      assertFalse(iVecInt2.isEmpty());
      
      vecInt2.insertFirst(232);
      assertNotSame(vecInt2, vecInt3);
      assertNotSame(vecInt2, iVecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt2);
      assertNotSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertFalse(vecInt2.equals((Object)vecInt3));
      assertFalse(vecInt2.equals((Object)iVecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt2));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertEquals(1, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals(232, vecInt2.last());
      
      vecInt3.sortUnique();
      assertNotSame(vecInt3, iVecInt0);
      assertNotSame(vecInt3, vecInt1);
      assertNotSame(vecInt3, iVecInt1);
      assertSame(vecInt3, iVecInt2);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt0);
      assertFalse(vecInt3.equals((Object)iVecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertFalse(vecInt3.equals((Object)iVecInt1));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertEquals(1, vecInt3.size());
      assertEquals(45, vecInt3.last());
      assertFalse(vecInt3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = 3376;
      VecInt vecInt1 = new VecInt(3376, 3376);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(3376, vecInt1.size());
      assertEquals(3376, vecInt1.last());
      
      vecInt0.pushAll(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(3376, vecInt0.last());
      assertEquals(3376, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3376, vecInt1.size());
      assertEquals(3376, vecInt1.last());
      
      VecInt vecInt2 = new VecInt(423, 0);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      assertEquals(0, vecInt2.last());
      assertEquals(423, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      
      vecInt0.insertFirst((-2157));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertEquals(3376, vecInt0.last());
      assertEquals(3377, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-800);
      intArray0[1] = 0;
      intArray0[2] = (-2598);
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = (-865);
      intArray0[7] = 5;
      intArray0[8] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-800), 0, (-2598), 2, 1, 0, (-865), 5, 1}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4452), (-4144), 1, 1, 2).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-2598), 0, (-800), 2, 1, 0, (-865), 5, 1}, intArray0);
      assertEquals(1, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll(emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt0);
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(7, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push(225);
      assertEquals(7, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(8, vecInt0.size());
      assertEquals(225, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(225, iVecInt0.last());
      assertEquals(8, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(readOnlyVecInt0);
      assertEquals(8, vecInt0.size());
      assertEquals(225, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertEquals(8, readOnlyVecInt0.size());
      
      boolean boolean0 = vecInt0.equals(readOnlyVecInt0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, vecInt0.size());
      assertEquals(225, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertEquals(8, readOnlyVecInt0.size());
      
      vecInt0.hashCode();
      assertEquals(7, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, vecInt0.size());
      assertEquals(225, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.ensure(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.remove(5);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int[] intArray0 = vecInt0.toArray();
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt1.moveTo(1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = 1491;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(0, 0, comparator0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.delete(1491);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1491
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push((-1703));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1703), vecInt0.last());
      assertEquals((-1703), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertEquals(1, iVecIntArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertNotNull(iVecIntArray0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1703), vecInt0.last());
      
      boolean boolean0 = vecInt0.contains(1);
      assertFalse(boolean0);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1703), vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      vecInt1.shrink((-1));
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      vecInt1.ensure((-1));
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      boolean boolean0 = vecInt1.isEmpty();
      assertFalse(boolean0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      boolean boolean1 = vecInt1.isEmpty();
      assertFalse(boolean1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      int int0 = vecInt1.containsAt(383);
      assertEquals((-1), int0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-800);
      intArray0[1] = 0;
      intArray0[2] = (-2598);
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = (-865);
      intArray0[7] = 5;
      intArray0[8] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-800), 0, (-2598), 2, 1, 0, (-865), 5, 1}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      vecInt0.sort();
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-2598), (-865), (-800), 0, 0, 1, 1, 2, 5}, intArray0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1526, 423);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(423, vecInt0.last());
      assertEquals(1526, vecInt0.size());
      
      vecInt0.insertFirst(1526);
      assertFalse(vecInt0.isEmpty());
      assertEquals(423, vecInt0.last());
      assertEquals(1527, vecInt0.size());
      
      vecInt0.sortUnique();
      assertFalse(vecInt0.isEmpty());
      assertEquals(1526, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1050);
      assertEquals(0, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1526, vecInt0.last());
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vecInt0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(1520, 1520);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(1520, vecInt1.last());
      assertEquals(1520, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.selectionSort(1520, 283, comparator1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(1520, vecInt1.last());
      assertEquals(1520, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2941;
      intArray0[1] = 2941;
      intArray0[2] = 1515;
      VecInt vecInt2 = new VecInt(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {2941, 2941, 1515}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(1515, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(3, vecInt2.size());
      
      boolean boolean1 = vecInt0.equals(object0);
      assertFalse(boolean1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt2.hashCode();
      assertEquals(3, intArray0.length);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {2941, 2941, 1515}, intArray0);
      assertEquals(1515, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(3, vecInt2.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      VecInt vecInt0 = new VecInt(1520, 1520);
      assertNotNull(vecInt0);
      assertEquals(1520, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1520, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(1238);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      int int0 = vecInt1.indexOf((-699));
      assertEquals((-1), int0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      VecInt vecInt2 = new VecInt();
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      
      vecInt0.insertFirst(3289);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertEquals(1520, vecInt0.last());
      assertEquals(1521, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3289, vecInt0.last());
      
      IVecInt[] iVecIntArray0 = vecInt1.subset(1520);
      assertEquals(0, iVecIntArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertTrue(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(iVecIntArray0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      // Undeclared exception!
      try { 
        vecInt0.delete((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[11];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1), (-1), (-1), (-1)).when(comparator0).compare(anyInt() , anyInt());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-1), (-1067), comparator1);
      vecInt0.sort(comparator0);
      vecInt0.ensure((-1));
      vecInt0.sort();
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      int[] intArray1 = new int[0];
      VecInt vecInt1 = new VecInt(intArray1);
      vecInt1.toString();
      vecInt0.containsAt(5575, 0);
      vecInt1.shrinkTo((-2449));
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.get(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3639);
      vecInt0.push(396);
      int int0 = vecInt0.indexOf(3639);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 803;
      intArray0[1] = 0;
      intArray0[2] = 2171;
      intArray0[3] = (-656);
      intArray0[4] = (-847);
      intArray0[5] = 1564;
      intArray0[6] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      assertEquals(2171, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 1;
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.subset(1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(1506);
      vecInt0.containsAt(1496, 1496);
      vecInt0.toArray();
      vecInt0.insertFirst(1506);
      vecInt0.push(1496);
      vecInt0.shrinkTo((-794));
      // Undeclared exception!
      try { 
        vecInt0.remove(27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(1506);
      vecInt0.containsAt(1496, 1496);
      int[] intArray0 = vecInt0.toArray();
      vecInt0.contains(27);
      vecInt0.last();
      vecInt0.copyTo(intArray0);
      vecInt0.subset(27);
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      int int0 = 1503;
      // Undeclared exception!
      try { 
        vecInt0.set(5342, 1503);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 5;
      VecInt vecInt0 = new VecInt(5);
      vecInt0.shrink(5);
      // Undeclared exception!
      try { 
        vecInt0.ensure(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1152);
      vecInt0.unsafePush((-1152));
      vecInt0.indexOf((-1152));
      IVecInt iVecInt0 = vecInt0.push(0);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        iVecInt0.delete(376);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 376
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = 2;
      int int1 = 438;
      VecInt vecInt0 = new VecInt(2, 438);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 5;
      intArray0[4] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      String string0 = vecInt0.toString();
      assertEquals("5,0,0,5,0", string0);
      
      VecInt vecInt1 = new VecInt(intArray0);
      boolean boolean0 = vecInt1.isSubsetOf(vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      VecInt vecInt0 = new VecInt(434);
      VecInt vecInt1 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.sort(434, (-3235), comparator0);
      int[] intArray0 = new int[3];
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.sort(0, (-1), comparator1);
      intArray0[0] = 434;
      intArray0[1] = 434;
      vecInt1.insertFirst(204);
      int int0 = (-924);
      intArray0[2] = (-924);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(434, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.pop();
      vecInt0.sort(comparator1);
      VecInt vecInt1 = new VecInt(2941);
      int[] intArray0 = new int[8];
      intArray0[0] = 2941;
      intArray0[1] = (-1686);
      intArray0[2] = 2941;
      intArray0[3] = 2941;
      intArray0[4] = 2941;
      intArray0[5] = 1502;
      intArray0[6] = 2941;
      intArray0[7] = 2941;
      vecInt1.copyTo(intArray0);
      vecInt0.iterator();
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.sortUnique();
      vecInt2.clone();
      vecInt2.sort();
      vecInt0.size();
      vecInt0.sort(1, (-371));
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      VecInt vecInt0 = new VecInt(133);
      VecInt vecInt1 = new VecInt(1);
      vecInt0.moveTo2(vecInt1);
      // Undeclared exception!
      try { 
        vecInt0.delete(133);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 133
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-813);
      intArray0[2] = (-232);
      intArray0[3] = (-813);
      intArray0[4] = (-1);
      intArray0[5] = 5;
      intArray0[6] = (-541);
      intArray0[7] = 0;
      intArray0[8] = 393;
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1489, (-1283), 1476, 0, 1476).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.copyTo(intArray0);
      vecInt0.iterator();
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      vecInt1.sort();
      int int0 = vecInt1.size();
      assertArrayEquals(new int[] {(-813), (-541), (-232), (-1), 0, 5, 393, 5, 393}, intArray0);
      assertEquals(7, int0);
  }
}
