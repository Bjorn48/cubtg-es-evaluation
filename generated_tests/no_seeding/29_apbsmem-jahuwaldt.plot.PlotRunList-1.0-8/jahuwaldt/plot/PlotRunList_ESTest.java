/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 21:54:03 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.PlotRun;
import jahuwaldt.plot.PlotRunList;
import jahuwaldt.plot.PlotSymbol;
import jahuwaldt.plot.TabLSymbol;
import jahuwaldt.plot.TabUpSymbol;
import jahuwaldt.plot.ThinRect2Symbol;
import jahuwaldt.plot.Triangle2Symbol;
import java.awt.Color;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotRunList_ESTest extends PlotRunList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<DefaultTableModel> vector0 = new Vector<DefaultTableModel>(0);
      PlotRunList plotRunList0 = new PlotRunList(vector0);
      plotRunList0.add(0, (Object) null);
      assertEquals(1, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[1];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      plotRunList0.setPlotSymbol(thinRect2Symbol0);
      assertEquals(8, thinRect2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[2];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      Color color0 = Color.gray;
      // Undeclared exception!
      try { 
        plotRunList0.setLineColor(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[6];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.getMaxY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[6];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      int int0 = plotRunList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[9];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      int int0 = plotRunList0.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[9];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[1] = plotRun0;
      plotRunArray0[8] = plotRunArray0[1];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      PlotRun plotRun1 = (PlotRun)plotRunList0.set(8, plotRunArray0[2]);
      assertEquals(0, plotRun1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      plotRunList0.add((Object) null);
      Object object0 = plotRunList0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[2];
      PlotDatum[] plotDatumArray0 = new PlotDatum[6];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      plotRunArray0[1] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      PlotRun plotRun1 = (PlotRun)plotRunList0.remove(1);
      assertEquals(6, plotRun1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<PlotRun> linkedHashSet0 = new LinkedHashSet<PlotRun>();
      PlotRunList plotRunList0 = new PlotRunList(linkedHashSet0);
      Iterator iterator0 = plotRunList0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[5];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      PlotRun plotRun0 = new PlotRun(linkedHashSet0);
      plotRunArray0[0] = plotRun0;
      double[] doubleArray0 = new double[4];
      PlotRun plotRun1 = new PlotRun(doubleArray0, doubleArray0, false, (PlotSymbol) null);
      plotRunArray0[1] = plotRun1;
      plotRunArray0[2] = plotRunArray0[1];
      plotRunArray0[3] = plotRun1;
      plotRunArray0[4] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinY();
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      PlotRun plotRun0 = new PlotRun();
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRun0;
      PlotDatum[] plotDatumArray0 = new PlotDatum[2];
      PlotDatum plotDatum0 = new PlotDatum(1.4, 173.785, true, (PlotSymbol) null);
      plotDatumArray0[0] = plotDatum0;
      PlotDatum plotDatum1 = new PlotDatum(0.0, 0.0, false, (PlotSymbol) null);
      plotDatumArray0[1] = plotDatum1;
      PlotRun plotRun1 = new PlotRun(plotDatumArray0);
      plotRunArray0[2] = plotRun1;
      plotRunArray0[3] = plotRun0;
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinX();
      assertEquals(4, plotRunList0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[5];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2475.086);
      TabUpSymbol tabUpSymbol0 = new TabUpSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, tabUpSymbol0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRun0;
      plotRunArray0[2] = plotRunArray0[1];
      plotRunArray0[3] = plotRunArray0[1];
      plotRunArray0[4] = plotRunArray0[0];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMinX();
      assertEquals(5, plotRunList0.size());
      assertEquals((-2475.086), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      plotRunList0.get(1);
      assertEquals(4, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[4];
      PlotDatum[] plotDatumArray0 = new PlotDatum[5];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRunArray0[0];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      Object object0 = plotRunList0.get(1);
      assertNotNull(object0);
      assertEquals(4, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.set(41, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.set(4, plotRunList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // jahuwaldt.plot.PlotRunList cannot be cast to jahuwaldt.plot.PlotRun
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.remove((-602));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[1];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.getMaxX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.get((-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.add(8, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.add(8, (Object) plotRunList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // jahuwaldt.plot.PlotRunList cannot be cast to jahuwaldt.plot.PlotRun
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlotRunList plotRunList0 = null;
      try {
        plotRunList0 = new PlotRunList((PlotRun[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlotRunList plotRunList0 = null;
      try {
        plotRunList0 = new PlotRunList((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[8];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      PlotRun plotRun0 = new PlotRun(plotRunList0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRunArray0[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-705.733089009);
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      PlotRun plotRun1 = new PlotRun(doubleArray0, doubleArray0, false, tabLSymbol0);
      plotRunArray0[2] = plotRun1;
      plotRunArray0[3] = plotRunArray0[2];
      plotRunArray0[4] = plotRunArray0[0];
      plotRunArray0[5] = plotRunArray0[2];
      plotRunArray0[6] = plotRun1;
      plotRunArray0[7] = plotRunArray0[2];
      PlotRunList plotRunList1 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList1.getMinY();
      assertEquals(8, plotRunList1.size());
      assertEquals((-705.733089009), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      Color color0 = Color.gray;
      plotRunList0.setLineColor(color0);
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[1];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      // Undeclared exception!
      try { 
        plotRunList0.setPlotSymbol(thinRect2Symbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      double double0 = plotRunList0.getMaxY();
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[5];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.getMinY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      double double0 = plotRunList0.getMinY();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[7];
      PlotDatum[] plotDatumArray0 = new PlotDatum[4];
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      PlotDatum plotDatum0 = new PlotDatum(0.0, 0.0, true, triangle2Symbol0);
      plotDatumArray0[0] = plotDatum0;
      plotDatumArray0[1] = plotDatumArray0[0];
      plotDatumArray0[2] = plotDatum0;
      plotDatumArray0[3] = plotDatumArray0[2];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      plotRunArray0[0] = plotRun0;
      plotRunArray0[1] = plotRun0;
      plotRunArray0[2] = plotRunArray0[1];
      plotRunArray0[3] = plotRunArray0[1];
      plotRunArray0[4] = plotRunArray0[1];
      plotRunArray0[5] = plotRunArray0[4];
      plotRunArray0[6] = plotRunArray0[0];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      double double0 = plotRunList0.getMaxX();
      assertEquals(7, plotRunList0.size());
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      double double0 = plotRunList0.getMinX();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      PlotRun plotRun0 = new PlotRun(priorityQueue0);
      priorityQueue0.add(plotRun0);
      PlotRunList plotRunList0 = new PlotRunList(priorityQueue0);
      assertEquals(1, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      PlotRunList plotRunList0 = new PlotRunList(set0);
      assertEquals(0, plotRunList0.size());
      
      Object object0 = plotRunList0.clone();
      assertNotSame(object0, plotRunList0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlotRun[] plotRunArray0 = new PlotRun[6];
      PlotRunList plotRunList0 = new PlotRunList(plotRunArray0);
      // Undeclared exception!
      try { 
        plotRunList0.getMinX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRunList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      plotRunList0.clear();
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[0];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.set((-1766), plotRun0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      PlotRunList plotRunList1 = new PlotRunList(plotRunList0);
      assertTrue(plotRunList1.equals((Object)plotRunList0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      // Undeclared exception!
      try { 
        plotRunList0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
