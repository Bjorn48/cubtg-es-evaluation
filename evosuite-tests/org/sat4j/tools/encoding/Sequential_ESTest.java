/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:07:23 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Sequential_ESTest extends Sequential_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push((-963));
      assertEquals((-963), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-963), iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      IConstr iConstr0 = sequential0.addAtMostOne((ISolver) null, iVecInt0);
      assertEquals((-963), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-963), iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(0, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertNotNull(iConstr0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {}, intArray0);
      
      try { 
        sequential0.addExactlyOne(solver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertNotNull(maxSatDecorator0);
      
      // Undeclared exception!
      try { 
        sequential0.addExactlyOne(maxSatDecorator0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = 328;
      intArray0[2] = 328;
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = 32;
      intArray0[6] = 328;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(328, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {32, 328, 328, 32, 32, 32, 328}, intArray0);
      
      vecInt0.shrink((-5303));
      assertEquals(7, intArray0.length);
      assertEquals(5310, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertArrayEquals(new int[] {32, 328, 328, 32, 32, 32, 328}, intArray0);
      
      // Undeclared exception!
      try { 
        sequential0.addExactlyOne(solver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, solutionFoundListener0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(abstractMinimalModel0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertNotNull(maxSatDecorator0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(32, vecInt0.last());
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {32, 32, 32, 32, 32}, intArray0);
      
      // Undeclared exception!
      sequential0.addExactly(maxSatDecorator0, vecInt0, (-278));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      int int0 = 235;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(235, 235, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(singleSolutionDetector0);
      
      IConstr iConstr0 = sequential0.addExactly(singleSolutionDetector0, iVecInt0, 10);
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(2, iConstr0.size());
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      // Undeclared exception!
      try { 
        sequential0.addExactly((ISolver) null, (IVecInt) null, 235);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(235, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(singleSolutionDetector0);
      
      // Undeclared exception!
      try { 
        sequential0.addExactly(singleSolutionDetector0, iVecInt0, 235);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(235, 235, 235, 235, 235).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-235), iVecInt0.last());
      assertEquals(235, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(statisticsSolver0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertNotNull(singleSolutionDetector0);
      
      // Undeclared exception!
      try { 
        sequential0.addExactly(singleSolutionDetector0, iVecInt0, 235);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      // Undeclared exception!
      try { 
        sequential0.addAtMostOne(statisticsSolver0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      // Undeclared exception!
      try { 
        sequential0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      LightFactory lightFactory0 = new LightFactory();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        sequential0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      // Undeclared exception!
      try { 
        sequential0.addAtMost((ISolver) null, (IVecInt) null, 2673);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 50L, solutionFoundListener0);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(modelIteratorToSATAdapter0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        sequential0.addAtMost(modelIteratorToSATAdapter0, vecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = 328;
      intArray0[6] = 328;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(328, vecInt0.last());
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {32, 328, 0, 0, 0, 0, 328}, intArray0);
      
      // Undeclared exception!
      try { 
        sequential0.addAtMost(solver0, vecInt0, 328);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(100.0, 328);
      assertEquals(328, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 50L);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(50.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(328, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(50.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 328;
      intArray0[1] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(32, vecInt0.last());
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {328, 32}, intArray0);
      
      IConstr iConstr0 = sequential0.addAtMost(solver0, vecInt0, 283);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2, intArray0.length);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(328, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(50.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(328, solver0.realNumberOfVariables());
      assertEquals(283, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(282, solver0.getPropagationLevel());
      assertEquals(328, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(32, vecInt0.last());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(284, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertNotNull(iConstr0);
      assertArrayEquals(new int[] {328, 32}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(iSolver0).nextFreeVarId(anyBoolean());
      // Undeclared exception!
      sequential0.addAtMost(iSolver0, vecInt0, 2659);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      VecInt vecInt0 = new VecInt();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sequential0.addAtMost(iSolver0, vecInt0, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(1, 7, (-909)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      IConstr iConstr0 = sequential0.addAtMost((ISolver) null, iVecInt0, 1866);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        sequential0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        sequential0.addExactly(solver0, vecInt0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = sequential0.addExactlyOne(iSolver0, vecInt0);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, solutionFoundListener0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0);
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        sequential0.addExactlyOne(maxSatDecorator0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
