/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 13:15:15 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserConstants;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"private\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"private\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)28, (byte)108, (byte) (-104)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)81, (byte)28, (byte)108, (byte) (-104)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)81, (byte)28, (byte)108, (byte) (-104)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 36, (-3220));
      assertNotNull(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)81, (byte)28, (byte)108, (byte) (-104)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertEquals(4, byteArray0.length);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("Q", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u001c\" (28), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"private\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3617), 26);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('\"', char0);
      assertEquals((-3617), javaCharStream0.getBeginLine());
      assertEquals((-3617), javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals((-3617), javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-3617), javaCharStream0.getBeginLine());
      assertEquals((-3617), javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals((-3617), javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-3617), javaCharStream0.getBeginLine());
      assertEquals((-3617), javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals((-3617), javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals((-3617), javaCharStream0.getBeginLine());
      assertEquals((-3617), javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals((-3617), javaCharStream0.getEndLine());
      assertEquals("private", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(33, token0.endColumn);
      assertEquals((-3617), token0.beginLine);
      assertEquals(47, token0.kind);
      assertEquals(27, token0.beginColumn);
      assertEquals((-3617), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?dJ(|=l<");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("5sC_no^lv='-i");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(53, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int1 = JavaParserConstants.CONST;
      assertEquals(22, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      long long0 = stringReader1.skip(22);
      assertEquals(12L, long0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("?", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(91, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null, 110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 110. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":W@");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("5sC_no^lv='-i");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(53, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 53, 106, 53);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(':', char0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals("W", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(107, token0.beginColumn);
      assertEquals(53, token0.endLine);
      assertEquals(107, token0.endColumn);
      assertEquals(53, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals("@", token1.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token1.beginColumn);
      assertEquals(86, token1.kind);
      assertEquals(53, token1.beginLine);
      assertEquals(53, token1.endLine);
      assertEquals(108, token1.endColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(53, token2.beginLine);
      assertEquals(53, token2.endLine);
      assertEquals(108, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(108, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 24);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 24. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("CIP(`0CzW@t'U+");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1103), 4096);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('C', char0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(4096, javaCharStream0.getColumn());
      assertEquals(4096, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      char char1 = javaCharStream0.readChar();
      assertEquals('I', char1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(4097, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(4097, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      char char2 = javaCharStream0.readChar();
      assertEquals('P', char2);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(4098, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(4098, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(4098, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals(4096, javaCharStream0.getBeginColumn());
      assertEquals(4098, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(4099, javaCharStream0.getBeginColumn());
      assertEquals(4099, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals(4099, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals("(", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(77, token0.kind);
      assertEquals((-1103), token0.endLine);
      assertEquals((-1103), token0.beginLine);
      assertEquals(4099, token0.endColumn);
      assertEquals(4099, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"(\"");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      int int1 = stringReader0.read();
      assertEquals(40, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token0 = token_GTToken0.next;
      assertNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("default");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 24, 61);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals(24, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals("default", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(24, token0.kind);
      assertEquals(67, token0.endColumn);
      assertEquals(24, token0.beginLine);
      assertEquals(24, token0.endLine);
      assertEquals(61, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 24);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 24. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("130BH$,~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 15);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T5[Fs)Xg");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("T", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("5", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("[", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(81, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("[", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token3.beginLine);
      assertEquals(81, token3.kind);
      assertEquals(3, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotNull(token4);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("Fs", token4.toString());
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token4.endLine);
      assertEquals(4, token4.beginColumn);
      assertEquals(5, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.beginLine);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("3lD>H\"B(oP8");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(51, int0);
      
      int int1 = JavaParserConstants.CONST;
      assertEquals(22, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("lD", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(">", token1.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(124, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d0");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.curLexState = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"(\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      int int1 = stringReader0.read();
      assertEquals(40, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      long long0 = stringReader0.skip((-4279L));
      assertEquals((-2L), long0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('\"', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("(", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(77, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"private\"");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), (-1103));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1095), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1095), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals("\"private\"", token0.toString());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1103), token0.beginLine);
      assertEquals((-1095), token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals((-1103), token0.beginColumn);
      assertEquals((-1103), token0.endLine);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1095), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1095), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals("\"private\"", token0.toString());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1103), token0.beginLine);
      assertEquals((-1095), token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals((-1103), token0.beginColumn);
      assertEquals((-1103), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1095), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1095), javaCharStream0.getBeginColumn());
      assertEquals((-1095), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals((-1103), token1.beginLine);
      assertEquals((-1095), token1.beginColumn);
      assertEquals((-1095), token1.endColumn);
      assertEquals((-1103), token1.endLine);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$5D2Q@KiDlfi");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('$', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("5D", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(70, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)32;
      byteArray0[1] = (byte)114;
      byteArray0[6] = (byte) (-78);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)114, (byte)32, (byte)57, (byte)32, (byte)0, (byte) (-78), (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      StringReader stringReader0 = new StringReader(">>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(">>", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(124, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(">", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2^Bt##mNU4r$h0=~2");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1399, 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('2', char0);
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(1399, javaCharStream0.getEndLine());
      assertEquals(1399, javaCharStream0.getLine());
      assertEquals(1399, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(1399, javaCharStream0.getEndLine());
      assertEquals(1399, javaCharStream0.getLine());
      assertEquals(1399, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(1399, javaCharStream0.getEndLine());
      assertEquals(1399, javaCharStream0.getLine());
      assertEquals(1399, javaCharStream0.getBeginLine());
      assertEquals("^", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token0.endColumn);
      assertEquals(1399, token0.endLine);
      assertEquals(94, token0.beginColumn);
      assertEquals(107, token0.kind);
      assertEquals(1399, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(1399, javaCharStream0.getEndLine());
      assertEquals(1399, javaCharStream0.getLine());
      assertEquals(1399, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(1399, javaCharStream0.getEndLine());
      assertEquals(1399, javaCharStream0.getLine());
      assertEquals(1399, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals("Bt", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1399, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(96, token1.endColumn);
      assertEquals(95, token1.beginColumn);
      assertEquals(1399, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("3lD>H\"B(oP8");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(51, int0);
      
      int int1 = JavaParserConstants.CONST;
      assertEquals(22, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean2 = stringReader0.markSupported();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(mockFileInputStream0, (-1), 118);
      assertNotNull(javaCharStream1);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '(';
      charArray0[2] = 'w';
      charArray0[3] = '(';
      charArray0[4] = '}';
      int int2 = stringReader0.read(charArray0);
      assertEquals(5, int2);
      assertArrayEquals(new char[] {'l', 'D', '>', 'H', '\"'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertEquals("B", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token1);
      assertEquals("", token1.toString());
      assertFalse(fileDescriptor0.valid());
      assertEquals(117, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(117, javaCharStream1.getEndColumn());
      assertEquals(117, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(117, token1.beginColumn);
      assertEquals((-1), token1.endLine);
      assertEquals(117, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1), token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r.*>[gm==2{34\nNZQ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 46, 46);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals("r", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(46, token0.endColumn);
      assertEquals(46, token0.endLine);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals("r", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(46, token0.endColumn);
      assertEquals(46, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(".", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token1.beginLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(46, token1.endLine);
      assertEquals(85, token1.kind);
      assertEquals(47, token1.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2793));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2793. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T5[Fs)Xg");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)103;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte)126, (byte)103, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 24, 24);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("T5", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("T5", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("[", token2.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(81, token2.kind);
      assertEquals(1, token2.beginLine);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 27);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 27. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":W@");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 93, 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(':', char0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals("W", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token0.beginColumn);
      assertEquals(93, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(94, token0.endColumn);
      assertEquals(93, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("goto");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("goto");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(103, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int1 = JavaParserConstants.CONST;
      assertEquals(22, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("oto", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d0");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("R8WH^");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 115, 115);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('R', char0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 115, (-1680));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals("8", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(115, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(116, token0.endColumn);
      assertEquals(115, token0.endLine);
      assertEquals(116, token0.beginColumn);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals("8", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(115, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(116, token0.endColumn);
      assertEquals(115, token0.endLine);
      assertEquals(116, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"private\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"private\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("!");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 3418, (-1103));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotNull(token0);
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals(3418, javaCharStream0.getBeginLine());
      assertEquals(3418, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals(3418, javaCharStream0.getLine());
      assertEquals("!", token0.toString());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3418, token0.endLine);
      assertEquals((-1103), token0.endColumn);
      assertEquals((-1103), token0.beginColumn);
      assertEquals(89, token0.kind);
      assertEquals(3418, token0.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals(3418, javaCharStream0.getBeginLine());
      assertEquals(3418, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals(3418, javaCharStream0.getLine());
      assertEquals("!", token0.toString());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3418, token0.endLine);
      assertEquals((-1103), token0.endColumn);
      assertEquals((-1103), token0.beginColumn);
      assertEquals(89, token0.kind);
      assertEquals(3418, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals(3418, javaCharStream0.getBeginLine());
      assertEquals(3418, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals(3418, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(3418, token1.endLine);
      assertEquals(3418, token1.beginLine);
      assertEquals((-1103), token1.beginColumn);
      assertEquals((-1103), token1.endColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals(3418, javaCharStream0.getBeginLine());
      assertEquals(3418, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals(3418, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1103), token2.beginColumn);
      assertEquals((-1103), token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(3418, token2.endLine);
      assertEquals(3418, token2.beginLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals(3418, javaCharStream0.getBeginLine());
      assertEquals(3418, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals(3418, javaCharStream0.getLine());
      assertEquals("", token3.toString());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1103), token3.endColumn);
      assertEquals(3418, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(3418, token3.endLine);
      assertEquals((-1103), token3.beginColumn);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KbJVtML;:s<0fw)-g");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('K', char0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals("bJVtML", token0.toString());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T5[Fs)Xg");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("T5", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("[", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(81, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals("Fs", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.beginLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(")", token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(78, token3.kind);
      assertEquals(6, token3.beginColumn);
      assertEquals(6, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotNull(token4);
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals("Xg", token4.toString());
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(7, token4.beginColumn);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~<F6-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 93, 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('~', char0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(93, token0.endLine);
      assertEquals(93, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(94, token0.endColumn);
      assertEquals(94, token0.beginColumn);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M^/)x");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 27, 528);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('M', char0);
      assertEquals(27, javaCharStream0.getEndLine());
      assertEquals(528, javaCharStream0.getColumn());
      assertEquals(528, javaCharStream0.getEndColumn());
      assertEquals(27, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getLine());
      assertEquals(528, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(27, javaCharStream0.getEndLine());
      assertEquals(528, javaCharStream0.getColumn());
      assertEquals(528, javaCharStream0.getEndColumn());
      assertEquals(27, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getLine());
      assertEquals(528, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(27, javaCharStream0.getEndLine());
      assertEquals(529, javaCharStream0.getColumn());
      assertEquals(529, javaCharStream0.getEndColumn());
      assertEquals(27, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getLine());
      assertEquals(529, javaCharStream0.getBeginColumn());
      assertEquals("^", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(27, token0.endLine);
      assertEquals(107, token0.kind);
      assertEquals(27, token0.beginLine);
      assertEquals(529, token0.beginColumn);
      assertEquals(529, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(27, javaCharStream0.getEndLine());
      assertEquals(530, javaCharStream0.getColumn());
      assertEquals(530, javaCharStream0.getEndColumn());
      assertEquals(530, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getLine());
      assertEquals("/", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(27, token1.beginLine);
      assertEquals(27, token1.endLine);
      assertEquals(104, token1.kind);
      assertEquals(530, token1.endColumn);
      assertEquals(530, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nOnr10Ml2lP`/g2d,4~");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals("Onr10Ml2lP", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(10, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 11.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j\"]7.y%r^sb2");
      assertNotNull(stringReader0);
      
      int int0 = 255;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("j", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-338));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -338. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("8;CbI\"W>F N~");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, 83);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals("7", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(83, token0.endColumn);
      assertEquals(105, token0.endLine);
      assertEquals(105, token0.beginLine);
      assertEquals(83, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<U");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('<', char0);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.jjround = 1157;
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals("U", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1103), token0.endLine);
      assertEquals(94, token0.endColumn);
      assertEquals((-1103), token0.beginLine);
      assertEquals(94, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals("U", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(94, token1.beginColumn);
      assertEquals((-1103), token1.endLine);
      assertEquals(94, token1.endColumn);
      assertEquals((-1103), token1.beginLine);
      
      Token token2 = Token.newToken((-2135));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?dEX#<");
      assertNotNull(stringReader0);
      
      int int0 = 93;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 93, 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('?', char0);
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals("dEX", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(94, token0.beginColumn);
      assertEquals(93, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(96, token0.endColumn);
      assertEquals(93, token0.endLine);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$5D2Q@KiDlfi");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1862, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1862, javaCharStream0.getLine());
      assertEquals(1862, javaCharStream0.getBeginLine());
      assertEquals(1862, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("$5D2Q", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(1862, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1862, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1862);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1862. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('%', char0);
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1656), 93);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(2, byteArray0.length);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1656), javaCharStream1.getBeginLine());
      assertEquals(93, javaCharStream1.getEndColumn());
      assertEquals((-1656), javaCharStream1.getLine());
      assertEquals((-1656), javaCharStream1.getEndLine());
      assertEquals(93, javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream1.getColumn());
      assertEquals("l", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1656), token0.beginLine);
      assertEquals(93, token0.endColumn);
      assertEquals((-1656), token0.endLine);
      assertEquals(93, token0.beginColumn);
      
      Token token1 = Token.newToken((byte) (-37));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(2, byteArray0.length);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1656), javaCharStream1.getBeginLine());
      assertEquals(93, javaCharStream1.getEndColumn());
      assertEquals((-1656), javaCharStream1.getLine());
      assertEquals((-1656), javaCharStream1.getEndLine());
      assertEquals(93, javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream1.getColumn());
      assertEquals("l", token2.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(93, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals((-1656), token2.beginLine);
      assertEquals((-1656), token2.endLine);
      assertEquals(93, token2.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1656, column 95.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3Lg?//F+h,##{");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("3Lg?//F+h,##{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1103), (-1103));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1102), javaCharStream0.getEndColumn());
      assertEquals((-1102), javaCharStream0.getColumn());
      assertEquals("3L", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1103), token0.endLine);
      assertEquals((-1103), token0.beginColumn);
      assertEquals((-1102), token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals((-1103), token0.beginLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1102), javaCharStream0.getEndColumn());
      assertEquals((-1102), javaCharStream0.getColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("au'&!#5");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals((-1), int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int1 = stringReader1.read();
      assertEquals((-1), int1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      long long0 = stringReader1.skip((-4279L));
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('a', char0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("u", token0.toString());
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"!\" (33), after : \"\\'&\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3Lg?//F+h,##{");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2330, 24);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2330, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(2330, javaCharStream0.getEndLine());
      assertEquals(2330, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals("3L", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(2330, token0.beginLine);
      assertEquals(24, token0.beginColumn);
      assertEquals(25, token0.endColumn);
      assertEquals(2330, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2330, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(2330, javaCharStream0.getEndLine());
      assertEquals(2330, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals("3L", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(2330, token0.beginLine);
      assertEquals(24, token0.beginColumn);
      assertEquals(25, token0.endColumn);
      assertEquals(2330, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R+u54\"WK s(W$S");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("R", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("+", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(101, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("u54", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tIYX");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 26);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 24, 19, 26);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertEquals(22, javaCharStream1.getColumn());
      assertEquals(22, javaCharStream1.getEndColumn());
      assertEquals(24, javaCharStream1.getLine());
      assertEquals(19, javaCharStream1.getBeginColumn());
      assertEquals(24, javaCharStream1.getBeginLine());
      assertEquals(24, javaCharStream1.getEndLine());
      assertEquals("tIYX", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(24, token0.beginLine);
      assertEquals(22, token0.endColumn);
      assertEquals(24, token0.endLine);
      assertEquals(19, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(22, javaCharStream1.getColumn());
      assertEquals(22, javaCharStream1.getEndColumn());
      assertEquals(24, javaCharStream1.getLine());
      assertEquals(19, javaCharStream1.getBeginColumn());
      assertEquals(24, javaCharStream1.getBeginLine());
      assertEquals(24, javaCharStream1.getEndLine());
      assertEquals("tIYX", token1.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(24, token1.beginLine);
      assertEquals(19, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(22, token1.endColumn);
      assertEquals(24, token1.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 40. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('%', char0);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals("^", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token0.endColumn);
      assertEquals((-1103), token0.beginLine);
      assertEquals(94, token0.beginColumn);
      assertEquals((-1103), token0.endLine);
      assertEquals(107, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals("^", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token0.endColumn);
      assertEquals((-1103), token0.beginLine);
      assertEquals(94, token0.beginColumn);
      assertEquals((-1103), token0.endLine);
      assertEquals(107, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals("e", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(95, token1.endColumn);
      assertEquals((-1103), token1.beginLine);
      assertEquals(95, token1.beginColumn);
      assertEquals((-1103), token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(")", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1103), token2.endLine);
      assertEquals(78, token2.kind);
      assertEquals(96, token2.beginColumn);
      assertEquals(96, token2.endColumn);
      assertEquals((-1103), token2.beginLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals("C", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token3.kind);
      assertEquals(97, token3.beginColumn);
      assertEquals(97, token3.endColumn);
      assertEquals((-1103), token3.endLine);
      assertEquals((-1103), token3.beginLine);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C'G_;5m_OzoH");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), (-1103));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('C', char0);
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 'C', (-1103));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = Token.newToken(0);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      javaParserTokenManager0.curLexState = (-1103);
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-1102), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1102), javaCharStream0.getBeginColumn());
      assertEquals((-1102), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1102), token1.beginColumn);
      assertEquals((-1102), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1103), token1.endLine);
      assertEquals((-1103), token1.beginLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-1102), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1102), javaCharStream0.getBeginColumn());
      assertEquals((-1102), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-1102), javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1102), javaCharStream0.getBeginColumn());
      assertEquals((-1102), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('%', char0);
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-5226), 0);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals("^", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(107, token0.kind);
      assertEquals((-1103), token0.beginLine);
      assertEquals(94, token0.beginColumn);
      assertEquals(94, token0.endColumn);
      assertEquals((-1103), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals("e", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1103), token1.beginLine);
      assertEquals(95, token1.beginColumn);
      assertEquals(95, token1.endColumn);
      assertEquals((-1103), token1.endLine);
      assertEquals(74, token1.kind);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals("e", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1103), token1.beginLine);
      assertEquals(95, token1.beginColumn);
      assertEquals(95, token1.endColumn);
      assertEquals((-1103), token1.endLine);
      assertEquals(74, token1.kind);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implements");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1943, 458);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('i', char0);
      assertEquals(458, javaCharStream0.getBeginColumn());
      assertEquals(458, javaCharStream0.getEndColumn());
      assertEquals(1943, javaCharStream0.getBeginLine());
      assertEquals(1943, javaCharStream0.getLine());
      assertEquals(458, javaCharStream0.getColumn());
      assertEquals(1943, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(458, javaCharStream0.getBeginColumn());
      assertEquals(458, javaCharStream0.getEndColumn());
      assertEquals(1943, javaCharStream0.getBeginLine());
      assertEquals(1943, javaCharStream0.getLine());
      assertEquals(458, javaCharStream0.getColumn());
      assertEquals(1943, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(467, javaCharStream0.getEndColumn());
      assertEquals(467, javaCharStream0.getColumn());
      assertEquals(1943, javaCharStream0.getBeginLine());
      assertEquals(1943, javaCharStream0.getLine());
      assertEquals(459, javaCharStream0.getBeginColumn());
      assertEquals(1943, javaCharStream0.getEndLine());
      assertEquals("mplements", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(1943, token0.beginLine);
      assertEquals(467, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(459, token0.beginColumn);
      assertEquals(1943, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(467, javaCharStream0.getEndColumn());
      assertEquals(467, javaCharStream0.getColumn());
      assertEquals(1943, javaCharStream0.getBeginLine());
      assertEquals(1943, javaCharStream0.getLine());
      assertEquals(1943, javaCharStream0.getEndLine());
      assertEquals(467, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(467, token1.endColumn);
      assertEquals(1943, token1.beginLine);
      assertEquals(1943, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(467, token1.beginColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(token1, token0);
      assertEquals(467, javaCharStream0.getEndColumn());
      assertEquals(467, javaCharStream0.getColumn());
      assertEquals(1943, javaCharStream0.getBeginLine());
      assertEquals(1943, javaCharStream0.getLine());
      assertEquals(1943, javaCharStream0.getEndLine());
      assertEquals(467, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(467, token1.endColumn);
      assertEquals(1943, token1.beginLine);
      assertEquals(1943, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(467, token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(467, javaCharStream0.getEndColumn());
      assertEquals(467, javaCharStream0.getColumn());
      assertEquals(1943, javaCharStream0.getBeginLine());
      assertEquals(1943, javaCharStream0.getLine());
      assertEquals(1943, javaCharStream0.getEndLine());
      assertEquals(467, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(467, token2.endColumn);
      assertEquals(467, token2.beginColumn);
      assertEquals(1943, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1943, token2.endLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertEquals(467, javaCharStream0.getEndColumn());
      assertEquals(467, javaCharStream0.getColumn());
      assertEquals(1943, javaCharStream0.getBeginLine());
      assertEquals(1943, javaCharStream0.getLine());
      assertEquals(1943, javaCharStream0.getEndLine());
      assertEquals(467, javaCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(467, token3.beginColumn);
      assertEquals(1943, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(1943, token3.beginLine);
      assertEquals(467, token3.endColumn);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TOl7E");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 84, 84);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals("TOl7E", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(84, token0.endLine);
      assertEquals(84, token0.beginColumn);
      assertEquals(84, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\r\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 26);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 24, 2242, 26);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 24, column 2243.  Encountered: \"\\r\" (13), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":W@");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 26, (-1103));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader(">bySTl^^ngq`jOe");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-1));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      char char0 = javaCharStream1.readChar();
      assertEquals('>', char0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-1), 48);
      assertNotNull(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(47, javaCharStream2.getColumn());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(47, javaCharStream2.getBeginColumn());
      assertEquals(47, javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(47, token0.endColumn);
      assertEquals(47, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(47, javaCharStream2.getColumn());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(47, javaCharStream2.getBeginColumn());
      assertEquals(47, javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(47, token0.endColumn);
      assertEquals(47, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(":", token1.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1103), token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals(26, token1.beginLine);
      assertEquals(26, token1.endLine);
      assertEquals((-1103), token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.maxNextCharInd = 3828;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 24, column 24.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d0");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("E");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 58, (-1103));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals("E", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1103), token0.beginColumn);
      assertEquals((-1103), token0.endColumn);
      assertEquals(58, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(58, token0.endLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals("E", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1103), token1.endColumn);
      assertEquals(58, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-1103), token1.beginColumn);
      assertEquals(58, token1.endLine);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals("E", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1103), token1.endColumn);
      assertEquals(58, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-1103), token1.beginColumn);
      assertEquals(58, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(58, token2.beginLine);
      assertEquals(58, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-1103), token2.beginColumn);
      assertEquals((-1103), token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d0");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("d0", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(21);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 21. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~Ix[iL?IEGk");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(126, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 93, 126);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('I', char0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(127, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(127, javaCharStream0.getBeginColumn());
      assertEquals(127, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals("x", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(93, token0.beginLine);
      assertEquals(93, token0.endLine);
      assertEquals(127, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(127, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iVzq/ANxfnfic<&");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.CONST;
      assertEquals(22, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("iVzq", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("/", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(104, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(5, token1.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = Token.newToken(int0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 15);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals("a", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals(15, token0.endLine);
      assertEquals(15, token0.beginLine);
      assertEquals(74, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-684));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -684. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3Lg?//F+h,##{");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2330, 2330);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaParserTokenManager0.curChar;
      assertEquals('\u0000', char0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2330, (-1));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertEquals(2330, javaCharStream0.getEndLine());
      assertEquals(2331, javaCharStream0.getEndColumn());
      assertEquals(2331, javaCharStream0.getColumn());
      assertEquals(2330, javaCharStream0.getBeginLine());
      assertEquals(2330, javaCharStream0.getLine());
      assertEquals(2330, javaCharStream0.getBeginColumn());
      assertEquals("3L", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2330, token0.endLine);
      assertEquals(2330, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(2331, token0.endColumn);
      assertEquals(2330, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(2332, javaCharStream0.getColumn());
      assertEquals(2332, javaCharStream0.getEndColumn());
      assertEquals(2330, javaCharStream0.getEndLine());
      assertEquals(2332, javaCharStream0.getBeginColumn());
      assertEquals(2330, javaCharStream0.getBeginLine());
      assertEquals(2330, javaCharStream0.getLine());
      assertEquals("g", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2330, token1.endLine);
      assertEquals(2330, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(2332, token1.endColumn);
      assertEquals(2332, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("<1SR7Y`QH12");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2897, 2897);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('<', char0);
      assertEquals(2897, javaCharStream0.getBeginLine());
      assertEquals(2897, javaCharStream0.getLine());
      assertEquals(2897, javaCharStream0.getColumn());
      assertEquals(2897, javaCharStream0.getEndLine());
      assertEquals(2897, javaCharStream0.getEndColumn());
      assertEquals(2897, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2897, javaCharStream0.getBeginLine());
      assertEquals(2897, javaCharStream0.getLine());
      assertEquals(2897, javaCharStream0.getColumn());
      assertEquals(2897, javaCharStream0.getEndLine());
      assertEquals(2897, javaCharStream0.getEndColumn());
      assertEquals(2897, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2897, javaCharStream0.getBeginLine());
      assertEquals(2898, javaCharStream0.getColumn());
      assertEquals(2898, javaCharStream0.getEndColumn());
      assertEquals(2897, javaCharStream0.getLine());
      assertEquals(2898, javaCharStream0.getBeginColumn());
      assertEquals(2897, javaCharStream0.getEndLine());
      assertEquals("1", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(2897, token0.beginLine);
      assertEquals(2897, token0.endLine);
      assertEquals(2898, token0.endColumn);
      assertEquals(2898, token0.beginColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2897, javaCharStream0.getBeginLine());
      assertEquals(2898, javaCharStream0.getColumn());
      assertEquals(2898, javaCharStream0.getEndColumn());
      assertEquals(2897, javaCharStream0.getLine());
      assertEquals(2898, javaCharStream0.getBeginColumn());
      assertEquals(2897, javaCharStream0.getEndLine());
      assertEquals("1", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(2897, token0.beginLine);
      assertEquals(2897, token0.endLine);
      assertEquals(2898, token0.endColumn);
      assertEquals(2898, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(2897, javaCharStream0.getBeginLine());
      assertEquals(2902, javaCharStream0.getEndColumn());
      assertEquals(2897, javaCharStream0.getLine());
      assertEquals(2899, javaCharStream0.getBeginColumn());
      assertEquals(2897, javaCharStream0.getEndLine());
      assertEquals(2902, javaCharStream0.getColumn());
      assertEquals("SR7Y", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2897, token1.endLine);
      assertEquals(2897, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(2902, token1.endColumn);
      assertEquals(2899, token1.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1140));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1140. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d0");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 64, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('d', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals("0", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(64, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(64, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)23}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("Dzl&gJ_lVMG\"[IB&7(Z");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('D', char0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("zl", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1060), (-1060), 74);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('%', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1060), javaCharStream0.getBeginLine());
      assertEquals((-1060), javaCharStream0.getBeginColumn());
      assertEquals((-1060), javaCharStream0.getEndColumn());
      assertEquals((-1060), javaCharStream0.getLine());
      assertEquals((-1060), javaCharStream0.getEndLine());
      assertEquals((-1060), javaCharStream0.getColumn());
      assertEquals("^", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1060), token0.endColumn);
      assertEquals((-1060), token0.endLine);
      assertEquals(107, token0.kind);
      assertEquals((-1060), token0.beginLine);
      assertEquals((-1060), token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1060));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1060. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("default");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("default");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2160, (-1103));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals((-1097), javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals((-1097), javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals("default", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(2160, token0.beginLine);
      assertEquals(2160, token0.endLine);
      assertEquals((-1103), token0.beginColumn);
      assertEquals((-1097), token0.endColumn);
      assertEquals(24, token0.kind);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("3lD>H\"B(oP8");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.CONST;
      assertEquals(22, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("3l", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("D", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~Ix[iL?IEGk");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2330, 2330);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2330, javaCharStream0.getBeginLine());
      assertEquals(2330, javaCharStream0.getEndColumn());
      assertEquals(2330, javaCharStream0.getLine());
      assertEquals(2330, javaCharStream0.getColumn());
      assertEquals(2330, javaCharStream0.getBeginColumn());
      assertEquals(2330, javaCharStream0.getEndLine());
      assertEquals("~", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2330, token0.endColumn);
      assertEquals(2330, token0.beginLine);
      assertEquals(90, token0.kind);
      assertEquals(2330, token0.beginColumn);
      assertEquals(2330, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 90);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 90. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jw]7.y%r^sb2");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 106, 106);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('j', char0);
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals("w", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(106, token0.beginLine);
      assertEquals(106, token0.endLine);
      assertEquals(107, token0.beginColumn);
      assertEquals(107, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j\"]7.y%r^sb2");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 16, 255);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('j', char0);
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(255, javaCharStream0.getColumn());
      assertEquals(255, javaCharStream0.getBeginColumn());
      assertEquals(255, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(255, javaCharStream0.getColumn());
      assertEquals(255, javaCharStream0.getBeginColumn());
      assertEquals(255, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 16, column 267.  Encountered: <EOF> after : \"\\\"]7.y%r^sb2\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("default");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("eU}a$&^YPt!ksD]");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("eU", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("}", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(80, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("a$", token2.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(5, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.beginLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("&", token3.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(6, token3.beginColumn);
      assertEquals(105, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(6, token3.endColumn);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("^", token4.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(107, token4.kind);
      assertEquals(7, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(7, token4.beginColumn);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iVzq/ANxfnfic<&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 255, (-1082));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('i', char0);
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals((-1082), javaCharStream0.getEndColumn());
      assertEquals((-1082), javaCharStream0.getBeginColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals((-1082), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals((-1082), javaCharStream0.getEndColumn());
      assertEquals((-1082), javaCharStream0.getBeginColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals((-1082), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals((-1081), javaCharStream0.getBeginColumn());
      assertEquals((-1079), javaCharStream0.getColumn());
      assertEquals((-1079), javaCharStream0.getEndColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals("Vzq", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1081), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1079), token0.endColumn);
      assertEquals(255, token0.endLine);
      assertEquals(255, token0.beginLine);
      
      javaParserTokenManager0.image = null;
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals((-1081), javaCharStream0.getBeginColumn());
      assertEquals((-1079), javaCharStream0.getColumn());
      assertEquals((-1079), javaCharStream0.getEndColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals((-1078), javaCharStream0.getEndColumn());
      assertEquals((-1078), javaCharStream0.getBeginColumn());
      assertEquals((-1078), javaCharStream0.getColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals("/", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1078), token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals(255, token1.endLine);
      assertEquals(255, token1.beginLine);
      assertEquals((-1078), token1.endColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(token1, token0);
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals((-1078), javaCharStream0.getEndColumn());
      assertEquals((-1078), javaCharStream0.getBeginColumn());
      assertEquals((-1078), javaCharStream0.getColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals("/", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1078), token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals(255, token1.endLine);
      assertEquals(255, token1.beginLine);
      assertEquals((-1078), token1.endColumn);
      
      javaCharStream0.backup((-1082));
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-1078), javaCharStream0.getBeginColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1085, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals((-1070), javaCharStream0.getEndColumn());
      assertEquals((-1070), javaCharStream0.getColumn());
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals((-1076), javaCharStream0.getBeginColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals("Nxfnfic", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals((-1070), token2.endColumn);
      assertEquals(255, token2.beginLine);
      assertEquals(255, token2.endLine);
      assertEquals((-1076), token2.beginColumn);
      
      Token token3 = new Token();
      assertNotNull(token3);
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.kind);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotNull(token4);
      assertEquals((-1068), javaCharStream0.getBeginColumn());
      assertEquals((-1068), javaCharStream0.getColumn());
      assertEquals(255, javaCharStream0.getLine());
      assertEquals(255, javaCharStream0.getEndLine());
      assertEquals((-1068), javaCharStream0.getEndColumn());
      assertEquals(255, javaCharStream0.getBeginLine());
      assertEquals("&", token4.toString());
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1068), token4.beginColumn);
      assertEquals(255, token4.beginLine);
      assertEquals((-1068), token4.endColumn);
      assertEquals(105, token4.kind);
      assertEquals(255, token4.endLine);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[Ozm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.input_stream = javaCharStream0;
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 415);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 415. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cu'&!#b");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Cu'&!#b");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 98, (-1500));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals((-1499), javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals((-1500), javaCharStream0.getBeginColumn());
      assertEquals((-1499), javaCharStream0.getEndColumn());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals("Cu", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(98, token0.endLine);
      assertEquals(98, token0.beginLine);
      assertEquals((-1500), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1499), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("au'&!#5");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("au'&!#5");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 89, 856);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('a', char0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(856, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(856, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(856, javaCharStream0.getColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(856, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(856, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(856, javaCharStream0.getColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertEquals(857, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(857, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(857, javaCharStream0.getColumn());
      assertEquals("u", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.beginLine);
      assertEquals(857, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(857, token0.endColumn);
      assertEquals(89, token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 89, column 860.  Encountered: \"!\" (33), after : \"\\'&\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('%', char0);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 126, 93);
      assertArrayEquals(new byte[] {(byte)94, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)94, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)94, (byte) (-37)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2, byteArray0.length);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(93, javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream1.getColumn());
      assertEquals(126, javaCharStream1.getEndLine());
      assertEquals(126, javaCharStream1.getLine());
      assertEquals(126, javaCharStream1.getBeginLine());
      assertEquals(93, javaCharStream1.getEndColumn());
      assertEquals("^", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(107, token0.kind);
      assertEquals(93, token0.beginColumn);
      assertEquals(126, token0.endLine);
      assertEquals(93, token0.endColumn);
      assertEquals(126, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals("^", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token1.kind);
      assertEquals((-1103), token1.beginLine);
      assertEquals(94, token1.beginColumn);
      assertEquals(94, token1.endColumn);
      assertEquals((-1103), token1.endLine);
      
      javaParserTokenManager2.SkipLexicalActions(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals("^", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token1.kind);
      assertEquals((-1103), token1.beginLine);
      assertEquals(94, token1.beginColumn);
      assertEquals(94, token1.endColumn);
      assertEquals((-1103), token1.endLine);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T5[Fs)Xg");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("T5", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("[", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(81, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("Fs", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(5, token2.endColumn);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 9.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",r#.1n");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(44, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(",", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(84, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager2);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager3);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager3.jjnewStateCnt = 1;
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager3.getNextToken();
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("r", token1.toString());
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<.a=!8");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 121, 89);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(121, token0.endLine);
      assertEquals(89, token0.beginColumn);
      assertEquals(121, token0.beginLine);
      
      char char0 = javaParserTokenManager0.curChar;
      assertEquals('.', char0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-320), 88);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(".", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(121, token1.beginLine);
      assertEquals(85, token1.kind);
      assertEquals(90, token1.endColumn);
      assertEquals(121, token1.endLine);
      assertEquals(90, token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals("a", token2.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(121, token2.beginLine);
      assertEquals(91, token2.endColumn);
      assertEquals(121, token2.endLine);
      assertEquals(91, token2.beginColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals("<", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(121, token0.endLine);
      assertEquals(89, token0.beginColumn);
      assertEquals(121, token0.beginLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals("=", token3.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token3.beginColumn);
      assertEquals(92, token3.endColumn);
      assertEquals(87, token3.kind);
      assertEquals(121, token3.endLine);
      assertEquals(121, token3.beginLine);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedKind = 19;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, 19);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 19. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":W@");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-37), (byte) (-37));
      assertArrayEquals(new byte[] {(byte) (-37)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-37)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -37, column -36.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)32;
      StringReader stringReader0 = new StringReader("hm_4[[[CfR");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3, (byte)53);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals("hm_4", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(53, token0.beginColumn);
      assertEquals(3, token0.beginLine);
      assertEquals(56, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('%', char0);
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)108, 93);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(2, byteArray0.length);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(108, javaCharStream1.getEndLine());
      assertEquals(93, javaCharStream1.getColumn());
      assertEquals(93, javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream1.getEndColumn());
      assertEquals(108, javaCharStream1.getLine());
      assertEquals(108, javaCharStream1.getBeginLine());
      assertEquals("l", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(93, token0.beginColumn);
      assertEquals(108, token0.endLine);
      assertEquals(93, token0.endColumn);
      assertEquals(108, token0.beginLine);
      assertEquals(74, token0.kind);
      
      Token token1 = Token.newToken((byte) (-37));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, byteArray0.length);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(108, javaCharStream1.getEndLine());
      assertEquals(93, javaCharStream1.getColumn());
      assertEquals(93, javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream1.getEndColumn());
      assertEquals(108, javaCharStream1.getLine());
      assertEquals(108, javaCharStream1.getBeginLine());
      assertEquals("l", token2.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(93, token2.beginColumn);
      assertEquals(108, token2.endLine);
      assertEquals(93, token2.endColumn);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(108, javaCharStream1.getEndLine());
      assertEquals(93, javaCharStream1.getColumn());
      assertEquals(93, javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream1.getEndColumn());
      assertEquals(108, javaCharStream1.getLine());
      assertEquals(108, javaCharStream1.getBeginLine());
      assertEquals("l", token2.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(93, token2.beginColumn);
      assertEquals(108, token2.endLine);
      assertEquals(93, token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('%', char0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1656), 93);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream1);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)108, (byte) (-37)}, byteArray0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2, byteArray0.length);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1656), javaCharStream1.getBeginLine());
      assertEquals(93, javaCharStream1.getEndColumn());
      assertEquals(93, javaCharStream1.getColumn());
      assertEquals((-1656), javaCharStream1.getLine());
      assertEquals((-1656), javaCharStream1.getEndLine());
      assertEquals(93, javaCharStream1.getBeginColumn());
      assertEquals("l", token0.toString());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(93, token0.endColumn);
      assertEquals((-1656), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1656), token0.beginLine);
      assertEquals(93, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals("^", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(94, token1.endColumn);
      assertEquals((-1103), token1.beginLine);
      assertEquals(107, token1.kind);
      assertEquals((-1103), token1.endLine);
      assertEquals(94, token1.beginColumn);
      
      javaParserTokenManager2.SkipLexicalActions(token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals("^", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(94, token1.endColumn);
      assertEquals((-1103), token1.beginLine);
      assertEquals(107, token1.kind);
      assertEquals((-1103), token1.endLine);
      assertEquals(94, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)16;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte)126, (byte)103, (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 117, 117, 117);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjmatchedKind = (int) (byte)126;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean2 = stringReader0.markSupported();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("Kgaox", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      
      Token token2 = Token.newToken(1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNull(token2.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertEquals("+", token3.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(101, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(7, token3.beginColumn);
      assertEquals(7, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotNull(token4);
      assertEquals("+", token4.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertEquals(7, token4.endColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(101, token4.kind);
      assertEquals(7, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotNull(token5);
      assertEquals("+", token5.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertEquals(7, token5.beginColumn);
      assertEquals(7, token5.endColumn);
      assertEquals(101, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token3);
      assertNotSame(token6, token5);
      assertNotNull(token6);
      assertEquals("-", token6.toString());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token5));
      assertEquals(8, token6.endColumn);
      assertEquals(8, token6.beginColumn);
      assertEquals(1, token6.beginLine);
      assertEquals(1, token6.endLine);
      assertEquals(102, token6.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3Lg?//F+h,##{");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2330, 39);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2330, javaCharStream0.getLine());
      assertEquals(2330, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(2330, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals("3L", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(2330, token0.endLine);
      assertEquals(2330, token0.beginLine);
      assertEquals(39, token0.beginColumn);
      assertEquals(40, token0.endColumn);
      
      Token token1 = Token.newToken(40);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(2330, javaCharStream0.getLine());
      assertEquals(2330, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(2330, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals("3L", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token2.kind);
      assertEquals(2330, token2.beginLine);
      assertEquals(2330, token2.endLine);
      assertEquals(39, token2.beginColumn);
      assertEquals(40, token2.endColumn);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertEquals(2330, javaCharStream0.getLine());
      assertEquals(2330, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(2330, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals("g", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token3.kind);
      assertEquals(2330, token3.beginLine);
      assertEquals(41, token3.endColumn);
      assertEquals(41, token3.beginColumn);
      assertEquals(2330, token3.endLine);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TOl7E");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("&.E/e_:=zQs)");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-697), (-246));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals((-246), javaCharStream0.getColumn());
      assertEquals((-697), javaCharStream0.getEndLine());
      assertEquals((-246), javaCharStream0.getEndColumn());
      assertEquals((-246), javaCharStream0.getBeginColumn());
      assertEquals((-697), javaCharStream0.getBeginLine());
      assertEquals((-697), javaCharStream0.getLine());
      assertEquals("&", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-246), token0.endColumn);
      assertEquals(105, token0.kind);
      assertEquals((-697), token0.beginLine);
      assertEquals((-246), token0.beginColumn);
      assertEquals((-697), token0.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-246));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -246. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?{eg2;m");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("?{eg2;m");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2160, 2160);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('?', char0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals(2160, javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getBeginColumn());
      assertEquals(2160, javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals(2160, javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getBeginColumn());
      assertEquals(2160, javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals(2160, javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getBeginColumn());
      assertEquals(2160, javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2161, javaCharStream0.getColumn());
      assertEquals(2161, javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals(2161, javaCharStream0.getBeginColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals("{", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2161, token0.endColumn);
      assertEquals(2161, token0.beginColumn);
      assertEquals(2160, token0.beginLine);
      assertEquals(2160, token0.endLine);
      assertEquals(79, token0.kind);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2161, javaCharStream0.getColumn());
      assertEquals(2161, javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals(2161, javaCharStream0.getBeginColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals("{", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2161, token0.endColumn);
      assertEquals(2161, token0.beginColumn);
      assertEquals(2160, token0.beginLine);
      assertEquals(2160, token0.endLine);
      assertEquals(79, token0.kind);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Error: Ignoring invalid lexical state : ");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 66, 66);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjmatchedPos = 76;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.nextCharInd = 66;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      stringReader0.reset();
      char char0 = javaCharStream0.BeginToken();
      assertEquals('\u0000', char0);
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals(66, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = Token.newToken((-951));
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      token0.image = null;
      assertNull(token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals(66, javaCharStream0.getColumn());
      assertNull(token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      token0.endColumn = 0;
      assertNull(token0.toString());
      
      token0.image = "NJa[i^h<$Y%AeYH$1UM";
      assertEquals("NJa[i^h<$Y%AeYH$1UM", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals(66, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token1.beginColumn);
      assertEquals(66, token1.beginLine);
      assertEquals(66, token1.endLine);
      assertEquals(66, token1.endColumn);
      assertEquals(0, token1.kind);
      
      token0.beginColumn = 2161;
      assertEquals("NJa[i^h<$Y%AeYH$1UM", token0.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals(66, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(token0, token1);
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals(66, javaCharStream0.getColumn());
      assertEquals("NJa[i^h<$Y%AeYH$1UM", token0.toString());
      assertFalse(token0.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(2161, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals(66, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.jjnewStateCnt = (-3499);
      assertEquals(66, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(66, javaCharStream0.getEndColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals(66, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(67);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 67. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3Lg?//F+h,##{");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(51, int0);
      
      int int1 = JavaParserConstants.CONST;
      assertEquals(22, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("Lg", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("?", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J:z_N");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("J:z_N");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 36, 36);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertEquals(36, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals("J", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(36, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(36, token0.endColumn);
      assertEquals(36, token0.beginColumn);
      assertEquals(36, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("3lD>H\"B(oP8");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.CONST;
      assertEquals(22, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("3l", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("D", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      
      javaParserTokenManager1.SkipLexicalActions(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("D", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("D", token2.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(66, token2.kind);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("o}rB}d");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("o", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("}", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(80, token1.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("rB", token2.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(4, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1404), 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('7', char0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-1404), javaCharStream0.getLine());
      assertEquals((-1404), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1404), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-1404), javaCharStream0.getLine());
      assertEquals((-1404), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1404), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-1404), javaCharStream0.getLine());
      assertEquals((-1404), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1404), javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals((-1404), javaCharStream0.getLine());
      assertEquals((-1404), javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals((-1404), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("Kgaox", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals((-1404), token0.endLine);
      assertEquals((-1404), token0.beginLine);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"private\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 26);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('\"', char0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      char char1 = javaCharStream0.readChar();
      assertEquals('p', char1);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      char char2 = javaCharStream0.readChar();
      assertEquals('r', char2);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals("ivate", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1103), token0.beginLine);
      assertEquals(29, token0.beginColumn);
      assertEquals(33, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1103), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r.*>[gm==2{34\nNZQ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 46, 46);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('r', char0);
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(".", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.endLine);
      assertEquals(47, token0.beginColumn);
      assertEquals(47, token0.endColumn);
      assertEquals(85, token0.kind);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$5D2Q@KiDlfi");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("$5D2Q", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 36. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("(qs~~YG`LjOK!\"<T&x");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2125), 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('(', char0);
      assertEquals((-2125), javaCharStream0.getBeginLine());
      assertEquals((-2125), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-2125), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-2125), javaCharStream0.getBeginLine());
      assertEquals((-2125), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-2125), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-2125), javaCharStream0.getBeginLine());
      assertEquals((-2125), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-2125), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals((-2125), javaCharStream0.getBeginLine());
      assertEquals((-2125), javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals((-2125), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("qs", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2125), token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals((-2125), token0.endLine);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-2125), javaCharStream0.getBeginLine());
      assertEquals((-2125), javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals((-2125), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-2125), javaCharStream0.getBeginLine());
      assertEquals((-2125), javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals((-2125), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 14, 59);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals("-", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(14, token0.beginLine);
      assertEquals(59, token0.endColumn);
      assertEquals(59, token0.beginColumn);
      assertEquals(14, token0.endLine);
      assertEquals(102, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals("-", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(14, token0.beginLine);
      assertEquals(59, token0.endColumn);
      assertEquals(59, token0.beginColumn);
      assertEquals(14, token0.endLine);
      assertEquals(102, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 13);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 13. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)16;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte)126, (byte)103, (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 117, 117, 117);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.jjmatchedKind = 2295;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("7", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("Kgaox", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(6, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = Token.newToken(1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNull(token2.toString());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertEquals("+", token3.toString());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, token3.endLine);
      assertEquals(7, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(101, token3.kind);
      assertEquals(7, token3.beginColumn);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotNull(token4);
      assertEquals("+", token4.toString());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertEquals(101, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(7, token4.endColumn);
      assertEquals(7, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("default");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 26, 731);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('d', char0);
      assertEquals(731, javaCharStream0.getColumn());
      assertEquals(731, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(731, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(731, javaCharStream0.getColumn());
      assertEquals(731, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(731, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char1 = javaCharStream0.BeginToken();
      assertEquals('e', char1);
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(732, javaCharStream0.getBeginColumn());
      assertEquals(732, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(732, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getEndLine());
      assertFalse(char1 == char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1168), 731);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(733, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(737, javaCharStream0.getColumn());
      assertEquals(737, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals("fault", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(733, token0.beginColumn);
      assertEquals(26, token0.endLine);
      assertEquals(737, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(26, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(737, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(737, javaCharStream0.getColumn());
      assertEquals(737, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(737, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(26, token1.beginLine);
      assertEquals(26, token1.endLine);
      assertEquals(737, token1.endColumn);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(737, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(737, javaCharStream0.getColumn());
      assertEquals(737, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(737, token2.beginColumn);
      assertEquals(26, token2.beginLine);
      assertEquals(26, token2.endLine);
      assertEquals(737, token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1103), 93);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('%', char0);
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals("^", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(107, token0.kind);
      assertEquals((-1103), token0.endLine);
      assertEquals((-1103), token0.beginLine);
      assertEquals(94, token0.endColumn);
      assertEquals(94, token0.beginColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals("^", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(107, token0.kind);
      assertEquals((-1103), token0.endLine);
      assertEquals((-1103), token0.beginLine);
      assertEquals(94, token0.endColumn);
      assertEquals(94, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals("e", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1103), token1.endLine);
      assertEquals(95, token1.beginColumn);
      assertEquals((-1103), token1.beginLine);
      assertEquals(95, token1.endColumn);
      assertEquals(74, token1.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1103));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1103. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%^e)C^HJue?rfyyzN");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("default");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("default");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (-1103), 2160);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('d', char0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals(2160, javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(2160, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2160, javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getColumn());
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(2160, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 2160, (-1103));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = Token.newToken((-1103));
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-1103), javaCharStream0.getLine());
      assertEquals(2166, javaCharStream0.getColumn());
      assertEquals(2166, javaCharStream0.getEndColumn());
      assertEquals((-1103), javaCharStream0.getBeginLine());
      assertEquals((-1103), javaCharStream0.getEndLine());
      assertEquals(2161, javaCharStream0.getBeginColumn());
      assertEquals("efault", token1.toString());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(2166, token1.endColumn);
      assertEquals(2161, token1.beginColumn);
      assertEquals((-1103), token1.endLine);
      assertEquals((-1103), token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j\"]7.y%r^sb2");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)124, (byte)42, (byte)105}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)124, (byte)42, (byte)105}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)124, (byte)42, (byte)105}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 22, 1162);
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)124, (byte)42, (byte)105}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(3, byteArray0.length);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("|", token0.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)124, (byte)42, (byte)105}, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(3, byteArray0.length);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("*", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(103, token1.kind);
      assertEquals(2, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)16;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-99), (byte)126, (byte)103, (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 117, 117, 117);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjmatchedKind = 2295;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("7", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 80, 28);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('7', char0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals("Kgaox", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(33, token0.endColumn);
      assertEquals(29, token0.beginColumn);
      assertEquals(80, token0.beginLine);
      assertEquals(80, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals("+", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(101, token1.kind);
      assertEquals(34, token1.beginColumn);
      assertEquals(34, token1.endColumn);
      assertEquals(80, token1.endLine);
      assertEquals(80, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("7Kgaox+-|uM|kF");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1200, 1200);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('7', char0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(1200, javaCharStream0.getColumn());
      assertEquals(1200, javaCharStream0.getLine());
      assertEquals(1200, javaCharStream0.getEndLine());
      assertEquals(1200, javaCharStream0.getBeginLine());
      assertEquals(1200, javaCharStream0.getBeginColumn());
      assertEquals(1200, javaCharStream0.getEndColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      char char1 = javaCharStream0.readChar();
      assertEquals('K', char1);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(1201, javaCharStream0.getColumn());
      assertEquals(1201, javaCharStream0.getEndColumn());
      assertEquals(1200, javaCharStream0.getLine());
      assertEquals(1200, javaCharStream0.getEndLine());
      assertEquals(1200, javaCharStream0.getBeginLine());
      assertEquals(1200, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(char1 == char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1201, javaCharStream0.getColumn());
      assertEquals(1201, javaCharStream0.getEndColumn());
      assertEquals(1200, javaCharStream0.getLine());
      assertEquals(1200, javaCharStream0.getEndLine());
      assertEquals(1200, javaCharStream0.getBeginLine());
      assertEquals(1200, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1201, javaCharStream0.getColumn());
      assertEquals(1201, javaCharStream0.getEndColumn());
      assertEquals(1200, javaCharStream0.getLine());
      assertEquals(1200, javaCharStream0.getEndLine());
      assertEquals(1200, javaCharStream0.getBeginLine());
      assertEquals(1200, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertEquals(1205, javaCharStream0.getEndColumn());
      assertEquals(1200, javaCharStream0.getLine());
      assertEquals(1200, javaCharStream0.getEndLine());
      assertEquals(1205, javaCharStream0.getColumn());
      assertEquals(1200, javaCharStream0.getBeginLine());
      assertEquals(1202, javaCharStream0.getBeginColumn());
      assertEquals("gaox", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1200, token0.beginLine);
      assertEquals(1200, token0.endLine);
      assertEquals(1202, token0.beginColumn);
      assertEquals(1205, token0.endColumn);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("default");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("default");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2160, (-1103));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char char0 = javaCharStream0.readChar();
      assertEquals('d', char0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1103), javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals((-1103), javaCharStream0.getBeginColumn());
      assertEquals((-1103), javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertEquals((-1097), javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals((-1097), javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals((-1102), javaCharStream0.getBeginColumn());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals("efault", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1097), token0.endColumn);
      assertEquals(2160, token0.beginLine);
      assertEquals((-1102), token0.beginColumn);
      assertEquals(2160, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-1097), javaCharStream0.getEndColumn());
      assertEquals(2160, javaCharStream0.getEndLine());
      assertEquals((-1097), javaCharStream0.getBeginColumn());
      assertEquals((-1097), javaCharStream0.getColumn());
      assertEquals(2160, javaCharStream0.getBeginLine());
      assertEquals(2160, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1097), token1.endColumn);
      assertEquals((-1097), token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(2160, token1.beginLine);
      assertEquals(2160, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("R+u54\"WK s(W$S");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'S';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, 105);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals("-", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token0.beginLine);
      assertEquals(105, token0.beginColumn);
      assertEquals(105, token0.endColumn);
      assertEquals(105, token0.endLine);
      assertEquals(102, token0.kind);
  }
}
