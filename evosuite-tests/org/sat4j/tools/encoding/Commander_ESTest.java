/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:55:01 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Commander;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Commander_ESTest extends Commander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Commander commander0 = new Commander();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1065);
      intArray0[1] = (-1065);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(statisticsSolver0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 746;
      intArray0[2] = (-1065);
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = commander0.addAtMostOne(dimacsOutputSolver0, vecInt0);
      assertEquals(3, iConstr0.size());
      
      commander0.addExactlyOne(dimacsOutputSolver0, vecInt0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Commander commander0 = new Commander();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt(557);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory.instance();
      int int0 = 0;
      String[] stringArray0 = new String[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 2);
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(0, (-2923));
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 365.4818612);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, noRestarts0, mUSLauncher0);
      FullClauseSelectorSolver<Solver<CardinalityDataStructure>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<CardinalityDataStructure>>(solver0, false);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        commander0.addExactly(fullClauseSelectorSolver0, iVecInt0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Commander commander0 = new Commander();
      LearningStrategy<CardinalityDataStructure> learningStrategy0 = null;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int int0 = 3;
      SearchParams searchParams0 = new SearchParams(3);
      PureOrder pureOrder0 = new PureOrder(3);
      // Undeclared exception!
      try { 
        pureOrder0.varActivity(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Commander commander0 = new Commander();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=h";
      stringArray0[1] = "TB0;5/";
      stringArray0[2] = "3-,5tvc@3R3_rp^3|h-";
      stringArray0[3] = "";
      Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 9);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int[] intArray0 = new int[5];
      intArray0[0] = 840;
      intArray0[1] = 0;
      intArray0[2] = (-1822);
      intArray0[3] = 177;
      intArray0[4] = (-4013);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, noRestarts0);
      solverArray0[0] = solver0;
      SearchParams searchParams0 = new SearchParams((-3304.1251332), 750.2982356, (-1822), 840);
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, noRestarts0);
      solverArray0[1] = solver1;
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, noRestarts0);
      solverArray0[2] = solver2;
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, noRestarts0, iLogAble0);
      solverArray0[3] = solver3;
      Solver<CardinalityDataStructure> solver4 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, noRestarts0);
      solverArray0[4] = solver4;
      PureOrder pureOrder0 = new PureOrder((-1));
      Solver<CardinalityDataStructure> solver5 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, noRestarts0);
      solverArray0[5] = solver5;
      Solver<CardinalityDataStructure> solver6 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      solverArray0[6] = solver6;
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver7 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, subsetVarOrder0, noRestarts0);
      solverArray0[7] = solver7;
      Solver<CardinalityDataStructure> solver8 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0);
      solverArray0[8] = solver8;
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(true, stringArray0, solverArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      VecInt vecInt0 = new VecInt(intArray0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(maxSatDecorator0, vecInt0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel1 = new AbstractMinimalModel(abstractMinimalModel0, vecInt0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(abstractMinimalModel1, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int int0 = 7;
      VecInt vecInt0 = new VecInt(7, 7);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, vecInt0, checkMUSSolutionListener0);
      try { 
        commander0.addExactlyOne(minimal4InclusionModel0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(911, 1691);
      IVecInt iVecInt0 = vecInt0.push(911);
      // Undeclared exception!
      commander0.addAtMostOne(solutionCounter0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      cardinalityDataStructure0.conflictDetectedInWatchesFor(32, 32);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      ClausalCardinalitiesDecorator<Solver<CardinalityDataStructure>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Solver<CardinalityDataStructure>>(solver0, commander0);
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(clausalCardinalitiesDecorator0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Commander commander0 = new Commander();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        commander0.addExactly(statisticsSolver0, (IVecInt) null, 1266);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Commander commander0 = new Commander();
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(1.0E-4, 1.0E-4, 1.0E-4, (-4570));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      LexicoDecorator<Solver<CardinalityDataStructure>> lexicoDecorator0 = new LexicoDecorator<Solver<CardinalityDataStructure>>(solver0);
      VecInt vecInt0 = new VecInt();
      try { 
        commander0.addExactly(lexicoDecorator0, vecInt0, (-4570));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Commander commander0 = new Commander();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(1);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-672));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 0);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, noRestarts0, mUSLauncher0);
      ClausalCardinalitiesDecorator<Solver<CardinalityDataStructure>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Solver<CardinalityDataStructure>>(solver0, commander0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(clausalCardinalitiesDecorator0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Commander commander0 = new Commander();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[3] = (-1065);
      intArray0[2] = 746;
      intArray0[3] = (-1065);
      intArray0[1] = (-1065);
      VecInt vecInt0 = new VecInt(intArray0);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1065), 0, 0, 1439);
      PureOrder pureOrder0 = new PureOrder(11);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, eMARestarts0, (ILogAble) null);
      GroupClauseSelectorSolver<Solver<CardinalityDataStructure>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Solver<CardinalityDataStructure>>(solver0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(groupClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      int[] intArray0 = new int[17];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      commander0.addAtMostOne(dimacsOutputSolver0, vecInt0);
      commander0.addExactlyOne(dimacsOutputSolver0, vecInt0);
      assertEquals(16, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(16, dimacsOutputSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(1.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      try { 
        commander0.addExactly(solver0, iVecInt0, 15);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(911, 1691);
      IVecInt iVecInt0 = vecInt0.push(911);
      // Undeclared exception!
      commander0.addExactly(solutionCounter0, iVecInt0, 911);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Commander commander0 = new Commander();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int int0 = 5;
      SearchParams searchParams0 = new SearchParams(5);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      searchParams0.toString();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      NegationDecorator<Solver<CardinalityDataStructure>> negationDecorator0 = new NegationDecorator<Solver<CardinalityDataStructure>>(solver0);
      VecInt vecInt0 = new VecInt(32, 32);
      fixedLengthLearning0.setSolver(solver0);
      vecInt0.toString();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(negationDecorator0, iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = commander0.addAtMostOne(dimacsOutputSolver0, vecInt0);
      assertEquals(3, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Commander commander0 = new Commander();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1784;
      intArray0[2] = 718;
      intArray0[3] = (-2217);
      intArray0[4] = 0;
      intArray0[5] = (-2000);
      intArray0[6] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator((ISolver) null, vecInt0, 2118L);
      // Undeclared exception!
      try { 
        commander0.addExactly(subModelIterator0, vecInt0, 3699);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Commander commander0 = new Commander();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        commander0.addExactly(statisticsSolver0, vecInt0, (-1055));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }
}
