/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:33:19 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GroupClauseSelectorSolver_ESTest extends GroupClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1694, 1694);
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(minOneDecorator0).unsatExplanation();
      ModelIterator modelIterator0 = new ModelIterator(minOneDecorator0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIterator0, vecInt0);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0);
      vecInt0.insertFirst((-1636));
      IVecInt iVecInt0 = groupClauseSelectorSolver0.unsatExplanation();
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause((IVecInt) vecInt0, (-222));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(minOneDecorator0).modelWithInternalVariables();
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      int[] intArray1 = groupClauseSelectorSolver0.model();
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 347);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0, (SolutionFoundListener) null);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, true);
      GroupClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>>(fullClauseSelectorSolver0);
      IConstr iConstr0 = groupClauseSelectorSolver0.addNonControlableClause(vecInt0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[7];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(minOneDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecorator0;
      minOneDecoratorArray0[3] = minOneDecorator0;
      minOneDecoratorArray0[4] = minOneDecorator0;
      minOneDecoratorArray0[5] = minOneDecorator0;
      minOneDecoratorArray0[6] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(stringArray0, minOneDecoratorArray0);
      ModelIterator modelIterator0 = new ModelIterator(manyCore0, (-1L));
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(modelIterator0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator1);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = groupClauseSelectorSolver0.addNonControlableClause(vecInt0);
      assertEquals(7, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[7];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(minOneDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(minOneDecorator0).nextFreeVarId(anyBoolean());
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecorator0;
      minOneDecoratorArray0[3] = minOneDecorator0;
      minOneDecoratorArray0[4] = minOneDecorator0;
      minOneDecoratorArray0[5] = minOneDecorator0;
      minOneDecoratorArray0[6] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(stringArray0, minOneDecoratorArray0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(manyCore0);
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      IConstr iConstr0 = groupClauseSelectorSolver0.addControlableClause(vecInt0, 4);
      assertEquals(7, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder(0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, miniSATRestarts0, basicLauncher0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause(iVecInt0, 1728);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(groupClauseSelectorSolver0);
      UnitClause unitClause0 = (UnitClause)groupClauseSelectorSolver0.addClause(iVecInt0, 1);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      VecInt vecInt0 = new VecInt(1678, 1678);
      int[] intArray0 = new int[2];
      intArray0[0] = 1626;
      intArray0[1] = 1626;
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(minOneDecorator0).unsatExplanation();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minOneDecorator0, vecInt0);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0);
      Minimal4InclusionModel minimal4InclusionModel1 = new Minimal4InclusionModel(groupClauseSelectorSolver0, vecInt0);
      groupClauseSelectorSolver0.unsatExplanation();
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(minimal4InclusionModel1);
      Minimal4InclusionModel minimal4InclusionModel2 = new Minimal4InclusionModel(minOneDecorator1, vecInt0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1612);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(minOneDecorator0).unsatExplanation();
      IVecInt iVecInt0 = vecInt0.pop();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minOneDecorator0, iVecInt0);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      VecInt vecInt0 = new VecInt(1692, 1692);
      int[] intArray0 = new int[2];
      intArray0[0] = 1626;
      intArray0[1] = 1626;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) intArray0, (Object) null).when(minOneDecorator0).model();
      doReturn((Object) intArray0, (Object) null).when(minOneDecorator0).modelWithInternalVariables();
      doReturn(learntWLClause0).when(minOneDecorator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minOneDecorator0, vecInt0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>(minimal4InclusionModel0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(aSolverFactory0, stringArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, solutionFoundListener0);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      VecInt vecInt0 = new VecInt(1692, 1692);
      int[] intArray0 = new int[2];
      intArray0[0] = 1626;
      intArray0[1] = 1626;
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(1626, (-2345), 1692, 0).when(minOneDecorator0).nextFreeVarId(anyBoolean());
      doReturn(vecInt0, vecInt0, vecInt0).when(minOneDecorator0).unsatExplanation();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minOneDecorator0, vecInt0);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0);
      IVecInt iVecInt0 = groupClauseSelectorSolver0.unsatExplanation();
      iVecInt0.unsafePush(1626);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<AbstractMinimalModel>(minimal4InclusionModel0);
      groupClauseSelectorSolver1.getGroupVar(iVecInt0, (-976));
      groupClauseSelectorSolver1.unsatExplanation();
      SolutionCounter solutionCounter0 = new SolutionCounter(groupClauseSelectorSolver1);
      groupClauseSelectorSolver0.unsatExplanation();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(solutionCounter0);
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver2 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver2.getGroupVar(vecInt0, (-844));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(statisticsSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0, false);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(maxSatDecorator0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(abstractMinimalModel0, readOnlyVecInt0, checkMUSSolutionListener0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>(minimal4CardinalityModel0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.getGroupVar(iVecInt0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>((AbstractMinimalModel) null);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.getGroupVar(vecInt0, 2288);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0, vecInt0, solutionFoundListener0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>(abstractMinimalModel0);
      try { 
        groupClauseSelectorSolver0.addNonControlableClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1612);
      GateTranslator gateTranslator0 = new GateTranslator(dimacsStringSolver0);
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1612;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause(vecInt0, 1728);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      GroupClauseSelectorSolver<NegationDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<NegationDecorator<DimacsOutputSolver>>(negationDecorator0);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(groupClauseSelectorSolver0, 100L, checkMUSSolutionListener0);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(groupClauseSelectorSolver1);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver1.addControlableClause(iVecInt0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, true);
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, 0L, checkMUSSolutionListener0);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      PureOrder pureOrder0 = new PureOrder((-548));
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, tabuListDecorator0, glucose21Restarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause((IVecInt) readOnlyVecInt0, 3540);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      VecInt vecInt0 = new VecInt(1759, 1777);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause((IVecInt) vecInt0, 1759);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt();
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(negationDecorator0, checkMUSSolutionListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(modelIteratorToSATAdapter0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause((IVecInt) vecInt0, 1612);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1612);
      GateTranslator gateTranslator0 = new GateTranslator(dimacsStringSolver0);
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      groupClauseSelectorSolver0.addControlableClause(vecInt0, 1728);
      assertEquals(1, vecInt0.last());
      assertEquals(1, dimacsStringSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1694, 1694);
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(1694, 1694, 1694, 1694, 1694).when(minOneDecorator0).nextFreeVarId(anyBoolean());
      doReturn(vecInt0).when(minOneDecorator0).unsatExplanation();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minOneDecorator0, vecInt0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>(minimal4InclusionModel0);
      groupClauseSelectorSolver0.getGroupVar(vecInt0, (-1375));
      IVecInt iVecInt0 = groupClauseSelectorSolver0.unsatExplanation();
      assertEquals((-1375), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1694, 1694);
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(minOneDecorator0).nVars();
      doReturn(vecInt0).when(minOneDecorator0).unsatExplanation();
      vecInt0.insertFirst(0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minOneDecorator0);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0);
      IVecInt iVecInt0 = groupClauseSelectorSolver0.unsatExplanation();
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[3];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(minOneDecorator0).modelWithInternalVariables();
      doReturn(0, 0, 0, 0).when(minOneDecorator0).nextFreeVarId(anyBoolean());
      VecInt vecInt0 = new VecInt(intArray0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(minOneDecorator0);
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0);
      groupClauseSelectorSolver0.getGroupVar(vecInt0, 0);
      int[] intArray1 = groupClauseSelectorSolver0.model();
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1678, 1678);
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(minOneDecorator0, vecInt0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(minimal4InclusionModel0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator1);
      int[] intArray0 = groupClauseSelectorSolver0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[2];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(minOneDecorator0).modelWithInternalVariables();
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      int[] intArray1 = groupClauseSelectorSolver0.model();
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause((IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GroupClauseSelectorSolver<OptToSatAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<OptToSatAdapter>((OptToSatAdapter) null);
      Collection<Integer> collection0 = groupClauseSelectorSolver0.getAddedVars();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(statisticsSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0, false);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(maxSatDecorator0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(abstractMinimalModel0, readOnlyVecInt0, checkMUSSolutionListener0);
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[7];
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecoratorArray0[3]);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addNonControlableClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
