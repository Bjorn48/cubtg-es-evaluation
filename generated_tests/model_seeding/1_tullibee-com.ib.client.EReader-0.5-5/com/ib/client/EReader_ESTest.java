/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 12:49:06 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.EClientErrors;
import com.ib.client.EException;
import com.ib.client.EReader;
import com.ib.client.EWrapper;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EReader_ESTest extends EReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 533);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 533;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 533);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-108));
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-2360));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 966);
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(15);
      assertEquals(15, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(12, byteArrayInputStream0.available());
      
      int int0 = eReader0.readIntMax();
      assertEquals(15, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(11, byteArrayInputStream0.available());
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertEquals(15, byteArray0.length);
      assertFalse(boolean1);
      assertEquals(10, byteArrayInputStream0.available());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = EReader.readInt(dataInputStream0);
      assertEquals(13, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(12, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(11, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(11, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      int int1 = dataInputStream0.available();
      assertEquals(11, byteArray0.length);
      assertEquals(21, int1);
      assertEquals(11, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 44);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 48);
      assertNotNull(eReader0);
      
      int int0 = 3;
      try { 
        eReader0.processMsg(48);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 531);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 53);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-955), 19);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2202));
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -955
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[8] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 817);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(9, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-7));
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int0 = eReader0.readInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean1 = eReader0.processMsg((byte) (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(14, int0);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)66);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(eWrapper1).toString();
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte)0);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean0 = eReader1.processMsg(14);
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean1 = eReader1.processMsg(20);
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertTrue(boolean1 == boolean0);
      
      double double0 = eReader1.readDouble();
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      double double1 = eReader0.readDoubleMax();
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      assertNotEquals(double1, double0, 0.01);
      
      String string0 = eReader0.readStr();
      assertNotNull(string0);
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals("\uFF94", string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 817);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDouble();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94!\u0010=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)54);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      int int0 = EReader.NEXT_VALID_ID;
      assertEquals(9, int0);
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(45);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(12, byteArray0.length);
      assertEquals(12, int0);
      assertEquals(12, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 44);
      assertNotNull(eReader0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(19);
      assertEquals(12, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(12, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int0 = eReader0.readInt();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      String string0 = EReader.readStr(dataInputStream0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("\uFF94", string0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-11));
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      boolean boolean0 = eReader0.processMsg(53);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(13, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)54);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int0 = 3;
      // Undeclared exception!
      try { 
        eReader0.processMsg(3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-955), 19);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2202));
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -955
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 15);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, 1379);
      assertNotNull(eReader0);
      
      eReader0.stop();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)10);
      assertNotNull(bufferedInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(11, byteArray0.length);
      assertEquals(11, int0);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-108));
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper1).toString();
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean0 = eReader1.processMsg(46);
      assertNotSame(eReader1, eReader0);
      assertEquals(11, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      eReader0.stop();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      long long0 = eReader0.readLong();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 542);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.createEException(542, (EClientErrors.CodeMsgPair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = dataInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      String string0 = eReader0.readStr();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("\uFF94", string0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte)0);
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((byte)33, "");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals(33, eClientErrors_CodeMsgPair0.code());
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      
      EException eException0 = eReader1.createEException((byte)0, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertNotSame(eReader1, eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, eClientErrors_CodeMsgPair0.code());
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(33, eException0.getErrorCode());
      assertEquals(0, eException0.getId());
      assertFalse(eReader1.equals((Object)eReader0));
      
      int int1 = eReader1.readIntMax();
      assertNotSame(eReader1, eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertFalse(int1 == int0);
      
      int int2 = EReader.readInt(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 825);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 99);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(40);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 15;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 15);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(23);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = EReader.CURRENT_TIME;
      assertEquals(49, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("c Fh4o{!-  E/\"").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(21);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int2 = eReader0.readInt();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = eReader0.readIntMax();
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int3);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, eWrapper1, 13);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.run();
      assertNotSame(eReader1, eReader0);
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader0.processMsg(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = EReader.ACCT_DOWNLOAD_END;
      assertEquals(54, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("c Fh4o{!-  E/\"").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(54);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int2 = eReader0.readInt();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = EReader.SCANNER_DATA;
      assertEquals(20, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertEquals(14, byteArray0.length);
      assertFalse(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertEquals(14, byteArray0.length);
      assertTrue(boolean1);
      assertEquals(14, byteArrayInputStream0.available());
      assertFalse(boolean1 == boolean0);
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      int int1 = dataInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int1);
      assertEquals(13, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      boolean boolean2 = dataInputStream0.markSupported();
      assertEquals(14, byteArray0.length);
      assertTrue(boolean2);
      assertEquals(13, byteArrayInputStream0.available());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, 15);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper2 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, eWrapper2, (-1259));
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.stop();
      assertNotSame(eReader1, eReader0);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.run();
      assertNotSame(eReader1, eReader0);
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.readDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 54;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 54);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 33);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(27);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 50);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-955), 19);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2202));
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      int int0 = 15;
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -955
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(13, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int2 = dataInputStream0.skipBytes(531);
      assertEquals(14, byteArray0.length);
      assertEquals(13, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(0, "-g~5Qf");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals("-g~5Qf", eClientErrors_CodeMsgPair0.msg());
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      
      EException eException0 = eReader0.createEException(56, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("-g~5Qf", eClientErrors_CodeMsgPair0.msg());
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      assertEquals(56, eException0.getId());
      assertEquals(0, eException0.getErrorCode());
      
      try { 
        eReader0.processMsg(51);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 143);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(143);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper1, 1379);
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.processMsg(57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-1250));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[8] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 817);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(9, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int0 = eReader0.readInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 55;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      int int0 = (-2490);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-1870));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 21);
      assertNotNull(eReader0);
      
      eReader0.stop();
      // Undeclared exception!
      try { 
        eReader0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-891));
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      eReader0.run();
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        EReader.readStr(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      double double0 = eReader0.readDouble();
      assertNotSame(eReader0, eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 99);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(11, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(10, byteArrayInputStream0.available());
      
      int int0 = eReader0.readIntMax();
      assertEquals(11, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int1 = EReader.readInt(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(0, int1);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      try { 
        eReader0.processMsg(24);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)41, (byte) (-37));
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-99), (byte) (-37), (byte)41, (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-37), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-99), (byte) (-37), (byte)41, (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-37), byteArrayInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte) (-99));
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-99), (byte) (-37), (byte)41, (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-37), byteArrayInputStream0.available());
      
      try { 
        eReader0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      double double0 = eReader1.readDouble();
      assertNotSame(eReader1, eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.readIntMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 15;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-1462));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(29);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      assertNotNull(sequenceInputStream1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      assertNotNull(dataInputStream0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 13);
      assertNotNull(eReader0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, (EWrapper) null, 3);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.stop();
      assertNotSame(eReader1, eReader0);
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 1662);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(25);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 99);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(11, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(10, byteArrayInputStream0.available());
      
      int int0 = eReader0.readIntMax();
      assertEquals(11, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int1 = EReader.readInt(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(0, int1);
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      int int2 = EReader.ERR_MSG;
      assertEquals(4, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = EReader.SCANNER_DATA;
      assertEquals(20, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      boolean boolean0 = eReader0.processMsg(4);
      assertEquals(11, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(6, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)73);
      assertNotNull(bufferedInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-108));
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(11, byteArray0.length);
      assertEquals(11, int0);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 11);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(50);
      assertEquals(11, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 817);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 2641);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      String string0 = eReader0.readStr();
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 44);
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.readInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94!\u0010=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(37);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 531);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(2);
      assertEquals(11, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(7, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      long long0 = dataInputStream0.readLong();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(41658296553177088L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 11);
      assertNotNull(eReader0);
      
      eReader0.run();
      // Undeclared exception!
      try { 
        EReader.readStr((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, int0);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      byte byte0 = dataInputStream0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((byte)0, byte0);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(52);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(12, byteArrayInputStream0.available());
      
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 52);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader0.processMsg((byte)33);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 12);
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 542);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 56;
      int int1 = 50;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 11);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 54);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 1293);
      assertNotNull(eReader0);
      
      eReader0.run();
      int int0 = 1013;
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(1013, "");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(1013, eClientErrors_CodeMsgPair0.code());
      
      eClientErrors_CodeMsgPair0.m_errorMsg = "";
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(1013, eClientErrors_CodeMsgPair0.code());
      
      eClientErrors_CodeMsgPair0.m_errorMsg = "?:eo\"+w";
      assertEquals("?:eo\"+w", eClientErrors_CodeMsgPair0.msg());
      assertEquals(1013, eClientErrors_CodeMsgPair0.code());
      
      eClientErrors_CodeMsgPair0.m_errorMsg = "";
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(1013, eClientErrors_CodeMsgPair0.code());
      
      eReader0.run();
      eClientErrors_CodeMsgPair0.m_errorMsg = "";
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(1013, eClientErrors_CodeMsgPair0.code());
      
      EException eException0 = eReader0.createEException(4124, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(1013, eClientErrors_CodeMsgPair0.code());
      assertEquals(4124, eException0.getId());
      assertEquals(1013, eException0.getErrorCode());
      
      eReader0.run();
      eReader0.run();
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 13);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.run();
      assertNotSame(eReader1, eReader0);
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader1.processMsg(30);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)54);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((-1564), "The TWS is out of date and must be upgraded.");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals((-1564), eClientErrors_CodeMsgPair0.code());
      assertEquals("The TWS is out of date and must be upgraded.", eClientErrors_CodeMsgPair0.msg());
      
      EException eException0 = eReader1.createEException((-89), eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertNotSame(eReader1, eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals((-1564), eClientErrors_CodeMsgPair0.code());
      assertEquals("The TWS is out of date and must be upgraded.", eClientErrors_CodeMsgPair0.msg());
      assertEquals((-1564), eException0.getErrorCode());
      assertEquals((-89), eException0.getId());
      assertFalse(eReader1.equals((Object)eReader0));
      
      bufferedInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      try { 
        eReader0.readDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      long long0 = dataInputStream0.readLong();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(41658296553177088L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-3577));
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg((-3577));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(14, int0);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper1).toString();
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte)0);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean0 = eReader1.processMsg(14);
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      int int1 = eReader0.readIntMax();
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        EReader.readInt((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 56);
      assertNotNull(eReader0);
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(172, "-g~5Qf");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals("-g~5Qf", eClientErrors_CodeMsgPair0.msg());
      assertEquals(172, eClientErrors_CodeMsgPair0.code());
      
      EException eException0 = eReader0.createEException(109, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertEquals("-g~5Qf", eClientErrors_CodeMsgPair0.msg());
      assertEquals(172, eClientErrors_CodeMsgPair0.code());
      assertEquals(172, eException0.getErrorCode());
      assertEquals(109, eException0.getId());
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-108));
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertEquals(8, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 56);
      assertNotNull(eReader0);
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(172, "-g~5Qf");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals(172, eClientErrors_CodeMsgPair0.code());
      assertEquals("-g~5Qf", eClientErrors_CodeMsgPair0.msg());
      
      EException eException0 = eReader0.createEException(109, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertEquals(172, eClientErrors_CodeMsgPair0.code());
      assertEquals("-g~5Qf", eClientErrors_CodeMsgPair0.msg());
      assertEquals(109, eException0.getId());
      assertEquals(172, eException0.getErrorCode());
      
      try { 
        eReader0.processMsg(23);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)14);
      assertNotNull(bufferedInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-108));
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDouble();
      assertEquals(15, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, byteArrayInputStream0.available());
      
      bufferedInputStream0.close();
      assertEquals(15, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readStr();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 24);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(34);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 56);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 56);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)10);
      assertNotNull(bufferedInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(11, byteArray0.length);
      assertEquals(11, int0);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 56;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 50);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = (-2471);
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-2471));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      double double0 = eReader1.readDouble();
      assertNotSame(eReader1, eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.readLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 48);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(48);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(14, int0);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)66);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(eWrapper1).toString();
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte)0);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean0 = eReader1.processMsg(14);
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean1 = eReader1.processMsg(20);
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertTrue(boolean1 == boolean0);
      
      double double0 = eReader1.readDouble();
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      long long0 = eReader0.readLong();
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-113);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = dataInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, (byte)0);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((byte)33, "");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals(33, eClientErrors_CodeMsgPair0.code());
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      
      EException eException0 = eReader0.createEException((byte)0, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, eClientErrors_CodeMsgPair0.code());
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(0, eException0.getId());
      assertEquals(33, eException0.getErrorCode());
      
      int int1 = EReader.SCANNER_PARAMETERS;
      assertEquals(19, int1);
      assertFalse(int1 == int0);
      
      int int2 = EReader.SCANNER_DATA;
      assertEquals(20, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      try { 
        eReader0.processMsg(28);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 54;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 54);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-955), 19);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2202));
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -955
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EReader.readInt((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = EReader.CURRENT_TIME;
      assertEquals(49, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("c Fh4o{!-  E/\"").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(21);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int2 = eReader0.readInt();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = eReader0.readIntMax();
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int3);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, eWrapper1, 13);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.run();
      assertNotSame(eReader1, eReader0);
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.readBoolFromInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 520);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      assertNotNull(sequenceInputStream1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 10);
      assertNotNull(pushbackInputStream0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      
      try { 
        EReader.readStr(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader((DataInputStream) null, eWrapper1, 55);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 523;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 523);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-108));
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(8, byteArrayInputStream0.available());
      
      int int0 = EReader.REAL_TIME_BARS;
      assertEquals(50, int0);
      
      String string0 = EReader.readStr(dataInputStream0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("\uFF94", string0);
      assertEquals(6, byteArrayInputStream0.available());
      
      double double1 = eReader0.readDouble();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotEquals(double1, double0, 0.01);
      
      int int1 = EReader.readInt(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int1);
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      int int2 = EReader.ERR_MSG;
      assertEquals(4, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = EReader.SCANNER_DATA;
      assertEquals(20, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, int0);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(9);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 533;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 533);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)73);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = eReader0.readIntMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 55;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      int int1 = 31;
      try { 
        eReader0.processMsg(31);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, int0);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper1).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      String string0 = EReader.readStr(dataInputStream0);
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      String string1 = eReader0.readStr();
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("\uFF94", string1);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(9);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 55;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(31);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 56);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 41);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(41);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 50);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(35);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)35;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.ib.client.EClientErrors$CodeMsgPair");
      assertFalse(boolean0);
      
      byteArray0[8] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      byte byte0 = dataInputStream0.readByte();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((byte)0, byte0);
      assertEquals(8, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 1);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)33, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)35, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      long long0 = dataInputStream0.readLong();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = EReader.EXECUTION_DATA_END;
      assertEquals(55, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int1 = EReader.RECEIVE_FA;
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("\",o76E").when(eWrapper1).toString();
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte)0);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean0 = eReader1.processMsg(16);
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      int int2 = eReader0.readIntMax();
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      long long0 = eReader0.readLong();
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 1379);
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.processMsg(19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = (-2471);
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-2471));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 15;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 15);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(26);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = EReader.CURRENT_TIME;
      assertEquals(49, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("c Fh4o{!-  E/\"").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(49);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int2 = eReader0.readInt();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = EReader.SCANNER_DATA;
      assertEquals(20, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      try { 
        eReader0.processMsg(28);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 520);
      assertNotNull(eReader0);
      
      eReader0.run();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 50);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = EReader.CURRENT_TIME;
      assertEquals(49, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("c Fh4o{!-  E/\"").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(57);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int2 = eReader0.readInt();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, (EWrapper) null, (-637));
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 23);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-1));
      assertNotNull(eReader0);
      
      eReader0.stop();
      boolean boolean0 = eReader0.processMsg((-1));
      assertFalse(boolean0);
      
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(13, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("\",o76E").when(eWrapper1).toString();
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte)0);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean0 = eReader1.processMsg(13);
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      int int2 = eReader0.readIntMax();
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        EReader.readInt((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 0);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(39);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((byte) (-108), "com.ib.client.Execution");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals((-108), eClientErrors_CodeMsgPair0.code());
      assertEquals("com.ib.client.Execution", eClientErrors_CodeMsgPair0.msg());
      
      EException eException0 = eReader0.createEException((-276), eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-108), eClientErrors_CodeMsgPair0.code());
      assertEquals("com.ib.client.Execution", eClientErrors_CodeMsgPair0.msg());
      assertEquals((-276), eException0.getId());
      assertEquals((-108), eException0.getErrorCode());
      
      String string0 = eReader0.readStr();
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("\uFF94", string0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      EReader eReader1 = new EReader(dataInputStream1, eWrapper1, (-2068));
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      eReader1.run();
      assertNotSame(eReader1, eReader0);
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.readInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 520);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(520);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(13, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int2 = 22;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 22);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 2770);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader0.processMsg(22);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = (-2471);
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-2471));
      assertNotNull(eReader0);
      
      int int1 = 6;
      // Undeclared exception!
      try { 
        eReader0.processMsg(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[8] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 817);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = bufferedInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean1);
      assertEquals(9, byteArrayInputStream0.available());
      assertTrue(boolean1 == boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int0 = eReader0.readIntMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 14);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = EReader.CURRENT_TIME;
      assertEquals(49, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 14);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        eReader0.readBoolFromInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 56);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(38);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      eReader0.stop();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      eReader0.run();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      long long0 = eReader0.readLong();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)83, 2264);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)27, (byte)0, (byte)0, (byte)99, (byte)16, (byte) (-8), (byte)83, (byte)8}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-74), byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)27, (byte)0, (byte)0, (byte)99, (byte)16, (byte) (-8), (byte)83, (byte)8}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-74), byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)83);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)27, (byte)0, (byte)0, (byte)99, (byte)16, (byte) (-8), (byte)83, (byte)8}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-74), byteArrayInputStream0.available());
      
      try { 
        eReader0.readStr();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 533);
      assertNotNull(eReader0);
      
      int int0 = 18;
      try { 
        eReader0.processMsg(27);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int1 = EReader.CONTRACT_DATA;
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(3);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int2 = eReader0.readInt();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = eReader0.readIntMax();
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int3);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertEquals(14, byteArray0.length);
      assertFalse(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = eReader0.readBoolFromInt();
      assertEquals(14, byteArray0.length);
      assertFalse(boolean2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int4 = eReader0.readIntMax();
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int4);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(11, byteArray0.length);
      assertEquals(11, int0);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 11);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(44);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 2525;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 2525);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      
      try { 
        eReader0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 44);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byte byte0 = (byte)33;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 21);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = null;
      EReader eReader1 = new EReader(dataInputStream0, (EWrapper) null, 533);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader1.processMsg(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(13, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("c Fh4o{!-  E/\"").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(13);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int2 = eReader0.readInt();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = EReader.SCANNER_DATA;
      assertEquals(20, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      try { 
        eReader0.processMsg(28);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, 661);
      assertNotNull(eReader0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        eReader0.readLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int0 = 533;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 533);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = (-1870);
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-1870));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)10);
      assertNotNull(bufferedInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(11, byteArray0.length);
      assertEquals(11, int0);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-108));
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader1.processMsg(11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EReader eReader0 = new EReader((DataInputStream) null, (EWrapper) null, 21);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(43);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(13, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(eWrapper0).toString();
      int int2 = dataInputStream0.skipBytes(0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(0, "-g~5Qf");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals("-g~5Qf", eClientErrors_CodeMsgPair0.msg());
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      
      EException eException0 = eReader0.createEException(56, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("-g~5Qf", eClientErrors_CodeMsgPair0.msg());
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      assertEquals(56, eException0.getId());
      assertEquals(0, eException0.getErrorCode());
      
      boolean boolean0 = eReader0.processMsg(51);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int3 = eReader0.readIntMax();
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int3);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      boolean boolean1 = eReader0.processMsg(13);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(14, int0);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)66);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(eWrapper1).toString();
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte)0);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean0 = eReader1.processMsg(14);
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      boolean boolean1 = eReader1.processMsg(20);
      assertNotSame(eReader1, eReader0);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = eReader0.readBoolFromInt();
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertFalse(boolean2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = eReader0.readBoolFromInt();
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertFalse(boolean3);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      int int1 = eReader0.readIntMax();
      assertNotSame(eReader0, eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader0.equals((Object)eReader1));
      assertFalse(int1 == int0);
      
      try { 
        eReader1.processMsg(12);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      assertNotNull(sequenceInputStream1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      assertNotNull(dataInputStream0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      assertNotNull(eReader0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((byte)0, "']iq[.[");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      assertEquals("']iq[.[", eClientErrors_CodeMsgPair0.msg());
      
      EException eException0 = eReader0.createEException((byte)33, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, eClientErrors_CodeMsgPair0.code());
      assertEquals("']iq[.[", eClientErrors_CodeMsgPair0.msg());
      assertEquals(33, eException0.getId());
      assertEquals(0, eException0.getErrorCode());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      double double0 = eReader1.readDouble();
      assertNotSame(eReader1, eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DataInputStream dataInputStream0 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 12);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-331));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      byte byte0 = (byte)33;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      double double0 = eReader1.readDouble();
      assertNotSame(eReader1, eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 56);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 1293);
      assertNotNull(eReader0);
      
      eReader0.run();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((-1840), "");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals((-1840), eClientErrors_CodeMsgPair0.code());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader((DataInputStream) null, eWrapper1, 51);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      EException eException0 = eReader1.createEException(1293, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertNotSame(eReader1, eReader0);
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals((-1840), eClientErrors_CodeMsgPair0.code());
      assertEquals((-1840), eException0.getErrorCode());
      assertEquals(1293, eException0.getId());
      assertFalse(eReader1.equals((Object)eReader0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        dataInputStream0.readByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 4);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 99);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(11, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(10, byteArrayInputStream0.available());
      
      int int0 = EReader.readInt(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(9, byteArrayInputStream0.available());
      
      int int1 = EReader.ERR_MSG;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      int int2 = EReader.SCANNER_DATA;
      assertEquals(20, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 15;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 4392);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(36);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 33);
      assertNotNull(eReader0);
      
      try { 
        eReader0.processMsg(33);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 2);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int1 = EReader.CONTRACT_DATA;
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      boolean boolean0 = dataInputStream0.markSupported();
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(14, byteArrayInputStream0.available());
      
      boolean boolean1 = eReader0.processMsg(3);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean1 == boolean0);
      
      int int2 = eReader0.readInt();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = eReader0.readIntMax();
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int3);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      boolean boolean2 = eReader0.readBoolFromInt();
      assertEquals(14, byteArray0.length);
      assertFalse(boolean2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = eReader0.readBoolFromInt();
      assertEquals(14, byteArray0.length);
      assertFalse(boolean3);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      int int4 = eReader0.readIntMax();
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int4);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      
      boolean boolean4 = eReader0.processMsg(17);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean4);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        EReader.readInt((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 55;
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[8] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 817);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(9, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)16, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte)16;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[8] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 817);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(9, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      eReader0.run();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = eReader0.readIntMax();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = EReader.readInt(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)61, (byte)0, (byte) (-1), (byte)0, (byte)124}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      assertNotNull(sequenceInputStream1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      assertNotNull(dataInputStream0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-955), 19);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-2553));
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(19, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        EReader.readInt(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -955
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byte byte0 = (byte)33;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = 37;
      try { 
        eReader0.processMsg(37);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = (-2471);
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-2471));
      assertNotNull(eReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 121);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(20, byteArray0.length);
      assertEquals(20, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(20, byteArray0.length);
      assertEquals(20, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(20, byteArray0.length);
      assertEquals(20, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(20, byteArray0.length);
      assertEquals(20, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(20, byteArray0.length);
      assertEquals(20, int0);
      assertEquals(20, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 44);
      assertNotNull(eReader0);
      assertEquals(20, byteArray0.length);
      assertEquals(20, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(56);
      assertEquals(20, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("hIgZq^0:\"").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(21);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg((byte)33);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 55);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 46);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      EWrapper eWrapper2 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader2 = new EReader(dataInputStream0, eWrapper2, (byte) (-108));
      assertNotNull(eReader2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader2.equals((Object)eReader0));
      assertFalse(eReader2.equals((Object)eReader1));
      
      String string0 = EReader.readStr(dataInputStream0);
      assertNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)10);
      assertNotNull(bufferedInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte) (-108));
      assertNotNull(eReader0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      boolean boolean0 = eReader0.processMsg(3);
      assertEquals(12, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(2, byteArrayInputStream0.available());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = EReader.readInt(dataInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(2, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, (-331));
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)21);
      assertNotNull(bufferedInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      long long0 = dataInputStream0.readLong();
      assertEquals(15, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(15, byteArray0.length);
      assertEquals(7, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(7);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)54);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (-781));
      assertNotNull(eReader1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader1.processMsg(42);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      assertNotNull(sequenceInputStream1);
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      assertNotNull(dataInputStream0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      assertNotNull(eReader0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, (EWrapper) null, 3);
      assertNotNull(eReader1);
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader0.readStr();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 44);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 2043);
      assertNotNull(eReader0);
      
      int int0 = 213;
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(213, "");
      assertNotNull(eClientErrors_CodeMsgPair0);
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(213, eClientErrors_CodeMsgPair0.code());
      
      eClientErrors_CodeMsgPair0.m_errorMsg = "";
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(213, eClientErrors_CodeMsgPair0.code());
      
      eClientErrors_CodeMsgPair0.m_errorMsg = "";
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(213, eClientErrors_CodeMsgPair0.code());
      
      EException eException0 = eReader0.createEException(2043, eClientErrors_CodeMsgPair0);
      assertNotNull(eException0);
      assertEquals((-1), EException.NO_VALID_CODE);
      assertEquals("", eClientErrors_CodeMsgPair0.msg());
      assertEquals(213, eClientErrors_CodeMsgPair0.code());
      assertEquals(2043, eException0.getId());
      assertEquals(213, eException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 54);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = EReader.CONTRACT_DATA;
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 46);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream1, eWrapper1, 1379);
      assertNotNull(eReader0);
      
      eReader0.stop();
      eReader0.run();
      // Undeclared exception!
      try { 
        eReader0.processMsg(57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = bufferedInputStream0.read();
      assertEquals(14, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(13, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 22);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper2 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper2, 51);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper3 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader2 = new EReader(dataInputStream1, eWrapper3, 1379);
      assertNotNull(eReader2);
      assertFalse(eReader2.equals((Object)eReader1));
      assertFalse(eReader2.equals((Object)eReader0));
      
      eReader2.stop();
      assertNotSame(eReader2, eReader1);
      assertNotSame(eReader2, eReader0);
      assertFalse(eReader2.equals((Object)eReader1));
      assertFalse(eReader2.equals((Object)eReader0));
      
      eReader2.run();
      assertNotSame(eReader2, eReader1);
      assertNotSame(eReader2, eReader0);
      assertFalse(eReader2.equals((Object)eReader1));
      assertFalse(eReader2.equals((Object)eReader0));
      
      try { 
        eReader2.processMsg((byte)33);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(12, byteArray0.length);
      assertEquals(12, int0);
      assertEquals(12, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 44);
      assertNotNull(eReader0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int1 = EReader.CONTRACT_DATA;
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      boolean boolean0 = dataInputStream0.markSupported();
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(14, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 54);
      assertNotNull(eReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-60);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = 2536;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 2536);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.readLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFFC4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 1293);
      assertNotNull(eReader0);
      
      eReader0.run();
      byte byte0 = (byte)0;
      byte byte1 = (byte)35;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      // Undeclared exception!
      try { 
        eReader0.readIntMax();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = EReader.DELTA_NEUTRAL_VALIDATION;
      assertEquals(56, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int1 = EReader.CONTRACT_DATA;
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      try { 
        eReader0.processMsg(10);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = EReader.MANAGED_ACCTS;
      assertEquals(15, int0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int1 = EReader.CONTRACT_DATA;
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("Z&dGU4q!Fp=c").when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 3208);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertEquals(14, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int2 = eReader0.readIntMax();
      assertEquals(14, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = EReader.readInt(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(0, int3);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = EReader.ERR_MSG;
      assertEquals(4, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      
      int int5 = EReader.SCANNER_DATA;
      assertEquals(20, int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      
      boolean boolean0 = eReader0.processMsg(47);
      assertEquals(14, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 525);
      assertNotNull(eReader0);
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[10] = (byte) (-108);
      byte byte0 = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(14, int0);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 44);
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, 44);
      assertNotNull(eReader1);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader0.processMsg(44);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-496));
      assertNotNull(eReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      double double0 = eReader0.readDoubleMax();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)36);
      assertNotNull(bufferedInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(14, byteArray0.length);
      assertEquals(14, int0);
      assertEquals(14, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader0);
      assertEquals(14, byteArray0.length);
      assertEquals(14, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        eReader0.processMsg(14);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = EReader.readInt(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, int0);
      assertEquals(8, byteArrayInputStream0.available());
      
      int int1 = EReader.ERR_MSG;
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      int int2 = EReader.SCANNER_DATA;
      assertEquals(20, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string0 = EReader.readStr(dataInputStream0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-108), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("\uFF94", string0);
      assertEquals(6, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)10);
      assertNotNull(bufferedInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(11, byteArray0.length);
      assertEquals(11, int0);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      assertNotNull(eReader1);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      assertFalse(eReader1.equals((Object)eReader0));
      
      try { 
        eReader1.processMsg(11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      EReader eReader0 = new EReader(dataInputStream0, eWrapper1, 20);
      assertNotNull(eReader0);
      
      try { 
        eReader0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)21);
      assertNotNull(bufferedInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArrayInputStream0.available());
      
      long long0 = dataInputStream0.readLong();
      assertEquals(15, byteArray0.length);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = dataInputStream0.available();
      assertEquals(15, byteArray0.length);
      assertEquals(7, int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      EReader eReader0 = new EReader(dataInputStream0, (EWrapper) null, (byte)21);
      assertNotNull(eReader0);
      assertEquals(15, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int1 = eReader0.readInt();
      assertEquals(15, byteArray0.length);
      assertEquals(0, int1);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int1 == int0);
      
      int int2 = eReader0.readIntMax();
      assertEquals(15, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean0 = eReader0.readBoolFromInt();
      assertEquals(15, byteArray0.length);
      assertFalse(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean1 = eReader0.readBoolFromInt();
      assertEquals(15, byteArray0.length);
      assertFalse(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean1 == boolean0);
      
      int int3 = eReader0.readIntMax();
      assertEquals(15, byteArray0.length);
      assertEquals(Integer.MAX_VALUE, int3);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      try { 
        eReader0.processMsg(17);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      assertNotNull(bufferedInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 58);
      assertNotNull(eReader0);
      assertEquals(11, byteArray0.length);
      assertEquals(11, byteArrayInputStream0.available());
      
      int int0 = EReader.SCANNER_DATA;
      assertEquals(20, int0);
      
      boolean boolean0 = eReader0.processMsg(20);
      assertEquals(11, byteArray0.length);
      assertTrue(boolean0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)21);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      dataInputStream0.readLong();
      dataInputStream0.available();
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)0);
      double double0 = eReader0.readDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-955), 19);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 15);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 15);
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((-955), "");
      eReader0.createEException(15, eClientErrors_CodeMsgPair0);
      // Undeclared exception!
      try { 
        eReader0.readDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -955
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)66);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      dataInputStream0.available();
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)66);
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(eWrapper1).toString();
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte)0);
      eReader1.processMsg(14);
      eReader1.processMsg(20);
      eReader1.readDouble();
      eReader0.readDoubleMax();
      eReader0.readStr();
      try { 
        eReader0.processMsg(50);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 11);
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader((DataInputStream) null, eWrapper1, 50);
      try { 
        eReader1.processMsg(38);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      int int0 = EReader.DELTA_NEUTRAL_VALIDATION;
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      int int1 = EReader.SCANNER_PARAMETERS;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      eReader0.processMsg(19);
      assertEquals(0, byteArrayInputStream0.available());
      
      eReader0.readInt();
      boolean boolean0 = eReader0.readBoolFromInt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 51);
      // Undeclared exception!
      try { 
        eReader0.readDoubleMax();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 44);
      int int0 = 55;
      // Undeclared exception!
      try { 
        eReader0.processMsg(55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      File file0 = MockFile.createTempFile("NONE", "NONE");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      mockFileInputStream0.getChannel();
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (-1778));
      try { 
        eReader0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)54);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      int int0 = EReader.NEXT_VALID_ID;
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)54);
      eReader0.readStr();
      // Undeclared exception!
      try { 
        eReader0.readInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\uFF94\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, 0);
      DataInputStream dataInputStream1 = mock(DataInputStream.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream1, (EWrapper) null, 3);
      eReader1.stop();
      // Undeclared exception!
      try { 
        eReader1.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)33);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader0 = new EReader(dataInputStream0, eWrapper0, (byte)33);
      EWrapper eWrapper1 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      EReader eReader1 = new EReader(dataInputStream0, eWrapper1, (byte) (-108));
      eReader0.readDouble();
      // Undeclared exception!
      try { 
        eReader1.readDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      // Undeclared exception!
      try { 
        EReader.readStr((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[10] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)10);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      byteArrayInputStream0.reset();
      dataInputStream0.available();
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eWrapper0).toString();
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      EReader eReader0 = new EReader(dataInputStream1, eWrapper0, (-2604));
      eReader0.processMsg(12);
      try { 
        eReader0.processMsg(14);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DataInputStream dataInputStream0 = null;
      EWrapper eWrapper0 = mock(EWrapper.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      EReader eReader0 = new EReader((DataInputStream) null, eWrapper0, 56);
      try { 
        eReader0.processMsg(26);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Fatal Error: Unknown message id. [id = -1, errorCode = 505]
         //
         verifyException("com.ib.client.EReader", e);
      }
  }
}
