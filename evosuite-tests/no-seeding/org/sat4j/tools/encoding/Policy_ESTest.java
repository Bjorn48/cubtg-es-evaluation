/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:11:26 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.Commander;
import org.sat4j.tools.encoding.EncodingStrategy;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Ladder;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Product;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Policy_ESTest extends Policy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      policy0.setExactlyKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      policy0.setAtMostKEncoding(encodingStrategyAdapter0);
      EncodingStrategyAdapter encodingStrategyAdapter1 = policy0.getAtMostKEncoding();
      assertSame(encodingStrategyAdapter1, encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      Policy policy0 = new Policy();
      policy0.setAtLeastKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0);
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = policy0.addExactly(clausalCardinalitiesDecorator0, vecInt0, (-420));
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(2128);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      IConstr iConstr0 = policy0.addExactly(manyCore0, iVecInt0, (-378));
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      try { 
        policy0.addExactly(iSolver0, iVecInt0, 16384);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsOutputSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        policy0.addExactly(abstractMinimalModel0, iVecInt0, 2071);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 2071
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Policy policy0 = new Policy();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(76.9369668844172, 0.0, 1.0, 5);
      int[] intArray0 = new int[6];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, mUSLauncher0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 5, checkMUSSolutionListener0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(modelIteratorToSATAdapter0);
      iVecInt0.shrinkTo(5);
      // Undeclared exception!
      try { 
        policy0.addAtMost(modelIteratorToSATAdapter0, iVecInt0, (-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[4];
      intArray0[0] = 7;
      intArray0[1] = 630;
      intArray0[2] = 1903;
      intArray0[3] = 100;
      VecInt vecInt0 = new VecInt(intArray0);
      try { 
        policy0.addAtLeast(iSolver0, vecInt0, 3941);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Policy policy0 = new Policy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt(16384);
      IVecInt iVecInt0 = vecInt0.pop();
      SubModelIterator subModelIterator0 = new SubModelIterator(statisticsSolver0, iVecInt0, 16384);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(subModelIterator0, vecInt0, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Policy policy0 = new Policy();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      SearchParams searchParams0 = new SearchParams(1454L, 0.0, 0.0, 0);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, mUSLauncher0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(solver0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Policy policy0 = new Policy();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(76.9369668844172, 0.0, 1.0, 5);
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, mUSLauncher0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 5, checkMUSSolutionListener0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(modelIteratorToSATAdapter0);
      iVecInt0.shrinkTo(7);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(solver0, iVecInt0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Policy policy0 = new Policy();
      Binomial binomial0 = new Binomial();
      policy0.setAtMostKEncoding((EncodingStrategyAdapter) binomial0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsStringSolver0, vecInt0, 0L);
      IConstr iConstr0 = policy0.addAtMost(subModelIterator0, vecInt0, 3156);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[2];
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      policy0.setAtMostKEncoding(encodingStrategyAdapter0);
      VecInt vecInt0 = new VecInt(intArray0);
      policy0.addAtMost(dimacsStringSolver0, vecInt0, 1);
      assertEquals(2, dimacsStringSolver0.nConstraints());
      assertEquals(1, dimacsStringSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtMost(dimacsStringSolver0, vecInt0, 5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 5
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Policy policy0 = new Policy();
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseCachingAutoEraseStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, noRestarts0);
      VecInt vecInt0 = new VecInt(2110);
      // Undeclared exception!
      try { 
        policy0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Policy policy0 = new Policy();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, (ILogAble) null);
      // Undeclared exception!
      try { 
        policy0.addAtMost(solver0, (IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = policy0.addAtMost(groupClauseSelectorSolver0, vecInt0, (-2828));
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binomial0);
      assertEquals(EncodingStrategy.BINOMIAL, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Binary binary0 = new Binary();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binary0);
      assertEquals(EncodingStrategy.BINARY, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      policy0.setAtLeastKEncoding(encodingStrategyAdapter0);
      // Undeclared exception!
      policy0.addAtLeast(dimacsStringSolver0, vecInt0, (-2828));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      policy0.setExactlyKEncoding(encodingStrategy0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsOutputSolver0, (IVecInt) null, 884);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne(groupClauseSelectorSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(3, 3);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(1361, 1361);
      // Undeclared exception!
      policy0.addExactly(dimacsOutputSolver0, vecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Policy policy0 = new Policy();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      SearchParams searchParams0 = new SearchParams(76.9369668844172, 0.0, 1.0, 5);
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, mUSLauncher0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      solver0.registerLiteral(1348);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 5, checkMUSSolutionListener0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(modelIteratorToSATAdapter0);
      // Undeclared exception!
      policy0.addAtLeast(solver0, iVecInt0, 2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      policy0.addAtLeast(dimacsStringSolver0, vecInt0, 1);
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Policy policy0 = new Policy();
      VecInt vecInt0 = new VecInt(4);
      IVecInt iVecInt0 = vecInt0.push(1254);
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, iVecInt0, 1254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Policy policy0 = new Policy();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(76.9369668844172, 0.0, 1.0, 5);
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, mUSLauncher0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 5, checkMUSSolutionListener0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(solver0, iVecInt0, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(sequential0);
      assertEquals(EncodingStrategy.SEQUENTIAL, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Product product0 = new Product();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(product0);
      assertEquals(EncodingStrategy.PRODUCT, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(ladder0);
      assertEquals(EncodingStrategy.LADDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Commander commander0 = new Commander();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(commander0);
      assertEquals(EncodingStrategy.COMMANDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setExactlyKEncoding(encodingStrategy0);
      String string0 = policy0.toString();
      assertEquals("Policy = [At most K: Native, at most 1: Native, exactly K: Binary, exactly 1: Native]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setExactlyKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(3, 3);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      policy0.addAtMost(dimacsStringSolver0, vecInt0, 1);
      assertEquals(12, dimacsStringSolver0.nConstraints());
      assertEquals(3, dimacsStringSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setExactlyOneEncoding((EncodingStrategyAdapter) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Policy policy0 = new Policy();
      Ladder ladder0 = new Ladder();
      policy0.setAtLeastOneEncoding((EncodingStrategyAdapter) ladder0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      ClausalCardinalitiesDecorator<DimacsStringSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsStringSolver>(dimacsStringSolver0, ladder0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      policy0.addAtLeast(clausalCardinalitiesDecorator0, iVecInt0, 1);
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      policy0.setExactlyKEncoding(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      Policy policy0 = new Policy();
      policy0.setAtMostOneEncoding(encodingStrategyAdapter0);
  }
}
