/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 21:18:44 GMT 2019
 */

package de.progra.charting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.Legend;
import de.progra.charting.model.DefaultChartDataModel;
import de.progra.charting.model.EditableChartDataModel;
import de.progra.charting.model.EditableDataSet;
import de.progra.charting.model.ObjectChartDataModel;
import de.progra.charting.render.RowColorModel;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Arc2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Legend_ESTest extends Legend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "de.progra.chartng.model.OjectChartDataModel";
      stringArray0[1] = "de.progra.chartng.model.OjectChartDataModel";
      stringArray0[2] = "de.progra.chartng.model.OjectChartDataModel";
      stringArray0[3] = "de.progra.chartng.model.OjectChartDataModel";
      stringArray0[4] = "de.progra.chartng.model.OjectChartDataModel";
      stringArray0[5] = "de.progra.chartng.model.OjectChartDataModel";
      double[][] doubleArray0 = new double[6][7];
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel(doubleArray0, doubleArray0[0], stringArray0);
      RowColorModel rowColorModel0 = new RowColorModel(defaultChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      // Undeclared exception!
      try { 
        legend0.render((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.render.AbstractRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      RowColorModel rowColorModel0 = RowColorModel.getInstance(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      BufferedImage bufferedImage0 = new BufferedImage(5, 5, 5);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      legend0.paintDefault(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      RowColorModel rowColorModel0 = RowColorModel.getInstance(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      RowColorModel rowColorModel1 = legend0.getRowColorModel();
      assertSame(rowColorModel0, rowColorModel1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[3];
      String[] stringArray0 = new String[7];
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel(doubleArray0, doubleArray1, stringArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(defaultChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      RowColorModel rowColorModel1 = legend0.getRowColorModel();
      assertSame(rowColorModel0, rowColorModel1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1999";
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(intArray0, doubleArray0, stringArray0);
      RowColorModel rowColorModel0 = new RowColorModel(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Dimension dimension0 = legend0.getPreferredSize();
      assertEquals(78, dimension0.width);
      assertEquals(26, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      RowColorModel rowColorModel0 = RowColorModel.getInstance(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Dimension dimension0 = legend0.getPreferredSize();
      assertEquals((-2147483603), dimension0.width);
      assertEquals(5, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      RowColorModel rowColorModel0 = RowColorModel.getInstance(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      legend0.inner_margin = (-1);
      Dimension dimension0 = legend0.getPreferredSize();
      assertEquals((-2147483615), dimension0.width);
      assertEquals((-1), dimension0.height);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Legend legend0 = new Legend();
      legend0.font = null;
      Font font0 = legend0.getFont();
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      RowColorModel rowColorModel0 = RowColorModel.getInstance(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      HashMap<AttributedCharacterIterator.Attribute, RenderingHints.Key> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, RenderingHints.Key>();
      Font font0 = new Font(hashMap0);
      Font font1 = font0.deriveFont(2847, 0.0F);
      legend0.font = font1;
      Font font2 = legend0.getFont();
      assertEquals("Default", font2.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Legend legend0 = new Legend();
      Font font0 = new Font("mL8", (-165), (-165));
      legend0.font = font0;
      Font font1 = legend0.getFont();
      assertEquals(0, font1.getStyle());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Legend legend0 = new Legend();
      legend0.colorbox = null;
      Rectangle rectangle0 = legend0.getColorBox();
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Legend legend0 = new Legend();
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      legend0.colorbox = rectangle0;
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double((-3639.17), 2734.006563618586, 378.67, (-3), (-3), 2658.6599685735);
      Rectangle2D rectangle2D0 = roundRectangle2D_Double0.getBounds2D();
      rectangle0.setFrame(rectangle2D0);
      Rectangle rectangle1 = legend0.getColorBox();
      assertEquals((-3.0), rectangle1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Legend legend0 = new Legend();
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(2);
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      legend0.setColorBox(rectangle0);
      Rectangle rectangle1 = legend0.getColorBox();
      assertEquals(0, rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Legend legend0 = new Legend();
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      legend0.colorbox = rectangle0;
      Rectangle rectangle1 = legend0.getColorBox();
      assertEquals(1.0, rectangle1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Legend legend0 = new Legend();
      // Undeclared exception!
      try { 
        legend0.paintDefault((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Legend", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Legend legend0 = new Legend();
      // Undeclared exception!
      try { 
        legend0.getPreferredSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Legend", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EditableDataSet editableDataSet0 = new EditableDataSet();
      EditableDataSet[] editableDataSetArray0 = new EditableDataSet[1];
      editableDataSetArray0[0] = editableDataSet0;
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(editableDataSetArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      // Undeclared exception!
      try { 
        legend0.getPreferredSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length string passed to TextLayout constructor.
         //
         verifyException("java.awt.font.TextLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Legend legend0 = new Legend();
      RowColorModel rowColorModel0 = legend0.getRowColorModel();
      assertNull(rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      RowColorModel rowColorModel0 = new RowColorModel(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Rectangle rectangle0 = legend0.getColorBox();
      rectangle0.grow(3168, 6361);
      assertEquals(6361, rectangle0.width);
      
      Rectangle rectangle1 = legend0.getColorBox();
      assertEquals(7.5, rectangle1.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Legend legend0 = new Legend();
      Font font0 = legend0.getFont();
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      assertEquals("Helvetica", font0.getName());
      assertFalse(font0.isBold());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      RowColorModel rowColorModel0 = new RowColorModel(defaultChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      legend0.setRowColorModel(rowColorModel0);
      assertEquals(0, rowColorModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Legend legend0 = new Legend();
      legend0.setFont((Font) null);
  }
}
