/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:10:43 GMT 2019
 */

package de.progra.charting.render;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.CoordSystem;
import de.progra.charting.PointToPixelTranslator;
import de.progra.charting.model.ChartDataModel;
import de.progra.charting.model.DefaultChartDataModel;
import de.progra.charting.model.EditableChartDataModel;
import de.progra.charting.model.ObjectChartDataModel;
import de.progra.charting.render.BarChartRenderer;
import de.progra.charting.render.PieChartRenderer;
import de.progra.charting.render.PlotChartRenderer;
import de.progra.charting.render.RadarChartRenderer;
import de.progra.charting.render.RowColorModel;
import de.progra.charting.render.StackedBarChartRenderer;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import javax.swing.JSpinner;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractChartRenderer_ESTest extends AbstractChartRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      PlotChartRenderer plotChartRenderer0 = new PlotChartRenderer((CoordSystem) null, defaultChartDataModel0);
      RowColorModel rowColorModel0 = new RowColorModel(defaultChartDataModel0);
      plotChartRenderer0.setRowColorModel(rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(objectChartDataModel0);
      CoordSystem coordSystem0 = new CoordSystem(objectChartDataModel0, "", "");
      pieChartRenderer0.setCoordSystem(coordSystem0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(objectChartDataModel0, (DecimalFormat) null, true, true, true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Object[] objectArray0 = new Object[8];
      StyleContext.SmallAttributeSet styleContext_SmallAttributeSet0 = styleContext0.new SmallAttributeSet(objectArray0);
      Font font0 = styleContext0.getFont((AttributeSet) styleContext_SmallAttributeSet0);
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      BarChartRenderer barChartRenderer0 = new BarChartRenderer(coordSystem0, editableChartDataModel0, (DecimalFormat) null, font0, 0.0F);
      barChartRenderer0.setChartDataModel(objectChartDataModel0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0, decimalFormat0, false, false, false);
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(coordSystem0, editableChartDataModel0);
      radarChartRenderer0.getTransform(20);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0, "", "");
      PointToPixelTranslator pointToPixelTranslator0 = coordSystem0.getPointToPixelTranslator(0);
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(coordSystem0, editableChartDataModel0);
      radarChartRenderer0.setPointToPixelTranslator(pointToPixelTranslator0);
      PointToPixelTranslator pointToPixelTranslator1 = radarChartRenderer0.getPointToPixelTranslator();
      assertSame(pointToPixelTranslator1, pointToPixelTranslator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      CoordSystem coordSystem0 = pieChartRenderer0.getCoordSystem();
      assertNull(coordSystem0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0, "", "");
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(coordSystem0, editableChartDataModel0);
      CoordSystem coordSystem1 = radarChartRenderer0.getCoordSystem();
      assertEquals("", coordSystem1.getYAxisUnit());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer((ChartDataModel) null);
      ChartDataModel chartDataModel0 = pieChartRenderer0.getChartDataModel();
      assertNull(chartDataModel0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      editableChartDataModel0.setManualScale(true);
      ChartDataModel chartDataModel0 = pieChartRenderer0.getChartDataModel();
      assertEquals(0, chartDataModel0.getDataSetNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[3];
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) bigInteger0;
      numberArray1[2] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      double[] doubleArray0 = new double[9];
      String[] stringArray0 = new String[2];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(numberArray0, doubleArray0, stringArray0);
      editableChartDataModel0.setAutoScale(true);
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(editableChartDataModel0);
      ChartDataModel chartDataModel0 = radarChartRenderer0.getChartDataModel();
      assertSame(chartDataModel0, editableChartDataModel0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      editableChartDataModel0.setMinimumColumnValue(2561.444);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, " O4L?r{M(q<");
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0, decimalFormat0, true, true, true);
      PlotChartRenderer plotChartRenderer0 = new PlotChartRenderer(coordSystem0, editableChartDataModel0);
      ChartDataModel chartDataModel0 = plotChartRenderer0.getChartDataModel();
      assertTrue(chartDataModel0.isColumnNumeric());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(objectChartDataModel0, "", "");
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(coordSystem0, objectChartDataModel0);
      objectChartDataModel0.setMaximumColumnValue(442.127298781958);
      ChartDataModel chartDataModel0 = pieChartRenderer0.getChartDataModel();
      assertFalse(chartDataModel0.isManualScale());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(objectChartDataModel0);
      objectChartDataModel0.setMaximumColumnValue(Integer.MIN_VALUE);
      ChartDataModel chartDataModel0 = pieChartRenderer0.getChartDataModel();
      assertEquals(0.0, chartDataModel0.getManualMinimumColumnValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(objectChartDataModel0);
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(coordSystem0, objectChartDataModel0);
      Rectangle rectangle0 = new Rectangle(1, 20, 0, 15);
      pieChartRenderer0.bounds = rectangle0;
      Rectangle rectangle1 = pieChartRenderer0.getBounds();
      assertSame(rectangle1, rectangle0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("H\"^3", decimalFormatSymbols0);
      CoordSystem coordSystem0 = new CoordSystem(defaultChartDataModel0, decimalFormat0, true, true, true);
      StackedBarChartRenderer stackedBarChartRenderer0 = new StackedBarChartRenderer(coordSystem0, defaultChartDataModel0, 0.0F);
      Rectangle rectangle0 = new Rectangle(1992, 20);
      stackedBarChartRenderer0.setBounds(rectangle0);
      Rectangle rectangle1 = stackedBarChartRenderer0.getBounds();
      assertEquals(1992.0, rectangle1.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      // Undeclared exception!
      try { 
        pieChartRenderer0.renderChart((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.render.PieChartRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer((ChartDataModel) null);
      Rectangle rectangle0 = radarChartRenderer0.getBounds();
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      PointToPixelTranslator pointToPixelTranslator0 = pieChartRenderer0.getPointToPixelTranslator();
      assertNull(pointToPixelTranslator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      Rectangle rectangle0 = new Rectangle();
      pieChartRenderer0.setBounds(rectangle0);
      Rectangle rectangle1 = pieChartRenderer0.getBounds();
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      Dimension dimension0 = pieChartRenderer0.getPreferredSize();
      assertEquals(Integer.MIN_VALUE, dimension0.width);
      assertEquals(Integer.MIN_VALUE, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(objectChartDataModel0);
      // Undeclared exception!
      try { 
        pieChartRenderer0.getTransform(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.render.AbstractChartRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      // Undeclared exception!
      try { 
        pieChartRenderer0.render((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.render.AbstractChartRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      RowColorModel rowColorModel0 = pieChartRenderer0.getRowColorModel();
      assertNull(rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[3];
      String[] stringArray0 = new String[2];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(doubleArray0, doubleArray1, stringArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0, decimalFormat0, false, false, true);
      BarChartRenderer barChartRenderer0 = new BarChartRenderer(coordSystem0, editableChartDataModel0, decimalFormat0, (Font) null, 0.0F);
      CoordSystem coordSystem1 = barChartRenderer0.getCoordSystem();
      assertFalse(coordSystem1.isPaintAltTick());
  }
}
