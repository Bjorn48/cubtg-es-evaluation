/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 15:59:21 GMT 2019
 */

package org.sat4j.minisat.orders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.Heap;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.opt.MaxSatDecorator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VarOrderHeap_ESTest extends VarOrderHeap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      double[] doubleArray0 = new double[3];
      varOrderHeap0.activity = doubleArray0;
      Lits lits0 = new Lits();
      varOrderHeap0.setLits(lits0);
      varOrderHeap0.init();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      varOrderHeap0.activity = doubleArray0;
      int int0 = varOrderHeap0.numberOfInterestingVariables();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      pureOrder0.setVarDecay(11.400312245658);
      pureOrder0.varDecayActivity();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.updateVarAtDecisionLevel(1020);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      pureOrder0.printStat(printWriter0, "tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT");
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.assignLiteral(928);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.updateActivity(0);
      double double0 = varOrderHeap0.varActivity(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      PureOrder pureOrder0 = new PureOrder(4);
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      double double0 = pureOrder0.varActivity(0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Lits lits0 = new Lits();
      varOrderHeap0.setLits(lits0);
      varOrderHeap0.init();
      varOrderHeap0.undo(0);
      int int0 = varOrderHeap0.select();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Lits lits0 = new Lits();
      varOrderHeap0.setLits(lits0);
      ILits iLits0 = varOrderHeap0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      lits0.getFromPool(4);
      levelBasedVarOrderHeap0.setLits(lits0);
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertSame(iLits0, lits0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.activity = null;
      double[] doubleArray0 = varOrderHeap0.getVariableHeuristics();
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = varOrderHeap0.getPhaseSelectionStrategy();
      assertNull(iPhaseSelectionStrategy0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)varOrderHeap0.getPhaseSelectionStrategy();
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      double[] doubleArray0 = new double[0];
      Heap heap0 = varOrderHeap0.createHeap(doubleArray0);
      assertTrue(heap0.heapProperty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.varActivity(110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      // Undeclared exception!
      try { 
        pureOrder0.updateVar(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.updateVar((-3392));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1696
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.updateActivity((-5331));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5331
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.undo((-3392));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Lits lits0 = new Lits();
      varOrderHeap0.setLits(lits0);
      varOrderHeap0.init();
      // Undeclared exception!
      try { 
        varOrderHeap0.undo((-539));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.select();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2623);
      levelBasedVarOrderHeap0.addLevel(intArray0);
      levelBasedVarOrderHeap0.setLits(lits0);
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.init();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      int[] intArray0 = new int[0];
      rSATPhaseSelectionStrategy0.phase = intArray0;
      // Undeclared exception!
      try { 
        varOrderHeap0.assignLiteral(1374);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 687
         //
         verifyException("org.sat4j.minisat.orders.RSATPhaseSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.852802498524654;
      varOrderHeap0.activity = doubleArray0;
      int int0 = varOrderHeap0.numberOfInterestingVariables();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      lits0.nextFreeVarId(true);
      levelBasedVarOrderHeap0.setLits(lits0);
      levelBasedVarOrderHeap0.init();
      int int0 = levelBasedVarOrderHeap0.numberOfInterestingVariables();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      lits0.getFromPool(1739);
      levelBasedVarOrderHeap0.setLits(lits0);
      levelBasedVarOrderHeap0.init();
      levelBasedVarOrderHeap0.updateVar(1739);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      lits0.getFromPool(1739);
      levelBasedVarOrderHeap0.setLits(lits0);
      levelBasedVarOrderHeap0.init();
      levelBasedVarOrderHeap0.undo(1739);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      lits0.getFromPool(4);
      levelBasedVarOrderHeap0.setLits(lits0);
      levelBasedVarOrderHeap0.init();
      levelBasedVarOrderHeap0.updateVar(8);
      int int0 = levelBasedVarOrderHeap0.select();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Lits lits0 = new Lits();
      lits0.satisfies(0);
      varOrderHeap0.setLits(lits0);
      varOrderHeap0.init();
      varOrderHeap0.undo(0);
      int int0 = varOrderHeap0.select();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      String string0 = varOrderHeap0.toString();
      assertEquals("VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      double[] doubleArray0 = levelBasedVarOrderHeap0.getVariableHeuristics();
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.updateVarAtDecisionLevel(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      levelBasedVarOrderHeap0.setPhaseSelectionStrategy(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Lits lits0 = new Lits();
      varOrderHeap0.setLits(lits0);
      varOrderHeap0.init();
      varOrderHeap0.undo(4);
      // Undeclared exception!
      try { 
        varOrderHeap0.select();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      assertNull(iLits0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      // Undeclared exception!
      try { 
        varOrderHeap0.assignLiteral(1374);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RSATPhaseSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      double double0 = varOrderHeap0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      // Undeclared exception!
      try { 
        pureOrder0.printStat((PrintWriter) null, "bZ^*<u%zd?<l=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }
}
