/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:14:13 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.reader.AAGReader;
import org.sat4j.reader.AIGReader;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.JSONReader;
import org.sat4j.reader.LecteurDimacs;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Reader_ESTest extends Reader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0, true);
      DimacsReader dimacsReader0 = new DimacsReader(maxSatDecorator0);
      try { 
        dimacsReader0.parseInstance("http://j@6c9:4BTs`p.W.JG");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // For input string: \"4BTs`p.W.JG\"
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsOutputSolver0, (String) null);
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[2];
      JSONReader<AbstractMinimalModel> jSONReader0 = new JSONReader<AbstractMinimalModel>(abstractMinimalModelArray0[1]);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        jSONReader0.parseInstance((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input 
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance((InputStream) dataInputStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use a domain specific Reader (LecteurDimacs, AIGReader, etc.) for stream input 
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("http://mP|d':^-14h_F");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // For input string: \"^-14h_F\"
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reader.getInputStreamFromFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      InstanceReader instanceReader0 = new InstanceReader(dimacsOutputSolver0);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        instanceReader0.decode(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*E");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "g$(A^<3^mSnq");
      InputStream inputStream0 = Reader.getInputStreamFromFilename("*E");
      assertEquals(12, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("http://*E");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: *E
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("*E");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsOutputSolver0, (String) null);
      try { 
        dimacsReader0.parseInstance("http://SroVW#(|\"iU|tq=wYu ^");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: SroVW
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~jG%;@nc");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Eo\")");
      DimacsReader dimacsReader0 = new DimacsReader(dimacsOutputSolver0, "learnt binary clauses\t: ");
      try { 
        dimacsReader0.parseInstance("~jG%;@nc");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p cnf ...)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsOutputSolver0, "learnt binary clauses\t: ");
      try { 
        dimacsReader0.parseInstance("~jG%;@nc");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsOutputSolver0, (String) null);
      assertFalse(dimacsReader0.isVerbose());
      
      dimacsReader0.setVerbosity(true);
      assertTrue(dimacsReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      boolean boolean0 = instanceReader0.isVerbose();
      assertFalse(instanceReader0.isUsingMapping());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs((ISolver) null);
      StringReader stringReader0 = new StringReader("H");
      // Undeclared exception!
      try { 
        lecteurDimacs0.parseInstance((java.io.Reader) stringReader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use #parseInstance(InputStream) instead
         //
         verifyException("org.sat4j.reader.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[2];
      AbstractMinimalModel abstractMinimalModel0 = mock(AbstractMinimalModel.class, new ViolatedAssumptionAnswer());
      abstractMinimalModelArray0[0] = abstractMinimalModel0;
      abstractMinimalModelArray0[1] = abstractMinimalModel0;
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(abstractMinimalModelArray0);
      AAGReader aAGReader0 = new AAGReader(manyCore0);
      assertFalse(aAGReader0.isUsingMapping());
      
      aAGReader0.setUseMapping(true);
      assertTrue(aAGReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "org.sat4j.minisat.orders.PositiveLiteralSelecionStrategy");
      boolean boolean0 = dimacsReader0.hasAMapping();
      assertFalse(dimacsReader0.isUsingMapping());
      assertFalse(dimacsReader0.isVerbose());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AIGReader aIGReader0 = new AIGReader((ISolver) null);
      boolean boolean0 = aIGReader0.isUsingMapping();
      assertFalse(aIGReader0.isVerbose());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsStringSolver0);
      groupedCNFReader0.getMapping();
      assertFalse(groupedCNFReader0.isUsingMapping());
      assertFalse(groupedCNFReader0.isVerbose());
  }
}
