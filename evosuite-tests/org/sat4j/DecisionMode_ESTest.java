/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:40:45 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.DecisionMode;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.MUSLauncher;
import org.sat4j.OptimizationMode;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.LecteurDimacs;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DecisionMode_ESTest extends DecisionMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(2145);
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs((ISolver) null);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      decisionMode0.solve(dimacsStringSolver0, lecteurDimacs0, mUSLauncher0, printWriter0, 886L);
      assertFalse(lecteurDimacs0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ExitCode exitCode0 = decisionMode0.getCurrentExitCode();
      assertEquals(0, exitCode0.value());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "");
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      // Undeclared exception!
      try { 
        decisionMode0.solve(modelIterator0, dimacsReader0, mUSLauncher0, printWriter0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      int[] intArray0 = new int[5];
      intArray0[0] = 843;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, randomWalkDecorator0, noRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      DimacsReader dimacsReader0 = new DimacsReader(maxSatDecorator0, "n");
      ILogAble iLogAble0 = solver0.getLogger();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("n");
      // Undeclared exception!
      try { 
        decisionMode0.solve(solver0, dimacsReader0, iLogAble0, mockPrintWriter0, (-555));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 843
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "kc");
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(gateTranslator0, (IProblem) null, basicLauncher0, (PrintWriter) null, dimacsReader0, (-140L), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(2818);
      VecInt vecInt0 = new VecInt(2818);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0, vecInt0, decisionMode0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Reader reader0 = mUSLauncher0.createReader(minimal4InclusionModel0, "gDwQ+*ECgJHt!hT");
      OptimizationMode optimizationMode0 = new OptimizationMode();
      // Undeclared exception!
      try { 
        optimizationMode0.displayResult(dimacsStringSolver0, dimacsStringSolver0, basicLauncher0, mockPrintWriter0, reader0, 0L, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-1.730760615205421));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, eMARestarts0);
      DimacsReader dimacsReader0 = new DimacsReader(solver0, "]YC3:A8l9?");
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      decisionMode0.solve(solver0, dimacsReader0, mUSLauncher0, mockPrintWriter0, 1291L);
      decisionMode0.onSolutionFound((int[]) null);
      assertEquals(ExitCode.SATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.onUnsatTermination();
      //  // Unstable assertion: assertEquals(ExitCode.OPTIMUM_FOUND, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-1.730760615205421));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, eMARestarts0);
      DimacsReader dimacsReader0 = new DimacsReader(solver0, "]YC3:Al9?");
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 1291L, decisionMode0);
      decisionMode0.solve(modelIteratorToSATAdapter0, dimacsReader0, mUSLauncher0, mockPrintWriter0, 2218L);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, randomWalkDecorator0, eMARestarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 0L, decisionMode0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      decisionMode0.solve(modelIteratorToSATAdapter0, groupedCNFReader0, iLogAble0, (PrintWriter) null, 0L);
      assertEquals(ExitCode.UNSATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, eMARestarts0);
      DimacsReader dimacsReader0 = new DimacsReader(solver0, "?");
      ILogAble iLogAble0 = solver0.getLogger();
      DecisionMode decisionMode1 = new DecisionMode();
      decisionMode1.solve(solver0, dimacsReader0, iLogAble0, (PrintWriter) null, 1L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("printallmodels");
      DecisionMode decisionMode2 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode2.displayResult(solver0, solver0, iLogAble0, mockPrintWriter0, dimacsReader0, 1L, false);
      //  // Unstable assertion: assertEquals(ExitCode.OPTIMUM_FOUND, decisionMode2.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-1.730760615205421));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, eMARestarts0);
      DimacsReader dimacsReader0 = new DimacsReader(solver0, "]YC3:A8l9?");
      ILogAble iLogAble0 = solver0.getLogger();
      decisionMode0.solve(solver0, dimacsReader0, iLogAble0, (PrintWriter) null, 3107L);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      decisionMode0.displayResult(solver0, solver0, iLogAble0, mockPrintWriter0, dimacsReader0, 1291L, true);
      assertEquals(ExitCode.SATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(2818);
      VecInt vecInt0 = new VecInt(2818);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0, vecInt0, decisionMode0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Reader reader0 = mUSLauncher0.createReader(minimal4InclusionModel0, "gDwQ+*ECgJHt!hT");
      decisionMode0.displayResult(minimal4InclusionModel0, optToSatAdapter0, mUSLauncher0, mockPrintWriter0, reader0, 0L, true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-1.730760615205421));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, eMARestarts0);
      DimacsReader dimacsReader0 = new DimacsReader(solver0, "]YC3:A8l9?");
      ILogAble iLogAble0 = solver0.getLogger();
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      decisionMode0.displayResult(solver0, solver0, iLogAble0, mockPrintWriter0, dimacsReader0, 1291L, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      ExitCode exitCode0 = ExitCode.OPTIMUM_FOUND;
      decisionMode0.setExitCode(exitCode0);
      assertEquals(ExitCode.OPTIMUM_FOUND, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.setIncomplete(false);
      assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      VecInt vecInt0 = new VecInt(2818);
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null, (Reader) null);
      decisionMode0.displayResult((ISolver) null, (IProblem) null, basicLauncher0, printWriter0, instanceReader0, 429L, false);
      assertFalse(instanceReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      ExitCode exitCode0 = decisionMode0.getCurrentExitCode();
      assertEquals(ExitCode.UNKNOWN, exitCode0);
  }
}
