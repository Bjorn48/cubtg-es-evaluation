/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 07:59:40 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SolutionCounter_ESTest extends SolutionCounter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, solutionFoundListener0);
      SolutionCounter solutionCounter0 = new SolutionCounter(modelIteratorToSATAdapter0);
      solutionCounter0.countSolutions();
      int int0 = solutionCounter0.lowerBound();
      assertEquals(1L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsOutputSolver0);
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounter0.registerLiteral((-3421));
      // Undeclared exception!
      solutionCounter0.countSolutions();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, solutionFoundListener0);
      SolutionCounter solutionCounter0 = new SolutionCounter(modelIteratorToSATAdapter0);
      modelIteratorToSATAdapter0.setDecorated(solutionCounter0);
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SolutionCounter solutionCounter0 = new SolutionCounter((ISolver) null);
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounter0.newVar((-1249));
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4InclusionModel0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      SolutionCounter solutionCounter0 = new SolutionCounter(optToSatAdapter0);
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounter0.setTimeout((-307));
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(anyBoolean());
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      SolutionCounter solutionCounter0 = new SolutionCounter(negationDecorator0);
      long long0 = solutionCounter0.countSolutions();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SolutionCounter solutionCounter0 = new SolutionCounter((ISolver) null);
      int int0 = solutionCounter0.lowerBound();
      assertEquals(0, int0);
  }
}
