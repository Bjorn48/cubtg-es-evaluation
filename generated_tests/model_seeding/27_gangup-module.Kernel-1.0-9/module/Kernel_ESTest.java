/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:42:34 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.MissingResourceException;
import java.util.Stack;
import module.ClientNetworkModule;
import module.ConfigModule;
import module.ExampleModule;
import module.GameModule;
import module.Kernel;
import module.Logger;
import module.Message;
import module.MessageFactory;
import module.Module;
import module.ModuleInfo;
import module.ServerNetworkModule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import state.NetworkData;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Kernel_ESTest extends Kernel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      try { 
        kernel0.loadModule("Py");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.ClassNotFoundException: Class 'Py.class' should be in target project, but could not be found!
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      String string0 = "";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Message message0 = MessageFactory.createWarningMessage("", objectArray0);
      message0.getRecipient();
      message0.getHeader();
      message0.getHeader();
      message0.getHeader();
      kernel0.receiveMessage(message0);
      kernel0.info();
      ServerNetworkModule serverNetworkModule0 = null;
      try {
        serverNetworkModule0 = new ServerNetworkModule();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Message message0 = null;
      try { 
        kernel0.processMessage((Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      try { 
        kernel0.unloadModule("Gk1{ x %Xm2m");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=Gk1{ x %Xm2m
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Kernel kernel1 = new Kernel();
      kernel1.getKernel();
      String string0 = "";
      try { 
        kernel0.loadModule("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      String string0 = "module.ModuleLoadException";
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.createMessage();
      messageFactory0.createObject();
      MessageFactory.instance = messageFactory0;
      try { 
        kernel0.loadModule("module.ModuleLoadException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.InstantiationException: module.ModuleLoadException
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      String string0 = "p,otx@]1<Q>%";
      Kernel kernel1 = new Kernel();
      Message message0 = MessageFactory.createMessage("p,otx@]1<Q>%", "ID from network: ", (Object) kernel1);
      message0.toString();
      kernel0.register(kernel1);
      kernel0.receiveMessage(message0);
      kernel1.unsubscribe((Module) kernel0, "Message[id=0,session=0,head=p,otx@]1<Q>%,recip=ID from network: ,sender=null,state=1,ttl=3000,time=1392409281320,body=module.Kernel@4]");
      message0.timetolive = 1291L;
      try { 
        message0.send();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // modnull,msg=Message[id=0,session=0,head=p,otx@]1<Q>%,recip=ID from network: ,sender=null,state=1,ttl=1291,time=1392409281320,body=module.Kernel@4]: no source module
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      // Undeclared exception!
      try { 
        kernel0.receiveMessage((Message) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      String string0 = "TI,4Y;lGsi'NJ7";
      try { 
        kernel0.loadModule("TI,4Y;lGsi'NJ7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.ClassNotFoundException: TI,4Y;lGsi'NJ7
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Message message0 = new Message();
      message0.timetolive = 0L;
      kernel0.receiveMessage(message0);
      Module module0 = null;
      try { 
        kernel0.unloadModule((Module) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=null
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Message message0 = MessageFactory.createWarningMessage("", objectArray0);
      message0.getRecipient();
      message0.getHeader();
      message0.getHeader();
      Stack<Module> stack0 = new Stack<Module>();
      kernel0.sendMessageNotify(stack0, message0);
      message0.state = 73;
      message0.setDelivered(true);
      message0.consume();
      message0.getHeader();
      kernel0.processMessage(message0);
      kernel0.receiveMessage(message0);
      ClientNetworkModule clientNetworkModule0 = null;
      try {
        clientNetworkModule0 = new ClientNetworkModule();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Logger logger0 = null;
      try {
        logger0 = new Logger();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Message message0 = MessageFactory.createWarningMessage("", objectArray0);
      message0.getRecipient();
      message0.getHeader();
      message0.getHeader();
      message0.getHeader();
      kernel0.processMessage(message0);
      String string0 = null;
      try { 
        kernel0.unloadModule((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=null
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      String string0 = "Fy?_D";
      Message message0 = MessageFactory.createConnectionDroppedMessage((-679), "Fy?_D");
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertTrue(message0.getIsManaged());
      assertEquals("*", message0.getRecipient());
      assertEquals(1, message0.getRefCount());
      assertFalse(message0.received());
      assertFalse(message0.getIsConsumed());
      assertFalse(message0.delivered());
      assertEquals(0L, message0.getID());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertNotNull(message0);
      assertEquals(2, Message.RECEIVED);
      assertEquals(4, Message.DELIVERED);
      assertEquals(1, Message.CREATED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      
      message0.state = 0;
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertTrue(message0.getIsManaged());
      assertEquals("*", message0.getRecipient());
      assertEquals(1, message0.getRefCount());
      assertFalse(message0.received());
      assertFalse(message0.getIsConsumed());
      assertFalse(message0.delivered());
      assertEquals(0L, message0.getID());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(0, message0.getState());
      
      message0.setHeader("Fy?_D");
      assertEquals("Fy?_D", message0.getHeader());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertTrue(message0.getIsManaged());
      assertEquals("*", message0.getRecipient());
      assertEquals(1, message0.getRefCount());
      assertFalse(message0.received());
      assertFalse(message0.getIsConsumed());
      assertFalse(message0.delivered());
      assertEquals(0L, message0.getID());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(0, message0.getState());
      assertEquals(2, Message.RECEIVED);
      assertEquals(4, Message.DELIVERED);
      assertEquals(1, Message.CREATED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      
      kernel0.receiveMessage(message0);
      assertEquals("Fy?_D", message0.getHeader());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertTrue(message0.getIsManaged());
      assertEquals("*", message0.getRecipient());
      assertFalse(message0.received());
      assertFalse(message0.getIsConsumed());
      assertEquals(2, message0.getRefCount());
      assertFalse(message0.delivered());
      assertEquals(0L, message0.getID());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(0, message0.getState());
      assertEquals(2, Message.RECEIVED);
      assertEquals(4, Message.DELIVERED);
      assertEquals(1, Message.CREATED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      
      try { 
        message0.sendFrom(kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: modnull,msg=Message[id=0,session=0,head=Fy?_D,recip=*,sender=null,state=0,ttl=3000,time=1392409281320,body=ID: -679 IP: Fy?_D]
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Message message0 = MessageFactory.createUnloadMessage("7P06L OCbBOIwA%");
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals(0L, message0.getID());
      assertTrue(message0.getIsManaged());
      assertEquals("*", message0.getRecipient());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("KERNEL", message0.getHeader());
      assertFalse(message0.getIsConsumed());
      assertEquals(1, message0.getRefCount());
      assertFalse(message0.delivered());
      assertFalse(message0.received());
      assertNotNull(message0);
      assertEquals(4, Message.DELIVERED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(2, Message.RECEIVED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(1, Message.CREATED);
      
      message0.set("7P06L OCbBOIwA%", "7P06L OCbBOIwA%", kernel0);
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals(1L, message0.getID());
      assertTrue(message0.getIsManaged());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertEquals(1L, message0.getSID());
      assertEquals(1, message0.getState());
      assertFalse(message0.getIsConsumed());
      assertEquals(1, message0.getRefCount());
      assertEquals("7P06L OCbBOIwA%", message0.getHeader());
      assertEquals("7P06L OCbBOIwA%", message0.getRecipient());
      assertFalse(message0.delivered());
      assertFalse(message0.received());
      assertEquals(4, Message.DELIVERED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(2, Message.RECEIVED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(1, Message.CREATED);
      
      message0.recipient = "7P06L OCbBOIwA%";
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals(1L, message0.getID());
      assertTrue(message0.getIsManaged());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertEquals(1L, message0.getSID());
      assertEquals(1, message0.getState());
      assertFalse(message0.getIsConsumed());
      assertEquals(1, message0.getRefCount());
      assertEquals("7P06L OCbBOIwA%", message0.getHeader());
      assertEquals("7P06L OCbBOIwA%", message0.getRecipient());
      assertFalse(message0.delivered());
      assertFalse(message0.received());
      
      String string0 = message0.toString();
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals(1L, message0.getID());
      assertTrue(message0.getIsManaged());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertEquals(1L, message0.getSID());
      assertEquals(1, message0.getState());
      assertFalse(message0.getIsConsumed());
      assertEquals(1, message0.getRefCount());
      assertEquals("7P06L OCbBOIwA%", message0.getHeader());
      assertEquals("7P06L OCbBOIwA%", message0.getRecipient());
      assertFalse(message0.delivered());
      assertFalse(message0.received());
      assertNotNull(string0);
      assertEquals(4, Message.DELIVERED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(2, Message.RECEIVED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(1, Message.CREATED);
      
      try { 
        kernel0.request(message0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Sorry, requests are not implemented in Kernel
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Kernel kernel1 = new Kernel();
      assertFalse(kernel1.equals((Object)kernel0));
      assertNotNull(kernel1);
      
      Kernel kernel2 = kernel1.getKernel();
      assertFalse(kernel1.equals((Object)kernel0));
      assertNull(kernel2);
      assertNotSame(kernel1, kernel0);
      
      ConfigModule configModule0 = null;
      try {
        configModule0 = new ConfigModule((Kernel) null);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Message message0 = new Message();
      assertNull(message0.getRecipient());
      assertEquals("", message0.getHeader());
      assertEquals(0L, message0.getID());
      assertEquals(0, message0.getState());
      assertEquals(0L, message0.getSID());
      assertEquals(0L, message0.getTimeStamp());
      assertTrue(message0.getIsConsumed());
      assertEquals(0L, message0.getTTL());
      assertNull(message0.getSender());
      assertFalse(message0.getIsManaged());
      assertFalse(message0.received());
      assertFalse(message0.delivered());
      assertEquals(0, message0.getRefCount());
      assertNotNull(message0);
      assertEquals(1, Message.CREATED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(4, Message.DELIVERED);
      assertEquals(2, Message.RECEIVED);
      assertEquals(0, Message.UNDEFINED);
      
      try { 
        message0.send((Module) kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Module module0 = null;
      kernel0.subscribe((Module) null, "UNREGISTERED");
      kernel0.info();
      ClientNetworkModule clientNetworkModule0 = null;
      try {
        clientNetworkModule0 = new ClientNetworkModule();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }
}
