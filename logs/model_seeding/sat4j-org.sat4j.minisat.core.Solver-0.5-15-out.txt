* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 11240
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550527893670
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.15706806282722513
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.08458390177353342
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.12
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.06390977443609022
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.1968503937007874
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.06002728512960437
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 295
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.24520069808027922
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.13096862210095497
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18666666666666668
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.09022556390977443
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.31496062992125984
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2283464566929134
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.08049113233287858
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 379
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36038394415357766
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2305593451568895
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2946666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.11278195488721804
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2992125984251969
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.19645293315143247
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 462
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.37783595113438045
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24829467939972716
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.29733333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.12406015037593984
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.44881889763779526
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.22510231923601637
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 551
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.38394415357766143
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.252387448840382
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13909774436090225
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4881889763779528
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.36220472440944884
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2291950886766712
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 642
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4075043630017452
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.27148703956343795
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.32
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5511811023622047
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.24283765347885403
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 716
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4162303664921466
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2810368349249659
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.324
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5984251968503937
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
* Search finished after 125s and 6 generations, 15032 statements, best individual has fitness: 2584.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4162303664921466
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2810368349249659
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.324
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5984251968503937
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4162303664921466
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2810368349249659
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.324
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5984251968503937
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 23:15:05.497 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 43%
* Total number of goals: 1146
* Number of covered goals: 498
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 28%
* Total number of goals: 733
* Number of covered goals: 206
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 42
* Number of covered goals: 42
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 34%
* Total number of goals: 750
* Number of covered goals: 253
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 19%
* Total number of goals: 266
* Number of covered goals: 50
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 64%
* Total number of goals: 127
* Number of covered goals: 81
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 46%
* Total number of goals: 127
* Number of covered goals: 59
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 26%
* Total number of goals: 733
* Number of covered goals: 187
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4162303664921466
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2810368349249659
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.324
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5984251968503937
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
* Generated 127 tests with total length 2816
* Resulting test suite's coverage: 44% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 23:16:01.535 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6732833333333333% of time used, but only 13/127 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4162303664921466
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2810368349249659
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.324
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5984251968503937
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2551159618008186
* Compiling and checking tests
[MASTER] 23:16:48.094 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 23:16:48.109 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 23:16:48.293 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 23:16:48.294 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
clausalDataStructureWL0.getVocabulary();
LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
SearchParams searchParams0 = new SearchParams();
int[] intArray0 = new int[4];
intArray0[0] = 0;
intArray0[1] = 1;
intArray0[2] = 588;
intArray0[3] = 435;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
LearningStrategy<ClausalDataStructureWL> learningStrategy1 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy1, clausalDataStructureWL1, subsetVarOrder0, (RestartStrategy) null);
ILogAble iLogAble0 = solver0.getLogger();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
SearchParams searchParams1 = solver1.getSearchParams();
searchParams1.getInitConflictBound();
searchParams0.getInitConflictBound();
searchParams0.getInitConflictBound();
searchParams0.getConflictBoundIncFactor();
Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams1, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
solver2.getTimeoutMs();
NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, subsetVarOrder0, (RestartStrategy) null);
solver3.toString(" Timeout (");

[MASTER] 23:17:03.409 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 23:17:03.414 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
SearchParams searchParams0 = new SearchParams();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
LubyRestarts lubyRestarts0 = new LubyRestarts(3418);
SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
lubyRestarts0.onRestart();
FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, lubyRestarts0);
ILogAble iLogAble0 = solver0.out;
Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble0);
solver1.toString("");

[MASTER] 23:17:04.390 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:17:04.396 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = new SearchParams(1548);
assertNotNull(searchParams0);
assertEquals(1548, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder(1523);
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(1523, pureOrder0.getPeriod());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(1523, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams1 = new SearchParams();
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts(1523);
assertNotNull(lubyRestarts0);
assertEquals(1523, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(1523, pureOrder0.getPeriod());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(1523, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.undoOne();

[MASTER] 23:17:05.605 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:17:05.615 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, pureOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());

ISimplifier iSimplifier0 = solver0.getSimplifier();
assertNotNull(iSimplifier0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>((-141));
assertNotNull(percentLengthLearning1);
assertEquals((-141), percentLengthLearning1.getLimit());

ClausalDataStructureWL clausalDataStructureWL0 = null;
SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
assertNotNull(searchParams0);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double0, 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, (ClausalDataStructureWL) null, pureOrder0, miniSATRestarts0);

[MASTER] 23:17:06.790 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:17:06.814 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
assertNotNull(searchParams0);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double0, 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
noRestarts0.onRestart();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertNotNull(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertNotNull(fixedPeriodRestarts0);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

ILogAble iLogAble0 = solver0.getLogger();
assertNotNull(iLogAble0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

iLogAble0.log("s\n");
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

iLogAble0.log("propagations\t\t: ");
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(7, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, noRestarts0, iLogAble0);
assertNotNull(solver1);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(9, solver0.nVars());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());

NoRestarts noRestarts1 = (NoRestarts)solver1.getRestartStrategy();
assertNotNull(noRestarts1);
assertSame(noRestarts0, noRestarts1);
assertSame(noRestarts1, noRestarts0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(12, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(11, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(noRestarts1.shouldRestart());
assertEquals("NoRestarts", noRestarts1.toString());
assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, varOrderHeap0, noRestarts1);
assertNotNull(solver2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(13, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(14, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.realNumberOfVariables());
assertFalse(noRestarts1.shouldRestart());
assertEquals("NoRestarts", noRestarts1.toString());
assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());

solver2.setVerbose(true);
assertSame(noRestarts0, noRestarts1);
assertSame(noRestarts1, noRestarts0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(15, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(15, solver0.realNumberOfVariables());
assertEquals(16, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(8, solver1.newVar());
assertEquals(7, solver1.nVars());
assertFalse(noRestarts1.shouldRestart());
assertEquals("NoRestarts", noRestarts1.toString());
assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
assertTrue(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(3, solver2.nVars());


[MASTER] 23:17:07.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 23:17:07.945 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-873));
assertNotNull(fixedLengthLearning0);
assertEquals((-873), fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams((-1196.3206309675), (-873), (-1196.3206309675), 0);
assertNotNull(searchParams0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("%/KB7D@s!U>2sCb.");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("%/KB7D@s!U>2sCb.");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals((-873), fixedLengthLearning0.getMaxLength());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());

int int0 = solver0.getTimeout();
assertEquals(2147483, int0);
assertEquals((-873), fixedLengthLearning0.getMaxLength());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());


[MASTER] 23:17:08.614 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 23:17:08.633 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams0 = new SearchParams(32, 32);
assertNotNull(searchParams0);
assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 32);
assertNotNull(tabuListDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

int int0 = (-940);
PureOrder pureOrder0 = new PureOrder((-940));
assertNotNull(pureOrder0);
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
assertNotNull(randomWalkDecorator0);
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());

int int1 = 163;
phaseInLastLearnedClauseSelectionStrategy0.assignLiteral((-940));
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());

VarOrderHeap varOrderHeap1 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertNotNull(varOrderHeap1);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, lubyRestarts0, iLogAble0);
assertNotNull(solver0);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int int2 = (-817);
solver0.setExpectedNumberOfClauses((-817));
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy1 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
assertNotNull(phaseInLastLearnedClauseSelectionStrategy1);
assertNotSame(phaseInLastLearnedClauseSelectionStrategy1, phaseInLastLearnedClauseSelectionStrategy0);
assertNotSame(varOrderHeap0, varOrderHeap1);
assertFalse(phaseInLastLearnedClauseSelectionStrategy1.equals((Object)phaseInLastLearnedClauseSelectionStrategy0));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy1.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

VarOrderHeap varOrderHeap2 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertNotNull(varOrderHeap2);
assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
assertFalse(phaseInLastLearnedClauseSelectionStrategy0.equals((Object)phaseInLastLearnedClauseSelectionStrategy1));
assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(varOrderHeap2, 32);
assertNotNull(randomWalkDecorator1);
assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
assertFalse(phaseInLastLearnedClauseSelectionStrategy0.equals((Object)phaseInLastLearnedClauseSelectionStrategy1));
assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
assertEquals(32.0, randomWalkDecorator1.getProbability(), 0.01);
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator1, lubyRestarts0, mUSLauncher0);
assertNotNull(solver1);
assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
assertFalse(solver1.equals((Object)solver0));
assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
assertFalse(phaseInLastLearnedClauseSelectionStrategy0.equals((Object)phaseInLastLearnedClauseSelectionStrategy1));
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(32.0, randomWalkDecorator1.getProbability(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals((-940), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

String string0 = percentLengthLearning0.toString();
assertEquals("Limit learning to clauses of size smaller or equal to 10% of the number of variables", string0);
assertNotNull(string0);
assertEquals(10, percentLengthLearning0.getLimit());

solver1.getLiteralsPropagatedAt(4056);

* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
