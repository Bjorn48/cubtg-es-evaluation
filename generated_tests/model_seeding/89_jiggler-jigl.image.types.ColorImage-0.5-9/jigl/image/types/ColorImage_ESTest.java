/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 17:49:59 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorImage_ESTest extends ColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 2);
      assertNotNull(interpolatedColorImage0);
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      
      rOI1.setROI(0, (-3161), 11, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals((-3161), rOI1.uy());
      assertEquals(3162, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(12, rOI1.X());
      assertEquals(11, rOI1.lx());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide((-89), (-968), 11, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 115;
      int int1 = 128;
      ColorImage colorImage0 = new ColorImage(115, 128);
      assertNotNull(colorImage0);
      assertEquals(128, colorImage0.Y());
      assertEquals(115, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI(3199, 3199, 3199, 22);
      assertNotNull(rOI0);
      assertEquals(3199, rOI0.ly());
      assertEquals(3199, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(22, rOI0.uy());
      assertEquals(3178, rOI0.Y());
      assertEquals(3199, rOI0.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3199
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int[] intArray0 = new int[1];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0, intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 115;
      ColorImage colorImage0 = new ColorImage(115, 117);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(115, colorImage0.X());
      assertEquals(117, colorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(117, 117);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(117, interpolatedColorImage0.Y());
      assertEquals(117, interpolatedColorImage0.X());
      
      ColorImage colorImage1 = new ColorImage();
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      ROI rOI0 = new ROI(115, 117, 115, 117);
      assertNotNull(rOI0);
      assertEquals(115, rOI0.lx());
      assertEquals(117, rOI0.ly());
      assertEquals(117, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(115, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 117
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = Integer.MAX_VALUE;
      int int1 = (-2001);
      // Undeclared exception!
      try { 
        colorImage0.get(Integer.MAX_VALUE, (-2001));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(280, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(280, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      colorImage0.add(7, 0, (-4490), 0, (-1074), rOI0);
      assertEquals(280, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(280, colorImage0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      InterpolatedColorImage interpolatedColorImage0 = null;
      try {
        interpolatedColorImage0 = new InterpolatedColorImage((InterpolatedColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      interpolatedColorImage1.clip(7, 774);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0, 948);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int int0 = 608;
      int int1 = (-1215);
      int int2 = 255;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer((-1215), (-982), (-1215), (-1215), (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int int0 = Integer.MAX_VALUE;
      ROI rOI0 = new ROI(Integer.MAX_VALUE, (-2687), (-2687), (-2687));
      assertNotNull(rOI0);
      assertEquals((-2687), rOI0.uy());
      assertEquals((-2147480961), rOI0.X());
      assertEquals((-2687), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals((-2687), rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-19), (-2687), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 2);
      assertNotNull(interpolatedColorImage0);
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(2, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = null;
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.plane((-16777216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = 3;
      int int2 = (-16777216);
      InterpolatedColorImage interpolatedColorImage0 = null;
      try {
        interpolatedColorImage0 = new InterpolatedColorImage(3, (-16777216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = null;
      try {
        interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = (-1315);
      int int1 = 0;
      int int2 = 2343;
      int int3 = (-86);
      // Undeclared exception!
      try { 
        colorImage0.max((-86));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -86
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(16, 16);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(16, interpolatedColorImage1.Y());
      assertEquals(16, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2724;
      intArray0[1] = 16;
      intArray0[2] = (-4203);
      intArray0[3] = 16;
      intArray0[4] = 2724;
      intArray0[5] = 16;
      intArray0[6] = (-4203);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-4203), 2724, intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 280;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int1 = 2;
      int int2 = (-140);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.diff((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI((-2355), (-2355), 1888, 1888);
      assertEquals(1888, rOI0.lx());
      assertEquals(4244, rOI0.X());
      assertEquals((-2355), rOI0.uy());
      assertEquals(4244, rOI0.Y());
      assertEquals(1888, rOI0.ly());
      assertEquals((-2355), rOI0.ux());
      
      rOI0.setROI((-2355), (-2355), 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(2356, rOI0.X());
      assertEquals((-2355), rOI0.uy());
      assertEquals(2356, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-2355), rOI0.ux());
      
      ColorImage colorImage0 = new ColorImage(1315, 0);
      assertNotNull(colorImage0);
      assertEquals(1315, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ColorImage colorImage1 = colorImage0.clear();
      assertNotNull(colorImage1);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertEquals(1315, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1315, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(2356, rOI0.X());
      assertEquals((-2355), rOI0.uy());
      assertEquals(2356, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-2355), rOI0.ux());
      assertEquals(2356, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(280, colorImage0.X());
      assertEquals(280, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.divide(3639, 7, 2011, (-2623), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3639
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = 1256;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-321));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-321), (int)integer0);
      
      int int1 = integer0.intValue();
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals((-321), int1);
      
      integerArray0[0] = (Integer) (-321);
      Integer integer1 = Integer.valueOf(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertEquals((-30000), (int)integer2);
      
      byte byte0 = integer2.byteValue();
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertEquals((byte) (-48), byte0);
      
      integerArray0[1] = integer2;
      ROI rOI0 = new ROI((-225), (-225), (-225), 3046);
      assertNotNull(rOI0);
      assertEquals((-225), rOI0.ux());
      assertEquals((-225), rOI0.uy());
      assertEquals(3046, rOI0.ly());
      assertEquals(3272, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-225), rOI0.lx());
      
      int int2 = rOI0.X();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-225), rOI0.ux());
      assertEquals((-225), rOI0.uy());
      assertEquals(3046, rOI0.ly());
      assertEquals(3272, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-225), rOI0.lx());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-225), rOI0.ux());
      assertEquals((-225), rOI0.uy());
      assertEquals(3046, rOI0.ly());
      assertEquals(3272, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-225), rOI0.lx());
      assertEquals(3272, int3);
      
      // Undeclared exception!
      try { 
        colorImage0.set(1256, 0, integerArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(3398, (-3675));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3398
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(0, 0, (Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-471), (-1), (-471), (-614), Integer.MAX_VALUE, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.uy();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      
      int int2 = rOI0.ly();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int3);
      
      int int4 = 1;
      int int5 = 1395;
      // Undeclared exception!
      try { 
        colorImage0.divide(1395, (-2713));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1395
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(2177, 2177);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2177, colorImage0.Y());
      assertEquals(2177, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(2177, 3882, 3882, (-298), (-298));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3882
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(665, 665);
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(665, interpolatedColorImage0.X());
      assertEquals(665, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply(0, 1120, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(280, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(280, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(280, 280);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(280, interpolatedColorImage0.X());
      assertEquals(280, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-4203);
      intArray0[1] = (-4203);
      intArray0[2] = 280;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-4203), 0, (-327), 529, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4203
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 280;
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(280, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(280, colorImage0.X());
      
      // Undeclared exception!
      colorImage0.minComponent();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = 11;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(11, (-3), (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        colorImage0.get(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3053, 3053);
      assertNotNull(colorImage0);
      assertEquals(3053, colorImage0.X());
      assertEquals(3053, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        colorImage0.add(3053, 3053, 348, 3053, 3053, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3053
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI((-47), (-47), (-47), (-47));
      assertNotNull(rOI0);
      assertEquals((-47), rOI0.uy());
      assertEquals((-47), rOI0.ux());
      assertEquals((-47), rOI0.ly());
      assertEquals((-47), rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.clip((-47), (-47), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(280, colorImage0.Y());
      assertEquals(280, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int3);
      
      int int4 = rOI0.uy();
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int4);
      
      int int5 = rOI0.ly();
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int5);
      
      ROI rOI1 = new ROI(0, 280, 0, (-100));
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-100), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(280, rOI1.ly());
      assertEquals(381, rOI1.Y());
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-100), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(280, rOI1.ly());
      assertEquals(381, rOI1.Y());
      assertEquals(0, int6);
      
      int int7 = 0;
      int int8 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int4);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-100), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(280, rOI1.ly());
      assertEquals(381, rOI1.Y());
      assertEquals(0, int8);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      
      int int9 = 0;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.valueOf(2);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int7));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int8));
      assertFalse(integer0.equals((Object)int9));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int6));
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int6));
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int9));
      assertFalse(integer1.equals((Object)int8));
      assertFalse(integer1.equals((Object)int7));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int5));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(300, (int)integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(586, 1500);
      assertNotNull(colorImage0);
      assertEquals(1500, colorImage0.Y());
      assertEquals(586, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.min(1500, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1500
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = 1244;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 3053;
      int int1 = 648;
      ColorImage colorImage0 = new ColorImage(3053, 648);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3053, colorImage0.X());
      assertEquals(648, colorImage0.Y());
      
      int int2 = 348;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.uy();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int4);
      assertFalse(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int6);
      
      // Undeclared exception!
      try { 
        colorImage0.add(3053, 3053, 348, 648, 648, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3053
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 2);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.multiply(3046, 3046, 1207);
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(2, interpolatedColorImage2.Y());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 115;
      int int1 = 128;
      ColorImage colorImage0 = new ColorImage(115, 128);
      assertNotNull(colorImage0);
      assertEquals(115, colorImage0.X());
      assertEquals(128, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(115, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI((-225), (-225), (-225), 3046);
      assertNotNull(rOI0);
      assertEquals((-225), rOI0.uy());
      assertEquals((-225), rOI0.ux());
      assertEquals(3046, rOI0.ly());
      assertEquals(3272, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-225), rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals((-225), rOI0.uy());
      assertEquals((-225), rOI0.ux());
      assertEquals(3046, rOI0.ly());
      assertEquals(3272, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-225), rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals((-225), rOI0.uy());
      assertEquals((-225), rOI0.ux());
      assertEquals(3046, rOI0.ly());
      assertEquals(3272, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-225), rOI0.lx());
      assertEquals(3272, int1);
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(280, colorImage0.Y());
      assertEquals(280, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ColorImage colorImage1 = colorImage0.copy(rOI0);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(280, colorImage0.Y());
      assertEquals(280, colorImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(1, colorImage1.X());
      assertEquals(1, colorImage1.Y());
      
      int int0 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(280, colorImage0.X());
      assertEquals(280, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      int int0 = 0;
      Integer integer1 = Integer.valueOf(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      byte byte0 = integer1.byteValue();
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((byte)0, byte0);
      
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(100, (int)integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      int int1 = (-1736);
      // Undeclared exception!
      colorImage0.copy();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      interpolatedColorImage0.addbuffer(0, Integer.MAX_VALUE, Integer.MAX_VALUE, 12, intArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      ROI rOI0 = new ROI(0, 0, 0, Integer.MIN_VALUE);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals((-2147483647), rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals((-2147483647), rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, int0);
      
      ColorImage colorImage1 = colorImage0.subtract(Integer.MIN_VALUE, 604, 3406);
      assertNotNull(colorImage1);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      ROI rOI1 = new ROI(Integer.MIN_VALUE, (-2491), 948, 0);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(2492, rOI1.Y());
      assertEquals((-2491), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals((-2147482699), rOI1.X());
      assertEquals(Integer.MIN_VALUE, rOI1.ux());
      assertEquals(948, rOI1.lx());
      
      rOI1.setROI(530, 530, 0, 530);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(530, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(531, rOI1.X());
      assertEquals(530, rOI1.lx());
      assertEquals(530, rOI1.ly());
      assertEquals(0, rOI1.ux());
      
      rOI1.setROI(0, Integer.MIN_VALUE, 0, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      assertEquals(Integer.MIN_VALUE, rOI1.uy());
      assertEquals((-2147483647), rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      
      // Undeclared exception!
      try { 
        colorImage1.byteSize(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = (-16777216);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.plane((-16777216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 1764);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1764, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      colorImage0.copy();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0, intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      int int1 = 8;
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-3506);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 2);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(2, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.add(2, 0);
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(2, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(2, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage3 = (InterpolatedColorImage)interpolatedColorImage1.multiply(255, 0, 1850);
      assertNotNull(interpolatedColorImage3);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage0));
      assertNotSame(interpolatedColorImage0, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, interpolatedColorImage3);
      assertSame(interpolatedColorImage3, interpolatedColorImage1);
      assertSame(interpolatedColorImage3, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage3, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(2, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage3.X());
      assertEquals(2, interpolatedColorImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage3.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage3.getColorModel());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(280, colorImage0.X());
      assertEquals(280, colorImage0.Y());
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf(128);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(128, (int)integer1);
      
      byte byte0 = integer1.byteValue();
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((byte) (-128), byte0);
      
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(100, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(128);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(128, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(100, (int)integer4);
      
      integerArray0[4] = integer4;
      // Undeclared exception!
      try { 
        colorImage0.set((-3285), (-3285), integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3285
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(665, 696);
      assertNotNull(colorImage0);
      assertEquals(696, colorImage0.Y());
      assertEquals(665, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.add(696, 665);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 696
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      ROI rOI0 = new ROI(9, 9, 9, 0);
      assertNotNull(rOI0);
      assertEquals(9, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(9, rOI0.ly());
      assertEquals(9, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(10, rOI0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.divide(9, 9, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 2323);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(2323, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply((-541), (-541));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -541
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(280, colorImage0.X());
      assertEquals(280, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(974, 974, 1485, 1485);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(974, rOI1.ux());
      assertEquals(1485, rOI1.ly());
      assertEquals(512, rOI1.X());
      assertEquals(1485, rOI1.lx());
      assertEquals(512, rOI1.Y());
      assertEquals(974, rOI1.uy());
      
      // Undeclared exception!
      try { 
        colorImage0.clip(280, 8, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 974
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 2177;
      ColorImage colorImage0 = new ColorImage(2177, 2177);
      assertNotNull(colorImage0);
      assertEquals(2177, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2177, colorImage0.Y());
      
      int int1 = 3882;
      // Undeclared exception!
      colorImage0.maxComponent();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 115;
      ColorImage colorImage0 = new ColorImage(115, 102);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(115, colorImage0.X());
      assertEquals(102, colorImage0.Y());
      
      int int1 = 3199;
      int[] intArray0 = new int[9];
      intArray0[0] = 2702;
      intArray0[1] = 1452;
      intArray0[2] = 115;
      intArray0[3] = 3199;
      intArray0[4] = 2702;
      intArray0[5] = 3199;
      intArray0[6] = 3199;
      intArray0[7] = 2702;
      intArray0[8] = 102;
      // Undeclared exception!
      colorImage0.addbuffer(2702, 1452, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-14), (-14), (-14), (-14), (-14));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      ColorModel colorModel0 = ColorModel.CMY;
      colorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.CMY, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      Integer[] integerArray0 = colorImage0.max();
      assertNotNull(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(ColorModel.CMY, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 115;
      int int1 = 102;
      ColorImage colorImage0 = new ColorImage(115, 102);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(102, colorImage0.Y());
      assertEquals(115, colorImage0.X());
      
      ROI rOI0 = new ROI(3199, 3199, 3199, 102);
      assertNotNull(rOI0);
      assertEquals(102, rOI0.uy());
      assertEquals(3199, rOI0.ly());
      assertEquals(3199, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3199, rOI0.ux());
      assertEquals(3098, rOI0.Y());
      
      int int2 = 893;
      rOI0.setROI(102, 115, 791, 0);
      assertEquals(116, rOI0.Y());
      assertEquals(102, rOI0.ux());
      assertEquals(690, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(115, rOI0.ly());
      assertEquals(791, rOI0.lx());
      
      int[] intArray0 = new int[2];
      int int3 = 1558;
      intArray0[1] = 1558;
      rOI0.setROI(1558, 1558, 0, 12);
      assertEquals(0, rOI0.ux());
      assertEquals(1559, rOI0.X());
      assertEquals(1547, rOI0.Y());
      assertEquals(1558, rOI0.ly());
      assertEquals(12, rOI0.uy());
      assertEquals(1558, rOI0.lx());
      
      intArray0[1] = 115;
      int int4 = 3;
      // Undeclared exception!
      try { 
        colorImage0.add(3199, 0, 893);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(1618, 1618, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 115;
      int int1 = 102;
      ColorImage colorImage0 = new ColorImage(115, 102);
      assertNotNull(colorImage0);
      assertEquals(102, colorImage0.Y());
      assertEquals(115, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI(3199, 3199, 3199, 102);
      assertNotNull(rOI0);
      assertEquals(3199, rOI0.ux());
      assertEquals(3098, rOI0.Y());
      assertEquals(3199, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(3199, rOI0.lx());
      assertEquals(102, rOI0.uy());
      
      int int2 = 893;
      int[] intArray0 = new int[2];
      int int3 = 1558;
      intArray0[1] = 1558;
      // Undeclared exception!
      colorImage0.byteSize();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 2;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 2);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int1 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = (InterpolatedGrayImage)interpolatedColorImage0.plane(0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      
      int int2 = (-4297);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(0, 2, (-4297), (-4297), (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(279, 0, (-2436), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.diff((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(3, (-16777216), (-16777216), 0);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(16777217, rOI1.Y());
      assertEquals((-16777216), rOI1.ux());
      assertEquals((-16777216), rOI1.uy());
      assertEquals(3, rOI1.lx());
      assertEquals(16777220, rOI1.X());
      assertEquals(0, rOI1.ly());
      
      int int0 = 128;
      int[] intArray0 = new int[3];
      int int1 = 1;
      intArray0[0] = 1;
      intArray0[1] = (-3581);
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        colorImage0.divide((-16777216), 128, intArray0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(3, 0, (-32768), (-2623), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = 0;
      int int1 = (-166);
      int int2 = 0;
      int int3 = (-4);
      // Undeclared exception!
      try { 
        colorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1476, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1476, colorImage0.X());
      
      ColorImage colorImage1 = colorImage0.add(0, 1476);
      assertNotNull(colorImage1);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1476, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(1476, colorImage1.X());
      
      ColorImage colorImage2 = colorImage1.multiply(0, 1120, 0);
      assertNotNull(colorImage2);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage0, colorImage2);
      assertSame(colorImage1, colorImage0);
      assertSame(colorImage1, colorImage2);
      assertSame(colorImage2, colorImage1);
      assertSame(colorImage2, colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1476, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(1476, colorImage1.X());
      assertEquals(0, colorImage2.Y());
      assertEquals(1476, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int3);
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int int4 = (-1027);
      int[] intArray0 = new int[4];
      intArray0[0] = 3202;
      intArray0[1] = 0;
      intArray0[2] = (-12);
      intArray0[3] = (-964);
      // Undeclared exception!
      try { 
        colorImage0.multiply((-12), (-1027), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      colorImage0.planes = null;
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ColorImage colorImage1 = new ColorImage();
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.add(colorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.uy();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      
      int int2 = 0;
      int int3 = 0;
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = 608;
      int int1 = (-1215);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(608, 1658, 1658, 1658, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int int0 = 2;
      int int1 = 1;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3053, 3053);
      assertNotNull(colorImage0);
      assertEquals(3053, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3053, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      String string0 = colorImage0.toString(rOI0);
      assertNotNull(string0);
      assertEquals(3053, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3053, colorImage0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals("3053:3053\nnull \n3053:3053\nnull \n3053:3053\nnull \n", string0);
      
      int int0 = colorImage0.X();
      assertEquals(3053, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3053, colorImage0.X());
      assertEquals(3053, int0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(200, (int)integer0);
      
      short[] shortArray0 = new short[2];
      short short0 = (short)0;
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-610);
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(0, shortArray0);
      assertNotNull(shortLookupTable0);
      assertArrayEquals(new short[] {(short)0, (short) (-610)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortLookupTable0.getNumComponents());
      assertEquals(0, shortLookupTable0.getOffset());
      
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, (RenderingHints) null);
      assertNotNull(lookupOp0);
      assertArrayEquals(new short[] {(short)0, (short) (-610)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortLookupTable0.getNumComponents());
      assertEquals(0, shortLookupTable0.getOffset());
      
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp((AffineTransform) null, (RenderingHints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(926, 926, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 926
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 1500;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(1500, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1500
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(16, 0, (int[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      assertNotNull(colorImage0);
      assertEquals(280, colorImage0.Y());
      assertEquals(280, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      GrayImage[] grayImageArray0 = new GrayImage[0];
      colorImage0.planes = grayImageArray0;
      assertEquals(280, colorImage0.Y());
      assertEquals(280, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.maxComponent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = (-547);
      int int1 = 2410;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-547), 2410, (-547), (-547), (-547));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[2];
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.max(791);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 791
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      ColorModel colorModel0 = ColorModel.RGB;
      colorImage0.planes = null;
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      colorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      colorImage0.planes = null;
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = (-1411);
      // Undeclared exception!
      try { 
        colorImage0.min((-1411));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = 1;
      int int1 = 11;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        colorImage0.divide(1, 1, 11, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI(2173, 2173, 2173, 2173);
      assertEquals(2173, rOI0.uy());
      assertEquals(2173, rOI0.ux());
      assertEquals(2173, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2173, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals(2173, rOI0.uy());
      assertEquals(2173, rOI0.ux());
      assertEquals(2173, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2173, rOI0.lx());
      assertEquals(2173, int0);
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(2173, rOI0.uy());
      assertEquals(2173, rOI0.ux());
      assertEquals(2173, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2173, rOI0.lx());
      assertEquals(2173, int1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2173;
      GrayImage grayImage0 = colorImage0.plane(0);
      assertNull(grayImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      intArray0[1] = 2173;
      intArray0[2] = 2173;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(0, 2173, 2173, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = 255;
      int int1 = 0;
      // Undeclared exception!
      try { 
        colorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ColorImage colorImage1 = colorImage0.multiply(4, 0, 0);
      assertNotNull(colorImage1);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(665, 696);
      assertNotNull(colorImage0);
      assertEquals(696, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(665, colorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(1425, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.clip(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.InitFromImage((Image) null, 0, 255, 255, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int4 = rOI1.uy();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int4);
      
      int int5 = rOI1.ly();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int5);
      
      int int6 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int6);
      
      int int7 = rOI1.lx();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int7);
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        colorImage0.multiply(2, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(300, (int)integer1);
      
      int int0 = integer1.intValue();
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(300, int0);
      
      integerArray0[1] = (Integer) 300;
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(300, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        colorImage0.clear(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      ROI rOI0 = new ROI();
      int[] intArray0 = new int[9];
      intArray0[0] = 280;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-3383);
      intArray0[3] = 280;
      intArray0[4] = 312;
      intArray0[5] = (-3383);
      intArray0[6] = 280;
      intArray0[7] = 280;
      intArray0[8] = 280;
      // Undeclared exception!
      colorImage0.addbuffer(280, 280, 280, (-3383), intArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        colorImage0.get(0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      ROI rOI0 = new ROI(Integer.MIN_VALUE, 1255, 0, 0);
      // Undeclared exception!
      try { 
        interpolatedColorImage1.subtract(0, 0, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      colorImage0.copy();
      // Undeclared exception!
      try { 
        colorImage0.multiply(4, 0, (int[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      // Undeclared exception!
      try { 
        colorImage0.multiply(0, 0, (int[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-257), 1, integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int int1 = 4;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      ROI rOI0 = new ROI();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1060);
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer((-1060), 0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      int int0 = 1;
      int int1 = 32767;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-16777216), Integer.MIN_VALUE, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      ROI rOI0 = new ROI();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(280, 280);
      int[] intArray0 = new int[5];
      intArray0[0] = (-4203);
      intArray0[1] = (-4203);
      intArray0[2] = 280;
      intArray0[3] = 280;
      intArray0[4] = 280;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-4203), 280, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 280
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 128;
      ColorImage colorImage0 = new ColorImage(0, 0);
      int int1 = 1;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.ly();
      rOI0.lx();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(3210, 1, 0, 0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      interpolatedColorImage0.Y();
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.lx();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ROI rOI0 = new ROI();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      interpolatedColorImage1.absSum();
      // Undeclared exception!
      try { 
        interpolatedColorImage1.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        colorImage0.subtract(8, 7, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ux();
      int int0 = 2328;
      // Undeclared exception!
      try { 
        colorImage0.set(2328, 0, (Integer[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray0 = new int[2];
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, (-2807), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.lx();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 2, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(2, 2);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(2, 2);
      interpolatedColorImage0.Y();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      interpolatedColorImage0.copy();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int int0 = 0;
      int int1 = 831;
      int int2 = 0;
      int int3 = 2;
      // Undeclared exception!
      try { 
        colorImage0.divide(2, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ROI rOI0 = null;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(0, (-587));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ColorImage colorImage1 = new ColorImage();
      ColorImage colorImage2 = new ColorImage();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage2.subtract(1554, 1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI(0, 12, 831, 0);
      // Undeclared exception!
      try { 
        colorImage0.clip(0, 831, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      // Undeclared exception!
      colorImage0.max();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI(0, 831, 831, 0);
      colorImage0.getColorModel();
      rOI0.setROI(0, 3, (-1824), 0);
      // Undeclared exception!
      try { 
        colorImage0.clip(0, 831, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 115;
      int int1 = 102;
      ColorImage colorImage0 = new ColorImage(115, 102);
      ROI rOI0 = new ROI(3199, 3199, 3199, 102);
      int int2 = 893;
      int[] intArray0 = new int[2];
      int int3 = 1558;
      intArray0[1] = 1558;
      intArray0[1] = 115;
      ROI rOI1 = new ROI(3, 0, (-3581), 893);
      // Undeclared exception!
      try { 
        colorImage0.divide(893, 893, intArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 893
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      ColorImage colorImage0 = new ColorImage(Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[1];
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1398, 1398);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer((-4814), 0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 115;
      int int1 = 128;
      ColorImage colorImage0 = new ColorImage(115, 128);
      ROI rOI0 = new ROI(3199, 3199, 3199, 22);
      int int2 = 893;
      int[] intArray0 = new int[2];
      intArray0[1] = 1558;
      intArray0[1] = 115;
      ROI rOI1 = new ROI(3, 0, (-3581), 893);
      // Undeclared exception!
      try { 
        colorImage0.divide(893, 893, intArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 893
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 7;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(665, 665);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(665, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-9), (-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 4078;
      ColorImage colorImage0 = new ColorImage(4078, 4078);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      interpolatedColorImage0.getColorModel();
      int int0 = 128;
      int int1 = 1;
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.interp(3128.48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.InterpolatedColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage1.add(0, (-3675));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      colorImage0.maxComponent();
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(0, 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      ColorImage colorImage1 = new ColorImage(colorImage0);
      ColorModel colorModel0 = ColorModel.YIQ;
      colorImage1.setColorModel(colorModel0);
      int int1 = 0;
      GrayImage[] grayImageArray0 = new GrayImage[7];
      int int2 = 1;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      Kernel kernel0 = new Kernel(1, 1, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, integer0);
      RescaleOp rescaleOp0 = new RescaleOp((-4671.4414F), 1.0F, renderingHints0);
      int int3 = 3760;
      int int4 = 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-128);
      byte byte0 = (byte)61;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)120;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 3760, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-547), 2410, (-547), (-547), (-547));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(0, 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        colorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(0);
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI();
      rOI2.uy();
      rOI2.ly();
      rOI2.ux();
      rOI2.lx();
      // Undeclared exception!
      try { 
        colorImage0.min(0, rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 0;
      int[] intArray0 = new int[2];
      ColorImage colorImage0 = new ColorImage(0, 0);
      int int1 = (-4);
      colorImage0.toString();
      ColorImage colorImage1 = new ColorImage();
      int int2 = 255;
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(255, 255);
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage(interpolatedColorImage1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 280;
      ColorImage colorImage0 = new ColorImage(280, 280);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      colorImage0.min();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ColorImage colorImage1 = new ColorImage();
      int int0 = (-2781);
      ROI rOI0 = new ROI(3074, (-2781), 346, (-2781));
      // Undeclared exception!
      try { 
        colorImage1.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(280, 280);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        colorImage0.multiply(280, (-3285), 280, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 255;
      int int1 = 1673;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(255, 1673);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 380;
      ColorImage colorImage0 = new ColorImage(380, 380);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(380, 2081, (-275), 3, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      colorImage0.plane(0);
      ROI rOI0 = new ROI(2951, 1860, (-1140), (-1140));
      rOI0.setROI(16, 0, (-16777216), 0);
      InterpolatedColorImage interpolatedColorImage0 = null;
      try {
        interpolatedColorImage0 = new InterpolatedColorImage((-16777216), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      ColorImage colorImage1 = colorImage0.add(447, 0, 0);
      assertSame(colorImage1, colorImage0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.lx();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI();
      int int0 = 2173;
      rOI0.setROI(2173, 2173, 2173, 2173);
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        colorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI(0, 0, 0, 0);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      interpolatedColorImage0.diff(colorImage0);
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 9, 0, 9, 913, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = (-892);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min((-892));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -892
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.setROI(0, 3202, 0, (-960));
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      ROI rOI1 = new ROI();
      rOI1.uy();
      rOI1.ly();
      rOI1.ux();
      rOI1.lx();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, 0, 0, (-813), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      GrayImage[] grayImageArray0 = null;
      colorImage0.planes = null;
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 838;
      intArray0[6] = 838;
      intArray0[7] = 3;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(838, 3, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      int[] intArray0 = new int[8];
      intArray0[0] = 926;
      intArray0[1] = 926;
      intArray0[2] = 926;
      intArray0[3] = 0;
      intArray0[4] = (-1922);
      intArray0[5] = 926;
      intArray0[6] = 926;
      intArray0[7] = 926;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int int0 = (-1863);
      int int1 = 0;
      int int2 = 0;
      // Undeclared exception!
      try { 
        colorImage0.add((-1863), (-1863), 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.setROI(288, Integer.MAX_VALUE, 0, 0);
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-26), 3, 3, (-195), (-195));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI(Integer.MIN_VALUE, 0, 1958, Integer.MIN_VALUE);
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1556, 1883, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1556
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, (-2807), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2807
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI(0, 0, 0, 0);
      // Undeclared exception!
      try { 
        colorImage0.divide(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 700);
      interpolatedColorImage0.sqrSum();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 3;
      int int1 = (-32768);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedColorImage0.interpolationMethod = interpolationMethod0;
      int int2 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      Integer integer0 = colorImage0.minComponent();
      assertNull(integer0);
  }
}
