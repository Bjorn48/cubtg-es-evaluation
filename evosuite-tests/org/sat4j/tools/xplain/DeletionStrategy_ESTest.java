/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:44:44 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.xplain.DeletionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeletionStrategy_ESTest extends DeletionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn("").when(optToSatAdapter0).getLogPrefix();
      doReturn(true).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, binary0);
      GateTranslator gateTranslator0 = new GateTranslator(clausalCardinalitiesDecorator0);
      VecInt vecInt1 = new VecInt();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(gateTranslator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(0);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(optToSatAdapter0).nVars();
      doReturn(vecInt0, (IVecInt) null).when(optToSatAdapter0).unsatExplanation();
      Binary binary0 = new Binary();
      vecInt0.insertFirst(0);
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, binary0);
      GateTranslator gateTranslator0 = new GateTranslator(clausalCardinalitiesDecorator0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(gateTranslator0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      IVecInt iVecInt0 = deletionStrategy0.explain(minimal4InclusionModel0, hashMap0, vecInt0);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(gateTranslator0, hashMap0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.DeletionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      HashMap<Integer, OptToSatAdapter> hashMap0 = new HashMap<Integer, OptToSatAdapter>();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(statisticsSolver0);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(statisticsSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(0);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(optToSatAdapter0).nVars();
      vecInt0.pop();
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, binary0);
      GateTranslator gateTranslator0 = new GateTranslator(clausalCardinalitiesDecorator0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(gateTranslator0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4InclusionModel0, vecInt0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(subModelIterator0, hashMap0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(0);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(optToSatAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(optToSatAdapter0).getLogPrefix();
      doReturn(true).when(optToSatAdapter0).isVerbose();
      doReturn(0, 0).when(optToSatAdapter0).nVars();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, binary0);
      GateTranslator gateTranslator0 = new GateTranslator(clausalCardinalitiesDecorator0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(gateTranslator0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(minimal4InclusionModel0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, binary0);
      VecInt vecInt1 = new VecInt();
      vecInt0.insertFirst((-1319));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(clausalCardinalitiesDecorator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(0);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(optToSatAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(optToSatAdapter0).getLogPrefix();
      doReturn(false, true).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) (-1207), "Deletion based minimization strategy");
      IVecInt iVecInt0 = deletionStrategy0.explain(optToSatAdapter0, hashMap0, vecInt0);
      assertFalse(iVecInt0.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(optToSatAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("").when(optToSatAdapter0).getLogPrefix();
      doReturn(true, false).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, binary0);
      GateTranslator gateTranslator0 = new GateTranslator(clausalCardinalitiesDecorator0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      deletionStrategy0.explain(gateTranslator0, hashMap0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      String string0 = deletionStrategy0.toString();
      assertEquals("Deletion based minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      deletionStrategy0.cancelExplanationComputation();
      assertEquals("Deletion based minimization strategy", deletionStrategy0.toString());
  }
}
