* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 13111
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550590061795
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.21727748691099477
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.13506139154160982
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.07333333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13909774436090225
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.29133858267716534
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.23622047244094488
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.09004092769440655
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 281
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2469458987783595
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.15688949522510232
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.09866666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.15037593984962405
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.31496062992125984
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.25196850393700787
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1077762619372442
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 365
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2513089005235602
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16098226466575716
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.104
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.16165413533834586
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11186903137789904
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 448
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2757417102966841
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17871759890859482
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.11866666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18421052631578946
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.30708661417322836
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12824010914051842
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 541
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3010471204188482
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19236016371077763
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.17733333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19172932330827067
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4409448818897638
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1377899045020464
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 624
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3106457242582897
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19781718963165076
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19924812030075187
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.47244094488188976
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3543307086614173
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1446111869031378
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 704
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21418826739427013
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.192
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21428571428571427
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
* Search finished after 124s and 6 generations, 12489 statements, best individual has fitness: 2921.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21418826739427013
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.192
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21428571428571427
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21418826739427013
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.192
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21428571428571427
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 16:31:10.867 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 34%
* Total number of goals: 1146
* Number of covered goals: 390
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 21%
* Total number of goals: 733
* Number of covered goals: 157
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 20%
* Total number of goals: 750
* Number of covered goals: 152
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 21%
* Total number of goals: 266
* Number of covered goals: 57
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 57%
* Total number of goals: 127
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 40%
* Total number of goals: 127
* Number of covered goals: 51
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 16%
* Total number of goals: 733
* Number of covered goals: 114
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21418826739427013
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.192
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21428571428571427
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
* Generated 113 tests with total length 2465
* Resulting test suite's coverage: 38% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 16:32:07.811 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.75625% of time used, but only 11/113 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21418826739427013
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.192
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.21428571428571427
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5275590551181102
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4015748031496063
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
* Compiling and checking tests
[MASTER] 16:32:47.072 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 16:32:47.077 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 16:32:52.934 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3> but was:<0>
[MASTER] 16:32:52.936 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
LubyRestarts lubyRestarts0 = new LubyRestarts(0);
lubyRestarts0.onRestart();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, lubyRestarts0);
levelBasedVarOrderHeap0.init();
LubyRestarts lubyRestarts1 = new LubyRestarts(1);
solver0.setRestartStrategy(lubyRestarts1);
ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts1);
FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, lubyRestarts0);
solver2.isSatisfiable();
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>();
LubyRestarts lubyRestarts2 = new LubyRestarts(32);
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
NoRestarts noRestarts0 = new NoRestarts();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
SearchParams searchParams0 = new SearchParams(2633);
searchParams0.getConflictBoundIncFactor();
searchParams0.getInitConflictBound();
searchParams0.getConflictBoundIncFactor();
searchParams0.getInitConflictBound();
searchParams0.getConflictBoundIncFactor();
Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin1, searchParams0, levelBasedVarOrderHeap0, lubyRestarts1);
solver3.findModel();
Solver<CardinalityDataStructure> solver4 = new Solver<CardinalityDataStructure>(fixedLengthLearning2, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver2);
Vec<IVecInt> vec0 = new Vec<IVecInt>(5, iVecInt0);
assertEquals(3, solver2.nVars());

solver4.addAllClauses(vec0);

[MASTER] 16:33:02.134 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:02.149 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder(18);
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());

double[] doubleArray0 = pureOrder0.getVariableHeuristics();
assertNotNull(doubleArray0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, eMARestarts0);
assertNotNull(solver0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());

eMARestarts0.onBackjumpToRootLevel();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, pureOrder0, eMARestarts0, (ILogAble) null);
assertNotNull(solver1);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());

solver1.cancelUntil(18);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, pureOrder0, eMARestarts0);
assertNotNull(solver2);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());

EMARestarts eMARestarts1 = (EMARestarts)solver2.getRestartStrategy();
assertSame(eMARestarts1, eMARestarts0);
assertSame(eMARestarts0, eMARestarts1);
assertNotNull(eMARestarts1);
assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertNotNull(fixedLengthLearning1);
assertEquals(3, fixedLengthLearning1.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning1, mixedDataStructureDanielHT0, searchParams0, pureOrder0, eMARestarts1, (ILogAble) null);
assertNotNull(solver3);
assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(2, solver3.newVar());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isVerbose());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(5, solver2.nVars());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());

VecInt vecInt0 = (VecInt)solver3.getOutLearnt();
assertSame(eMARestarts1, eMARestarts0);
assertSame(eMARestarts0, eMARestarts1);
assertNotNull(vecInt0);
assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(4, solver3.newVar());
assertEquals(3, solver3.nVars());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isVerbose());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(7, solver2.realNumberOfVariables());
assertEquals(8, solver2.newVar());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(7, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());

int[] intArray0 = solver0.findModel((IVecInt) vecInt0);
assertSame(eMARestarts0, eMARestarts1);
assertSame(eMARestarts1, eMARestarts0);
assertNotNull(intArray0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(18, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(9, solver2.realNumberOfVariables());
assertEquals(9, solver2.nVars());
assertEquals(10, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(eMARestarts1.shouldRestart());
assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(6, solver3.newVar());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isSolverKeptHot());
assertEquals(5, solver3.nVars());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isVerbose());
assertEquals(5, solver3.realNumberOfVariables());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);


[MASTER] 16:33:03.050 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:03.053 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

int int0 = vecInt0.indexOf(245);
assertEquals((-1), int0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ILits iLits0 = cardinalityDataStructure0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

iLits0.ensurePool(873);
assertEquals(873, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

int[] intArray0 = new int[7];
intArray0[0] = 873;
intArray0[1] = 873;
intArray0[2] = 873;
intArray0[3] = 873;
intArray0[4] = 5000;
intArray0[5] = 873;
intArray0[6] = (-1411);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {873, 873, 873, 873, 5000, 873, (-1411)}, intArray0);
assertEquals(7, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertNotNull(tabuListDecorator0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {873, 873, 873, 873, 5000, 873, (-1411)}, intArray0);
assertEquals(7, intArray0.length);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertArrayEquals(new int[] {873, 873, 873, 873, 5000, 873, (-1411)}, intArray0);
assertEquals(7, intArray0.length);

ILits iLits1 = solver0.getVocabulary();
assertNotSame(iLits1, iLits0);
assertNotNull(iLits1);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, iLits1.realnVars());
assertEquals(3, iLits1.nVars());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertArrayEquals(new int[] {873, 873, 873, 873, 5000, 873, (-1411)}, intArray0);
assertFalse(iLits1.equals((Object)iLits0));
assertEquals(7, intArray0.length);

int int1 = iLits1.getFromPool(6);
assertEquals(12, int1);
assertNotSame(iLits1, iLits0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, iLits1.nVars());
assertEquals(1, iLits1.realnVars());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertArrayEquals(new int[] {873, 873, 873, 873, 5000, 873, (-1411)}, intArray0);
assertFalse(iLits1.equals((Object)iLits0));
assertFalse(int1 == int0);
assertEquals(7, intArray0.length);

LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits1);

[MASTER] 16:33:04.298 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:04.300 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, eMARestarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());

int[] intArray0 = solver0.findModel();
assertNotNull(intArray0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>((LearningStrategy<CardinalityDataStructureYanMax>) null, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, eMARestarts0);

[MASTER] 16:33:05.181 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:05.182 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = (-1198);
FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-1198));
assertNotNull(fixedLengthLearning0);
assertEquals((-1198), fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams(2633);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2633, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

int int1 = searchParams0.getInitConflictBound();
assertEquals(2633, int1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2633, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(int1 == int0);

int int2 = searchParams0.getInitConflictBound();
assertEquals(2633, int2);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2633, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(int2 == int0);
assertTrue(int2 == int1);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2633, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
assertNotNull(solver0);
assertEquals((-1198), fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2633, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());

solver0.primeImplicant((-1198));

[MASTER] 16:33:06.138 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:06.139 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder((-1193));
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-1193), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts((-1422));
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1422), lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-1193), pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1422), lubyRestarts0.getFactor());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 16:33:06.970 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:06.971 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int int0 = 18;
PureOrder pureOrder0 = new PureOrder(18);
assertNotNull(pureOrder0);
assertEquals(18, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

double[] doubleArray0 = pureOrder0.getVariableHeuristics();
assertNotNull(doubleArray0);
assertEquals(18, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, eMARestarts0);
assertNotNull(solver0);
assertEquals(18, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());

solver0.printStat((PrintWriter) null, "os");

[MASTER] 16:33:07.897 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:07.901 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams((-1734.2593268), (-1734.2593268), 2743.200093657816, 2231);
assertNotNull(searchParams0);
assertEquals((-1734.2593268), searchParams0.getClaDecay(), 0.01);
assertEquals(2231, searchParams0.getInitConflictBound());
assertEquals((-1734.2593268), searchParams0.getVarDecay(), 0.01);
assertEquals(2743.200093657816, searchParams0.getConflictBoundIncFactor(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(2743.200093657816, double0, 0.01);
assertEquals((-1734.2593268), searchParams0.getClaDecay(), 0.01);
assertEquals(2231, searchParams0.getInitConflictBound());
assertEquals((-1734.2593268), searchParams0.getVarDecay(), 0.01);
assertEquals(2743.200093657816, searchParams0.getConflictBoundIncFactor(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

miniSATRestarts0.onBackjumpToRootLevel();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

Pair pair0 = new Pair();
assertNotNull(pair0);
assertEquals(0, pair0.getBacktrackLevel());

Constr constr0 = pair0.getReason();
assertNull(constr0);
assertEquals(0, pair0.getBacktrackLevel());

miniSATRestarts0.newLearnedClause((Constr) null, (-1));
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
assertNotNull(tabuListDecorator0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals((-1734.2593268), searchParams0.getClaDecay(), 0.01);
assertEquals(2231, searchParams0.getInitConflictBound());
assertEquals((-1734.2593268), searchParams0.getVarDecay(), 0.01);
assertEquals(2743.200093657816, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());

ILogAble iLogAble0 = solver0.getLogger();
assertNotNull(iLogAble0);
assertEquals((-1734.2593268), searchParams0.getClaDecay(), 0.01);
assertEquals(2231, searchParams0.getInitConflictBound());
assertEquals((-1734.2593268), searchParams0.getVarDecay(), 0.01);
assertEquals(2743.200093657816, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver1);
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals((-1734.2593268), searchParams0.getClaDecay(), 0.01);
assertEquals(2231, searchParams0.getInitConflictBound());
assertEquals((-1734.2593268), searchParams0.getVarDecay(), 0.01);
assertEquals(2743.200093657816, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(5, solver0.nVars());

VecInt vecInt0 = (VecInt)solver1.learnedLiterals;
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

solver1.addAtMost(vecInt0, (-1457));

[MASTER] 16:33:08.738 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:08.743 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

Constr constr0 = null;
arminRestarts0.newLearnedClause((Constr) null, (-1));
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, arminRestarts0);
assertNotNull(solver0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

solver0.cancelUntilTrailLevel(2339);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 0);
assertNotNull(tabuListDecorator0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy1 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
assertNotSame(phaseInLastLearnedClauseSelectionStrategy1, phaseInLastLearnedClauseSelectionStrategy0);
assertNotNull(phaseInLastLearnedClauseSelectionStrategy1);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy1.toString());
assertFalse(phaseInLastLearnedClauseSelectionStrategy1.equals((Object)phaseInLastLearnedClauseSelectionStrategy0));

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-572));
assertNotNull(percentLengthLearning0);
assertEquals((-572), percentLengthLearning0.getLimit());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, varOrderHeap0, arminRestarts0, (ILogAble) null);
assertNotNull(solver1);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals((-572), percentLengthLearning0.getLimit());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(phaseInLastLearnedClauseSelectionStrategy0.equals((Object)phaseInLastLearnedClauseSelectionStrategy1));

ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1059.7939754);
assertNotNull(activeLearning0);
assertEquals(1059.7939754, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 32);
assertNotNull(lBDConflictTimer0);
assertEquals(32, lBDConflictTimer0.bound());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

Solver<? extends DataStructureFactory> solver2 = lBDConflictTimer0.getSolver();
assertNotNull(solver2);
assertEquals(32, lBDConflictTimer0.bound());
assertEquals(8, solver2.realNumberOfVariables());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(9, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(8, solver2.nVars());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

cardinalityDataStructureYanMin0.setUnitPropagationListener(solver2);
assertEquals(32, lBDConflictTimer0.bound());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(12, solver2.nVars());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(12, solver2.realNumberOfVariables());
assertEquals(13, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(13, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(14, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, varOrderHeap0, arminRestarts0, (ILogAble) null);
assertNotNull(solver3);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver3.getTimeout());
assertEquals(1, solver3.nVars());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2, solver3.newVar());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.nConstraints());
assertEquals(0, solver3.getPropagationLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1059.7939754, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(phaseInLastLearnedClauseSelectionStrategy0.equals((Object)phaseInLastLearnedClauseSelectionStrategy1));

solver1.primeImplicant();

[MASTER] 16:33:09.826 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:09.828 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int int0 = 18;
PureOrder pureOrder0 = new PureOrder(18);
assertNotNull(pureOrder0);
assertEquals(18, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

double[] doubleArray0 = pureOrder0.getVariableHeuristics();
assertNotNull(doubleArray0);
assertEquals(18, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, eMARestarts0);
assertNotNull(solver0);
assertEquals(18, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());

StatisticsSolver statisticsSolver0 = new StatisticsSolver();
assertNotNull(statisticsSolver0);
assertEquals(0, statisticsSolver0.nVars());
assertEquals(0, statisticsSolver0.realNumberOfVariables());
assertEquals(0, statisticsSolver0.nConstraints());

NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams(0.0, 18);
assertNotNull(searchParams0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(18, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, eMARestarts0);
assertNotNull(solver1);
assertEquals(18, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(18, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());

int int1 = solver1.decisionLevel();
assertEquals(0, int1);
assertEquals(18, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(18, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(int1 == int0);

statisticsSolver0.createBlockingClauseForCurrentModel();

[MASTER] 16:33:10.878 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:10.899 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams(628.569342436376, 360);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(360, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(628.569342436376, searchParams0.getConflictBoundIncFactor(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, glucose21Restarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(360, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(628.569342436376, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getStarts());

solverStats0.incRootSimplifications();
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getStarts());

Map<String, Number> map0 = solverStats0.toMap();
assertNotNull(map0);
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getStarts());
assertEquals(17, map0.size());
assertFalse(map0.isEmpty());

glucose21Restarts0.init(searchParams0, solverStats0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(360, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(628.569342436376, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(1L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getStarts());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

vecInt0.clear();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

IVecInt iVecInt0 = vecInt0.push(390);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertNotNull(iVecInt0);
assertEquals(1, vecInt0.size());
assertEquals(390, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertFalse(iVecInt0.isEmpty());
assertEquals(1, iVecInt0.size());
assertEquals(390, iVecInt0.last());

int int0 = 46;
searchParams0.setVarDecay(1.1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(360, searchParams0.getInitConflictBound());
assertEquals(1.1, searchParams0.getVarDecay(), 0.01);
assertEquals(628.569342436376, searchParams0.getConflictBoundIncFactor(), 0.01);

solver0.enqueue(2651);

[MASTER] 16:33:12.861 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:12.879 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertNotNull(fixedPeriodRestarts0);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, pureOrder0, fixedPeriodRestarts0);
assertNotNull(solver0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
assertNotNull(iVecInt0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, iVecInt0.size());
assertEquals((-2), iVecInt0.last());
assertFalse(iVecInt0.isEmpty());

Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt0);
assertNotNull(constr0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.learnt());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertFalse(constr0.canBePropagatedMultipleTimes());
assertEquals(2, constr0.size());

solver0.learn(constr0);
cardinalityDataStructureYanMax0.setLearner(solver0);
SearchParams searchParams0 = new SearchParams();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, eMARestarts0);
FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning2 = new FixedLengthLearning<MixedDataStructureDanielHT>();
Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning2, mixedDataStructureDanielHT0, pureOrder0, eMARestarts0);
solver2.registerLiteral((-1871));

[MASTER] 16:33:14.462 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:14.484 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

SearchParams searchParams0 = new SearchParams(3677.7420247659547, 46);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(46, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(3677.7420247659547, searchParams0.getConflictBoundIncFactor(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(46, int0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(46, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(3677.7420247659547, searchParams0.getConflictBoundIncFactor(), 0.01);

PureOrder pureOrder1 = new PureOrder(46);
assertNotNull(pureOrder1);
assertEquals(46, pureOrder1.getPeriod());
assertEquals(0, pureOrder1.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
assertFalse(pureOrder1.equals((Object)pureOrder0));

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams1 = new SearchParams((-3842));
assertNotNull(searchParams1);
assertEquals((-3842), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));

lubyRestarts0.init(searchParams1, (SolverStats) null);
assertNotSame(searchParams1, searchParams0);
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-3842), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(searchParams1.equals((Object)searchParams0));

lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams1, pureOrder1, lubyRestarts0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(46, pureOrder1.getPeriod());
assertEquals(0, pureOrder1.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-3842), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(pureOrder1.equals((Object)pureOrder0));
assertFalse(searchParams1.equals((Object)searchParams0));

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams2 = solver0.getSearchParams();
assertNotSame(pureOrder1, pureOrder0);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams1, searchParams2);
assertSame(searchParams2, searchParams1);
assertNotSame(searchParams2, searchParams0);
assertNotNull(searchParams2);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(46, pureOrder1.getPeriod());
assertEquals(0, pureOrder1.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-3842), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals((-3842), searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(pureOrder1.equals((Object)pureOrder0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams0));

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log((String) null);
Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams1, pureOrder0, lubyRestarts0, iLogAble0);
assertNotNull(solver1);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-3842), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(pureOrder0.equals((Object)pureOrder1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(solver1.equals((Object)solver0));

boolean boolean0 = solver1.assume(32);
assertTrue(boolean0);
assertNotSame(pureOrder0, pureOrder1);
assertNotSame(searchParams1, searchParams0);
assertSame(searchParams1, searchParams2);
assertNotSame(solver1, solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-3842), searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.getPropagationLevel());
assertEquals(7, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(8, solver1.newVar());
assertEquals(1, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(pureOrder0.equals((Object)pureOrder1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(solver1.equals((Object)solver0));

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertNotNull(lubyRestarts1);
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts1);
assertNotNull(solver2);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(pureOrder0.equals((Object)pureOrder1));
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

solver2.cancelUntil((-4772));

[MASTER] 16:33:15.646 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 16:33:15.648 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, pureOrder0, eMARestarts0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());

int int0 = 0;
LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver0.fixedSize(0);
assertNotNull(learnedConstraintsDeletionStrategy0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, eMARestarts0);
assertNotNull(solver1);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());

solver1.modelWithInternalVariables();

[MASTER] 16:33:16.878 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 16:33:16.895 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, pureOrder0, eMARestarts0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver0.fixedSize(0);
assertNotNull(learnedConstraintsDeletionStrategy0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, eMARestarts0);
assertNotNull(solver1);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
assertNotNull(fixedLengthLearning1);
assertEquals(0, fixedLengthLearning1.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning1, mixedDataStructureDanielHT0, pureOrder0, eMARestarts0);
assertNotNull(solver2);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());

ILogAble iLogAble0 = solver2.getLogger();
assertNotNull(iLogAble0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());

Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, eMARestarts0, iLogAble0);
assertNotNull(solver3);
assertEquals(1, solver3.realNumberOfVariables());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2, solver3.newVar());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.nConstraints());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(6, solver2.newVar());
assertEquals(5, solver2.nVars());

solver3.removeSubsumedConstr((IConstr) null);

* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
