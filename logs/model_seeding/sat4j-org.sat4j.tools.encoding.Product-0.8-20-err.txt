[MASTER] 05:32:12.815 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.minisat.core.Solver<D> : Type points to itself
[MASTER] 05:32:12.824 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<S> : Type points to itself
[MASTER] 05:32:23.126 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:25.753 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.105 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.275 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.278 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.282 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.405 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.465 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.526 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.634 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.675 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.714 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.767 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.925 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.942 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:26.998 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.029 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.122 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.252 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.549 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.652 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.664 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.693 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.844 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.879 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:27.960 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:28.103 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:28.108 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:28.138 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:28.167 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:28.320 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:28.333 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:28.442 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:28.531 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:30.288 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:30.297 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:31.043 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:32.172 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:33.435 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:33.489 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:33.518 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:33.896 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:34.724 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:35.414 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:36.320 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:36.380 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:38.657 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:50.608 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:50.958 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:52.083 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:52.208 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:53.981 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:54.058 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:54.666 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:54.946 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:54.966 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:55.819 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:56.967 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:57.831 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:32:58.131 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:02.976 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:03.027 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:03.084 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:07.023 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:07.343 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:08.455 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:12.012 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:12.334 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:13.287 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:14.632 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:14.744 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:15.881 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:16.776 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:16.827 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:19.313 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:19.621 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:21.760 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:22.106 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:22.393 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:23.713 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:24.553 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:27.116 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:28.324 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:28.351 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:29.427 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:29.628 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:29.672 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:31.191 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:31.623 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:34.140 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 10), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:34.292 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:34.764 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:34.915 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:35.555 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:35.594 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:36.502 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:36.975 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:38.027 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:39.207 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:40.784 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:40.805 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:42.252 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:42.423 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:42.562 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:43.854 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:44.240 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:46.124 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:46.216 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:46.815 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:47.310 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:47.538 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:50.686 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:51.213 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:51.812 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:52.812 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:53.612 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:33:54.811 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:34:00.815 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:34:00.963 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 1), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:34:04.908 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:34:06.235 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:34:09.757 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:34:12.334 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:35:58.423 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:35:59.043 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:36:02.438 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:279) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:543) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:254) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:160) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1286) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1427) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1577) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 13 common frames omitted
[MASTER] 05:36:12.693 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:36:13.129 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_13_1550550971835/org/sat4j/tools/encoding/Product_13_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_13_1550550971835/org/sat4j/tools/encoding/Product_13_tmp__ESTest_scaffolding.java]]
[MASTER] 05:36:13.130 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:36:13.130 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:36:13.135 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>[] cannot be converted to org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>: 300
[MASTER] 05:36:13.135 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_13_1550550971835/org/sat4j/tools/encoding/Product_13_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 05:36:13.135 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 05:36:13.162 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_13_1550550971835/org/sat4j/tools/encoding/Product_13_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 04:36:12 GMT 2019
4:  */
5: 
6: package org.sat4j.tools.encoding;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.lang.reflect.Array;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.System;
16: import org.evosuite.runtime.ViolatedAssumptionAnswer;
17: import org.junit.runner.RunWith;
18: import org.sat4j.BasicLauncher;
19: import org.sat4j.ExitCode;
20: import org.sat4j.core.ASolverFactory;
21: import org.sat4j.core.VecInt;
22: import org.sat4j.minisat.constraints.CardinalityDataStructure;
23: import org.sat4j.minisat.core.SearchParams;
24: import org.sat4j.minisat.core.Solver;
25: import org.sat4j.minisat.learning.FixedLengthLearning;
26: import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
27: import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
28: import org.sat4j.minisat.orders.RandomWalkDecorator;
29: import org.sat4j.specs.IConstr;
30: import org.sat4j.specs.IVecInt;
31: import org.sat4j.specs.UnitClauseProvider;
32: import org.sat4j.tools.FullClauseSelectorSolver;
33: import org.sat4j.tools.ManyCore;
34: import org.sat4j.tools.encoding.Product;
35: 
36: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
37: public class Product_13_tmp__ESTest extends Product_13_tmp__ESTest_scaffolding {
38: 
39:   @Test(timeout = 4000)
40:   public void test0()  throws Throwable  {
41:       Product product0 = new Product();
42:       assertNotNull(product0);
43:       
44:       int[] intArray0 = new int[7];
45:       Solver<CardinalityDataStructure> solver0 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
46:       doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(solver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
47:       doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(solver0).addClause(any(org.sat4j.specs.IVecInt.class));
48:       doReturn("Call the primeImplicant method first!!!").when(solver0).getLogPrefix();
49:       doReturn(177, 1, 177, 1, 1).when(solver0).nextFreeVarId(anyBoolean());
50:       doReturn(intArray0).when(solver0).primeImplicant();
51:       FullClauseSelectorSolver<Solver<CardinalityDataStructure>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<CardinalityDataStructure>>(solver0, true);
52:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
53:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
54:       assertNotNull(fullClauseSelectorSolver0);
55:       assertEquals(7, intArray0.length);
56:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
57:       
58:       int[] intArray1 = fullClauseSelectorSolver0.primeImplicant();
59:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
60:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
61:       assertNotNull(intArray1);
62:       assertEquals(7, intArray0.length);
63:       assertEquals(7, intArray1.length);
64:       assertSame(intArray0, intArray1);
65:       assertSame(intArray1, intArray0);
66:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
67:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
68:       
69:       String string0 = fullClauseSelectorSolver0.getLogPrefix();
70:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
71:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
72:       assertNotNull(string0);
73:       assertEquals(7, intArray0.length);
74:       assertSame(intArray0, intArray1);
75:       assertEquals("Call the primeImplicant method first!!!", string0);
76:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
77:       
78:       UnitClauseProvider unitClauseProvider0 = UnitClauseProvider.VOID;
79:       assertNotNull(unitClauseProvider0);
80:       
81:       fullClauseSelectorSolver0.setUnitClauseProvider(unitClauseProvider0);
82:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
83:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
84:       assertEquals(7, intArray0.length);
85:       assertSame(intArray0, intArray1);
86:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
87:       
88:       VecInt vecInt0 = new VecInt(177, 1);
89:       assertEquals(1, vecInt0.last());
90:       assertFalse(vecInt0.isEmpty());
91:       assertEquals(177, vecInt0.size());
92:       assertNotNull(vecInt0);
93:       
94:       IConstr iConstr0 = product0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
95:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
96:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
97:       assertEquals(1, vecInt0.last());
98:       assertFalse(vecInt0.isEmpty());
99:       assertEquals(178, vecInt0.size());
100:       assertFalse(iConstr0.canBePropagatedMultipleTimes());
101:       assertEquals(0.0, iConstr0.getActivity(), 0.01);
102:       assertEquals(2, iConstr0.size());
103:       assertNotNull(iConstr0);
104:       assertEquals(7, intArray0.length);
105:       assertSame(intArray0, intArray1);
106:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
107:       
108:       IConstr iConstr1 = product0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
109:       assertFalse(iConstr1.equals((Object)iConstr0));
110:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
111:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
112:       assertEquals(1, vecInt0.last());
113:       assertFalse(vecInt0.isEmpty());
114:       assertEquals(179, vecInt0.size());
115:       assertEquals(0.0, iConstr1.getActivity(), 0.01);
116:       assertEquals(2, iConstr1.size());
117:       assertFalse(iConstr1.canBePropagatedMultipleTimes());
118:       assertNotNull(iConstr1);
119:       assertEquals(7, intArray0.length);
120:       assertSame(intArray0, intArray1);
121:       assertNotSame(iConstr1, iConstr0);
122:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
123:       
124:       IConstr iConstr2 = product0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
125:       assertFalse(iConstr2.equals((Object)iConstr0));
126:       assertFalse(iConstr2.equals((Object)iConstr1));
127:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
128:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
129:       assertEquals(1, vecInt0.last());
130:       assertFalse(vecInt0.isEmpty());
131:       assertEquals(179, vecInt0.size());
132:       assertEquals(0.0, iConstr2.getActivity(), 0.01);
133:       assertEquals(360, iConstr2.size());
134:       assertFalse(iConstr2.canBePropagatedMultipleTimes());
135:       assertNotNull(iConstr2);
136:       assertEquals(7, intArray0.length);
137:       assertSame(intArray0, intArray1);
138:       assertNotSame(iConstr2, iConstr0);
139:       assertNotSame(iConstr2, iConstr1);
140:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
141:       
142:       FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
143:       assertEquals(3, fixedLengthLearning0.getMaxLength());
144:       assertNotNull(fixedLengthLearning0);
145:       
146:       CardinalityDataStructure cardinalityDataStructure0 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
147:       int int0 = (-503);
148:       SearchParams searchParams0 = new SearchParams((-503));
149:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
150:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
151:       assertEquals((-503), searchParams0.getInitConflictBound());
152:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
153:       assertNotNull(searchParams0);
154:       
155:       PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
156:       assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
157:       assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
158:       
159:       LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
160:       assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
161:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
162:       assertNotNull(levelBasedVarOrderHeap0);
163:       
164:       RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
165:       assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
166:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
167:       assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
168:       assertNotNull(randomWalkDecorator0);
169:       
170:       ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
171:       BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
172:       assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
173:       assertFalse(basicLauncher0.isSilent());
174:       assertEquals(0L, basicLauncher0.getBeginTime());
175:       assertNotNull(basicLauncher0);
176:       
177:       System.setCurrentTimeMillis(177);
178:       IConstr iConstr3 = product0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
179:       assertFalse(iConstr3.equals((Object)iConstr1));
180:       assertFalse(iConstr3.equals((Object)iConstr0));
181:       assertFalse(iConstr3.equals((Object)iConstr2));
182:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
183:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
184:       assertEquals(2, iConstr3.size());
185:       assertFalse(iConstr3.canBePropagatedMultipleTimes());
186:       assertEquals(0.0, iConstr3.getActivity(), 0.01);
187:       assertEquals(1, vecInt0.last());
188:       assertFalse(vecInt0.isEmpty());
189:       assertEquals(180, vecInt0.size());
190:       assertNotNull(iConstr3);
191:       assertEquals(7, intArray0.length);
192:       assertSame(intArray0, intArray1);
193:       assertNotSame(iConstr3, iConstr1);
194:       assertNotSame(iConstr3, iConstr0);
195:       assertNotSame(iConstr3, iConstr2);
196:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
197:       
198:       IConstr iConstr4 = product0.addAtMostNonOpt(fullClauseSelectorSolver0, vecInt0, 1);
199:       assertFalse(iConstr4.equals((Object)iConstr2));
200:       assertFalse(iConstr4.equals((Object)iConstr3));
201:       assertFalse(iConstr4.equals((Object)iConstr0));
202:       assertFalse(iConstr4.equals((Object)iConstr1));
203:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
204:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
205:       assertFalse(iConstr4.canBePropagatedMultipleTimes());
206:       assertEquals(0.0, iConstr4.getActivity(), 0.01);
207:       assertEquals(362, iConstr4.size());
208:       assertEquals(1, vecInt0.last());
209:       assertFalse(vecInt0.isEmpty());
210:       assertEquals(180, vecInt0.size());
211:       assertNotNull(iConstr4);
212:       assertEquals(7, intArray0.length);
213:       assertSame(intArray0, intArray1);
214:       assertNotSame(iConstr4, iConstr2);
215:       assertNotSame(iConstr4, iConstr3);
216:       assertNotSame(iConstr4, iConstr0);
217:       assertNotSame(iConstr4, iConstr1);
218:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
219:       
220:       IConstr iConstr5 = product0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
221:       assertFalse(iConstr5.equals((Object)iConstr0));
222:       assertFalse(iConstr5.equals((Object)iConstr4));
223:       assertFalse(iConstr5.equals((Object)iConstr2));
224:       assertFalse(iConstr5.equals((Object)iConstr3));
225:       assertFalse(iConstr5.equals((Object)iConstr1));
226:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
227:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
228:       assertEquals(0.0, iConstr5.getActivity(), 0.01);
229:       assertFalse(iConstr5.canBePropagatedMultipleTimes());
230:       assertEquals(362, iConstr5.size());
231:       assertEquals(1, vecInt0.last());
232:       assertFalse(vecInt0.isEmpty());
233:       assertEquals(180, vecInt0.size());
234:       assertNotNull(iConstr5);
235:       assertEquals(7, intArray0.length);
236:       assertSame(intArray0, intArray1);
237:       assertNotSame(iConstr5, iConstr0);
238:       assertNotSame(iConstr5, iConstr4);
239:       assertNotSame(iConstr5, iConstr2);
240:       assertNotSame(iConstr5, iConstr3);
241:       assertNotSame(iConstr5, iConstr1);
242:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
243:       
244:       IConstr iConstr6 = product0.addAtMostNonOpt(fullClauseSelectorSolver0, vecInt0, 1);
245:       assertFalse(iConstr6.equals((Object)iConstr4));
246:       assertFalse(iConstr6.equals((Object)iConstr1));
247:       assertFalse(iConstr6.equals((Object)iConstr0));
248:       assertFalse(iConstr6.equals((Object)iConstr5));
249:       assertFalse(iConstr6.equals((Object)iConstr3));
250:       assertFalse(iConstr6.equals((Object)iConstr2));
251:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
252:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
253:       assertEquals(1, vecInt0.last());
254:       assertFalse(vecInt0.isEmpty());
255:       assertEquals(180, vecInt0.size());
256:       assertEquals(0.0, iConstr6.getActivity(), 0.01);
257:       assertEquals(362, iConstr6.size());
258:       assertFalse(iConstr6.canBePropagatedMultipleTimes());
259:       assertNotNull(iConstr6);
260:       assertEquals(7, intArray0.length);
261:       assertSame(intArray0, intArray1);
262:       assertNotSame(iConstr6, iConstr4);
263:       assertNotSame(iConstr6, iConstr1);
264:       assertNotSame(iConstr6, iConstr0);
265:       assertNotSame(iConstr6, iConstr5);
266:       assertNotSame(iConstr6, iConstr3);
267:       assertNotSame(iConstr6, iConstr2);
268:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
269:       
270:       IConstr iConstr7 = product0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
271:       assertFalse(iConstr7.equals((Object)iConstr1));
272:       assertFalse(iConstr7.equals((Object)iConstr4));
273:       assertFalse(iConstr7.equals((Object)iConstr2));
274:       assertFalse(iConstr7.equals((Object)iConstr5));
275:       assertFalse(iConstr7.equals((Object)iConstr0));
276:       assertFalse(iConstr7.equals((Object)iConstr3));
277:       assertFalse(iConstr7.equals((Object)iConstr6));
278:       assertFalse(fullClauseSelectorSolver0.isSatisfiable());
279:       assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
280:       assertEquals(1, vecInt0.last());
281:       assertFalse(vecInt0.isEmpty());
282:       assertEquals(180, vecInt0.size());
283:       assertEquals(362, iConstr7.size());
284:       assertEquals(0.0, iConstr7.getActivity(), 0.01);
285:       assertFalse(iConstr7.canBePropagatedMultipleTimes());
286:       assertNotNull(iConstr7);
287:       assertEquals(7, intArray0.length);
288:       assertSame(intArray0, intArray1);
289:       assertNotSame(iConstr7, iConstr1);
290:       assertNotSame(iConstr7, iConstr4);
291:       assertNotSame(iConstr7, iConstr2);
292:       assertNotSame(iConstr7, iConstr5);
293:       assertNotSame(iConstr7, iConstr0);
294:       assertNotSame(iConstr7, iConstr3);
295:       assertNotSame(iConstr7, iConstr6);
296:       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
297:       
298:       boolean boolean0 = true;
299:       Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5);
300:       solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0;
301:   }
302: }
RegularFileObject[/tmp/EvoSuite_13_1550550971835/org/sat4j/tools/encoding/Product_13_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 04:36:12 GMT 2019
5:  */
6: 
7: package org.sat4j.tools.encoding;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class Product_13_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.tools.encoding.Product"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Product_13_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.minisat.core.ConflictTimerAdapter",
84:       "org.sat4j.tools.ManyCore",
85:       "org.sat4j.specs.UnitPropagationListener",
86:       "org.sat4j.tools.SolutionCounter",
87:       "org.sat4j.minisat.core.SizeComparator",
88:       "org.sat4j.tools.FullClauseSelectorSolver",
89:       "org.sat4j.reader.LecteurDimacs",
90:       "org.sat4j.tools.encoding.Product",
91:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
92:       "org.sat4j.tools.SolverDecorator",
93:       "org.sat4j.specs.Propagatable",
94:       "org.sat4j.minisat.core.Counter",
95:       "org.sat4j.minisat.learning.FixedLengthLearning",
96:       "org.sat4j.minisat.core.Undoable",
97:       "org.sat4j.ILauncherMode",
98:       "org.sat4j.minisat.core.Pair",
99:       "org.sat4j.core.EmptyVecInt",
100:       "org.sat4j.ExitCode",
101:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
102:       "org.sat4j.specs.IVec",
103:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
104:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
105:       "org.sat4j.specs.Lbool",
106:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
107:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
108:       "org.sat4j.AbstractLauncher$2",
109:       "org.sat4j.AbstractLauncher$1",
110:       "org.sat4j.specs.IOptimizationProblem",
111:       "org.sat4j.specs.SearchListener",
112:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
113:       "org.sat4j.minisat.core.SimplificationType",
114:       "org.sat4j.tools.Minimal4CardinalityModel",
115:       "org.sat4j.minisat.learning.MiniSATLearning",
116:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
117:       "org.sat4j.minisat.core.SearchParams",
118:       "org.sat4j.tools.AbstractMinimalModel",
119:       "org.sat4j.tools.Minimal4InclusionModel",
120:       "org.sat4j.minisat.core.Heap",
121:       "org.sat4j.specs.ILogAble$1",
122:       "org.sat4j.specs.Constr",
123:       "org.sat4j.specs.TimeoutException",
124:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
125:       "org.sat4j.minisat.core.ConflictTimerContainer",
126:       "org.sat4j.specs.ISolverService",
127:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
128:       "org.sat4j.minisat.core.LearningStrategy",
129:       "org.sat4j.specs.IGroupSolver",
130:       "org.sat4j.opt.MaxSatDecorator",
131:       "org.sat4j.DecisionMode",
132:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
133:       "org.sat4j.specs.IteratorInt",
134:       "org.sat4j.specs.ISolver",
135:       "org.sat4j.minisat.orders.RandomWalkDecorator",
136:       "org.sat4j.specs.UnitClauseProvider$1",
137:       "org.sat4j.minisat.learning.LimitedLearning",
138:       "org.sat4j.minisat.restarts.LubyRestarts",
139:       "org.sat4j.minisat.core.VoidTracing",
140:       "org.sat4j.minisat.core.ActivityListener",
141:       "org.sat4j.minisat.core.GlucoseLCDS",
142:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
143:       "org.sat4j.minisat.core.ILits",
144:       "org.sat4j.BasicLauncher",
145:       "org.sat4j.minisat.constraints.card.AtLeast",
146:       "org.sat4j.specs.ILogAble",
147:       "org.sat4j.specs.ContradictionException",
148:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
149:       "org.sat4j.reader.GroupedCNFReader",
150:       "org.sat4j.core.LiteralsUtils",
151:       "org.sat4j.tools.GateTranslator",
152:       "org.sat4j.minisat.learning.PercentLengthLearning",
153:       "org.sat4j.specs.IConstr",
154:       "org.sat4j.specs.IVecInt",
155:       "org.sat4j.core.ConstrGroup",
156:       "org.sat4j.tools.SolutionFoundListener",
157:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
158:       "org.sat4j.tools.encoding.Policy",
159:       "org.sat4j.OptimizationMode",
160:       "org.sat4j.minisat.core.Learner",
161:       "org.sat4j.tools.DimacsStringSolver",
162:       "org.sat4j.minisat.core.ActivityComparator",
163:       "org.sat4j.specs.IProblem",
164:       "org.sat4j.core.VecInt",
165:       "org.sat4j.minisat.core.Solver",
166:       "org.sat4j.tools.xplain.HighLevelXplain",
167:       "org.sat4j.minisat.constraints.cnf.Lits",
168:       "org.sat4j.minisat.core.Solver$2",
169:       "org.sat4j.specs.UnitClauseProvider",
170:       "org.sat4j.minisat.core.Solver$1",
171:       "org.sat4j.AbstractLauncher",
172:       "org.sat4j.minisat.learning.AbstractLearning",
173:       "org.sat4j.minisat.core.Solver$4",
174:       "org.sat4j.minisat.core.Solver$3",
175:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
176:       "org.sat4j.core.VecInt$1",
177:       "org.sat4j.core.ASolverFactory",
178:       "org.sat4j.reader.DimacsReader",
179:       "org.sat4j.minisat.core.DataStructureFactory",
180:       "org.sat4j.core.Vec",
181:       "org.sat4j.minisat.core.Glucose2LCDS",
182:       "org.sat4j.minisat.core.Solver$6",
183:       "org.sat4j.minisat.core.SolverStats",
184:       "org.sat4j.minisat.core.Solver$8",
185:       "org.sat4j.minisat.core.ConstrActivityListener",
186:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
187:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
188:       "org.sat4j.tools.encoding.Binomial",
189:       "org.sat4j.minisat.restarts.ArminRestarts",
190:       "org.sat4j.tools.GroupClauseSelectorSolver",
191:       "org.sat4j.specs.SearchListenerAdapter",
192:       "org.sat4j.tools.ModelIterator",
193:       "org.sat4j.tools.xplain.Xplain",
194:       "org.sat4j.reader.ParseFormatException",
195:       "org.sat4j.tools.SolutionFoundListener$1",
196:       "org.sat4j.tools.AbstractClauseSelectorSolver",
197:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
198:       "org.sat4j.tools.OutcomeListener",
199:       "org.sat4j.minisat.core.ActivityLCDS",
200:       "org.sat4j.tools.AbstractOutputSolver",
201:       "org.sat4j.minisat.learning.ActiveLearning",
202:       "org.sat4j.MUSLauncher",
203:       "org.sat4j.minisat.orders.VarOrderHeap",
204:       "org.sat4j.LightFactory",
205:       "org.sat4j.minisat.core.ISimplifier",
206:       "org.sat4j.reader.InstanceReader",
207:       "org.sat4j.minisat.core.ConflictTimer",
208:       "org.sat4j.minisat.core.VarActivityListener",
209:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
210:       "org.sat4j.specs.VarMapper",
211:       "org.sat4j.specs.RandomAccessModel",
212:       "org.sat4j.minisat.SolverFactory",
213:       "org.sat4j.minisat.core.LBDConflictTimer",
214:       "org.sat4j.minisat.core.SizeLCDS",
215:       "org.sat4j.minisat.core.RestartStrategy",
216:       "org.sat4j.minisat.core.AgeLCDS",
217:       "org.sat4j.tools.xplain.Explainer",
218:       "org.sat4j.reader.Reader",
219:       "org.sat4j.minisat.core.IOrder",
220:       "org.sat4j.minisat.orders.VariableComparator",
221:       "org.sat4j.minisat.core.ICDCL",
222:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
223:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
224:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
225:     );
226:   } 
227:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
228:     mock(Class.forName("org.sat4j.core.ASolverFactory", false, Product_13_tmp__ESTest_scaffolding.class.getClassLoader()));
229:     mock(Class.forName("org.sat4j.minisat.constraints.CardinalityDataStructure", false, Product_13_tmp__ESTest_scaffolding.class.getClassLoader()));
230:     mock(Class.forName("org.sat4j.minisat.core.Solver", false, Product_13_tmp__ESTest_scaffolding.class.getClassLoader()));
231:   }
232: 
233:   private static void resetClasses() {
234:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Product_13_tmp__ESTest_scaffolding.class.getClassLoader()); 
235: 
236:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
237:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
238:       "org.sat4j.tools.encoding.Product",
239:       "org.sat4j.tools.OptToSatAdapter",
240:       "org.sat4j.minisat.learning.LimitedLearning",
241:       "org.sat4j.minisat.learning.PercentLengthLearning",
242:       "org.sat4j.minisat.learning.AbstractLearning",
243:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
244:       "org.sat4j.minisat.learning.MiniSATLearning",
245:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
246:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
247:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
248:       "org.sat4j.minisat.orders.VarOrderHeap",
249:       "org.sat4j.minisat.orders.SubsetVarOrder",
250:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
251:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
252:       "org.sat4j.minisat.restarts.EMARestarts",
253:       "org.sat4j.core.Vec",
254:       "org.sat4j.minisat.core.ActivityComparator",
255:       "org.sat4j.minisat.core.SolverStats",
256:       "org.sat4j.specs.SearchListenerAdapter",
257:       "org.sat4j.minisat.core.VoidTracing",
258:       "org.sat4j.specs.UnitClauseProvider$1",
259:       "org.sat4j.specs.UnitClauseProvider",
260:       "org.sat4j.minisat.core.Solver$2",
261:       "org.sat4j.minisat.core.Solver$3",
262:       "org.sat4j.minisat.core.Solver$4",
263:       "org.sat4j.minisat.core.Pair",
264:       "org.sat4j.minisat.core.ConflictTimerAdapter",
265:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
266:       "org.sat4j.minisat.core.ActivityLCDS",
267:       "org.sat4j.minisat.core.LBDConflictTimer",
268:       "org.sat4j.minisat.core.GlucoseLCDS",
269:       "org.sat4j.minisat.core.Glucose2LCDS",
270:       "org.sat4j.minisat.core.AgeLCDS",
271:       "org.sat4j.minisat.core.SizeComparator",
272:       "org.sat4j.minisat.core.SizeLCDS",
273:       "org.sat4j.minisat.core.Solver$8",
274:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
275:       "org.sat4j.tools.ManyCore",
276:       "org.sat4j.minisat.core.Counter",
277:       "org.sat4j.tools.StatisticsSolver",
278:       "org.sat4j.tools.AbstractClauseSelectorSolver",
279:       "org.sat4j.tools.FullClauseSelectorSolver",
280:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
281:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
282:       "org.sat4j.minisat.restarts.LubyRestarts",
283:       "org.sat4j.tools.GateTranslator",
284:       "org.sat4j.core.VecInt$1",
285:       "org.sat4j.core.ConstrGroup",
286:       "org.sat4j.tools.encoding.Binomial",
287:       "org.sat4j.tools.DimacsStringSolver",
288:       "org.sat4j.LightFactory",
289:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
290:       "org.sat4j.minisat.constraints.cnf.Lits",
291:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
292:       "org.sat4j.minisat.restarts.ArminRestarts",
293:       "org.sat4j.minisat.learning.ActiveLearning",
294:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
295:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
296:       "org.sat4j.tools.AbstractMinimalModel",
297:       "org.sat4j.tools.Minimal4InclusionModel",
298:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
299:       "org.sat4j.minisat.orders.PureOrder",
300:       "org.sat4j.minisat.orders.TabuListDecorator",
301:       "org.sat4j.tools.GroupClauseSelectorSolver",
302:       "org.sat4j.tools.NegationDecorator",
303:       "org.sat4j.tools.Minimal4CardinalityModel",
304:       "org.sat4j.tools.ModelIterator",
305:       "org.sat4j.tools.SubModelIterator",
306:       "org.sat4j.tools.SolutionCounter",
307:       "org.sat4j.specs.Lbool",
308:       "org.sat4j.core.EmptyVecInt$1",
309:       "org.sat4j.minisat.core.Heap",
310:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
311:       "org.sat4j.minisat.core.ConflictTimerContainer",
312:       "org.sat4j.minisat.core.Solver$6",
313:       "org.sat4j.minisat.learning.FixedLengthLearning",
314:       "org.sat4j.tools.LexicoDecorator",
315:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
316:       "org.sat4j.minisat.orders.RandomWalkDecorator",
317:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
318:       "org.sat4j.minisat.orders.NaturalStaticOrder",
319:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
320:       "org.sat4j.core.LiteralsUtils",
321:       "org.sat4j.tools.encoding.Sequential",
322:       "org.sat4j.tools.encoding.Binary",
323:       "org.sat4j.tools.encoding.Commander",
324:       "org.sat4j.tools.encoding.Ladder",
325:       "org.sat4j.tools.encoding.Policy",
326:       "org.sat4j.AbstractLauncher$1",
327:       "org.sat4j.DecisionMode",
328:       "org.sat4j.ExitCode",
329:       "org.sat4j.OptimizationMode",
330:       "org.sat4j.ILauncherMode",
331:       "org.sat4j.minisat.restarts.MiniSATRestarts",
332:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
333:       "org.sat4j.minisat.constraints.card.AtLeast",
334:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
335:       "org.sat4j.MUSLauncher",
336:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
337:       "org.sat4j.tools.encoding.Policy$1",
338:       "org.sat4j.tools.SingleSolutionDetector",
339:       "org.sat4j.tools.CheckMUSSolutionListener",
340:       "org.sat4j.tools.ModelIteratorToSATAdapter",
341:       "org.sat4j.minisat.constraints.card.MinWatchCard",
342:       "org.sat4j.specs.ContradictionException",
343:       "org.sat4j.specs.FakeConstr",
344:       "org.sat4j.minisat.constraints.cnf.UnitClause",
345:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
346:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
347:       "org.sat4j.minisat.constraints.cnf.WLClause",
348:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
349:       "org.sat4j.core.ReadOnlyVecInt",
350:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
351:       "org.sat4j.minisat.constraints.xor.Xor",
352:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
353:       "org.sat4j.minisat.constraints.cnf.Clauses",
354:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
355:       "org.sat4j.minisat.restarts.NoRestarts",
356:       "org.sat4j.minisat.restarts.Glucose21Restarts",
357:       "org.sat4j.minisat.core.CircularBuffer",
358:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
359:       "org.sat4j.minisat.constraints.cnf.LearntBinaryClause",
360:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
361:       "org.sat4j.minisat.constraints.cnf.HTClause",
362:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
363:       "org.sat4j.tools.DotSearchTracing",
364:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
365:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
366:       "org.sat4j.tools.IVisualizationTool",
367:       "org.sat4j.core.EmptyVecInt",
368:       "org.sat4j.core.VecInt",
369:       "org.sat4j.minisat.core.Solver$1",
370:       "org.sat4j.minisat.core.Solver",
371:       "org.sat4j.tools.SolverDecorator",
372:       "org.sat4j.minisat.core.SearchParams",
373:       "org.sat4j.specs.ILogAble$1",
374:       "org.sat4j.specs.ILogAble",
375:       "org.sat4j.tools.SolutionFoundListener$1",
376:       "org.sat4j.tools.SolutionFoundListener",
377:       "org.sat4j.core.ASolverFactory",
378:       "org.sat4j.AbstractLauncher",
379:       "org.sat4j.BasicLauncher",
380:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
381:       "org.sat4j.tools.AbstractOutputSolver",
382:       "org.sat4j.specs.TimeoutException",
383:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
384:       "org.sat4j.opt.MaxSatDecorator"
385:     );
386:   }
387: }

[MASTER] 05:36:13.210 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Product product0 = new Product();
assertNotNull(product0);

int[] intArray0 = new int[7];
Solver<CardinalityDataStructure> solver0 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(solver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(solver0).addClause(any(org.sat4j.specs.IVecInt.class));
doReturn("Call the primeImplicant method first!!!").when(solver0).getLogPrefix();
doReturn(177, 1, 177, 1, 1).when(solver0).nextFreeVarId(anyBoolean());
doReturn(intArray0).when(solver0).primeImplicant();
FullClauseSelectorSolver<Solver<CardinalityDataStructure>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<CardinalityDataStructure>>(solver0, true);
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertNotNull(fullClauseSelectorSolver0);
assertEquals(7, intArray0.length);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

int[] intArray1 = fullClauseSelectorSolver0.primeImplicant();
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertNotNull(intArray1);
assertEquals(7, intArray0.length);
assertEquals(7, intArray1.length);
assertSame(intArray0, intArray1);
assertSame(intArray1, intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);

String string0 = fullClauseSelectorSolver0.getLogPrefix();
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertNotNull(string0);
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertEquals("Call the primeImplicant method first!!!", string0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

UnitClauseProvider unitClauseProvider0 = UnitClauseProvider.VOID;
assertNotNull(unitClauseProvider0);

fullClauseSelectorSolver0.setUnitClauseProvider(unitClauseProvider0);
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

VecInt vecInt0 = new VecInt(177, 1);
assertEquals(1, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(177, vecInt0.size());
assertNotNull(vecInt0);

IConstr iConstr0 = product0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(1, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(178, vecInt0.size());
assertFalse(iConstr0.canBePropagatedMultipleTimes());
assertEquals(0.0, iConstr0.getActivity(), 0.01);
assertEquals(2, iConstr0.size());
assertNotNull(iConstr0);
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

IConstr iConstr1 = product0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
assertFalse(iConstr1.equals((Object)iConstr0));
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(1, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(179, vecInt0.size());
assertEquals(0.0, iConstr1.getActivity(), 0.01);
assertEquals(2, iConstr1.size());
assertFalse(iConstr1.canBePropagatedMultipleTimes());
assertNotNull(iConstr1);
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertNotSame(iConstr1, iConstr0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

IConstr iConstr2 = product0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
assertFalse(iConstr2.equals((Object)iConstr0));
assertFalse(iConstr2.equals((Object)iConstr1));
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(1, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(179, vecInt0.size());
assertEquals(0.0, iConstr2.getActivity(), 0.01);
assertEquals(360, iConstr2.size());
assertFalse(iConstr2.canBePropagatedMultipleTimes());
assertNotNull(iConstr2);
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertNotSame(iConstr2, iConstr0);
assertNotSame(iConstr2, iConstr1);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
int int0 = (-503);
SearchParams searchParams0 = new SearchParams((-503));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-503), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertNotNull(basicLauncher0);

System.setCurrentTimeMillis(177);
IConstr iConstr3 = product0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
assertFalse(iConstr3.equals((Object)iConstr1));
assertFalse(iConstr3.equals((Object)iConstr0));
assertFalse(iConstr3.equals((Object)iConstr2));
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(2, iConstr3.size());
assertFalse(iConstr3.canBePropagatedMultipleTimes());
assertEquals(0.0, iConstr3.getActivity(), 0.01);
assertEquals(1, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(180, vecInt0.size());
assertNotNull(iConstr3);
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertNotSame(iConstr3, iConstr1);
assertNotSame(iConstr3, iConstr0);
assertNotSame(iConstr3, iConstr2);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

IConstr iConstr4 = product0.addAtMostNonOpt(fullClauseSelectorSolver0, vecInt0, 1);
assertFalse(iConstr4.equals((Object)iConstr2));
assertFalse(iConstr4.equals((Object)iConstr3));
assertFalse(iConstr4.equals((Object)iConstr0));
assertFalse(iConstr4.equals((Object)iConstr1));
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertFalse(iConstr4.canBePropagatedMultipleTimes());
assertEquals(0.0, iConstr4.getActivity(), 0.01);
assertEquals(362, iConstr4.size());
assertEquals(1, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(180, vecInt0.size());
assertNotNull(iConstr4);
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertNotSame(iConstr4, iConstr2);
assertNotSame(iConstr4, iConstr3);
assertNotSame(iConstr4, iConstr0);
assertNotSame(iConstr4, iConstr1);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

IConstr iConstr5 = product0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
assertFalse(iConstr5.equals((Object)iConstr0));
assertFalse(iConstr5.equals((Object)iConstr4));
assertFalse(iConstr5.equals((Object)iConstr2));
assertFalse(iConstr5.equals((Object)iConstr3));
assertFalse(iConstr5.equals((Object)iConstr1));
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(0.0, iConstr5.getActivity(), 0.01);
assertFalse(iConstr5.canBePropagatedMultipleTimes());
assertEquals(362, iConstr5.size());
assertEquals(1, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(180, vecInt0.size());
assertNotNull(iConstr5);
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertNotSame(iConstr5, iConstr0);
assertNotSame(iConstr5, iConstr4);
assertNotSame(iConstr5, iConstr2);
assertNotSame(iConstr5, iConstr3);
assertNotSame(iConstr5, iConstr1);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

IConstr iConstr6 = product0.addAtMostNonOpt(fullClauseSelectorSolver0, vecInt0, 1);
assertFalse(iConstr6.equals((Object)iConstr4));
assertFalse(iConstr6.equals((Object)iConstr1));
assertFalse(iConstr6.equals((Object)iConstr0));
assertFalse(iConstr6.equals((Object)iConstr5));
assertFalse(iConstr6.equals((Object)iConstr3));
assertFalse(iConstr6.equals((Object)iConstr2));
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(1, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(180, vecInt0.size());
assertEquals(0.0, iConstr6.getActivity(), 0.01);
assertEquals(362, iConstr6.size());
assertFalse(iConstr6.canBePropagatedMultipleTimes());
assertNotNull(iConstr6);
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertNotSame(iConstr6, iConstr4);
assertNotSame(iConstr6, iConstr1);
assertNotSame(iConstr6, iConstr0);
assertNotSame(iConstr6, iConstr5);
assertNotSame(iConstr6, iConstr3);
assertNotSame(iConstr6, iConstr2);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

IConstr iConstr7 = product0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
assertFalse(iConstr7.equals((Object)iConstr1));
assertFalse(iConstr7.equals((Object)iConstr4));
assertFalse(iConstr7.equals((Object)iConstr2));
assertFalse(iConstr7.equals((Object)iConstr5));
assertFalse(iConstr7.equals((Object)iConstr0));
assertFalse(iConstr7.equals((Object)iConstr3));
assertFalse(iConstr7.equals((Object)iConstr6));
assertFalse(fullClauseSelectorSolver0.isSatisfiable());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(1, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(180, vecInt0.size());
assertEquals(362, iConstr7.size());
assertEquals(0.0, iConstr7.getActivity(), 0.01);
assertFalse(iConstr7.canBePropagatedMultipleTimes());
assertNotNull(iConstr7);
assertEquals(7, intArray0.length);
assertSame(intArray0, intArray1);
assertNotSame(iConstr7, iConstr1);
assertNotSame(iConstr7, iConstr4);
assertNotSame(iConstr7, iConstr2);
assertNotSame(iConstr7, iConstr5);
assertNotSame(iConstr7, iConstr0);
assertNotSame(iConstr7, iConstr3);
assertNotSame(iConstr7, iConstr6);
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);

boolean boolean0 = true;
Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5);
solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0;

[MASTER] 05:36:15.651 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.tools.encoding.Product
[MASTER] 05:36:15.713 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_27_1550550975630/org/sat4j/tools/encoding/Product_27_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_27_1550550975630/org/sat4j/tools/encoding/Product_27_tmp__ESTest_scaffolding.java]]
[MASTER] 05:36:15.713 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:36:15.713 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:36:15.713 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>[] cannot be converted to org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>: 38
[MASTER] 05:36:15.714 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_27_1550550975630/org/sat4j/tools/encoding/Product_27_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 05:36:15.714 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 05:36:15.714 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_27_1550550975630/org/sat4j/tools/encoding/Product_27_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 04:36:15 GMT 2019
4:  */
5: 
6: package org.sat4j.tools.encoding;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.io.File;
12: import java.io.PrintWriter;
13: import java.lang.reflect.Array;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.mock.java.io.MockPrintWriter;
17: import org.junit.runner.RunWith;
18: import org.sat4j.LightFactory;
19: import org.sat4j.minisat.constraints.CardinalityDataStructure;
20: import org.sat4j.minisat.core.Solver;
21: import org.sat4j.opt.MaxSatDecorator;
22: import org.sat4j.specs.ISolver;
23: import org.sat4j.specs.IVecInt;
24: import org.sat4j.tools.ManyCore;
25: import org.sat4j.tools.SolutionCounter;
26: import org.sat4j.tools.encoding.Product;
27: 
28: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
29: public class Product_27_tmp__ESTest extends Product_27_tmp__ESTest_scaffolding {
30: 
31:   @Test(timeout = 4000)
32:   public void test0()  throws Throwable  {
33:       Product product0 = new Product();
34:       assertNotNull(product0);
35:       
36:       boolean boolean0 = true;
37:       Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5);
38:       solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0;
39:   }
40: }
RegularFileObject[/tmp/EvoSuite_27_1550550975630/org/sat4j/tools/encoding/Product_27_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 04:36:15 GMT 2019
5:  */
6: 
7: package org.sat4j.tools.encoding;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Product_27_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.tools.encoding.Product"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Product_27_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.minisat.core.ConflictTimerAdapter",
82:       "org.sat4j.tools.ManyCore",
83:       "org.sat4j.specs.UnitPropagationListener",
84:       "org.sat4j.tools.SolutionCounter",
85:       "org.sat4j.minisat.core.SizeComparator",
86:       "org.sat4j.tools.FullClauseSelectorSolver",
87:       "org.sat4j.reader.LecteurDimacs",
88:       "org.sat4j.tools.encoding.Product",
89:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
90:       "org.sat4j.tools.SolverDecorator",
91:       "org.sat4j.specs.Propagatable",
92:       "org.sat4j.minisat.core.Counter",
93:       "org.sat4j.minisat.learning.FixedLengthLearning",
94:       "org.sat4j.minisat.core.Undoable",
95:       "org.sat4j.ILauncherMode",
96:       "org.sat4j.minisat.core.Pair",
97:       "org.sat4j.core.EmptyVecInt",
98:       "org.sat4j.ExitCode",
99:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
100:       "org.sat4j.specs.IVec",
101:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
102:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
103:       "org.sat4j.specs.Lbool",
104:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
105:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
106:       "org.sat4j.AbstractLauncher$2",
107:       "org.sat4j.AbstractLauncher$1",
108:       "org.sat4j.specs.IOptimizationProblem",
109:       "org.sat4j.specs.SearchListener",
110:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
111:       "org.sat4j.minisat.core.SimplificationType",
112:       "org.sat4j.tools.Minimal4CardinalityModel",
113:       "org.sat4j.minisat.learning.MiniSATLearning",
114:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
115:       "org.sat4j.minisat.core.SearchParams",
116:       "org.sat4j.tools.AbstractMinimalModel",
117:       "org.sat4j.tools.Minimal4InclusionModel",
118:       "org.sat4j.minisat.core.Heap",
119:       "org.sat4j.specs.ILogAble$1",
120:       "org.sat4j.specs.Constr",
121:       "org.sat4j.specs.TimeoutException",
122:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
123:       "org.sat4j.minisat.core.ConflictTimerContainer",
124:       "org.sat4j.specs.ISolverService",
125:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
126:       "org.sat4j.minisat.core.LearningStrategy",
127:       "org.sat4j.specs.IGroupSolver",
128:       "org.sat4j.opt.MaxSatDecorator",
129:       "org.sat4j.DecisionMode",
130:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
131:       "org.sat4j.specs.IteratorInt",
132:       "org.sat4j.specs.ISolver",
133:       "org.sat4j.minisat.orders.RandomWalkDecorator",
134:       "org.sat4j.specs.UnitClauseProvider$1",
135:       "org.sat4j.minisat.learning.LimitedLearning",
136:       "org.sat4j.minisat.restarts.LubyRestarts",
137:       "org.sat4j.minisat.core.VoidTracing",
138:       "org.sat4j.minisat.core.ActivityListener",
139:       "org.sat4j.minisat.core.GlucoseLCDS",
140:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
141:       "org.sat4j.minisat.core.ILits",
142:       "org.sat4j.BasicLauncher",
143:       "org.sat4j.minisat.constraints.card.AtLeast",
144:       "org.sat4j.specs.ILogAble",
145:       "org.sat4j.specs.ContradictionException",
146:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
147:       "org.sat4j.reader.GroupedCNFReader",
148:       "org.sat4j.core.LiteralsUtils",
149:       "org.sat4j.tools.GateTranslator",
150:       "org.sat4j.minisat.learning.PercentLengthLearning",
151:       "org.sat4j.specs.IConstr",
152:       "org.sat4j.specs.IVecInt",
153:       "org.sat4j.core.ConstrGroup",
154:       "org.sat4j.tools.SolutionFoundListener",
155:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
156:       "org.sat4j.tools.encoding.Policy",
157:       "org.sat4j.OptimizationMode",
158:       "org.sat4j.minisat.core.Learner",
159:       "org.sat4j.tools.DimacsStringSolver",
160:       "org.sat4j.minisat.core.ActivityComparator",
161:       "org.sat4j.specs.IProblem",
162:       "org.sat4j.core.VecInt",
163:       "org.sat4j.minisat.core.Solver",
164:       "org.sat4j.tools.xplain.HighLevelXplain",
165:       "org.sat4j.minisat.constraints.cnf.Lits",
166:       "org.sat4j.minisat.core.Solver$2",
167:       "org.sat4j.specs.UnitClauseProvider",
168:       "org.sat4j.minisat.core.Solver$1",
169:       "org.sat4j.AbstractLauncher",
170:       "org.sat4j.minisat.learning.AbstractLearning",
171:       "org.sat4j.minisat.core.Solver$4",
172:       "org.sat4j.minisat.core.Solver$3",
173:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
174:       "org.sat4j.core.VecInt$1",
175:       "org.sat4j.core.ASolverFactory",
176:       "org.sat4j.reader.DimacsReader",
177:       "org.sat4j.minisat.core.DataStructureFactory",
178:       "org.sat4j.core.Vec",
179:       "org.sat4j.minisat.core.Glucose2LCDS",
180:       "org.sat4j.minisat.core.Solver$6",
181:       "org.sat4j.minisat.core.SolverStats",
182:       "org.sat4j.minisat.core.Solver$8",
183:       "org.sat4j.minisat.core.ConstrActivityListener",
184:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
185:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
186:       "org.sat4j.tools.encoding.Binomial",
187:       "org.sat4j.minisat.restarts.ArminRestarts",
188:       "org.sat4j.tools.GroupClauseSelectorSolver",
189:       "org.sat4j.specs.SearchListenerAdapter",
190:       "org.sat4j.tools.ModelIterator",
191:       "org.sat4j.tools.xplain.Xplain",
192:       "org.sat4j.reader.ParseFormatException",
193:       "org.sat4j.tools.SolutionFoundListener$1",
194:       "org.sat4j.tools.AbstractClauseSelectorSolver",
195:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
196:       "org.sat4j.tools.OutcomeListener",
197:       "org.sat4j.minisat.core.ActivityLCDS",
198:       "org.sat4j.tools.AbstractOutputSolver",
199:       "org.sat4j.minisat.learning.ActiveLearning",
200:       "org.sat4j.MUSLauncher",
201:       "org.sat4j.minisat.orders.VarOrderHeap",
202:       "org.sat4j.LightFactory",
203:       "org.sat4j.minisat.core.ISimplifier",
204:       "org.sat4j.reader.InstanceReader",
205:       "org.sat4j.minisat.core.ConflictTimer",
206:       "org.sat4j.minisat.core.VarActivityListener",
207:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
208:       "org.sat4j.specs.VarMapper",
209:       "org.sat4j.specs.RandomAccessModel",
210:       "org.sat4j.minisat.SolverFactory",
211:       "org.sat4j.minisat.core.LBDConflictTimer",
212:       "org.sat4j.minisat.core.SizeLCDS",
213:       "org.sat4j.minisat.core.RestartStrategy",
214:       "org.sat4j.minisat.core.AgeLCDS",
215:       "org.sat4j.tools.xplain.Explainer",
216:       "org.sat4j.reader.Reader",
217:       "org.sat4j.minisat.core.IOrder",
218:       "org.sat4j.minisat.orders.VariableComparator",
219:       "org.sat4j.minisat.core.ICDCL",
220:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
221:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
222:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
223:     );
224:   } 
225: 
226:   private static void resetClasses() {
227:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Product_27_tmp__ESTest_scaffolding.class.getClassLoader()); 
228: 
229:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
230:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
231:       "org.sat4j.tools.encoding.Product",
232:       "org.sat4j.tools.OptToSatAdapter",
233:       "org.sat4j.minisat.learning.LimitedLearning",
234:       "org.sat4j.minisat.learning.PercentLengthLearning",
235:       "org.sat4j.minisat.learning.AbstractLearning",
236:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
237:       "org.sat4j.minisat.learning.MiniSATLearning",
238:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
239:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
240:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
241:       "org.sat4j.minisat.orders.VarOrderHeap",
242:       "org.sat4j.minisat.orders.SubsetVarOrder",
243:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
244:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
245:       "org.sat4j.minisat.restarts.EMARestarts",
246:       "org.sat4j.core.Vec",
247:       "org.sat4j.minisat.core.ActivityComparator",
248:       "org.sat4j.minisat.core.SolverStats",
249:       "org.sat4j.specs.SearchListenerAdapter",
250:       "org.sat4j.minisat.core.VoidTracing",
251:       "org.sat4j.specs.UnitClauseProvider$1",
252:       "org.sat4j.specs.UnitClauseProvider",
253:       "org.sat4j.minisat.core.Solver$2",
254:       "org.sat4j.minisat.core.Solver$3",
255:       "org.sat4j.minisat.core.Solver$4",
256:       "org.sat4j.minisat.core.Pair",
257:       "org.sat4j.minisat.core.ConflictTimerAdapter",
258:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
259:       "org.sat4j.minisat.core.ActivityLCDS",
260:       "org.sat4j.minisat.core.LBDConflictTimer",
261:       "org.sat4j.minisat.core.GlucoseLCDS",
262:       "org.sat4j.minisat.core.Glucose2LCDS",
263:       "org.sat4j.minisat.core.AgeLCDS",
264:       "org.sat4j.minisat.core.SizeComparator",
265:       "org.sat4j.minisat.core.SizeLCDS",
266:       "org.sat4j.minisat.core.Solver$8",
267:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
268:       "org.sat4j.tools.ManyCore",
269:       "org.sat4j.minisat.core.Counter",
270:       "org.sat4j.tools.StatisticsSolver",
271:       "org.sat4j.tools.AbstractClauseSelectorSolver",
272:       "org.sat4j.tools.FullClauseSelectorSolver",
273:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
274:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
275:       "org.sat4j.minisat.restarts.LubyRestarts",
276:       "org.sat4j.tools.GateTranslator",
277:       "org.sat4j.core.VecInt$1",
278:       "org.sat4j.core.ConstrGroup",
279:       "org.sat4j.tools.encoding.Binomial",
280:       "org.sat4j.tools.DimacsStringSolver",
281:       "org.sat4j.LightFactory",
282:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
283:       "org.sat4j.minisat.constraints.cnf.Lits",
284:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
285:       "org.sat4j.minisat.restarts.ArminRestarts",
286:       "org.sat4j.minisat.learning.ActiveLearning",
287:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
288:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
289:       "org.sat4j.tools.AbstractMinimalModel",
290:       "org.sat4j.tools.Minimal4InclusionModel",
291:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
292:       "org.sat4j.minisat.orders.PureOrder",
293:       "org.sat4j.minisat.orders.TabuListDecorator",
294:       "org.sat4j.tools.GroupClauseSelectorSolver",
295:       "org.sat4j.tools.NegationDecorator",
296:       "org.sat4j.tools.Minimal4CardinalityModel",
297:       "org.sat4j.tools.ModelIterator",
298:       "org.sat4j.tools.SubModelIterator",
299:       "org.sat4j.tools.SolutionCounter",
300:       "org.sat4j.specs.Lbool",
301:       "org.sat4j.core.EmptyVecInt$1",
302:       "org.sat4j.minisat.core.Heap",
303:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
304:       "org.sat4j.minisat.core.ConflictTimerContainer",
305:       "org.sat4j.minisat.core.Solver$6",
306:       "org.sat4j.minisat.learning.FixedLengthLearning",
307:       "org.sat4j.tools.LexicoDecorator",
308:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
309:       "org.sat4j.minisat.orders.RandomWalkDecorator",
310:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
311:       "org.sat4j.minisat.orders.NaturalStaticOrder",
312:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
313:       "org.sat4j.core.LiteralsUtils",
314:       "org.sat4j.tools.encoding.Sequential",
315:       "org.sat4j.tools.encoding.Binary",
316:       "org.sat4j.tools.encoding.Commander",
317:       "org.sat4j.tools.encoding.Ladder",
318:       "org.sat4j.tools.encoding.Policy",
319:       "org.sat4j.AbstractLauncher$1",
320:       "org.sat4j.DecisionMode",
321:       "org.sat4j.ExitCode",
322:       "org.sat4j.OptimizationMode",
323:       "org.sat4j.ILauncherMode",
324:       "org.sat4j.minisat.restarts.MiniSATRestarts",
325:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
326:       "org.sat4j.minisat.constraints.card.AtLeast",
327:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
328:       "org.sat4j.MUSLauncher",
329:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
330:       "org.sat4j.tools.encoding.Policy$1",
331:       "org.sat4j.tools.SingleSolutionDetector",
332:       "org.sat4j.tools.CheckMUSSolutionListener",
333:       "org.sat4j.tools.ModelIteratorToSATAdapter",
334:       "org.sat4j.minisat.constraints.card.MinWatchCard",
335:       "org.sat4j.specs.ContradictionException",
336:       "org.sat4j.specs.FakeConstr",
337:       "org.sat4j.minisat.constraints.cnf.UnitClause",
338:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
339:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
340:       "org.sat4j.minisat.constraints.cnf.WLClause",
341:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
342:       "org.sat4j.core.ReadOnlyVecInt",
343:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
344:       "org.sat4j.minisat.constraints.xor.Xor",
345:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
346:       "org.sat4j.minisat.constraints.cnf.Clauses",
347:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
348:       "org.sat4j.minisat.restarts.NoRestarts",
349:       "org.sat4j.minisat.restarts.Glucose21Restarts",
350:       "org.sat4j.minisat.core.CircularBuffer",
351:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
352:       "org.sat4j.minisat.constraints.cnf.LearntBinaryClause",
353:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
354:       "org.sat4j.minisat.constraints.cnf.HTClause",
355:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
356:       "org.sat4j.tools.DotSearchTracing",
357:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
358:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
359:       "org.sat4j.tools.IVisualizationTool",
360:       "org.sat4j.core.EmptyVecInt",
361:       "org.sat4j.core.VecInt",
362:       "org.sat4j.minisat.core.Solver$1",
363:       "org.sat4j.minisat.core.Solver",
364:       "org.sat4j.tools.SolverDecorator",
365:       "org.sat4j.minisat.core.SearchParams",
366:       "org.sat4j.specs.ILogAble$1",
367:       "org.sat4j.specs.ILogAble",
368:       "org.sat4j.tools.SolutionFoundListener$1",
369:       "org.sat4j.tools.SolutionFoundListener",
370:       "org.sat4j.core.ASolverFactory",
371:       "org.sat4j.AbstractLauncher",
372:       "org.sat4j.BasicLauncher",
373:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
374:       "org.sat4j.tools.AbstractOutputSolver",
375:       "org.sat4j.specs.TimeoutException",
376:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
377:       "org.sat4j.opt.MaxSatDecorator"
378:     );
379:   }
380: }

[MASTER] 05:36:15.715 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Product product0 = new Product();
assertNotNull(product0);

boolean boolean0 = true;
Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 5);
solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0;

[MASTER] 05:37:04.128 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: org.sat4j.tools.encoding.Product with seed 1550550709858. Configuration id : null
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectTestGenerationResult(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:164) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1580) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 9 common frames omitted
