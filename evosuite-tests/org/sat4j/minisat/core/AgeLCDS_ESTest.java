/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:11:37 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.AgeLCDS;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AgeLCDS_ESTest extends AgeLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = ageLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArminRestarts arminRestarts0 = new ArminRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, arminRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>();
      // Undeclared exception!
      try { 
        ageLCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.AgeLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(5000);
      PureOrder pureOrder0 = new PureOrder((-2482));
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, lubyRestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, lubyRestarts0);
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
      solver0.verbose = true;
      IVec<Constr> iVec0 = solver1.learnts;
      ageLCDS0.reduce(iVec0);
      assertTrue(iVec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(5000);
      PureOrder pureOrder0 = new PureOrder((-2482));
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, lubyRestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, lubyRestarts0);
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
      IVec<Constr> iVec0 = solver1.learnts;
      ageLCDS0.reduce(iVec0);
      assertEquals(0, iVec0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, lubyRestarts0);
      ConflictTimer conflictTimer0 = ageLCDS0.getTimer();
      assertSame(lubyRestarts0, conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, lubyRestarts0);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint(vecInt0, 5000);
      ageLCDS0.onPropagation(constr0);
      assertFalse(constr0.simplify());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(1626.2537, (-1));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, lubyRestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, lubyRestarts0);
      ageLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      ConflictTimer conflictTimer0 = mock(ConflictTimer.class, new ViolatedAssumptionAnswer());
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, conflictTimer0);
      ageLCDS0.onClauseLearning((Constr) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(5000);
      PureOrder pureOrder0 = new PureOrder((-2482));
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, lubyRestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, lubyRestarts0);
      String string0 = ageLCDS0.toString();
      assertEquals("Age based learned constraints deletion strategy with timer luby style (SATZ_rand, TiniSAT) restarts strategy with factor 0", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, (ConflictTimer) null);
      ageLCDS0.onConflictAnalysis((Constr) null);
  }
}
