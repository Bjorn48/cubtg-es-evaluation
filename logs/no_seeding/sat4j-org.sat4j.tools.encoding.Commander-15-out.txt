* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.tools.encoding.Commander
* Starting Client-0
* Connecting to master process on port 8880
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.tools.encoding.Commander
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 234
* Using seed 1550436358431
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initialsss Number of Goals in DynMOSA = 61 / 234
[Progress:>                             0%] [Cov:=======================>           68%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8775510204081632
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8636363636363636
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8740157480314961
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.16666666666666666
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18181818181818182
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 294
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:=======================>           68%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8775510204081632
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8636363636363636
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8740157480314961
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.16666666666666666
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18181818181818182
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 401
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:=============================>     83%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9763779527559056
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18181818181818182
[Progress:>                             0%] [Cov:=============================>     83%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 501
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 604
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[Progress:>                             0%] [Cov:=============================>     83%]Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9763779527559056
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18181818181818182
[Progress:>                             0%] [Cov:=============================>     83%]* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 677
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9763779527559056
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18181818181818182
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9763779527559056
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18181818181818182

* Search finished after 122s and 5 generations, 8019 statements, best individual has fitness: 24.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9763779527559056
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18181818181818182
* Minimizing test suite
[MASTER] 21:49:29.604 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 14
* Number of covered goals: 14
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 98%
* Total number of goals: 127
* Number of covered goals: 124
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 6
* Number of covered goals: 3
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 18%
* Total number of goals: 22
* Number of covered goals: 4
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9763779527559056
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18181818181818182
* Generated 28 tests with total length 551
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:50:19.068 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8177833333333333% of time used, but only 5/28 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 25%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9763779527559056
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18181818181818182
* Compiling and checking tests
[MASTER] 21:50:54.144 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 21:50:54.159 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Commander commander0 = new Commander();
String[] stringArray0 = new String[1];
stringArray0[0] = "6ov%dx}D?4cKnpC\"";
LightFactory lightFactory0 = new LightFactory();
ISolver iSolver0 = lightFactory0.defaultSolver();
int int0 = (-489);
VecInt vecInt0 = new VecInt(3, (-489));
commander0.addAtMostOne(iSolver0, vecInt0);
VecInt vecInt1 = new VecInt(383);
commander0.addAtMostOne(iSolver0, vecInt1);
IVecInt iVecInt0 = null;
commander0.addAtMostOne(iSolver0, vecInt1);
int int1 = (-988);
IVecInt iVecInt1 = vecInt0.push(int1);
int int2 = 405;
commander0.addExactly(iSolver0, iVecInt0, int2);
int int3 = 11;
Commander commander1 = new Commander();
commander1.addExactly(iSolver0, vecInt0, int3);
PureOrder pureOrder0 = new PureOrder();
int int4 = (-260);
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, int4);
double double0 = (-27.69651);
tabuListDecorator0.setVarDecay(double0);
MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
IVecInt iVecInt2 = VecInt.EMPTY;
Commander commander2 = new Commander();
Commander commander3 = new Commander();
ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, miniSATRestarts0);
commander3.addAtMostOne(solver0, iVecInt1);
activeLearning0.setOrder(pureOrder0);
Commander commander4 = new Commander();
commander4.addExactly(solver0, vecInt1, int1);
Random.setNextRandom(int0);

[MASTER] 21:51:11.546 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 21:51:11.591 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Commander commander0 = new Commander();
assertNotNull(commander0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(2240);
assertEquals(2240, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

int int0 = 0;
SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertNotNull(rSATPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts(2240);
assertEquals(2240, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(2240, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2240, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

boolean boolean0 = true;
FullClauseSelectorSolver<Solver<MixedDataStructureDanielWLConciseBinary>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<MixedDataStructureDanielWLConciseBinary>>(solver0, true);
assertEquals(2240, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2240, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2240L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(fullClauseSelectorSolver0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

int int1 = lubyRestarts0.nextLuby();
assertFalse(int1 == int0);
assertEquals(2240, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2240L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, int1);

IConstr iConstr0 = commander0.addExactly(fullClauseSelectorSolver0, vecInt0, Integer.MIN_VALUE);
assertEquals(2240, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2240, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2240L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(2, solver0.nConstraints());
assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(iConstr0.canBePropagatedMultipleTimes());
assertEquals(2, iConstr0.size());
assertEquals(0.0, iConstr0.getActivity(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(iConstr0);

commander0.addAtMostOne(solver0, vecInt0);
commander0.addExactly(solver0, vecInt0, int0);
commander0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
String[] stringArray0 = new String[8];
String string0 = "p37a";
stringArray0[0] = string0;
String string1 = "(H%7EK{";
stringArray0[1] = string1;
String string2 = "org.sat4j.tools.encoding.Commander";
stringArray0[2] = string2;
String string3 = "X2=6s,_jc/";
stringArray0[3] = string3;
String string4 = "org.sat4j.tools.encoding.Commander";
stringArray0[4] = string4;
String string5 = "[J";
stringArray0[5] = string5;
String string6 = "";
stringArray0[6] = string6;
String string7 = "org.sat4j.reader.LecteurDimacs";
stringArray0[7] = string7;
ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0, boolean0, stringArray0);
IVecInt iVecInt0 = manyCore0.unsatExplanation();
commander0.addExactlyOne(solver0, iVecInt0);

[MASTER] 21:51:16.955 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 21:51:16.979 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Commander commander0 = new Commander();
assertNotNull(commander0);

LightFactory lightFactory0 = LightFactory.instance();
assertNotNull(lightFactory0);

Solver solver0 = (Solver)lightFactory0.lightSolver();
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

GateTranslator gateTranslator0 = new GateTranslator(solver0);
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(gateTranslator0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

VecInt vecInt1 = (VecInt)vecInt0.clone();
assertTrue(vecInt1.equals((Object)vecInt0));
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertNotNull(vecInt1);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt1, vecInt0);

commander0.addAtMostOne(gateTranslator0, vecInt1);
commander0.addAtLeastOne(solver0, vecInt1);
commander0.addAtMostOne(solver0, vecInt0);
commander0.addExactlyOne(gateTranslator0, vecInt1);
int int0 = 3;
commander0.addExactly(gateTranslator0, vecInt0, int0);
commander0.addExactlyOne(solver0, vecInt0);
boolean boolean0 = true;
String[] stringArray0 = new String[7];
String string0 = "Solver timed out after ";
stringArray0[0] = string0;
String string1 = "";
stringArray0[1] = string1;
String string2 = "!vtVQH%*$s^dHx<&BI";
stringArray0[2] = string2;
String string3 = "(N(9(a?d2/ r<2=rX}L";
stringArray0[3] = string3;
String string4 = "k";
stringArray0[4] = string4;
String string5 = "lightweight component caching from RSAT";
stringArray0[5] = string5;
String string6 = "CU]rT";
stringArray0[6] = string6;
Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 2);
FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
solverArray0[0] = solver1;
SearchParams searchParams0 = new SearchParams(int0, int0);
Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
solverArray0[1] = solver2;
ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>>(boolean0, stringArray0, solverArray0);
commander0.addAtMostOne(manyCore0, vecInt1);

[MASTER] 21:51:18.377 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-2064> but was:<0>
[MASTER] 21:51:18.384 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Commander commander0 = new Commander();
assertNotNull(commander0);

StatisticsSolver statisticsSolver0 = new StatisticsSolver();
assertEquals(0, statisticsSolver0.nConstraints());
assertEquals(0, statisticsSolver0.realNumberOfVariables());
assertEquals(0, statisticsSolver0.nVars());
assertNotNull(statisticsSolver0);

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ona?T{Wsl~my");
assertFalse(boolean0);

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams((-2064));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2064), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertNotNull(basicLauncher0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, arminRestarts0, basicLauncher0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2064), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(0, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.realNumberOfVariables());
assertNotNull(solver0);

GroupClauseSelectorSolver<Solver<MixedDataStructureDanielWLConciseBinary>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Solver<MixedDataStructureDanielWLConciseBinary>>(solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2064), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals((-2064L), arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(0, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.realNumberOfVariables());
assertTrue(groupClauseSelectorSolver0.isSatisfiable());
assertNotNull(groupClauseSelectorSolver0);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

int int0 = 15;
IVecInt iVecInt0 = vecInt0.push(15);
assertEquals(15, vecInt0.last());
assertEquals(1, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(15, iVecInt0.last());
assertNotNull(iVecInt0);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);

IConstr iConstr0 = commander0.addAtMostOne(groupClauseSelectorSolver0, iVecInt0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2064), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals((-2064L), arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(0, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.realNumberOfVariables());
assertTrue(groupClauseSelectorSolver0.isSatisfiable());
assertEquals(15, vecInt0.last());
assertEquals(1, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(15, iVecInt0.last());
assertEquals(0.0, iConstr0.getActivity(), 0.01);
assertEquals(0, iConstr0.size());
assertFalse(iConstr0.canBePropagatedMultipleTimes());
assertNotNull(iConstr0);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ILits iLits0 = cardinalityDataStructure0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

VecInt vecInt1 = new VecInt();
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertNotNull(vecInt1);

IVecInt iVecInt1 = solver0.unsatExplanation();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2064), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals((-2064L), arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(0, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.realNumberOfVariables());
assertNull(iVecInt1);

MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, (IVecInt) null, true, 16384);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'Commander_ESTest' to evosuite-tests
* Done!

* Computation finished
