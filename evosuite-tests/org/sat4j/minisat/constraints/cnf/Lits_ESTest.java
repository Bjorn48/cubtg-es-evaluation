/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:33:07 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lits_ESTest extends Lits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isImplied((-1729));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -865
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-1)).when(iVecInt0).get(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        lits0.setReason((-1), originalBinaryClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getReason((-1659));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -830
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.setLevel(43, 780);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getLevel((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-1546));
      lits0.reset(3093);
      assertEquals(1546, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Lits.toStringX((-2166));
      assertEquals("+x-1083", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = Lits.toString((-1));
      assertEquals("--1", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-1546));
      boolean boolean0 = lits0.isUnassigned(1127);
      assertEquals(1546, lits0.nVars());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-1546));
      lits0.getFromPool(2989);
      lits0.forgets(3093);
      assertEquals(2, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(1);
      lits0.unassign(1);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.unassign(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(128);
      int int0 = lits0.nextFreeVarId(true);
      assertEquals(1, lits0.realnVars());
      assertEquals(129, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.belongsToPool(2326);
      assertEquals(0, lits0.realnVars());
      assertFalse(boolean0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.belongsToPool(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(129);
      int int0 = lits0.getFromPool(116);
      assertEquals(2, lits0.realnVars());
      assertEquals(232, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.init(129);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1);
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, (-1));
      lits0.watch(2, binaryClauses0);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(5);
      lits0.watches(10);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.undos(0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(128);
      lits0.undos(256);
      assertEquals(128, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(4588);
      int int0 = lits0.realnVars();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not(1);
      assertEquals(0, int0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not((-1057));
      assertEquals((-1058), int0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(214);
      boolean boolean0 = lits0.isSatisfied(214);
      assertTrue(boolean0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      boolean boolean0 = lits0.isFalsified(1);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isFalsified(2);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getReason(93);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getLevel(97);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(865);
      int int0 = lits0.getLevel(1730);
      assertEquals(865, lits0.nVars());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(128);
      boolean boolean0 = lits0.belongsToPool(128);
      assertEquals(128, lits0.nVars());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.watches(3944);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3944
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 1234);
      // Undeclared exception!
      try { 
        lits0.watch(1234, binaryClauses0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1234
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.valueToString(1849);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1849
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.unassign(392);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 392
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iVecInt0).get(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        lits0.setReason(1007, originalBinaryClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 503
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.setLevel((-965), (-965));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -483
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.satisfies((-550));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -550
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(3866);
      lits0.resetPool();
      lits0.resetPool();
      // Undeclared exception!
      lits0.resetPool();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.reset(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isUnassigned(3359);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3359
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isSatisfied((-2017));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2018
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getFromPool(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      boolean boolean0 = lits0.isUnassigned(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.init(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.reset(3093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3093
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.nextFreeVarId(false);
      assertEquals(0, lits0.nVars());
      assertEquals(1, int0);
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1);
      boolean boolean0 = lits0.isImplied(2);
      assertEquals(1, lits0.realnVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.isImplied(115);
      assertFalse(boolean0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = Lits.toStringX(2989);
      assertEquals("-x1494", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = Lits.toString(258);
      assertEquals("129", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Lits lits0 = new Lits();
      String string0 = lits0.valueToString(250);
      assertEquals("?", string0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(18);
      boolean boolean0 = lits0.isUnassigned(18);
      assertFalse(boolean0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      String string0 = lits0.valueToString(0);
      assertEquals("T", string0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(1);
      // Undeclared exception!
      try { 
        lits0.satisfies(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      // Undeclared exception!
      try { 
        lits0.satisfies(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(0);
      lits0.unassign(0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(3866);
      lits0.ensurePool(45);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.ensurePool(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.belongsToPool(129);
      assertFalse(boolean0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.belongsToPool((-1258));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1);
      int int0 = lits0.getFromPool(1);
      assertEquals(1, lits0.realnVars());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getFromPool(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool(50);
      int int0 = lits0.getFromPool(50);
      assertEquals(1, lits0.realnVars());
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-1546));
      int int0 = lits0.nVars();
      assertEquals(1, lits0.realnVars());
      assertEquals(1546, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.init(16);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isSatisfied(214);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.watches(2);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Lits lits0 = new Lits();
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(iVecInt0).size();
      Constr constr0 = AtLeast.atLeastNew(unitPropagationListener0, (ILits) null, iVecInt0, (-1465));
      lits0.setReason(235, constr0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.realnVars();
      assertEquals(0, int0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, (-1));
      // Undeclared exception!
      try { 
        lits0.watch(2, binaryClauses0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.undos((-175));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -88
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not(0);
      assertEquals(1, int0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isFalsified((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.nVars();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.capacity();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.forgets(3093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6186
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }
}
