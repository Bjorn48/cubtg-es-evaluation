/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:57:40 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4InclusionModel_ESTest extends Minimal4InclusionModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsOutputSolver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0, iVecInt0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(iSolver0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASolverFactory<Solver<MixedDataStructureDanielWL>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<MixedDataStructureDanielWL>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWL>>(aSolverFactory0, stringArray0);
      VecInt vecInt0 = new VecInt();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0, vecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((int[]) null).when(iSolver0).model();
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((int[]) null).when(iSolver0).modelWithInternalVariables();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      vecInt0.pop();
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      minimal4InclusionModel0.clearDecorated();
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((int[]) null).when(iSolver0).model();
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((int[]) null).when(iSolver0).modelWithInternalVariables();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      try { 
        minimal4InclusionModel0.isSatisfiable(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, (IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(332);
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(true, minimal4InclusionModelArray0);
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(32);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      SolutionFoundListener solutionFoundListener1 = SolutionFoundListener.VOID;
      int[] intArray0 = new int[8];
      intArray0[0] = 32;
      intArray0[1] = 2070;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = 2070;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      intArray0[6] = 32;
      intArray0[7] = 32;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) null).when(iSolver0).model();
      doReturn(0, (-1)).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) null).when(iSolver0).modelWithInternalVariables();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      minimal4InclusionModel0.model();
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0, vecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }
}
