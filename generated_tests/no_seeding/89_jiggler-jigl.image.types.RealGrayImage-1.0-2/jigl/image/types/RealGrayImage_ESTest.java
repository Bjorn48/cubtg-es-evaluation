/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:10:28 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ImageProducer;
import java.awt.image.LookupOp;
import jigl.image.ROI;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealGrayImage_ESTest extends RealGrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 1129;
      RealGrayImage realGrayImage0 = new RealGrayImage(1129, 1129);
      ROI rOI0 = new ROI(1129, 1129, 1083, 1083);
      float float0 = (-3428.0F);
      // Undeclared exception!
      try { 
        realGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      // Undeclared exception!
      try { 
        realGrayImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[][] floatArray0 = new float[0][4];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      ROI rOI0 = new ROI(1, 1, (-1932), 1);
      realGrayImage0.getJavaImage();
      rOI0.setROI(1, 1, 0, 1);
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((-0.082729235F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI(1, 1, 0, 1);
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 221);
      realGrayImage1.getJavaImage();
      ROI rOI1 = new ROI(0, 0, 1809, 1809);
      realGrayImage1.max();
      realGrayImage0.subtract((float) 221);
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        realGrayImage0.set(2050, 0, float0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      float[][] floatArray1 = new float[0][6];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray1);
      Float float0 = new Float((float) (-1));
      Float.valueOf((float) 230);
      RealGrayImage realGrayImage2 = new RealGrayImage(230, 2077);
      // Undeclared exception!
      realGrayImage2.clear(float0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 0);
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        realGrayImage1.clip(1, 1446, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[][] floatArray0 = new float[0][4];
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI((-1831), 221, 1, 221);
      rOI0.setROI(1, 1, 0, 1);
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      Float float0 = new Float(0.0);
      RealGrayImage realGrayImage1 = realGrayImage0.clear(float0);
      realGrayImage1.addbuffer(2087, 1, (float) 2087);
      realGrayImage0.addSum();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 221;
      int int1 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 221);
      // Undeclared exception!
      try { 
        realGrayImage1.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.getJavaImage();
      realGrayImage0.addSum();
      realGrayImage0.byteSize();
      realGrayImage0.copy();
      int int0 = 0;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.add(0, 0, 4501.033F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 1109;
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((float) 1109, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      RealGrayImage realGrayImage1 = new RealGrayImage(2079, 0);
      realGrayImage1.toString();
      RealGrayImage realGrayImage2 = realGrayImage1.add((-2910.6F));
      ROI rOI0 = new ROI(0, 0, 0, 8);
      realGrayImage2.addSum();
      realGrayImage2.diff(realGrayImage0);
      // Undeclared exception!
      try { 
        realGrayImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      ROI rOI0 = new ROI(1109, (-800), 0, (-571));
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      int int0 = 0;
      int int1 = 0;
      int int2 = (-1);
      ROI rOI0 = new ROI(0, 0, (-1099), 0);
      int int3 = (-2468);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((-1340), 0, 255.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1340
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI(1, 1, 0, 1);
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      int int0 = 0;
      int int1 = 2056;
      RealGrayImage realGrayImage1 = new RealGrayImage(2056, 2056);
      // Undeclared exception!
      try { 
        realGrayImage1.get(0, (-1483));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1483
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(string0);
      assertEquals(4, floatArray0.length);
      assertEquals("0:0\n", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI(0, (-391), (-3768), 232);
      rOI0.setROI((-391), 0, 0, (-3768));
      // Undeclared exception!
      try { 
        realGrayImage1.subtract(realGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -391
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 662;
      RealGrayImage realGrayImage0 = new RealGrayImage(662, 0);
      Float float0 = null;
      // Undeclared exception!
      try { 
        realGrayImage0.set(662, 0, (Float) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      Float float0 = new Float((double) 0.0F);
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) 0.0F);
      RealGrayImage realGrayImage2 = realGrayImage1.add((-3702.2483F));
      ROI rOI0 = new ROI(0, (-1), 0, 712);
      realGrayImage2.addSum();
      realGrayImage0.diff(realGrayImage2);
      // Undeclared exception!
      try { 
        realGrayImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI(1, 1, 0, 1);
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 221);
      ROI rOI1 = new ROI(221, (-3829), 2049, 8);
      realGrayImage0.addSum();
      realGrayImage1.diff(realGrayImage0);
      // Undeclared exception!
      try { 
        realGrayImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 218.0F;
      floatArray1[2] = 32767.0F;
      floatArray1[3] = (-1282.4945F);
      floatArray1[4] = 32767.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      floatArray2[0] = 32767.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[1];
      floatArray3[0] = 32767.0F;
      floatArray0[2] = floatArray3;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      RealGrayImage realGrayImage1 = new RealGrayImage(2079, 0);
      realGrayImage1.toString();
      RealGrayImage realGrayImage2 = realGrayImage1.add((-2910.6F));
      ROI rOI0 = new ROI(0, 0, 0, 8);
      RealGrayImage realGrayImage3 = realGrayImage0.subtract((float) 2079);
      realGrayImage3.absSum();
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI(1420, (-1), 1420, (-1));
      // Undeclared exception!
      try { 
        realGrayImage3.multiply(realGrayImage2, rOI2, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 6147, 3472, 255, (float) 0);
      ROI rOI0 = new ROI((-2533), (-2872), (-2533), (-2533));
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      realGrayImage0.add(realGrayImage1);
      RealGrayImage realGrayImage3 = null;
      try {
        realGrayImage3 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      Float float0 = new Float((double) 0.0F);
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) 0.0F);
      realGrayImage0.addbuffer(0, 0, (float) 1);
      realGrayImage0.addSum();
      realGrayImage0.absSum();
      ROI rOI0 = new ROI((-1001), 0, (-1001), 1);
      // Undeclared exception!
      try { 
        realGrayImage1.multiply(0, 0, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1123;
      RealGrayImage realGrayImage0 = new RealGrayImage(1123, 1123);
      int int1 = 0;
      int int2 = 0;
      int int3 = 0;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, 1058.311F);
      realGrayImage1.addSum();
      // Undeclared exception!
      try { 
        realGrayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      ROI rOI1 = new ROI(1670, 16, 0, 2063);
      rOI1.setROI(1034, 2063, 1, 0);
      rOI1.setROI(1, 0, 4515, 1);
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1034);
      realGrayImage0.toString();
      realGrayImage0.add(1.0F);
      ROI rOI2 = new ROI(0, 0, 3241, 0);
      Float float0 = new Float((double) 1034);
      Float float1 = new Float((float) 0);
      realGrayImage0.clear(float1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 1, (float) 1);
      realGrayImage1.addSum();
      realGrayImage1.absSum();
      realGrayImage1.subtract(1.0F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI(1, 1, 1, 1);
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      realGrayImage0.toString();
      realGrayImage0.copy();
      // Undeclared exception!
      try { 
        realGrayImage0.clip(2034, 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.getJavaImage();
      realGrayImage0.addSum();
      realGrayImage0.byteSize();
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      ROI rOI0 = new ROI(6147, 6147, 6147, (-2854));
      rOI0.setROI(2378, (-1853), 2378, (-1853));
      realGrayImage1.toString();
      rOI0.setROI((-2854), (-2854), (-2854), 2378);
      ROI rOI1 = new ROI(2378, (-1), (-2854), (-2854));
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(realGrayImage1, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2854
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[][] floatArray0 = new float[0][4];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      int int0 = (-1932);
      ROI rOI0 = new ROI(1, 1, (-1932), 1);
      realGrayImage0.toString();
      rOI0.setROI(1, 1, 0, 1);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((-2379.41F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI(1, 2067, 1290, 2067);
      int int0 = 2079;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 2066);
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 221);
      RealGrayImage realGrayImage2 = realGrayImage1.add((float) 0);
      realGrayImage2.getJavaImage();
      ROI rOI1 = new ROI(1, 2062, 1, 830);
      realGrayImage0.max();
      realGrayImage2.subtract((-1390.62F));
      Float float0 = new Float((float) 830);
      RealGrayImage realGrayImage3 = null;
      try {
        realGrayImage3 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.getJavaImage();
      realGrayImage0.addSum();
      realGrayImage0.byteSize();
      realGrayImage0.copy();
      int int0 = 6147;
      int int1 = 3472;
      int int2 = 255;
      // Undeclared exception!
      realGrayImage0.addbuffer(int1, int2, int1, int2, (float) int2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 662;
      RealGrayImage realGrayImage0 = new RealGrayImage(662, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      int int1 = (-1337);
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      int int2 = 754;
      // Undeclared exception!
      realGrayImage2.addbuffer(754, 1083, (-203.09F));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      int int0 = 0;
      int int1 = (-2027);
      int int2 = (-1);
      ROI rOI0 = new ROI(0, (-1), 199, 1267);
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1123, 1123);
      ROI rOI0 = new ROI(1123, 1123, 0, (-571));
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      int int0 = 221;
      rOI0.setROI(1, 1, 0, 1);
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(0, 479, (-488.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 479
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 1109;
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      int int1 = 0;
      ROI rOI0 = null;
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 1109);
      // Undeclared exception!
      try { 
        realGrayImage1.median(1109, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1106, 1106);
      ROI rOI0 = new ROI(1106, 1106, 1106, 1106);
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((float) 1106, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1106
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[][] floatArray0 = new float[0][4];
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI((-1831), 221, 1, 221);
      rOI0.setROI(1, 1, 0, 1);
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      Float float0 = new Float(0.0);
      realGrayImage0.clear(float0);
      realGrayImage0.X();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage0.toString();
      int int2 = (-1733);
      // Undeclared exception!
      try { 
        realGrayImage1.addbuffer((-1733), 1, (float) 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.getJavaImage();
      int int0 = 735;
      int int1 = (-536);
      realGrayImage0.addbuffer(0, 0, (-536), 1, (float) 0);
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage1 = new RealGrayImage(1, 642);
      int int2 = (-1148);
      int int3 = (-1);
      // Undeclared exception!
      try { 
        realGrayImage1.add((-1148), (-1), 1122.7F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      ROI rOI0 = new ROI((-800), (-4528), (-560), (-560));
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer((-800), 543, (float) (-4528));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.getJavaImage();
      realGrayImage0.addSum();
      realGrayImage0.byteSize();
      ROI rOI0 = new ROI();
      int int0 = 1798;
      rOI0.setROI(0, (-2034), 1596, 1798);
      ROI rOI1 = new ROI(3949, (-528), 1096, (-2034));
      rOI1.setROI(3949, 2, 105, (-2034));
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((float) 1596, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2034
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      ROI rOI0 = new ROI(0, 230, 0, (-1));
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(230, 0, (-6176.845F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[4];
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((-551), (-551), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      Float float0 = new Float((double) 0.0F);
      realGrayImage0.clear((Float) 0.0F);
      realGrayImage0.addbuffer(0, 2085, (float) 1);
      realGrayImage0.addSum();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 1123;
      RealGrayImage realGrayImage0 = new RealGrayImage(1123, 1123);
      // Undeclared exception!
      try { 
        realGrayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 1, (float) 1);
      realGrayImage1.addSum();
      realGrayImage0.absSum();
      ROI rOI0 = new ROI(1, 925, 1, 0);
      rOI0.setROI(1, 1, 1, 826);
      RealGrayImage realGrayImage2 = new RealGrayImage(1, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 0);
      ROI rOI0 = new ROI(0, (-391), (-3768), 232);
      ROI rOI1 = new ROI(232, 0, 1098, (-16777216));
      // Undeclared exception!
      try { 
        realGrayImage1.multiply((-730), (-3768), 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4159
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      ROI rOI0 = new ROI();
      rOI0.setROI(0, 0, 0, 0);
      int int0 = (-452);
      rOI0.setROI(0, 0, (-452), (-452));
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -452
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[][] floatArray0 = new float[1][9];
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI(1, 1, 0, 1);
      RealGrayImage realGrayImage0 = new RealGrayImage(2053, 2075);
      ROI rOI1 = new ROI();
      realGrayImage0.toString(rOI0);
      int int0 = 0;
      byte[][] byteArray0 = new byte[4][2];
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)56;
      byteArray1[0] = (byte)56;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)56;
      byteArray2[1] = (byte)56;
      byteArray2[2] = (byte)56;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(128, byteArray0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, "2053:2075\nnull \nnull \n");
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(1090, 1, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 128
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(2, 1, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 536.3F;
      floatArray1[1] = 44.6283F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 536.3F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 44.6283F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 44.6283F;
      floatArray4[2] = 44.6283F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 44.6283F;
      floatArray4[5] = 44.6283F;
      floatArray4[6] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 0.0F;
      floatArray0[4] = floatArray5;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI(1, 2067, 1290, 2067);
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 2066);
      realGrayImage0.toString();
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        realGrayImage0.set((-1521), 1676, float0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3743
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.getJavaImage();
      realGrayImage0.addSum();
      realGrayImage0.byteSize();
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      realGrayImage1.add(realGrayImage0);
      RealGrayImage realGrayImage2 = null;
      try {
        realGrayImage2 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 1109;
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      // Undeclared exception!
      realGrayImage0.addbuffer(2068, 1109, (-6176.845F));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.getJavaImage();
      realGrayImage0.addSum();
      realGrayImage0.byteSize();
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      ROI rOI0 = new ROI(6147, 6147, 6147, (-2872));
      rOI0.setROI((-2872), (-2872), (-2872), 2378);
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      RealGrayImage realGrayImage3 = realGrayImage1.add(342.324F);
      realGrayImage3.toString();
      // Undeclared exception!
      try { 
        realGrayImage2.subtract(0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2872
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      ROI rOI0 = new ROI((-2192), (-2192), (-1), (-1));
      rOI0.setROI((-800), (-2192), (-2192), (-16777216));
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(realGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2192
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI(1, 0, 1, 477);
      assertEquals(478, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(477, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 2386);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2386, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2386, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(string0);
      assertEquals("0:2386\n", string0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2386, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(2386, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      ROI rOI1 = new ROI(830, 986, 986, 5141);
      assertEquals(986, rOI1.lx());
      assertEquals(986, rOI1.uy());
      assertEquals(157, rOI1.X());
      assertEquals(4156, rOI1.Y());
      assertEquals(5141, rOI1.ly());
      assertEquals(830, rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI(1, 2199, 5141, 1);
      assertEquals(5141, rOI2.lx());
      assertEquals(5141, rOI2.X());
      assertEquals(2199, rOI2.Y());
      assertEquals(1, rOI2.ux());
      assertEquals(2199, rOI2.ly());
      assertEquals(1, rOI2.uy());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      rOI2.setROI(0, 866, (-3114), 0);
      assertEquals((-3114), rOI2.ux());
      assertEquals(3115, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(867, rOI2.Y());
      assertEquals(866, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      realGrayImage0.getJavaImage();
      realGrayImage1.multiply(realGrayImage0);
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(realGrayImage1, rOI0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 986
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(imageProducer0);
      assertEquals(0, floatArray0.length);
      
      float float0 = realGrayImage0.addSum();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      realGrayImage0.byteSize();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, floatArray0.length);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI(6147, 6147, 6147, (-2872));
      assertEquals(6147, rOI0.lx());
      assertEquals(9020, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(6147, rOI0.ux());
      assertEquals((-2872), rOI0.uy());
      assertEquals(6147, rOI0.ly());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.add(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage3 = null;
      try {
        realGrayImage3 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      realGrayImage0.median((-452));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 1, (float) 1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float float0 = realGrayImage1.addSum();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(1.0F, float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float float1 = realGrayImage1.absSum();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI(255, 255, 1479, 255);
      assertEquals(255, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1225, rOI0.X());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(1479, rOI0.lx());
      assertNotNull(rOI0);
      
      float float2 = realGrayImage1.addSum();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear(float0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(0, 0, (-2354.0F));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float float1 = realGrayImage0.addSum();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertEquals(0.0F, float1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(imageProducer0);
      assertEquals(0, floatArray0.length);
      
      float float0 = realGrayImage0.addSum();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      realGrayImage0.byteSize();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI(6147, 6147, 6147, (-2872));
      assertEquals(6147, rOI0.lx());
      assertEquals((-2872), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(6147, rOI0.ly());
      assertEquals(9020, rOI0.Y());
      assertEquals(6147, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI((-2872), (-2872), (-2872), 2378);
      assertEquals(2378, rOI0.ly());
      assertEquals((-2872), rOI0.ux());
      assertEquals((-2872), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(5251, rOI0.Y());
      assertEquals((-2872), rOI0.lx());
      
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage1.add((float) 6147, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2872
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = 221;
      rOI0.setROI(1, 1, 1, 1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      
      int int1 = 2079;
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      realGrayImage0.median(0);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ROI rOI1 = new ROI(221, 221, 1, 2373);
      assertEquals(1, rOI1.ux());
      assertEquals(221, rOI1.X());
      assertEquals(221, rOI1.lx());
      assertEquals(221, rOI1.uy());
      assertEquals(2153, rOI1.Y());
      assertEquals(2373, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage((-3134), 221);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) 0.0F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(0, 2085, (float) 1);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(2085, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float float1 = realGrayImage0.addSum();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertEquals(0.0F, float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = realGrayImage1.Y();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = 1;
      rOI0.setROI(1, 1, 0, 1);
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      rOI0.setROI(1, 0, 0, 1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(2053, 2075);
      assertEquals(2075, realGrayImage0.Y());
      assertEquals(2053, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(2075, realGrayImage0.Y());
      assertEquals(2053, realGrayImage0.X());
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage1.median(1626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(662, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(662, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      Float float0 = Float.valueOf((float) 662);
      assertNotNull(float0);
      assertEquals(662.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(12.703380712221495);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(12.703381F, (float)float1, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) null);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(662, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(662, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1129, 1129);
      assertEquals(1129, realGrayImage0.X());
      assertEquals(1129, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(1129, 1129, 1083, 1083);
      assertEquals(47, rOI0.X());
      assertEquals(47, rOI0.Y());
      assertEquals(1129, rOI0.lx());
      assertEquals(1129, rOI0.ly());
      assertEquals(1083, rOI0.uy());
      assertEquals(1083, rOI0.ux());
      assertNotNull(rOI0);
      
      Float float0 = Float.valueOf((-3428.0F));
      assertNotNull(float0);
      assertEquals((-3428.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(12.703380712221495);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(12.703381F, (float)float1, 0.01F);
      
      // Undeclared exception!
      realGrayImage0.clear(float1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      float float0 = realGrayImage0.addSum();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      realGrayImage0.byteSize();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, floatArray0.length);
      
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(1, 1, 0, 1);
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(string0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 221);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      ROI rOI1 = new ROI(1936, 585, 1, 142);
      assertEquals(142, rOI1.uy());
      assertEquals(1936, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(444, rOI1.Y());
      assertEquals(585, rOI1.ly());
      assertEquals(1936, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      String string1 = realGrayImage1.toString();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(string1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertTrue(string1.equals((Object)string0));
      
      float float0 = realGrayImage1.addSum();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0.0F, float0, 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.diff((RealGrayImage) null);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2079, realGrayImage2.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      
      // Undeclared exception!
      try { 
        realGrayImage1.min(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 142
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(1, 1, 4528, 1);
      assertEquals(1, rOI0.ly());
      assertEquals(4528, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(4528, rOI0.X());
      assertEquals(1, rOI0.ux());
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      realGrayImage0.median((-452));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Float float0 = realGrayImage1.max();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(float0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      assertEquals(1109, realGrayImage0.X());
      assertEquals(1109, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(1109, 1109, 0, (-571));
      assertEquals(0, rOI0.ux());
      assertEquals(1110, rOI0.X());
      assertEquals(1109, rOI0.ly());
      assertEquals(1109, rOI0.lx());
      assertEquals((-571), rOI0.uy());
      assertEquals(1681, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Float float0 = Float.valueOf((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) 0);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear(float0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.add(realGrayImage1, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(1, 1, 0, 1);
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(string0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 221);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      ROI rOI1 = new ROI(0, 0, 1809, 1809);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1809, rOI1.lx());
      assertEquals(1809, rOI1.ly());
      assertEquals(1810, rOI1.Y());
      assertEquals(1810, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      Float float0 = realGrayImage1.max();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotNull(float0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals((-32768.0F), (float)float0, 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.subtract((float) 221);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(2079, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotNull(realGrayImage2);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(1, 1, 0, 1);
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(string0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 221);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(2079, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      ROI rOI1 = new ROI(0, 0, 1809, 1809);
      assertEquals(1810, rOI1.X());
      assertEquals(1810, rOI1.Y());
      assertEquals(1809, rOI1.lx());
      assertEquals(1809, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI0.setROI(1, 2199, (-3544), 2079);
      assertEquals(2079, rOI0.uy());
      assertEquals(3546, rOI0.X());
      assertEquals(121, rOI0.Y());
      assertEquals(2199, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals((-3544), rOI0.ux());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(realGrayImage1, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3544
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotNull(realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      realGrayImage1.median((-452));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ROI rOI1 = new ROI(0, 2080, 3383, (-2185));
      assertEquals(4266, rOI1.Y());
      assertEquals(3383, rOI1.lx());
      assertEquals(3384, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals((-2185), rOI1.uy());
      assertEquals(2080, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.clip(16, 4, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2185
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(660, 660);
      assertEquals(660, realGrayImage0.Y());
      assertEquals(660, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      Float float0 = new Float(2238.0F);
      assertNotNull(float0);
      assertEquals(2238.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.set(791, 660, float0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(662, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(662, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(662, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(662, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.set(662, (-1337), (Float) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1337
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(imageProducer0);
      assertEquals(0, floatArray0.length);
      
      float float0 = realGrayImage0.addSum();
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      realGrayImage0.byteSize();
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      int int0 = 0;
      int int1 = 1;
      int int2 = 735;
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(16, 1, 735, 735, 255.0F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(255.0F, realGrayImage2.min(), 0.01F);
      assertEquals(255.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1040400.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(4080.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(4080.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(16, realGrayImage2.X());
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      String string0 = realGrayImage2.toString();
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(255.0F, realGrayImage2.min(), 0.01F);
      assertEquals(255.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1040400.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(4080.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(4080.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(16, realGrayImage2.X());
      assertNotNull(string0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals("16:1\n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n255.0 \n", string0);
      
      float float1 = 4501.033F;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.add(0, 0, 4501.033F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      String string0 = realGrayImage1.toString();
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(string0);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals("0:0\n", string0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.add((-2910.6F));
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      float float0 = realGrayImage2.addSum();
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0F, float0, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage2.diff(realGrayImage0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      Float float0 = Float.valueOf((float) 2079);
      assertNotNull(float0);
      assertEquals(2079.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(12.703380712221495);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(12.703381F, (float)float1, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear(float0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage1.multiply((float) 1);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(2079, realGrayImage2.X());
      assertNotNull(realGrayImage2);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotEquals((float)float0, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 255;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(255, 255, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(1, 0, 0, 1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(2053, 2075);
      assertEquals(2053, realGrayImage0.X());
      assertEquals(2075, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(2053, realGrayImage0.X());
      assertEquals(2075, realGrayImage0.Y());
      assertEquals(2, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI1 = new ROI(255, (-1), (-1), 0);
      assertEquals(0, rOI1.ly());
      assertEquals(255, rOI1.lx());
      assertEquals(2, rOI1.Y());
      assertEquals((-1), rOI1.ux());
      assertEquals((-1), rOI1.uy());
      assertEquals(257, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI0.setROI((-1), 129, 2053, 1);
      assertEquals(2053, rOI0.lx());
      assertEquals((-1), rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(129, rOI0.Y());
      assertEquals(2055, rOI0.X());
      assertEquals(129, rOI0.ly());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      
      ROI rOI2 = new ROI(1, 2067, 0, 0);
      assertEquals(1, rOI2.lx());
      assertEquals(2068, rOI2.Y());
      assertEquals(2, rOI2.X());
      assertEquals(2067, rOI2.ly());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        realGrayImage1.subtract(realGrayImage0, rOI2, rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = (-452);
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 1109;
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      assertEquals(1109, realGrayImage0.X());
      assertEquals(1109, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      int int1 = 0;
      int int2 = (-571);
      ROI rOI0 = new ROI(1109, (-800), 0, (-571));
      assertEquals(1110, rOI0.X());
      assertEquals(230, rOI0.Y());
      assertEquals(1109, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals((-571), rOI0.ly());
      assertEquals((-800), rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -800
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      assertEquals(1109, realGrayImage0.Y());
      assertEquals(1109, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(1109, (-800), 0, (-560));
      assertEquals((-560), rOI0.ly());
      assertEquals(1110, rOI0.X());
      assertEquals(241, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-800), rOI0.uy());
      assertEquals(1109, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.clip((-800), (-800), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -800
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(2063, 1, 221, 221);
      assertEquals(1843, rOI0.X());
      assertEquals(2063, rOI0.lx());
      assertEquals(221, rOI0.ly());
      assertEquals(221, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(221, rOI0.ux());
      
      rOI0.setROI(1, 1, 0, 1);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(string0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 221);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      
      ROI rOI1 = new ROI(0, 0, 1809, 1809);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1809, rOI1.lx());
      assertEquals(1809, rOI1.ly());
      assertEquals(1810, rOI1.X());
      assertEquals(1810, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI0.setROI(1, 2199, 2199, 2079);
      assertEquals(1, rOI0.ux());
      assertEquals(2079, rOI0.uy());
      assertEquals(2199, rOI0.lx());
      assertEquals(2199, rOI0.ly());
      assertEquals(121, rOI0.Y());
      assertEquals(2199, rOI0.X());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(imageProducer0);
      assertSame(realGrayImage0, realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.multiply(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertEquals(2079, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotNull(realGrayImage2);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(realGrayImage1, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 1109;
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      assertEquals(1109, realGrayImage0.Y());
      assertEquals(1109, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((-1340), 0, 255.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1340
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) 0.0F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(0, 0, (float) 1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotNull(realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI(0, 16, 8, 8);
      assertEquals(8, rOI0.uy());
      assertEquals(16, rOI0.ly());
      assertEquals(9, rOI0.Y());
      assertEquals(9, rOI0.X());
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Float float0 = realGrayImage1.max();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(float0);
      assertSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage2.subtract(1.0F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertNotNull(realGrayImage3);
      assertSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage2);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      RealGrayImage realGrayImage4 = new RealGrayImage(1072, 0);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(1072, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertNotNull(realGrayImage4);
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage4.set((-1238), (-1626), float1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1618
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 662;
      RealGrayImage realGrayImage0 = new RealGrayImage(662, 662);
      assertEquals(662, realGrayImage0.Y());
      assertEquals(662, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      float float0 = 2238.0F;
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(662, (-1), 2054, 2054, (float) 662);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(string0);
      assertEquals(4, floatArray0.length);
      assertEquals("0:0\n", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float0 = realGrayImage0.min();
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(float0);
      assertSame(realGrayImage0, realGrayImage1);
      assertEquals(4, floatArray0.length);
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(2079, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertNotNull(string0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(2079, realGrayImage0.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2079, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(string0);
      assertEquals(4, floatArray0.length);
      assertEquals("0:0\n", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI(0, 230, 0, (-1));
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(230, rOI0.ly());
      assertEquals(232, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(imageProducer0);
      assertEquals(0, floatArray0.length);
      
      float float0 = realGrayImage0.addSum();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      realGrayImage0.byteSize();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      realGrayImage1.addbuffer(1083, 1083, (float) 1083);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.add((-829), 1, 1781.1809F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 1920, 2048, 2077);
      assertEquals(2049, rOI0.X());
      assertEquals(158, rOI0.Y());
      assertEquals(1920, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(2048, rOI0.lx());
      assertEquals(2077, rOI0.ly());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(2052, 2077);
      assertEquals(2052, realGrayImage0.X());
      assertEquals(2077, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2077
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      assertEquals(1109, realGrayImage0.Y());
      assertEquals(1109, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      int int0 = 0;
      int int1 = 0;
      int int2 = (-1);
      int int3 = 0;
      ROI rOI0 = new ROI(0, 0, (-1099), 0);
      assertEquals(0, rOI0.uy());
      assertEquals(1100, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-1099), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      assertEquals(1109, realGrayImage0.Y());
      assertEquals(1109, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      int int0 = (-800);
      int int1 = 0;
      int int2 = (-560);
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((float) (-560), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[][] floatArray0 = new float[0][4];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      float float0 = (-2379.41F);
      int int0 = 1;
      int int1 = (-1932);
      ROI rOI0 = new ROI(1, 1, (-1932), 1);
      assertEquals(1934, rOI0.X());
      assertEquals((-1932), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertNotNull(rOI0);
      
      int int2 = 1;
      int int3 = 0;
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      assertEquals(1109, realGrayImage0.X());
      assertEquals(1109, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, (-1099), 0);
      assertEquals(0, rOI0.uy());
      assertEquals(1100, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-1099), rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(0, (-1), (float) (-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(imageProducer0);
      assertEquals(0, floatArray0.length);
      
      float float0 = realGrayImage0.addSum();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      realGrayImage0.byteSize();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      int int0 = 6147;
      RealGrayImage realGrayImage2 = realGrayImage1.add(1.0F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      int int1 = 8;
      ROI rOI0 = new ROI(0, 0, 8, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(9, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage3 = realGrayImage1.subtract((-695.5194F));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage2);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      float float1 = realGrayImage1.absSum();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      RealGrayImage realGrayImage4 = realGrayImage0.addbuffer(0, 2072, (-2307.7F));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(2072, realGrayImage4.Y());
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertNotNull(realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      
      int int2 = (-1);
      ROI rOI2 = new ROI(int2, int2, int1, int0);
      assertEquals(6147, rOI2.ly());
      assertEquals(6149, rOI2.Y());
      assertEquals((-1), rOI2.uy());
      assertEquals((-1), rOI2.ux());
      assertEquals(10, rOI2.X());
      assertEquals(8, rOI2.lx());
      assertNotNull(rOI2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      RealGrayImage realGrayImage5 = new RealGrayImage(floatArray0);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(0, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0, realGrayImage5.X());
      assertNotNull(realGrayImage5);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage5.multiply(realGrayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float[][] floatArray1 = new float[5][0];
      floatArray1[0] = floatArray0;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = 2917.0F;
      floatArray1[1] = floatArray2;
      floatArray1[2] = floatArray0;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 2917.0F;
      floatArray3[1] = (float) 1;
      floatArray3[2] = (float) 1;
      floatArray1[3] = floatArray3;
      floatArray1[4] = floatArray0;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 1109;
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      assertEquals(1109, realGrayImage0.Y());
      assertEquals(1109, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(1109, realGrayImage0.Y());
      assertEquals(1109, realGrayImage0.X());
      assertEquals(1109, realGrayImage1.X());
      assertEquals(1109, realGrayImage1.Y());
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      int int1 = 0;
      int int2 = (-571);
      ROI rOI0 = new ROI(int0, int0, int1, int2);
      // Undeclared exception!
      try { 
        realGrayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(983, 983);
      assertEquals(983, realGrayImage0.X());
      assertEquals(983, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      String string0 = realGrayImage0.toString(rOI0);
      assertEquals(983, realGrayImage0.X());
      assertEquals(983, realGrayImage0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(string0);
      assertEquals("983:983\nnull \n", string0);
      
      ROI rOI1 = new ROI((-571), 3306, 2055, 2043);
      assertEquals(1264, rOI1.Y());
      assertEquals(2627, rOI1.X());
      assertEquals(2043, rOI1.uy());
      assertEquals(2055, rOI1.lx());
      assertEquals((-571), rOI1.ux());
      assertEquals(3306, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 1, (float) 1);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(1.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1.0F, realGrayImage1.absSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float float0 = realGrayImage1.addSum();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(1.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(1.0F, float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float float1 = realGrayImage1.absSum();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(1.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI(255, 255, 1479, 255);
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.uy());
      assertEquals(1479, rOI0.lx());
      assertEquals(255, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1225, rOI0.X());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage2 = realGrayImage1.add((-2241.1F));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-2240.1F), realGrayImage1.addSum(), 0.01F);
      assertEquals(5018048.5, realGrayImage1.sqrSum(), 0.01);
      assertEquals(2240.1F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals((-2240.1F), realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertEquals((-2240.1F), realGrayImage1.min(), 0.01F);
      assertEquals(5018048.5, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-2240.1F), realGrayImage2.addSum(), 0.01F);
      assertEquals(2240.1F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals((-2240.1F), realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals((-2240.1F), realGrayImage2.min(), 0.01F);
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage3 = realGrayImage2.subtract(2684.1765F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(4924.2764F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-4924.2764F), realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals((-4924.2764F), realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(2.4248498E7, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-4924.2764F), realGrayImage1.min(), 0.01F);
      assertEquals(4924.2764F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-4924.2764F), realGrayImage2.max(), 0.01F);
      assertEquals((-4924.2764F), realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(2.4248498E7, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-4924.2764F), realGrayImage2.min(), 0.01F);
      assertEquals(4924.2764F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals((-4924.2764F), realGrayImage3.addSum(), 0.01F);
      assertEquals((-4924.2764F), realGrayImage3.min(), 0.01F);
      assertEquals(2.4248498E7, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-4924.2764F), realGrayImage3.max(), 0.01F);
      assertNotNull(realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage2, realGrayImage3);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage2);
      assertEquals(4, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage3.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float[][] floatArray0 = new float[0][4];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ROI rOI0 = new ROI(1, 1, (-1932), 1);
      assertEquals(1934, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-1932), rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = 1;
      int int1 = 0;
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(string0);
      assertEquals(0, floatArray0.length);
      assertEquals("0:0\n", string0);
      
      rOI0.setROI(1, 1, 0, 1);
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((-2379.41F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(imageProducer0);
      assertEquals(0, floatArray0.length);
      
      float float0 = realGrayImage0.addSum();
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      realGrayImage0.byteSize();
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage1.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(97, 2);
      assertEquals(2, realGrayImage0.Y());
      assertEquals(97, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage(97, 128, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(1, 1, 0, 1);
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      int int0 = 0;
      rOI0.setROI(1, 0, 0, 1);
      assertEquals(2, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = 2053;
      RealGrayImage realGrayImage0 = new RealGrayImage(2053, 2075);
      assertEquals(2053, realGrayImage0.X());
      assertEquals(2075, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      assertEquals(2, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(2053, realGrayImage0.X());
      assertEquals(2075, realGrayImage0.Y());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(2, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage1.median(1626);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1509;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(1509, (-1134));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ROI rOI0 = null;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      ROI rOI0 = new ROI(0, (-571), 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(572, rOI0.Y());
      assertEquals((-571), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(string0);
      assertEquals(4, floatArray0.length);
      assertEquals("0:0\n", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add(0.0F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      realGrayImage1.median(0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI(0, 1795, 1795, 4328);
      assertEquals(2534, rOI0.Y());
      assertEquals(1795, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(4328, rOI0.ly());
      assertEquals(1795, rOI0.uy());
      assertEquals(1796, rOI0.X());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(2047, 0);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(2047, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1795
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 1109;
      RealGrayImage realGrayImage0 = new RealGrayImage(1109, 1109);
      assertEquals(1109, realGrayImage0.X());
      assertEquals(1109, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      int int1 = (-800);
      // Undeclared exception!
      realGrayImage0.toString();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[][] floatArray0 = new float[0][4];
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI((-1831), 221, 1, 221);
      assertEquals(1, rOI0.lx());
      assertEquals(221, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-1831), rOI0.ux());
      assertEquals(1833, rOI0.X());
      assertEquals(221, rOI0.uy());
      
      rOI0.setROI(1, 1, 0, 1);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      assertEquals(0, floatArray0.length);
      
      ROI rOI1 = new ROI(2087, (-1), 16, 16);
      assertEquals(2087, rOI1.lx());
      assertEquals(16, rOI1.ux());
      assertEquals((-1), rOI1.uy());
      assertEquals(2072, rOI1.X());
      assertEquals(18, rOI1.Y());
      assertEquals(16, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI(2079, 1, 16, (-2644));
      assertEquals(2064, rOI2.X());
      assertEquals(2079, rOI2.lx());
      assertEquals(2646, rOI2.Y());
      assertEquals((-2644), rOI2.uy());
      assertEquals(1, rOI2.ly());
      assertEquals(16, rOI2.ux());
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((-3230), 1, (float) (-1831), rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2643
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }
}
