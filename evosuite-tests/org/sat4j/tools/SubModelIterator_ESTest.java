/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:53:14 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubModelIterator_ESTest extends SubModelIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams((-3342));
      int[] intArray0 = new int[4];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, subsetVarOrder0, fixedPeriodRestarts0, iLogAble0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      VecInt vecInt0 = new VecInt();
      SubModelIterator subModelIterator0 = new SubModelIterator(minOneDecorator0, vecInt0, (-3342));
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsStringSolver0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      SubModelIterator subModelIterator0 = new SubModelIterator((ISolver) null, vecInt0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(subModelIterator0);
      subModelIterator0.setDecorated(minOneDecorator0);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      String[] stringArray0 = new String[0];
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(stringArray0, subModelIteratorArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(manyCore0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(4416, 4416);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solutionCounter0, vecInt0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(abstractMinimalModel0, checkMUSSolutionListener0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4CardinalityModel0, vecInt0, 4416);
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator(dimacsStringSolver0, (IVecInt) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink((-343));
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator((ISolver) null, vecInt0, (-343));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector((ISolver) null);
      VecInt vecInt0 = new VecInt(5146, 5146);
      SubModelIterator subModelIterator0 = new SubModelIterator(singleSolutionDetector0, vecInt0);
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator(dimacsStringSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(1476);
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator((ISolver) null, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      SubModelIterator subModelIterator0 = new SubModelIterator((ISolver) null, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }
}
