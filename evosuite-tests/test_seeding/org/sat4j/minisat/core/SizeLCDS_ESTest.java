/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:03:54 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.MemoryBasedConflictTimer;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SizeLCDS;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeLCDS_ESTest extends SizeLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, pureOrder0, (RestartStrategy) null);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, (ConflictTimer) null);
      solver0.verbose = true;
      Constr constr0 = Constr.TAUTOLOGY;
      Vec<Constr> vec0 = new Vec<Constr>(1311, constr0);
      sizeLCDS0.reduce(vec0);
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(0.0, 241);
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-407));
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, arminRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, arminRestarts0);
      Constr[] constrArray0 = new Constr[5];
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      vec0.growTo((-854), atLeast0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(1945);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, tabuListDecorator0, noRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = sizeLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, pureOrder0, fixedPeriodRestarts0);
      Solver<ClausalDataStructureWL> solver1 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver1, 1242);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, memoryBasedConflictTimer0);
      UnitClause unitClause0 = new UnitClause(1242);
      Vec<Constr> vec0 = new Vec<Constr>(1242, unitClause0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, randomWalkDecorator0, (RestartStrategy) null);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, (ConflictTimer) null);
      VecInt vecInt0 = new VecInt(227, 227);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(vecInt0);
      Vec<Constr> vec0 = new Vec<Constr>(227, constr0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, pureOrder0, (RestartStrategy) null);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, (ConflictTimer) null);
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = AtLeast.atLeastNew(solver0, lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        sizeLCDS0.onConflictAnalysis(constr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solver<CardinalityDataStructure> solver0 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
      Solver<ClausalDataStructureWL> solver1 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver1, 1219);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, memoryBasedConflictTimer0);
      // Undeclared exception!
      try { 
        sizeLCDS0.onConflictAnalysis((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SizeLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, randomWalkDecorator0, (RestartStrategy) null);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, (ConflictTimer) null);
      VecInt vecInt0 = new VecInt(227, 227);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(vecInt0);
      sizeLCDS0.onConflictAnalysis(constr0);
      assertEquals(1.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-438));
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, arminRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, arminRestarts0);
      sizeLCDS0.onConflictAnalysis(atLeast0);
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 839);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, arminRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>(839, atLeast0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, arminRestarts0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, arminRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, arminRestarts0);
      sizeLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, arminRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, arminRestarts0);
      String string0 = sizeLCDS0.toString();
      assertEquals("Sized based learned constraints deletion strategy with timer Armin Biere (Picosat) restarts strategy", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, arminRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, arminRestarts0);
      ConflictTimer conflictTimer0 = sizeLCDS0.getTimer();
      assertSame(arminRestarts0, conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      LubyRestarts lubyRestarts0 = new LubyRestarts(94);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, lubyRestarts0);
      sizeLCDS0.onClauseLearning((Constr) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-438));
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, arminRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, arminRestarts0);
      sizeLCDS0.onPropagation(atLeast0);
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
  }
}
