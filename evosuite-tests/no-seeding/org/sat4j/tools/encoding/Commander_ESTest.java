/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:29:41 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Commander;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Commander_ESTest extends Commander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt(404, 10);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      // Undeclared exception!
      commander0.addExactlyOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-1427.11970425064));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, eMARestarts0);
      LexicoDecorator<Solver<MixedDataStructureDanielWLConciseBinary>> lexicoDecorator0 = new LexicoDecorator<Solver<MixedDataStructureDanielWLConciseBinary>>(solver0);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[0] = 1161;
      int int0 = (-337);
      intArray0[1] = (-337);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(statisticsSolver0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Commander commander0 = new Commander();
      int int0 = 1161;
      int[] intArray0 = new int[9];
      intArray0[0] = (-337);
      intArray0[1] = 3;
      intArray0[2] = (-337);
      intArray0[3] = 404;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 404;
      intArray0[7] = (-337);
      intArray0[8] = 33;
      VecInt vecInt0 = new VecInt(intArray0);
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0, iLogAble0);
      NegationDecorator<Solver<MixedDataStructureDanielWLConciseBinary>> negationDecorator0 = new NegationDecorator<Solver<MixedDataStructureDanielWLConciseBinary>>(solver0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(negationDecorator0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(2925);
      try { 
        commander0.addExactly(iSolver0, vecInt0, 2925);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      try { 
        commander0.addExactlyOne(iSolver0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-1427.11970425064));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, eMARestarts0);
      LexicoDecorator<Solver<MixedDataStructureDanielWLConciseBinary>> lexicoDecorator0 = new LexicoDecorator<Solver<MixedDataStructureDanielWLConciseBinary>>(solver0);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      levelBasedVarOrderHeap0.addLevel(iVecInt0);
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[0] = 1161;
      SearchParams searchParams0 = new SearchParams(1161, 1161);
      SolverStats solverStats0 = new SolverStats();
      eMARestarts0.init(searchParams0, solverStats0);
      intArray0[1] = 1161;
      intArray0[2] = (-4227);
      intArray0[3] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      commander0.addAtMostOne(lexicoDecorator0, vecInt0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\", shape=box, color=\"red\", style=filled]";
      stringArray0[1] = "";
      VecInt vecInt1 = new VecInt(1282, 1161);
      commander0.addExactlyOne(lexicoDecorator0, vecInt0);
      // Undeclared exception!
      commander0.addAtMostOne(lexicoDecorator0, vecInt1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt(867, 867);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      // Undeclared exception!
      commander0.addExactlyOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-1427.11970425064));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, eMARestarts0);
      LexicoDecorator<Solver<MixedDataStructureDanielWLConciseBinary>> lexicoDecorator0 = new LexicoDecorator<Solver<MixedDataStructureDanielWLConciseBinary>>(solver0);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      int[] intArray0 = new int[4];
      intArray0[0] = 1161;
      intArray0[1] = (-337);
      intArray0[2] = (-4227);
      intArray0[3] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      commander0.addAtMostOne(lexicoDecorator0, vecInt0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\", shape=box, color=\"red\", style=filled]";
      stringArray0[1] = "";
      stringArray0[2] = "]Okg})";
      stringArray0[3] = "bunzip2 -c ";
      stringArray0[4] = "4/ikk~PbO(TK#eC0Ao5";
      stringArray0[5] = "";
      stringArray0[6] = "";
      ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Commander commander0 = new Commander();
      // Undeclared exception!
      try { 
        commander0.addExactly((ISolver) null, (IVecInt) null, (-2565));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Commander commander0 = new Commander();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      searchParams0.toString();
      PureOrder pureOrder0 = new PureOrder(0);
      searchParams0.toString();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 2338);
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, lubyRestarts0);
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, lubyRestarts0);
      searchParams0.setClaDecay((-6.526));
      FullClauseSelectorSolver<Solver<MixedDataStructureDanielWLConciseBinary>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<MixedDataStructureDanielWLConciseBinary>>(solver1, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      try { 
        commander0.addExactly(solver0, iVecInt0, 5000);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 27;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Commander commander0 = new Commander();
      int int1 = 389;
      VecInt vecInt0 = new VecInt(389, 27);
      IVecInt iVecInt0 = vecInt0.clone();
      commander0.addExactlyOne(dimacsStringSolver0, iVecInt0);
      // Undeclared exception!
      commander0.addExactly(dimacsStringSolver0, vecInt0, 389);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Commander commander0 = new Commander();
      Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 0);
      ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>>(false, solverArray0);
      SolutionFoundListener solutionFoundListener0 = null;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, 774L, (SolutionFoundListener) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(modelIteratorToSATAdapter0, false);
      maxSatDecorator0.createBlockingClauseForCurrentModel();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(manyCore0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, arminRestarts0);
      FullClauseSelectorSolver<Solver<MixedDataStructureDanielWLConciseBinary>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<MixedDataStructureDanielWLConciseBinary>>(solver0, false);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      randomWalkDecorator0.setLits(iLits0);
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, arminRestarts0);
      mixedDataStructureDanielWLConciseBinary0.setLearner(solver1);
      IVecInt iVecInt0 = VecInt.EMPTY;
      mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(iVecInt0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.setVarDecay(1106.12081622);
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, arminRestarts0);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(fullClauseSelectorSolver0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Commander commander0 = new Commander();
      Commander commander1 = new Commander();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      try { 
        commander0.addExactlyOne(iSolver0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(609);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, iVecInt0, solutionFoundListener0);
      commander0.addExactly(minimal4CardinalityModel0, iVecInt0, 0);
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      SearchParams searchParams0 = new SearchParams(0, 2284);
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      vecInt0.iterator();
      eMARestarts0.reset();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = null;
      try {
        solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, (MixedDataStructureDanielWLConciseBinary) null, searchParams0, pureOrder0, eMARestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Commander commander0 = new Commander();
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, (RestartStrategy) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int int0 = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Commander commander0 = new Commander();
      Solver<MixedDataStructureDanielWLConciseBinary>[] solverArray0 = (Solver<MixedDataStructureDanielWLConciseBinary>[]) Array.newInstance(Solver.class, 0);
      ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielWLConciseBinary>>(false, solverArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      int int0 = 3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      VecInt vecInt0 = new VecInt(3, 3);
      commander0.addAtMostOne(maxSatDecorator0, vecInt0);
      maxSatDecorator0.createBlockingClauseForCurrentModel();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(manyCore0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt(27, 27);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Commander commander0 = new Commander();
      ISolver iSolver0 = null;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 99;
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      // Undeclared exception!
      try { 
        commander0.addAtMostOne((ISolver) null, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt(10, 10);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      // Undeclared exception!
      try { 
        commander0.addExactly(dimacsStringSolver0, vecInt0, 680);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 680
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt(10, 10);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      commander0.addExactlyOne(dimacsStringSolver0, vecInt0);
      assertEquals(6, dimacsStringSolver0.nVars());
      assertEquals(34, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(dimacsOutputSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
