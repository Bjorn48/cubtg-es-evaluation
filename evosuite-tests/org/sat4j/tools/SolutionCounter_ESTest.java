/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 21:50:54 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.SolutionCounter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SolutionCounter_ESTest extends SolutionCounter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(287);
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 9;
      intArray0[1] = (-515);
      int int0 = 3;
      intArray0[2] = 3;
      intArray0[3] = (-641);
      intArray0[4] = (-562);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, true).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn((Object) intArray0, (Object) null).when(iSolver0).model();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounter0.countSolutions();
      solutionCounter0.countSolutions();
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolutionCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[4];
      DimacsStringSolver dimacsStringSolver0 = mock(DimacsStringSolver.class, new ViolatedAssumptionAnswer());
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolver0;
      dimacsStringSolverArray0[3] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      ModelIterator modelIterator0 = new ModelIterator(manyCore0, 2223L);
      SolutionCounter solutionCounter0 = new SolutionCounter(modelIterator0);
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, true);
      fullClauseSelectorSolver0.newVar((-2654));
      SolutionCounter solutionCounter0 = new SolutionCounter(minimal4CardinalityModel0);
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[2];
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(minimal4CardinalityModel0).modelWithInternalVariables();
      doReturn(true).when(minimal4CardinalityModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((-4103)).when(minimal4CardinalityModel0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, true);
      SolutionCounter solutionCounter0 = new SolutionCounter(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounter0.setTimeoutMs((-318L));
      // Undeclared exception!
      try { 
        solutionCounter0.countSolutions();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-1));
      solutionCounter0.findModel(iVecInt0);
      long long0 = solutionCounter0.countSolutions();
      assertEquals(2, solutionCounter0.lowerBound());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounter0.countSolutions();
      int int0 = solutionCounter0.lowerBound();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      int int0 = solutionCounter0.lowerBound();
      assertEquals(0, int0);
  }
}
