/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:37:02 GMT 2019
 */

package org.ow2.proactive.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.Serializable;
import java.net.URL;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.script.ScriptEngine;
import javax.script.SimpleBindings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.ow2.proactive.scripting.ForkEnvironmentScript;
import org.ow2.proactive.scripting.Script;
import org.ow2.proactive.scripting.ScriptResult;
import org.ow2.proactive.scripting.ScriptTest;
import org.ow2.proactive.scripting.SelectionScript;
import org.ow2.proactive.scripting.SimpleScript;
import org.ow2.proactive.scripting.TaskScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Script_ESTest extends Script_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("javascript", "javascript");
      assertEquals("javascript", simpleScript0.getId());
      
      simpleScript0.id = ")%|KtF_J";
      String string0 = simpleScript0.display();
      assertEquals(" { \nScript 'SimpleScript'\n\tscriptEngineLookupName = 'javascript'\n\tscript = \njavascript\n\tid = \n)%|KtF_J\n\tparameters = null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript((String) null, "t_J.D^`4W 5", true);
      String string0 = selectionScript0.display();
      assertEquals(" { \nScript 'SelectionScript'\n\tscriptEngineLookupName = 't_J.D^`4W 5'\n\tscript = \nnull\n\tid = \nnull\n\tparameters = null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[4];
      LinkedHashSet<SimpleScript> linkedHashSet0 = new LinkedHashSet<SimpleScript>(1048576);
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      boolean boolean0 = linkedHashSet0.add(simpleScript0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("fQ\"#Wr7Zs", "org.ow2.proactive.scripting.Script$1");
      String string0 = simpleScript0.getEngineName();
      assertNotNull(string0);
      assertEquals("fQ\"#Wr7Zs", simpleScript0.getScript());
      assertEquals("org.ow2.proactive.scripting.Script$1", string0);
      assertEquals("fQ\"#Wr7Zs", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("https", "https");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      assertEquals("https", forkEnvironmentScript0.getScript());
      
      forkEnvironmentScript0.setScript((String) null);
      boolean boolean0 = simpleScript0.equals(forkEnvironmentScript0);
      assertTrue(boolean0);
      assertEquals("SimpleScript", forkEnvironmentScript0.getScriptName());
      assertEquals("https", forkEnvironmentScript0.getEngineName());
      assertEquals("https", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "j>Mb8Q");
      URL uRL0 = mockFile0.toURL();
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0, ";wY<}F!$dM48;S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Script<ChronoLocalDate> script0 = (Script<ChronoLocalDate>) mock(Script.class, CALLS_REAL_METHODS);
      SelectionScript selectionScript0 = new SelectionScript(script0, true);
      selectionScript0.setScript("(mkfuQ(}!7c3 \"c");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(selectionScript0);
      String string0 = forkEnvironmentScript0.fetchScriptWithExceptionHandling();
      assertEquals("(mkfuQ(}!7c3 \"c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Script<ScriptTest.ScriptForTests> script0 = (Script<ScriptTest.ScriptForTests>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      taskScript0.setScript("MD5");
      String string0 = taskScript0.fetchScript();
      assertEquals("MD5", taskScript0.getScript());
      assertEquals("MD5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("#;!51.0c.o~", "SkQDu7m%5");
      scriptTest_ScriptForTests0.fetchUrlIfNeeded();
      assertEquals("#;!51.0c.o~", scriptTest_ScriptForTests0.getId());
      assertEquals("#;!51.0c.o~", scriptTest_ScriptForTests0.getScript());
      assertEquals("SkQDu7m%5", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("", "");
      boolean boolean0 = simpleScript0.equals(simpleScript0);
      assertEquals("", simpleScript0.getScript());
      assertEquals("", simpleScript0.getEngineName());
      assertTrue(boolean0);
      assertEquals("", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = new File("!|H.R");
      Serializable[] serializableArray0 = new Serializable[2];
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(file0, serializableArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to read script : /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/!|H.R
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("javascript", "javascript");
      String string0 = simpleScript0.toString();
      assertEquals("javascript", simpleScript0.getId());
      assertEquals("SimpleScript", string0);
      assertEquals("javascript", simpleScript0.getScript());
      assertEquals("javascript", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("args", "MD5");
      String string0 = Script.readFile(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[9];
      SimpleScript simpleScript0 = new SimpleScript("", "", serializableArray0);
      String string0 = simpleScript0.getScriptName();
      assertEquals("", simpleScript0.getScript());
      assertEquals("", simpleScript0.getEngineName());
      assertEquals("", simpleScript0.getId());
      assertEquals("SimpleScript", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, "Jw9");
      String string0 = scriptTest_ScriptForTests0.getScript();
      assertEquals("Jw9", scriptTest_ScriptForTests0.getEngineName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("", "#[`Azm/)doW:MGtkdL");
      String string0 = scriptTest_ScriptForTests0.getScript();
      assertEquals("#[`Azm/)doW:MGtkdL", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("", scriptTest_ScriptForTests0.getId());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("1KjbT}C&!y\"vM~}FG0S", "t");
      simpleScript0.getReader();
      assertEquals("1KjbT}C&!y\"vM~}FG0S", simpleScript0.getScript());
      assertEquals("t", simpleScript0.getEngineName());
      assertEquals("1KjbT}C&!y\"vM~}FG0S", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("Z\"}%&", "");
      simpleScript0.getParameters();
      assertEquals("Z\"}%&", simpleScript0.getScript());
      assertEquals("Z\"}%&", simpleScript0.getId());
      assertEquals("", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[4];
      SimpleScript simpleScript0 = new SimpleScript("5T7#j%,L", "5T7#j%,L", serializableArray0);
      Serializable[] serializableArray1 = simpleScript0.getParameters();
      assertNotNull(serializableArray1);
      assertEquals("5T7#j%,L", simpleScript0.getScript());
      assertEquals("5T7#j%,L", simpleScript0.getEngineName());
      assertEquals("5T7#j%,L", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("", "org.ow2.proactive.http.CommonHttpResourceDownloader", false);
      String string0 = selectionScript0.fetchScriptWithExceptionHandling();
      assertEquals("", selectionScript0.getId());
      assertEquals("org.ow2.proactive.http.CommonHttpResourceDownloader", selectionScript0.getEngineName());
      assertEquals("", string0);
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Script.digest("[3X~+@I#P4-Uy");
      assertEquals("\uFFFD\uFFFDbJ\uFFFD\uFFFD@|Ob8?x\uFFFD'\u0002", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (Serializable[]) null);
      ScriptEngine scriptEngine0 = simpleScript0.createScriptEngine();
      assertNull(scriptEngine0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.readFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("javascrYiht");
      try { 
        Script.readFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Script<ScriptTest.ScriptForTests> script0 = (Script<ScriptTest.ScriptForTests>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      // Undeclared exception!
      try { 
        taskScript0.overrideDefaultScriptName("MD5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      SimpleScript simpleScript0 = new SimpleScript(taskScript0);
      // Undeclared exception!
      try { 
        simpleScript0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[1];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      // Undeclared exception!
      taskScript0.fetchUrlIfNeeded();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (Serializable[]) null);
      // Undeclared exception!
      try { 
        simpleScript0.fetchUrlIfNeeded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[10];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7xzt8pYf&rKVQ@", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ScriptResult<Object> scriptResult0 = simpleScript0.execute((Map<String, Object>) simpleBindings0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertNull(scriptResult0.getOutput());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("kazo{", "?D0ZY,e%{ SdXPH#4q");
      String string0 = scriptTest_ScriptForTests0.getId();
      assertEquals("?D0ZY,e%{ SdXPH#4q", scriptTest_ScriptForTests0.getEngineName());
      assertEquals("kazo{", string0);
      assertEquals("kazo{", scriptTest_ScriptForTests0.getScript());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("javascriht", "javascriht");
      assertEquals("SimpleScript", simpleScript0.getScriptName());
      
      simpleScript0.overrideDefaultScriptName("javascriht");
      assertEquals("javascriht", simpleScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("javascript", "javascript");
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      taskScript0.overrideDefaultScriptName("args");
      assertEquals("javascript", taskScript0.getScript());
      assertEquals("javascript", taskScript0.getEngineName());
      assertEquals("SimpleScript", taskScript0.getScriptName());
      assertEquals("javascript", taskScript0.getId());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      SimpleScript simpleScript0 = new SimpleScript("args", "MD5");
      TaskScript taskScript0 = new TaskScript(selectionScript0);
      boolean boolean0 = simpleScript0.equals(taskScript0);
      assertFalse(boolean0);
      assertEquals("SimpleScript", simpleScript0.getScriptName());
      assertEquals("args", simpleScript0.getScript());
      assertEquals("args", simpleScript0.getId());
      assertEquals("MD5", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("args", "selected");
      boolean boolean0 = simpleScript0.equals("args");
      assertFalse(boolean0);
      assertEquals("args", simpleScript0.getId());
      assertEquals("selected", simpleScript0.getEngineName());
      assertEquals("args", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("args", "MD5");
      boolean boolean0 = simpleScript0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("args", simpleScript0.getScript());
      assertEquals("args", simpleScript0.getId());
      assertEquals("MD5", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      taskScript0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/java.text.DateFormat0java.text.DateFormat");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = MockFile.createTempFile("java.text.DateFormat", "java.text.DateFormat");
      String string0 = Script.readFile(file0);
      assertEquals("\u0000\n", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleBindings simpleBindings0 = new SimpleBindings();
      Serializable[] serializableArray0 = new Serializable[9];
      SelectionScript selectionScript0 = new SelectionScript("0s{G", "To", serializableArray0, true);
      selectionScript0.prepareBindings(simpleBindings0);
      assertEquals("To", selectionScript0.getEngineName());
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("0s{G", selectionScript0.getId());
      assertEquals("0s{G", selectionScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      SimpleBindings simpleBindings0 = new SimpleBindings();
      selectionScript0.prepareBindings(simpleBindings0);
      assertTrue(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SimpleScript simpleScript0 = new SimpleScript("javascript", "javascript");
          // Undeclared exception!
          try { 
            simpleScript0.execute();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"nashorn.createContext\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:492)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:463)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:129)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:125)
             // java.security.AccessController.doPrivileged(Native Method)
             // jdk.nashorn.api.scripting.NashornScriptEngine.<init>(NashornScriptEngine.java:125)
             // jdk.nashorn.api.scripting.NashornScriptEngineFactory.getScriptEngine(NashornScriptEngineFactory.java:148)
             // org.ow2.proactive.scripting.Script.findScriptEngineCandidates(Script.java:545)
             // org.ow2.proactive.scripting.Script.createScriptEngine(Script.java:521)
             // org.ow2.proactive.scripting.Script.execute(Script.java:375)
             // org.ow2.proactive.scripting.Script.execute(Script.java:352)
             // sun.reflect.GeneratedMethodAccessor160.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7xzt8pYf&rKVQ@", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ScriptResult<Serializable> scriptResult0 = taskScript0.execute((Map<String, Object>) simpleBindings0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertTrue(scriptResult0.errorOccured());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("caller_class, ", "[]Gz7ogX");
      simpleScript0.execute();
      assertEquals("caller_class, ", simpleScript0.getScript());
      assertEquals("[]Gz7ogX", simpleScript0.getEngineName());
      assertEquals("caller_class, ", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[5];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-vw\" )utuhn");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ScriptResult<Object> scriptResult0 = simpleScript0.execute((Map<String, Object>) hashMap0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertNull(scriptResult0.getHostname());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[10];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      // Undeclared exception!
      try { 
        simpleScript0.fetchScriptWithExceptionHandling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      String string0 = taskScript0.fetchScriptWithExceptionHandling();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      URL uRL0 = MockURL.getFtpExample();
      selectionScript0.url = uRL0;
      String string0 = selectionScript0.fetchScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("", "a'!zl@{}");
      TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
      String string0 = taskScript0.fetchScript();
      assertEquals("", string0);
      assertEquals("TestScript", taskScript0.getScriptName());
      assertEquals("", taskScript0.getId());
      assertEquals("a'!zl@{}", taskScript0.getEngineName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.digest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      File file0 = MockFile.createTempFile("zQkrYzh", "org.ow2.proactive.scripting.Script$ScriptContentAndEngineName");
      Serializable[] serializableArray0 = new Serializable[5];
      SelectionScript selectionScript0 = new SelectionScript(file0, serializableArray0, false);
      assertEquals("/tmp/zQkrYzh0org.ow2.proactive.scripting.Script$ScriptContentAndEngineName", selectionScript0.getId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, "w");
      scriptTest_ScriptForTests0.getScriptUrl();
      assertEquals("w", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      String string0 = selectionScript0.fetchScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getHttpExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "javax.script.filename", false);
      // Undeclared exception!
      try { 
        scriptTest_ScriptForTests0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      String string0 = taskScript0.toString();
      assertNull(string0);
  }
}
