/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 20:34:35 GMT 2019
 */

package fr.unice.gfarce.interGraph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fr.unice.gfarce.interGraph.ModifTableStockage;
import fr.unice.gfarce.interGraph.TableStockage;
import java.awt.HeadlessException;
import java.text.Format;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModifTableStockage_ESTest extends ModifTableStockage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(866, 866);
      assertEquals(865, tableStockage0.getRowCount());
      assertEquals(866, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(865, tableStockage0.getRowCount());
      assertEquals(866, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.supprimerColonne((-2597));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2, 2);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerLigne(0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(2, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[][] objectArray0 = new Object[3][1];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerLigne(155);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(0, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(2, tableStockage1.getRowCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Object[][] objectArray0 = new Object[0][0];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(4, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(4, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerColonne(0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(4, stringArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(4, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertEquals(3, tableStockage1.getColumnCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[][] objectArray0 = new Object[8][4];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(8, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(8, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerColonne(0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(1, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(8, tableStockage0.getRowCount());
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(8, tableStockage1.getRowCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(866, 866);
      assertEquals(865, tableStockage0.getRowCount());
      assertEquals(866, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(865, tableStockage0.getRowCount());
      assertEquals(866, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      modifTableStockage0.supprimerLigne(866);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.supprimerLigne(2642);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2, 2);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(2, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(2, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.supprimerLigne((-5149));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.supprimerColonne((-1745));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Object[][] objectArray0 = new Object[4][4];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(5, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      Class<String> class0 = String.class;
      tableStockage0.setColumnClass(0, class0);
      assertEquals(5, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      
      // Undeclared exception!
      try { 
        modifTableStockage0.separerColonne(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " 2\"#k{]-)&>X$";
      Object[][] objectArray0 = new Object[6][8];
      objectArray0[0] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(6, objectArray0.length);
      assertEquals(6, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(5, stringArray0.length);
      assertEquals(6, objectArray0.length);
      assertEquals(6, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.separerColonne(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(871, 871);
      assertEquals(870, tableStockage0.getRowCount());
      assertEquals(871, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(870, tableStockage0.getRowCount());
      assertEquals(871, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.separerColonne(871);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 871
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2580, 2580);
      assertEquals(2580, tableStockage0.getColumnCount());
      assertEquals(2579, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(2580, tableStockage0.getColumnCount());
      assertEquals(2579, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.selectMail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.colonneMail();
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.selectMail();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(866, 866);
      assertEquals(865, tableStockage0.getRowCount());
      assertEquals(866, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(865, tableStockage0.getRowCount());
      assertEquals(866, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.fusionnerColonnes(866);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 866
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(866, 866);
      assertEquals(865, tableStockage0.getRowCount());
      assertEquals(866, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(865, tableStockage0.getRowCount());
      assertEquals(866, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      modifTableStockage0.colonneMail();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2, 2);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(2, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(2, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.ajouterLigne();
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(2, tableStockage1.getRowCount());
      assertEquals(2, tableStockage1.getColumnCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.colonneMail();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(1630, 1630);
      assertEquals(1629, tableStockage0.getRowCount());
      assertEquals(1630, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(1629, tableStockage0.getRowCount());
      assertEquals(1630, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      modifTableStockage0.ajouterLigne();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.colonneMail();
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.ajouterLigne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(3034, 3034);
      assertEquals(3034, tableStockage0.getColumnCount());
      assertEquals(3033, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(3034, tableStockage0.getColumnCount());
      assertEquals(3033, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      Class<Format.Field> class0 = Format.Field.class;
      // Undeclared exception!
      modifTableStockage0.ajouterColonne("dxT>NH4r-.Wn;7", class0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      Class<String> class0 = String.class;
      TableStockage tableStockage1 = modifTableStockage0.ajouterColonne(":HQO'=6:Du5riRZT", class0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertEquals(1, tableStockage1.getColumnCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      Class<DefaultTableModel> class1 = DefaultTableModel.class;
      // Undeclared exception!
      try { 
        modifTableStockage0.ajouterColonne(":HQO'=6:Du5riRZT", class1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ModifTableStockage modifTableStockage0 = null;
      try {
        modifTableStockage0 = new ModifTableStockage((TableStockage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " 2\"#k{]-)&>X$";
      stringArray0[1] = " 2\"#k{]-)&>X$";
      stringArray0[2] = " 2\"#k{]-)&>X$";
      stringArray0[3] = " 2\"#k{]-)&>X$";
      stringArray0[4] = "Envoyer E-Mail a:";
      Object[][] objectArray0 = new Object[1][3];
      objectArray0[0] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(5, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(1, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.selectMail();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Boolean
         //
         verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "fr.unice.gfarce.interGraph.TableStockage";
      stringArray0[1] = "ERREUR";
      stringArray0[2] = "";
      stringArray0[3] = "!iobm";
      stringArray0[4] = "u5";
      stringArray0[5] = ";.n?Lx}S";
      stringArray0[6] = "U}pBsUC@eXX2n&aG";
      stringArray0[7] = "";
      Object[][] objectArray0 = new Object[3][7];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(8, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(8, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(8, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.selectMail();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "ERREUR";
      stringArray0[2] = "";
      Object[][] objectArray0 = new Object[3][7];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(8, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(8, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(8, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.fusionnerColonnes(1);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(8, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(8, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(7, tableStockage1.getColumnCount());
      assertEquals(3, tableStockage1.getRowCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Object[][] objectArray0 = new Object[3][7];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(8, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(8, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(8, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.fusionnerColonnes(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.ModifTableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.fusionnerColonnes(537);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = " <St";
      Object[][] objectArray0 = new Object[8][0];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      objectArray0[4] = (Object[]) stringArray0;
      Object[] objectArray1 = new Object[4];
      objectArray1[1] = (Object) "eMz=CKJN]3";
      objectArray0[5] = objectArray1;
      objectArray0[6] = (Object[]) stringArray0;
      objectArray0[7] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(8, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(3, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(8, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerColonne(0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(3, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(8, tableStockage0.getRowCount());
      assertEquals(2, tableStockage1.getColumnCount());
      assertEquals(8, tableStockage1.getRowCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      ModifTableStockage modifTableStockage1 = new ModifTableStockage(tableStockage1);
      assertFalse(modifTableStockage1.equals((Object)modifTableStockage0));
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(3, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(8, tableStockage0.getRowCount());
      assertEquals(2, tableStockage1.getColumnCount());
      assertEquals(8, tableStockage1.getRowCount());
      assertNotNull(modifTableStockage1);
      
      TableStockage tableStockage2 = modifTableStockage1.separerColonne(0);
      assertFalse(modifTableStockage1.equals((Object)modifTableStockage0));
      assertFalse(tableStockage2.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage0));
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(modifTableStockage0.equals((Object)modifTableStockage1));
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(3, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertEquals(8, tableStockage2.getRowCount());
      assertEquals(3, tableStockage2.getColumnCount());
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(8, tableStockage0.getRowCount());
      assertEquals(2, tableStockage1.getColumnCount());
      assertEquals(8, tableStockage1.getRowCount());
      assertNotNull(tableStockage2);
      assertNotSame(modifTableStockage1, modifTableStockage0);
      assertNotSame(tableStockage2, tableStockage1);
      assertNotSame(tableStockage2, tableStockage0);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage0, tableStockage2);
      assertNotSame(modifTableStockage0, modifTableStockage1);
      assertNotSame(tableStockage1, tableStockage2);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = " 2\"#k{]-rJ>X$";
      Object[][] objectArray0 = new Object[3][4];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(5, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.separerColonne(1);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(5, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage1.getRowCount());
      assertEquals(6, tableStockage1.getColumnCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5#8-&@%";
      Object[][] objectArray0 = new Object[4][4];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(5, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.separerColonne(0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(5, 5);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage0.getRowCount());
      assertNotNull(modifTableStockage0);
      
      // Undeclared exception!
      try { 
        modifTableStockage0.separerColonne(0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Object[][] objectArray0 = new Object[4][4];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(5, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.supprimerLigne(0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(5, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage1.getRowCount());
      assertEquals(5, tableStockage1.getColumnCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(5, 5);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertNotNull(modifTableStockage0);
      
      TableStockage tableStockage1 = modifTableStockage0.colonneMail();
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(6, tableStockage1.getColumnCount());
      assertEquals(4, tableStockage1.getRowCount());
      assertNotNull(tableStockage1);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage1, tableStockage0);
      
      TableStockage tableStockage2 = modifTableStockage0.supprimerColonne(5);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage1));
      assertFalse(tableStockage2.equals((Object)tableStockage0));
      assertEquals(4, tableStockage0.getRowCount());
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(4, tableStockage2.getRowCount());
      assertEquals(5, tableStockage2.getColumnCount());
      assertNotNull(tableStockage2);
      assertNotSame(tableStockage0, tableStockage2);
      assertNotSame(tableStockage0, tableStockage1);
      assertNotSame(tableStockage2, tableStockage1);
      assertNotSame(tableStockage2, tableStockage0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(3063, 3063);
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      // Undeclared exception!
      modifTableStockage0.supprimerColonne(1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Object[][] objectArray0 = new Object[3][4];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      tableStockage0.setColumnClass(1, class0);
      TableStockage tableStockage1 = modifTableStockage0.ajouterLigne();
      assertEquals(5, tableStockage1.getColumnCount());
      assertEquals(4, tableStockage1.getRowCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " 2\"#k{]-rJ>X$";
      Object[][] objectArray0 = new Object[3][4];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      TableStockage tableStockage1 = modifTableStockage0.ajouterLigne();
      assertEquals(4, tableStockage1.getRowCount());
      assertEquals(5, tableStockage1.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      // Undeclared exception!
      try { 
        modifTableStockage0.ajouterLigne();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2, 2);
      ModifTableStockage modifTableStockage0 = new ModifTableStockage(tableStockage0);
      Class<Integer> class0 = Integer.class;
      TableStockage tableStockage1 = modifTableStockage0.ajouterColonne("", class0);
      assertEquals(3, tableStockage1.getColumnCount());
      assertEquals(1, tableStockage1.getRowCount());
  }
}
