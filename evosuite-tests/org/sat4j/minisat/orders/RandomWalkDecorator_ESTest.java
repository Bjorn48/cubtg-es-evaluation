/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:06:05 GMT 2019
 */

package org.sat4j.minisat.orders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomWalkDecorator_ESTest extends RandomWalkDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.select();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      randomWalkDecorator0.setLits(iLits0);
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[8];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      randomWalkDecorator0.varDecayActivity();
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 2298.6);
      randomWalkDecorator0.setVarDecay(2298.6);
      assertEquals(2298.6, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1120.9812);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      randomWalkDecorator0.printStat(mockPrintWriter0, "random walks\t: ");
      assertEquals(1120.9812, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 337.07736562017277);
      randomWalkDecorator0.varActivity(0);
      assertEquals(337.07736562017277, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2161.452891792;
      subsetVarOrder0.activity = doubleArray0;
      double double0 = randomWalkDecorator0.varActivity(1);
      assertEquals(2161.452891792, double0, 0.01);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      String string0 = randomWalkDecorator0.toString();
      assertEquals("VSIDS like heuristics from MiniSAT using a heap phase appearing in latest learned clause with random walks 0.01", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, pureOrder0, arminRestarts0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-1.0));
      randomWalkDecorator0.init();
      randomWalkDecorator0.select();
      assertEquals((-1.0), randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.activity = null;
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      randomWalkDecorator0.getVariableHeuristics();
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      randomWalkDecorator0.getVariableHeuristics();
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1120.9812);
      double double0 = randomWalkDecorator0.getProbability();
      assertEquals(1120.9812, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder((-1497));
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-1497));
      double double0 = randomWalkDecorator0.getProbability();
      assertEquals((-1497.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder((-1640));
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.varActivity((-1640));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -820
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.updateVarAtDecisionLevel(2144341499);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.updateVar(5000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(501);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-2360.158748995887), 337);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, arminRestarts0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2360.158748995887));
      randomWalkDecorator0.init();
      // Undeclared exception!
      try { 
        randomWalkDecorator0.undo((-1597));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1597
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.setLits((ILits) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.getPhaseSelectionStrategy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-682.44443203));
      randomWalkDecorator0.setPhaseSelectionStrategy((IPhaseSelectionStrategy) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.assignLiteral(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.select();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.setVarDecay((-1155.64611819));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-1.0));
      // Undeclared exception!
      try { 
        randomWalkDecorator0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.printStat((PrintWriter) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder(4609);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
      double double0 = randomWalkDecorator0.getProbability();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-2360.158748995887));
      // Undeclared exception!
      try { 
        randomWalkDecorator0.undo((-1597));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-682.44443203));
      randomWalkDecorator0.assignLiteral(8);
      assertEquals((-682.44443203), randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      randomWalkDecorator0.updateVarAtDecisionLevel((-2146955049));
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.varActivity(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      randomWalkDecorator0.setProbability((-1075.567891));
      assertEquals((-1075.567891), randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.varDecayActivity();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-682.44443203));
      // Undeclared exception!
      try { 
        randomWalkDecorator0.updateVar((-304));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -152
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      // Undeclared exception!
      try { 
        randomWalkDecorator0.getVariableHeuristics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-682.44443203));
      randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals((-682.44443203), randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null);
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      // Undeclared exception!
      try { 
        randomWalkDecorator0.setPhaseSelectionStrategy(positiveLiteralSelectionStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }
}
