/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:38:22 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.ImageProducer;
import jigl.image.ColorModel;
import jigl.image.ROI;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import jigl.internal.DummyObserver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealColorImage_ESTest extends RealColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Float float0 = realColorImage0.minComponent();
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-223), 0, (float) 1581, (float) 0, (float) 1581, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -223
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3, 3);
      assertNotNull(realColorImage0);
      assertEquals(3, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.Y());
      
      ROI rOI0 = new ROI(16, 1, 1, 16);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(16, rOI0.Y());
      assertEquals(16, rOI0.X());
      assertEquals(16, rOI0.ly());
      assertEquals(16, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(21, (-1546.4677F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.add((float) 16, 0.0F, (float) 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 12;
      RealColorImage realColorImage0 = new RealColorImage(12, 12);
      assertNotNull(realColorImage0);
      assertEquals(12, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(12, realColorImage0.X());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(12, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(12, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(12, realColorImage1.Y());
      assertEquals(12, realColorImage1.X());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage1.setColorModel(colorModel0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(12, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(12, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(12, realColorImage1.Y());
      assertEquals(12, realColorImage1.X());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(realColorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(16, 16, (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 1540;
      ROI rOI0 = new ROI((-2026), (-2026), 1540, (-3365));
      assertNotNull(rOI0);
      assertEquals((-3365), rOI0.uy());
      assertEquals((-2026), rOI0.ux());
      assertEquals(1540, rOI0.lx());
      assertEquals(3567, rOI0.X());
      assertEquals(1340, rOI0.Y());
      assertEquals((-2026), rOI0.ly());
      
      float float0 = 3.4028235E38F;
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-3365), (-4427), (float) (-3365), (float) 5, (-12.623001F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1335);
      floatArray0[1] = (float) (-1335);
      floatArray0[2] = (float) (-1335);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-1335), (-1335), floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(4, 4, (float) 3, (-32815.234F), 2796.8396F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = null;
      int int1 = (-3494);
      float[] floatArray0 = null;
      float[] floatArray1 = realColorImage0.absSum();
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-16777216), 756, (float[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[2] = (float) 1581;
      floatArray0[3] = (float) 1581;
      float[] floatArray1 = realColorImage0.addSum();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[4] = (float) 1581;
      floatArray0[5] = (float) 0;
      ROI rOI0 = new ROI(1581, 1581, 1581, 1581);
      assertNotNull(rOI0);
      assertEquals(1581, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1581, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1581, rOI0.ly());
      assertEquals(1581, rOI0.uy());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      
      Float float0 = realColorImage1.maxComponent();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      realColorImage1.byteSize();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage1.add(realColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1581
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI(3, 1, 1, 16);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(3, rOI0.lx());
      assertEquals(3, rOI0.X());
      assertEquals(16, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(586, 586, (float) 3, (float) 586, (float) 16, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 1565;
      RealColorImage realColorImage0 = new RealColorImage(1565, 1565);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1565, realColorImage0.X());
      assertEquals(1565, realColorImage0.Y());
      
      ROI rOI0 = new ROI(1565, 1565, 364, 364);
      assertNotNull(rOI0);
      assertEquals(1202, rOI0.Y());
      assertEquals(1565, rOI0.lx());
      assertEquals(1202, rOI0.X());
      assertEquals(1565, rOI0.ly());
      assertEquals(364, rOI0.ux());
      assertEquals(364, rOI0.uy());
      
      int int1 = 1574;
      // Undeclared exception!
      try { 
        realColorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[2] = (float) 1581;
      floatArray0[3] = (float) 1581;
      floatArray0[4] = (float) 1581;
      floatArray0[5] = (float) 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage1.Y());
      
      realColorImage1.byteSize();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage1.Y());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      Float float0 = new Float(32767.0);
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = realColorImage0.maxComponent();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-32768.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotSame(realColorImage0, realColorImage1);
      
      Float float3 = new Float((-1542.7736F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1542.7736F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((-759.386719685));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-759.3867F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float float5 = new Float(0.114);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(0.114F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      // Undeclared exception!
      try { 
        realColorImage1.add(1581, 2, (Float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      realColorImage0.copy();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 1581;
      ROI rOI0 = new ROI(1581, (-2236), (-2236), 16);
      assertNotNull(rOI0);
      assertEquals(2253, rOI0.Y());
      assertEquals((-2236), rOI0.uy());
      assertEquals((-2236), rOI0.ux());
      assertEquals(1581, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(3818, rOI0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2236
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int1 = (-2698);
      Float float0 = realColorImage0.minComponent();
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      Float float1 = realColorImage0.minComponent();
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(32767.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(0, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      Float float0 = realColorImage0.minComponent();
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int1 = 255;
      ROI rOI0 = new ROI(255, 255, 255, 0);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(256, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(255, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float) 0, (float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(5, 5);
      assertNotNull(realColorImage0);
      assertEquals(5, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(5, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(3, 4, 0.0F, (float) 3, (-32768.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1581;
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[2] = (float) 1581;
      floatArray0[3] = (float) 1581;
      // Undeclared exception!
      try { 
        realColorImage0.divide(1581, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1581
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-3494), 0, (float[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage1.setColorModel(colorModel0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      RealColorImage realColorImage2 = realColorImage0.add(realColorImage1);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage1);
      assertSame(realColorImage2, realColorImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI(3, 3, 1933, 825);
      assertNotNull(rOI0);
      assertEquals(823, rOI0.Y());
      assertEquals(1931, rOI0.X());
      assertEquals(3, rOI0.uy());
      assertEquals(825, rOI0.ly());
      assertEquals(3, rOI0.ux());
      assertEquals(1933, rOI0.lx());
      
      int int0 = 2807;
      rOI0.setROI(1933, 526, 2807, 825);
      assertEquals(1933, rOI0.ux());
      assertEquals(2807, rOI0.lx());
      assertEquals(875, rOI0.X());
      assertEquals(526, rOI0.uy());
      assertEquals(825, rOI0.ly());
      assertEquals(300, rOI0.Y());
      
      int int1 = 1538;
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float) 1538, (float) 2807, (float) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      RealColorImage realColorImage1 = realColorImage0.subtract(floatArray0);
      assertNotNull(realColorImage1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage1.Y());
      assertArrayEquals(new float[] {1581.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      
      // Undeclared exception!
      realColorImage1.addbuffer(1581, 1581, floatArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      RealColorImage realColorImage1 = null;
      try {
        realColorImage1 = new RealColorImage(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2272);
      floatArray0[1] = (float) (-2272);
      floatArray0[2] = (float) 16;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-2272), 16, floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(613, 613);
      assertNotNull(realColorImage0);
      assertEquals(613, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(613, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      String string0 = realColorImage0.toString(rOI0);
      assertEquals("613:613\nnull \n613:613\nnull \n613:613\nnull \n", string0);
      assertNotNull(string0);
      assertEquals(613, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(613, realColorImage0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      Integer integer0 = new Integer((-3136));
      assertEquals((-3136), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      float[] floatArray0 = new float[19];
      floatArray0[0] = (float) 0;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3, 3);
      assertNotNull(realColorImage0);
      assertEquals(3, realColorImage0.X());
      assertEquals(3, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI(1, 1554, 1555, 252);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.ux());
      assertEquals(1554, rOI0.ly());
      assertEquals(1555, rOI0.lx());
      assertEquals(252, rOI0.uy());
      assertEquals(1303, rOI0.Y());
      assertEquals(1555, rOI0.X());
      
      ROI rOI1 = new ROI(2979, 558, 3, (-2467));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(2979, rOI1.lx());
      assertEquals((-2467), rOI1.uy());
      assertEquals(3026, rOI1.Y());
      assertEquals(558, rOI1.ly());
      assertEquals(3, rOI1.ux());
      assertEquals(2977, rOI1.X());
      
      RealColorImage realColorImage1 = realColorImage0.copy();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(3, realColorImage0.X());
      assertEquals(3, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, realColorImage1.X());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract((-2467), 1.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2467
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 1572;
      int int1 = 1581;
      float[] floatArray0 = new float[1];
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(realColorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      RealColorImage realColorImage0 = new RealColorImage(1558, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(1558, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      realColorImage0.byteSize();
      assertEquals(0, realColorImage0.Y());
      assertEquals(1558, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage(1558, 0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage1.Y());
      assertEquals(1558, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(realColorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      RealColorImage realColorImage1 = new RealColorImage(3433, 3433);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = 16;
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float) 16, 1.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      RealColorImage realColorImage0 = new RealColorImage(1558, 0);
      assertNotNull(realColorImage0);
      assertEquals(1558, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(1558, 1558, (float) 0, (float) 1558, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1558
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      ColorModel colorModel0 = realColorImage1.getColorModel();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, colorModel0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      RealColorImage realColorImage2 = realColorImage1.addbuffer(0, 0, 0, 0, floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      assertEquals(3, floatArray0.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      
      RealColorImage realColorImage3 = realColorImage0.subtract(realColorImage2);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertNotNull(realColorImage3);
      assertEquals(3, floatArray0.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(0, realColorImage3.X());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage2, realColorImage3);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage1);
      assertNotSame(realColorImage3, realColorImage2);
      
      realColorImage3.colorModel = colorModel0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(0, realColorImage3.X());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) 1454;
      RealColorImage realColorImage4 = realColorImage3.addbuffer(0, 1454, floatArray1);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage4.equals((Object)realColorImage1));
      assertFalse(realColorImage4.equals((Object)realColorImage2));
      assertFalse(realColorImage4.equals((Object)realColorImage0));
      assertFalse(realColorImage4.equals((Object)realColorImage3));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(realColorImage2.equals((Object)realColorImage3));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(realColorImage4);
      assertEquals(3, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage4.X());
      assertEquals(1454, realColorImage4.Y());
      assertEquals(ColorModel.RGB, realColorImage4.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(0, realColorImage3.X());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1454.0F}, floatArray1, 0.01F);
      assertNotSame(realColorImage0, realColorImage4);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage4);
      assertNotSame(realColorImage4, realColorImage1);
      assertNotSame(realColorImage4, realColorImage2);
      assertNotSame(realColorImage4, realColorImage0);
      assertNotSame(realColorImage4, realColorImage3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(realColorImage2, realColorImage3);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage4);
      assertSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage1);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage4);
      assertNotSame(floatArray1, floatArray0);
      
      RealColorImage realColorImage5 = realColorImage1.addbuffer(0, 0, floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage4));
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage4));
      assertFalse(realColorImage5.equals((Object)realColorImage3));
      assertFalse(realColorImage5.equals((Object)realColorImage2));
      assertFalse(realColorImage5.equals((Object)realColorImage4));
      assertFalse(realColorImage5.equals((Object)realColorImage0));
      assertFalse(realColorImage5.equals((Object)realColorImage1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(realColorImage5);
      assertEquals(3, floatArray0.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage5.getColorModel());
      assertEquals(0, realColorImage5.Y());
      assertEquals(0, realColorImage5.X());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realColorImage0, realColorImage4);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage5);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage4);
      assertNotSame(realColorImage1, realColorImage5);
      assertNotSame(realColorImage5, realColorImage3);
      assertNotSame(realColorImage5, realColorImage2);
      assertNotSame(realColorImage5, realColorImage4);
      assertNotSame(realColorImage5, realColorImage0);
      assertNotSame(realColorImage5, realColorImage1);
      assertNotSame(floatArray0, floatArray1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage3.add(1550, 1550, (-683.2F), (float) 0, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1550
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[4];
      ColorModel colorModel0 = ColorModel.CMY;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 571;
      floatArray0[2] = (float) (-1797);
      floatArray0[3] = (-32768.0F);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(571, (-1797), floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI((-817), (-1890), (-817), 0);
      assertNotNull(rOI0);
      assertEquals((-1890), rOI0.uy());
      assertEquals((-817), rOI0.ux());
      assertEquals(1891, rOI0.Y());
      assertEquals((-817), rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      
      float[] floatArray0 = new float[6];
      rOI0.setROI(21, (-480), 21, 255);
      assertEquals(21, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(21, rOI0.ux());
      assertEquals(736, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-480), rOI0.uy());
      
      floatArray0[0] = 1612.6091F;
      floatArray0[1] = (float) 21;
      floatArray0[2] = (float) (-1890);
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      floatArray0[3] = (float) (-480);
      floatArray0[4] = (float) 1118;
      floatArray0[5] = (float) (-1890);
      // Undeclared exception!
      try { 
        realColorImage0.divide(0, (-817), floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[4] = (float) 1581;
      floatArray0[5] = (float) 0;
      ROI rOI0 = new ROI(1581, 1581, 1581, 1581);
      assertNotNull(rOI0);
      assertEquals(1581, rOI0.uy());
      assertEquals(1581, rOI0.ux());
      assertEquals(1581, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1581, rOI0.lx());
      
      RealColorImage realColorImage1 = realColorImage0.add((float) 0, 1581.0F, (float) 1581);
      assertNotNull(realColorImage1);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      // Undeclared exception!
      try { 
        realColorImage1.divide(1536, 1581.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1536
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 1581;
      RealColorImage realColorImage1 = realColorImage0.subtract(floatArray0);
      assertNotNull(realColorImage1);
      assertEquals(10, floatArray0.length);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(1581, realColorImage1.Y());
      assertArrayEquals(new float[] {1581.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      
      int int1 = 612;
      // Undeclared exception!
      try { 
        realColorImage0.get(612, 612);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 612
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[2] = (float) 1581;
      floatArray0[3] = (float) 1581;
      floatArray0[4] = (float) 1581;
      floatArray0[5] = (float) 0;
      ROI rOI0 = new ROI(1581, 1581, 1581, 1581);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1581, rOI0.lx());
      assertEquals(1581, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1581, rOI0.uy());
      assertEquals(1581, rOI0.ux());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage1.Y());
      
      RealColorImage realColorImage2 = realColorImage0.multiply(floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      assertEquals(6, floatArray0.length);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1581, realColorImage2.Y());
      assertArrayEquals(new float[] {1581.0F, 1581.0F, 1581.0F, 1581.0F, 1581.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((float) 0, (float) 1581, 32767.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1581
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((-1021), (-1021));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      RealGrayImage realGrayImage0 = realColorImage0.plane(0);
      assertNull(realGrayImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int1 = 1579;
      ROI rOI0 = new ROI(138, 1579, 138, 1579);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1579, rOI0.ly());
      assertEquals(138, rOI0.ux());
      assertEquals(1579, rOI0.uy());
      assertEquals(138, rOI0.lx());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1579;
      floatArray0[1] = (float) 1579;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1579;
      floatArray0[4] = 0.0F;
      RealColorImage realColorImage2 = realColorImage0.add(floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      assertEquals(5, floatArray0.length);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertArrayEquals(new float[] {1579.0F, 1579.0F, 0.0F, 1579.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      
      RealColorImage realColorImage3 = realColorImage1.add(1579.0F, 804.92725F, 0.0F);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertNotNull(realColorImage3);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage3.Y());
      assertEquals(0, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage1);
      assertNotSame(realColorImage3, realColorImage0);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      // Undeclared exception!
      try { 
        realColorImage1.divide(0, 1545.9651F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = realColorImage0.X();
      assertEquals(0, int0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI(3865, 0, 16, 128);
      assertNotNull(rOI0);
      assertEquals(3850, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(3865, rOI0.lx());
      assertEquals(16, rOI0.ux());
      assertEquals(128, rOI0.ly());
      assertEquals(129, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.min(0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 3;
      RealColorImage realColorImage0 = new RealColorImage(3, 3);
      assertNotNull(realColorImage0);
      assertEquals(3, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.X());
      
      int int1 = 618;
      float float0 = 262.29395F;
      Float float1 = new Float(262.29395F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(262.29395F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((double) 618);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(618.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      int int2 = (-2225);
      Float float4 = new Float((-1694.5188F));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-1694.5188F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float float5 = new Float(316.4974);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals(316.4974F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float2;
      floatArray0[1] = float2;
      floatArray0[2] = float3;
      floatArray0[3] = float4;
      floatArray0[4] = float5;
      floatArray0[5] = float4;
      float float6 = (-877.8F);
      // Undeclared exception!
      try { 
        realColorImage0.add(0.0F, 1270.3F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(1760, (-816), 8, (-816));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals((-816), rOI1.uy());
      assertEquals(1753, rOI1.X());
      assertEquals((-816), rOI1.ly());
      assertEquals(1760, rOI1.lx());
      assertEquals(8, rOI1.ux());
      assertEquals(1, rOI1.Y());
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1565;
      floatArray0[1] = (float) 1565;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      Float float0 = realColorImage0.minComponent();
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = 16;
      float float1 = 0.0F;
      RealColorImage realColorImage1 = realColorImage0.subtract(1.0F, 0.0F, (float) 16);
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      
      int int1 = (-1);
      ROI rOI0 = new ROI(2048, (-1), 16, 16);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.ly());
      assertEquals(2048, rOI0.lx());
      assertEquals(18, rOI0.Y());
      assertEquals(16, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(2033, rOI0.X());
      
      RealColorImage realColorImage2 = new RealColorImage();
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage2.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-649);
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI((-1522), 556, 556, (-649));
      assertNotNull(rOI0);
      assertEquals(2079, rOI0.X());
      assertEquals(556, rOI0.lx());
      assertEquals((-649), rOI0.uy());
      assertEquals(556, rOI0.ly());
      assertEquals(1206, rOI0.Y());
      assertEquals((-1522), rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(556, 556, 0.0F, 0.0F, (float) (-649), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(255, (float) 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 255;
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = (-321);
      int int1 = 1;
      // Undeclared exception!
      try { 
        realColorImage0.min(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 0;
      ROI rOI0 = new ROI(255, 0, 255, 0);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(255, rOI0.ux());
      
      rOI0.setROI(0, 16, 1760, 0);
      assertEquals(1761, rOI0.X());
      assertEquals(16, rOI0.ly());
      assertEquals(1760, rOI0.lx());
      assertEquals(17, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(4859, 16, 255, 3795);
      assertEquals(4859, rOI0.lx());
      assertEquals(3780, rOI0.Y());
      assertEquals(16, rOI0.uy());
      assertEquals(3795, rOI0.ly());
      assertEquals(4605, rOI0.X());
      assertEquals(255, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(255, 255, 0.0F, 0.0F, 4368.2F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(1221, 1221, 0, 128);
      assertEquals(1221, rOI0.lx());
      assertEquals(1221, rOI0.ly());
      assertEquals(128, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1222, rOI0.X());
      assertEquals(1094, rOI0.Y());
      
      int int0 = 1275;
      rOI0.setROI(1221, 1221, 128, 1275);
      assertEquals(1221, rOI0.lx());
      assertEquals(128, rOI0.ux());
      assertEquals(1094, rOI0.X());
      assertEquals(55, rOI0.Y());
      assertEquals(1221, rOI0.uy());
      assertEquals(1275, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage1.set(1221, 1221, (Float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(1558, 1574, (float) 0, (float) 1574, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(613, 613);
      assertNotNull(realColorImage0);
      assertEquals(613, realColorImage0.X());
      assertEquals(613, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.colorModel = colorModel0;
      assertEquals(613, realColorImage0.X());
      assertEquals(613, realColorImage0.Y());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      
      ColorModel colorModel1 = ColorModel.CMY;
      realColorImage0.setColorModel(colorModel1);
      assertFalse(colorModel1.equals((Object)colorModel0));
      assertEquals(613, realColorImage0.X());
      assertEquals(613, realColorImage0.Y());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertNotSame(colorModel1, colorModel0);
      
      RealColorImage realColorImage1 = realColorImage0.copy(rOI0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(613, realColorImage0.X());
      assertEquals(613, realColorImage0.Y());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.CMY, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      ROI rOI1 = new ROI(121, 1540, 690, 2045);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1540, rOI1.uy());
      assertEquals(121, rOI1.ux());
      assertEquals(690, rOI1.lx());
      assertEquals(570, rOI1.X());
      assertEquals(506, rOI1.Y());
      assertEquals(2045, rOI1.ly());
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      assertEquals(613, realColorImage0.X());
      assertEquals(613, realColorImage0.Y());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.CMY, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage2.X());
      assertEquals(ColorModel.CMY, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.Y());
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage1.multiply((float) 0, 1.4E-45F, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3, 3);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.Y());
      assertEquals(3, realColorImage0.X());
      
      ROI rOI0 = new ROI(3, 1, 1, 16);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.ly());
      assertEquals(3, rOI0.X());
      assertEquals(16, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(3, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.min(1564);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1564
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[2] = (float) 1581;
      floatArray0[3] = (float) 1581;
      floatArray0[4] = (float) 1581;
      floatArray0[5] = (float) 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI((-879), 682, (-879), (-879));
      assertEquals((-879), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(682, rOI0.ly());
      assertEquals((-879), rOI0.uy());
      assertEquals((-879), rOI0.ux());
      assertEquals(1562, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -879
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3, 3);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.Y());
      assertEquals(3, realColorImage0.X());
      
      Float float0 = new Float(262.29395F);
      assertEquals(262.29395F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) 618);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(618.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-1694.5188F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1694.5188F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(316.4974);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(316.4974F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float3;
      floatArray0[3] = float3;
      int int0 = (-654);
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 618;
      floatArray1[1] = (float) floatArray0[0];
      floatArray1[2] = (float) 618;
      floatArray1[3] = (float) floatArray0[2];
      String string0 = realColorImage0.toString();
      assertEquals("3:3\nnull null null \nnull null null \nnull null null \n3:3\nnull null null \nnull null null \nnull null null \n3:3\nnull null null \nnull null null \nnull null null \n", string0);
      assertNotNull(string0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.Y());
      assertEquals(3, realColorImage0.X());
      
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      ROI rOI0 = new ROI(618, (-3220), 935, 1551);
      assertNotNull(rOI0);
      assertEquals(935, rOI0.lx());
      assertEquals(4772, rOI0.Y());
      assertEquals(618, rOI0.ux());
      assertEquals(1551, rOI0.ly());
      assertEquals((-3220), rOI0.uy());
      assertEquals(318, rOI0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-654), (-654), floatArray1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3874
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage1.setColorModel(colorModel0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      RealColorImage realColorImage2 = realColorImage0.add(realColorImage1);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage1);
      assertSame(realColorImage2, realColorImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      
      RealColorImage realColorImage2 = realColorImage1.multiply(0, 0.0F);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      
      ROI rOI0 = new ROI((-16777216), 660, (-1967), 1543);
      assertNotNull(rOI0);
      assertEquals(660, rOI0.uy());
      assertEquals((-1967), rOI0.lx());
      assertEquals(884, rOI0.Y());
      assertEquals(16775250, rOI0.X());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(1543, rOI0.ly());
      
      RealColorImage realColorImage3 = realColorImage1.copy();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertNotNull(realColorImage3);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage3.X());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertNotSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage3);
      assertSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage1);
      assertNotSame(realColorImage3, realColorImage2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      realColorImage0.byteSize();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int1 = (-1478);
      realColorImage0.clip(0, (-1478));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int2 = 0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      ROI rOI0 = new ROI(0, 0, 8, (-1478));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1479, rOI0.Y());
      assertEquals((-1478), rOI0.uy());
      assertEquals(9, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(8, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1478
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-2026), (-2026), (float) (-2026), (float) (-2026), 3082.7727F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = (-817);
      ColorModel colorModel0 = ColorModel.HSV;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.HSV, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int1 = realColorImage0.X();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(ColorModel.HSV, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float float0 = 3177.77F;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 0, 3177.77F, (float) 0, 4644.645F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      Float float0 = realColorImage0.minComponent();
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      Float float1 = realColorImage0.minComponent();
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(32767.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 0;
      float float2 = 1201.511F;
      float float3 = 0.0F;
      int int1 = 255;
      int int2 = (-1986);
      ROI rOI0 = new ROI(255, 255, 255, (-1986));
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertEquals(2242, rOI0.Y());
      assertEquals((-1986), rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract((float) 0, (float) 0, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1986
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int0 = 16;
      int int1 = 0;
      int int2 = 0;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(16, 16, 0, 0, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 5;
      RealColorImage realColorImage0 = new RealColorImage(5, 5);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(5, realColorImage0.X());
      assertEquals(5, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 1581;
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 1581;
      RealColorImage realColorImage1 = realColorImage0.subtract(floatArray0);
      assertNotNull(realColorImage1);
      assertEquals(10, floatArray0.length);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage1.Y());
      assertArrayEquals(new float[] {1581.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      
      RealColorImage realColorImage2 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage2.Y());
      assertEquals(0, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      
      RealColorImage realColorImage3 = realColorImage1.add(floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertNotNull(realColorImage3);
      assertEquals(10, floatArray0.length);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(0, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1581, realColorImage3.Y());
      assertArrayEquals(new float[] {1581.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage3);
      assertSame(realColorImage3, realColorImage0);
      assertSame(realColorImage3, realColorImage1);
      assertNotSame(realColorImage3, realColorImage2);
      
      ROI rOI0 = new ROI(1581, 1581, 1581, 17);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1581, rOI0.ux());
      assertEquals(1581, rOI0.ly());
      assertEquals(1581, rOI0.lx());
      assertEquals(1565, rOI0.Y());
      assertEquals(17, rOI0.uy());
      
      // Undeclared exception!
      realColorImage3.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      RealColorImage realColorImage1 = new RealColorImage(236, 236);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(236, realColorImage1.Y());
      assertEquals(236, realColorImage1.X());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      int int0 = 268;
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      
      int int1 = 4177;
      ROI rOI0 = new ROI(268, 268, 268, 4177);
      assertNotNull(rOI0);
      assertEquals(268, rOI0.ux());
      assertEquals(268, rOI0.uy());
      assertEquals(3910, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(4177, rOI0.ly());
      assertEquals(268, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(realColorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add(255, 255, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI((-157), 2, 1581, 0);
      assertEquals(1739, rOI0.X());
      assertEquals((-157), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1581, rOI0.lx());
      assertEquals(2, rOI0.ly());
      assertEquals(3, rOI0.Y());
      
      rOI0.setROI((-157), 0, 0, 255);
      assertEquals(158, rOI0.X());
      assertEquals((-157), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(256, rOI0.Y());
      assertEquals(255, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) 1581.0F;
      Float float0 = new Float(3335.0F);
      assertEquals(3335.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[1] = float0;
      // Undeclared exception!
      try { 
        realColorImage0.set((-157), (-157), floatArray1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -157
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1976, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1976, realColorImage0.X());
      
      RealColorImage realColorImage1 = null;
      try {
        realColorImage1 = new RealColorImage((-3681), 1721);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      ColorModel colorModel0 = ColorModel.CMY;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(0, 0, 1581, 1581);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1582, rOI1.Y());
      assertEquals(1581, rOI1.ly());
      assertEquals(1581, rOI1.lx());
      assertEquals(1582, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      ROI rOI2 = new ROI();
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      
      rOI2.setROI((-241), 0, 0, 1581);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(1582, rOI2.Y());
      assertEquals(242, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals((-241), rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1581, rOI2.ly());
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      
      // Undeclared exception!
      try { 
        realColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(602, 602);
      assertNotNull(realColorImage0);
      assertEquals(602, realColorImage0.Y());
      assertEquals(602, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(602, (float) 602);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 602
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      ColorModel colorModel0 = ColorModel.HLS;
      realColorImage1.setColorModel(colorModel0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.HLS, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertNotSame(realColorImage1, realColorImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 268;
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      ROI rOI0 = new ROI(268, 268, 268, 4177);
      assertNotNull(rOI0);
      assertEquals(4177, rOI0.ly());
      assertEquals(3910, rOI0.Y());
      assertEquals(268, rOI0.uy());
      assertEquals(268, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(268, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract((float) 268, 2439.143F, (float) 4177, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage1.set(1221, 1221, (Float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 613;
      RealColorImage realColorImage0 = new RealColorImage(613, 613);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(613, realColorImage0.Y());
      assertEquals(613, realColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.colorModel = colorModel0;
      assertEquals(613, realColorImage0.Y());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(613, realColorImage0.X());
      
      ColorModel colorModel1 = ColorModel.CMY;
      realColorImage0.setColorModel(colorModel1);
      assertFalse(colorModel1.equals((Object)colorModel0));
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(613, realColorImage0.Y());
      assertEquals(613, realColorImage0.X());
      assertNotSame(colorModel1, colorModel0);
      
      RealColorImage realColorImage1 = realColorImage0.copy(rOI0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(613, realColorImage0.Y());
      assertEquals(613, realColorImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(ColorModel.CMY, realColorImage1.getColorModel());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      float float0 = (-3807.1807F);
      // Undeclared exception!
      try { 
        realColorImage0.divide(613, (-3807.1807F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 613
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = 268;
      RealColorImage realColorImage1 = new RealColorImage();
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      int int1 = 4177;
      // Undeclared exception!
      try { 
        realColorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      int int1 = 1581;
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[2] = (float) 1581;
      RealColorImage realColorImage1 = realColorImage0.subtract(floatArray0);
      assertNotNull(realColorImage1);
      assertEquals(6, floatArray0.length);
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertArrayEquals(new float[] {1581.0F, 1581.0F, 1581.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      
      int int2 = 2091;
      // Undeclared exception!
      try { 
        realColorImage1.get(0, 1581);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1581
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1569, 1569);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1569, realColorImage0.Y());
      assertEquals(1569, realColorImage0.X());
      
      int int0 = 998;
      int int1 = (-736);
      ROI rOI0 = new ROI(998, 998, (-736), 1879);
      assertNotNull(rOI0);
      assertEquals(998, rOI0.uy());
      assertEquals(882, rOI0.Y());
      assertEquals(1879, rOI0.ly());
      assertEquals(998, rOI0.lx());
      assertEquals((-736), rOI0.ux());
      assertEquals(1735, rOI0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-736), 1879, (float) 1879, (float) (-736), (float) 998, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2877
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(3, 3);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, realColorImage0.X());
      assertEquals(3, realColorImage0.Y());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(618, 618, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 618
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 0, (float) 0, (float) 0, 4644.645F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      RealColorImage realColorImage0 = new RealColorImage(3, 1075);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1075, realColorImage0.Y());
      assertEquals(3, realColorImage0.X());
      
      int int0 = realColorImage0.Y();
      assertEquals(1075, int0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1075, realColorImage0.Y());
      assertEquals(3, realColorImage0.X());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.clip(1568, 1568, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 255;
      float float0 = 0.0F;
      float float1 = 4368.2F;
      int int1 = 0;
      ROI rOI0 = new ROI(255, 0, 255, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(255, rOI0.lx());
      
      int int2 = 4859;
      int int3 = 16;
      int int4 = 0;
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      RealColorImage realColorImage0 = new RealColorImage(3, 3);
      assertNotNull(realColorImage0);
      assertEquals(3, realColorImage0.X());
      assertEquals(3, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(3, 3, 3082.7727F, (float) 3, 3082.7727F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 1581;
      RealColorImage realColorImage1 = realColorImage0.subtract(floatArray0);
      assertNotNull(realColorImage1);
      assertEquals(10, floatArray0.length);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(1581, realColorImage1.Y());
      assertArrayEquals(new float[] {1581.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      
      RealColorImage realColorImage2 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(1581, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      
      RealColorImage realColorImage3 = realColorImage1.add(floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertNotNull(realColorImage3);
      assertEquals(10, floatArray0.length);
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(0, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1581, realColorImage3.Y());
      assertArrayEquals(new float[] {1581.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage1);
      assertSame(realColorImage3, realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage2.subtract(1530, 1581, 1581.0F, (float) 1530, 196.3874F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1581
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 4368.2F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 255;
      floatArray0[5] = 4368.2F;
      floatArray0[6] = (float) 4859;
      floatArray0[7] = (float) 255;
      // Undeclared exception!
      try { 
        realColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(5, 5);
      assertNotNull(realColorImage0);
      assertEquals(5, realColorImage0.Y());
      assertEquals(5, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      ColorModel colorModel0 = ColorModel.CMY;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(5, realColorImage0.Y());
      assertEquals(5, realColorImage0.X());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(5, realColorImage0.Y());
      assertEquals(5, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(5, realColorImage1.Y());
      assertEquals(5, realColorImage1.X());
      
      int int0 = realColorImage1.X();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(5, int0);
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      assertEquals(5, realColorImage0.Y());
      assertEquals(5, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(5, realColorImage1.Y());
      assertEquals(5, realColorImage1.X());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      ROI rOI0 = new ROI(1543, 1572, 1536, 1475);
      assertNotNull(rOI0);
      assertEquals(1475, rOI0.uy());
      assertEquals(1572, rOI0.ly());
      assertEquals(1543, rOI0.lx());
      assertEquals(1536, rOI0.ux());
      assertEquals(8, rOI0.X());
      assertEquals(98, rOI0.Y());
      
      rOI0.setROI(4885, 3396, 1475, (-897));
      assertEquals(1475, rOI0.ux());
      assertEquals(4885, rOI0.lx());
      assertEquals(3396, rOI0.ly());
      assertEquals((-897), rOI0.uy());
      assertEquals(3411, rOI0.X());
      assertEquals(4294, rOI0.Y());
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) (-2562);
      floatArray0[1] = (float) 1543;
      floatArray0[2] = (float) (-2562);
      floatArray0[3] = (float) 3396;
      floatArray0[4] = (float) 1536;
      floatArray0[5] = 1798.0F;
      floatArray0[6] = (float) 4885;
      floatArray0[7] = (float) 1536;
      floatArray0[8] = (float) (-2562);
      // Undeclared exception!
      try { 
        realColorImage1.multiply(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -897
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      
      ColorModel colorModel0 = realColorImage1.getColorModel();
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertEquals(ColorModel.RGB, colorModel0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      RealColorImage realColorImage2 = realColorImage1.addbuffer(0, 0, 0, 0, floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      assertEquals(3, floatArray0.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      
      RealColorImage realColorImage3 = realColorImage0.subtract(realColorImage2);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertNotNull(realColorImage3);
      assertEquals(3, floatArray0.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(0, realColorImage3.X());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage3);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage1);
      assertSame(realColorImage3, realColorImage0);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = (float) 0;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) 1454;
      RealColorImage realColorImage4 = realColorImage3.addbuffer(0, 1454, floatArray1);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage4.equals((Object)realColorImage2));
      assertFalse(realColorImage4.equals((Object)realColorImage0));
      assertFalse(realColorImage4.equals((Object)realColorImage3));
      assertFalse(realColorImage4.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(realColorImage2.equals((Object)realColorImage3));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(realColorImage4);
      assertEquals(3, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage4.X());
      assertEquals(1454, realColorImage4.Y());
      assertEquals(ColorModel.RGB, realColorImage4.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(0, realColorImage3.X());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1454.0F}, floatArray1, 0.01F);
      assertNotSame(realColorImage0, realColorImage4);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage4, realColorImage2);
      assertNotSame(realColorImage4, realColorImage0);
      assertNotSame(realColorImage4, realColorImage3);
      assertNotSame(realColorImage4, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage4);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(realColorImage2, realColorImage3);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage4);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage3, realColorImage4);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage1);
      assertSame(realColorImage3, realColorImage0);
      assertNotSame(floatArray1, floatArray0);
      
      RealColorImage realColorImage5 = realColorImage1.addbuffer(0, 0, floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage4));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage4));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage5.equals((Object)realColorImage2));
      assertFalse(realColorImage5.equals((Object)realColorImage4));
      assertFalse(realColorImage5.equals((Object)realColorImage1));
      assertFalse(realColorImage5.equals((Object)realColorImage0));
      assertFalse(realColorImage5.equals((Object)realColorImage3));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(realColorImage5);
      assertEquals(3, floatArray0.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage5.X());
      assertEquals(0, realColorImage5.Y());
      assertEquals(ColorModel.RGB, realColorImage5.getColorModel());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realColorImage0, realColorImage5);
      assertNotSame(realColorImage0, realColorImage4);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage5);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage4);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage5, realColorImage2);
      assertNotSame(realColorImage5, realColorImage4);
      assertNotSame(realColorImage5, realColorImage1);
      assertNotSame(realColorImage5, realColorImage0);
      assertNotSame(realColorImage5, realColorImage3);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      DummyObserver dummyObserver1 = new DummyObserver();
      assertFalse(dummyObserver1.equals((Object)dummyObserver0));
      assertNotNull(dummyObserver1);
      
      DummyObserver.dummy = dummyObserver1;
      DummyObserver.dummy = dummyObserver0;
      Float float0 = new Float((-4306.61));
      assertEquals((-4306.61F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = 2834;
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      // Undeclared exception!
      try { 
        realColorImage0.add(2834, 2834, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      int int1 = 1581;
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[2] = (float) 1581;
      floatArray0[3] = (float) 1581;
      // Undeclared exception!
      try { 
        realColorImage0.divide(1, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 8;
      int int1 = 231;
      RealColorImage realColorImage0 = new RealColorImage(8, 231);
      assertNotNull(realColorImage0);
      assertEquals(231, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(231, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(231, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      float float0 = (-723.3F);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realColorImage1.multiply((-723.3F), 1.4E-45F, (-723.3F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[2] = (float) 1581;
      floatArray0[3] = (float) 1581;
      floatArray0[4] = (float) 1581;
      floatArray0[5] = (float) 0;
      ROI rOI0 = new ROI(1581, 1581, 1581, 1581);
      assertNotNull(rOI0);
      assertEquals(1581, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1581, rOI0.ux());
      assertEquals(1581, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1581, rOI0.lx());
      
      RealColorImage realColorImage1 = realColorImage0.multiply(floatArray0);
      assertNotNull(realColorImage1);
      assertEquals(6, floatArray0.length);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertArrayEquals(new float[] {1581.0F, 1581.0F, 1581.0F, 1581.0F, 1581.0F, 0.0F}, floatArray0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      
      RealColorImage realColorImage2 = new RealColorImage();
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(realColorImage2, rOI0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      realColorImage0.byteSize();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      realColorImage0.clip(0, (-1478));
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int0 = 15;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 15;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      ROI rOI0 = new ROI(15, 15, 8, (-1478));
      assertNotNull(rOI0);
      assertEquals(8, rOI0.X());
      assertEquals(15, rOI0.lx());
      assertEquals(8, rOI0.ux());
      assertEquals(15, rOI0.ly());
      assertEquals((-1478), rOI0.uy());
      assertEquals(1494, rOI0.Y());
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(15, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1581);
      assertNotNull(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1581;
      floatArray0[1] = (float) 1581;
      floatArray0[2] = (float) 1581;
      floatArray0[3] = (float) 1581;
      floatArray0[4] = (float) 1581;
      floatArray0[5] = (float) 0;
      ROI rOI0 = new ROI(1581, 1581, 1581, 1581);
      assertNotNull(rOI0);
      assertEquals(1581, rOI0.ly());
      assertEquals(1581, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1581, rOI0.uy());
      assertEquals(1581, rOI0.ux());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      RealColorImage realColorImage2 = realColorImage1.add(floatArray0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      assertEquals(6, floatArray0.length);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1581, realColorImage0.Y());
      assertEquals(1581, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1581, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertArrayEquals(new float[] {1581.0F, 1581.0F, 1581.0F, 1581.0F, 1581.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract(1536, 1581, 1581.0F, 1581.0F, 196.3874F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1581
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      realColorImage0.byteSize();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int1 = (-1478);
      realColorImage0.clip(0, (-1478));
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int2 = 0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      ROI rOI0 = new ROI(0, 0, 8, (-1478));
      assertNotNull(rOI0);
      assertEquals((-1478), rOI0.uy());
      assertEquals(1479, rOI0.Y());
      assertEquals(9, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(8, rOI0.lx());
      
      float float0 = realColorImage0.min(0);
      assertEquals(32767.0F, float0, 0.01F);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      rOI0.setROI(8, 0, 2, 8);
      assertEquals(7, rOI0.X());
      assertEquals(9, rOI0.Y());
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(8, rOI0.ly());
      assertEquals(2, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertNotNull(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage[] realGrayImageArray0 = new RealGrayImage[0];
      realColorImage0.planes = realGrayImageArray0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.add((float[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 2122;
      RealColorImage realColorImage0 = new RealColorImage(2122, 2122);
      assertNotNull(realColorImage0);
      assertEquals(2122, realColorImage0.Y());
      assertEquals(2122, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      ROI rOI0 = new ROI();
      realColorImage1.clip(int0, int0, rOI0);
  }
}
