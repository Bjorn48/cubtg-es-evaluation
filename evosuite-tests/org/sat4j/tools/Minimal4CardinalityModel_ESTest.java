/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:58:56 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4CardinalityModel_ESTest extends Minimal4CardinalityModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(11);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      minimal4CardinalityModel0.findModel((IVecInt) vecInt0);
      int[] intArray0 = minimal4CardinalityModel0.modelWithInternalVariables();
      assertEquals(11, iSolver0.nVars());
      assertArrayEquals(new int[] {(-11)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      int[] intArray0 = minimal4CardinalityModel0.findModel((IVecInt) vecInt0);
      int[] intArray1 = minimal4CardinalityModel0.modelWithInternalVariables();
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      minimal4CardinalityModel0.findModel((IVecInt) vecInt0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(maxSatDecorator0, (-954L), solutionFoundListener0);
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(modelIteratorToSATAdapter0, vecInt0);
      int[] intArray0 = minimal4CardinalityModel1.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, iVecInt0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-3006));
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      minimal4CardinalityModel0.findModel((IVecInt) vecInt0);
      // Undeclared exception!
      minimal4CardinalityModel0.model();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt(17, 17);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, vecInt0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(aSolverFactory0, stringArray0);
      VecInt vecInt0 = new VecInt(0, 0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(manyCore0, readOnlyVecInt0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(subModelIterator0, readOnlyVecInt0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      minimal4CardinalityModel0.findModel((IVecInt) vecInt0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(1, 3620, 996, 20, 16384).when(solutionCounter0).nVars();
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      SolutionCounter solutionCounter1 = new SolutionCounter(negationDecorator0);
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter1);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(clausalCardinalitiesDecorator0, checkMUSSolutionListener0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(aSolverFactory0, stringArray0);
      ASolverFactory<SolutionCounter> aSolverFactory1 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0, checkMUSSolutionListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsOutputSolver0, (IVecInt) null, (SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrinkTo(746);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, vecInt0, solutionFoundListener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-4187));
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(optToSatAdapter0, vecInt0);
      minimal4CardinalityModel0.findModel((IVecInt) vecInt0);
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(minimal4CardinalityModel0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SolutionCounter solutionCounter0 = new SolutionCounter((ISolver) null);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(solutionCounter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[9];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(false).when(solutionCounter0).isSatisfiable();
      doReturn(intArray0).when(solutionCounter0).model();
      doReturn(intArray0).when(solutionCounter0).modelWithInternalVariables();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solutionCounter0, iVecInt0);
      int[] intArray1 = minimal4CardinalityModel0.model();
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(11);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      minimal4CardinalityModel0.findModel((IVecInt) vecInt0);
      int[] intArray0 = minimal4CardinalityModel0.model();
      assertEquals(11, iSolver0.nVars());
      assertArrayEquals(new int[] {(-11)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      minimal4CardinalityModel0.findModel((IVecInt) vecInt0);
      int[] intArray0 = minimal4CardinalityModel0.model();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(11);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(solutionCounter0).nVars();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solutionCounter0, iVecInt0);
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(minimal4CardinalityModel0);
      assertFalse(minimal4CardinalityModel1.equals((Object)minimal4CardinalityModel0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((-43)).when(solutionCounter0).nVars();
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      SolutionCounter solutionCounter1 = new SolutionCounter(negationDecorator0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(solutionCounter1, solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }
}
