/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:34:41 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryClauses_ESTest extends BinaryClauses_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 768);
      VecInt vecInt0 = new VecInt(768, 768);
      binaryClauses0.calcReason(768, vecInt0);
      assertEquals(769, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(1331);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, eMARestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 0);
      binaryClauses0.addBinaryClause(48);
      boolean boolean0 = binaryClauses0.propagate(solver0, (-1));
      assertEquals(1, solver0.getPropagationLevel());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, (-1));
      binaryClauses0.addBinaryClause(0);
      binaryClauses0.removeBinaryClause(0);
      assertFalse(binaryClauses0.simplify());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, (-1));
      binaryClauses0.addBinaryClause((-1));
      int int0 = binaryClauses0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, (-14));
      // Undeclared exception!
      try { 
        binaryClauses0.removeBinaryClause((-14));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, eMARestarts0);
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, (-380));
      // Undeclared exception!
      try { 
        binaryClauses0.propagate(solver0, (-380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, (-490));
      // Undeclared exception!
      try { 
        binaryClauses0.propagate((UnitPropagationListener) null, 2334);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2334
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 2);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        binaryClauses0.calcReason(2, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 1684);
      // Undeclared exception!
      try { 
        binaryClauses0.calcReason((-1), (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, (-2791));
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(1990);
      // Undeclared exception!
      try { 
        binaryClauses0.calcReason((-1), vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1990
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 2171);
      boolean boolean0 = binaryClauses0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 1684);
      binaryClauses0.addBinaryClause(1684);
      // Undeclared exception!
      try { 
        binaryClauses0.propagatePI((MandatoryLiteralListener) null, 1684);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 1674);
      boolean boolean0 = binaryClauses0.propagatePI((MandatoryLiteralListener) null, 1674);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 768);
      VecInt vecInt0 = new VecInt(768, 768);
      // Undeclared exception!
      try { 
        binaryClauses0.calcReason((-1), vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 768);
      VecInt vecInt0 = new VecInt(768, 768);
      binaryClauses0.calcReason((-3), vecInt0);
      assertEquals(769, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 768);
      VecInt vecInt0 = new VecInt(768, 768);
      // Undeclared exception!
      try { 
        binaryClauses0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 100);
      binaryClauses0.register();
      assertFalse(binaryClauses0.locked());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 1684);
      // Undeclared exception!
      try { 
        binaryClauses0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 2285);
      binaryClauses0.rescaleBy((-160.5033));
      assertEquals(0, binaryClauses0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 1762);
      // Undeclared exception!
      try { 
        binaryClauses0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 1);
      boolean boolean0 = binaryClauses0.locked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 397);
      // Undeclared exception!
      try { 
        binaryClauses0.getAssertionLevel((IVecInt) null, 397);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 427);
      double double0 = binaryClauses0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, (-533));
      // Undeclared exception!
      try { 
        binaryClauses0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 100);
      binaryClauses0.undo(100);
      assertFalse(binaryClauses0.learnt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 16);
      int int0 = binaryClauses0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 112);
      binaryClauses0.incActivity(0.0);
      assertEquals(0, binaryClauses0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 1);
      // Undeclared exception!
      try { 
        binaryClauses0.remove((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot remove all the binary clauses at once!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 2059);
      // Undeclared exception!
      try { 
        binaryClauses0.get(2059);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, (-1));
      // Undeclared exception!
      try { 
        binaryClauses0.removeBinaryClause(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 939);
      // Undeclared exception!
      try { 
        binaryClauses0.canBeSatisfiedByCountingLiterals();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 0);
      // Undeclared exception!
      try { 
        binaryClauses0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 768);
      Constr constr0 = binaryClauses0.toConstraint();
      assertFalse(constr0.learnt());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, (-34));
      // Undeclared exception!
      try { 
        binaryClauses0.forwardActivity((-34));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 3656);
      boolean boolean0 = binaryClauses0.canBePropagatedMultipleTimes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 0);
      // Undeclared exception!
      try { 
        binaryClauses0.setActivity(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 768);
      boolean boolean0 = binaryClauses0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, (-1118));
      // Undeclared exception!
      try { 
        binaryClauses0.toString((VarMapper) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BinaryClauses binaryClauses0 = new BinaryClauses((ILits) null, 100);
      // Undeclared exception!
      try { 
        binaryClauses0.requiredNumberOfSatisfiedLiterals();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, (-984));
      binaryClauses0.setLearnt();
      assertTrue(binaryClauses0.canBePropagatedMultipleTimes());
  }
}
