/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:58:00 GMT 2019
 */

package org.ow2.proactive.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.file.AccessDeniedException;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.ow2.proactive.utils.FileUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileUtils_ESTest extends FileUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]EpM0h]c8Ez.iD");
      MockFile.createTempFile("]EpM0h]c8Ez.iD", (String) null, (File) mockFile0);
      URL uRL0 = mockFile0.toURL();
      String string0 = FileUtils.getFileNameWithExtension(uRL0);
      assertEquals("]EpM0h]c8Ez.iD", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      String string0 = FileUtils.getFileNameWithExtension(uRL0);
      assertEquals("fooExample", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = FileUtils.getExtension(".");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Properties file not found : '");
      File file0 = FileUtils.createTempDirectory("Properties file not found : '", "Properties file not found : '", mockFile0);
      file0.setReadable(false);
      FileUtils.createTempDirectory("9[9M1O}>", "Properties file not found : '", file0);
      assertFalse(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.removeDir((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.utils.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.getFileNameWithExtension((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.getExtension((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.utils.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "root");
      Path path0 = mockFile0.toPath();
      try { 
        FileUtils.deleteRecursively(path0);
        fail("Expecting exception: AccessDeniedException");
      
      } catch(AccessDeniedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.deleteRecursively((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtils.createTempDirectory((String) null, (String) null, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.log4j.xml.DOMConfigurator", "org.apache.log4j.xml.DOMConfigurator");
      try { 
        FileUtils.createTempDirectory("org.apache.log4j.xml.DOMConfigurator", "org.apache.log4j.xml.DOMConfigurator", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("WA3{?-Q&xL,~Kv_43^");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "hSr");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = FileUtils.resolvePropertiesFile("WA3{?-Q&xL,~Kv_43^");
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("WA3{?-Q&xL,~Kv_43^");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "B9r");
      Properties properties0 = FileUtils.resolvePropertiesFile("WA3{?-Q&xL,~Kv_43^");
      assertEquals(1, properties0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(".tmpdir", "2H24:*e'Fn ", 0, "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/.tmpdir/.tmpdir", uRLStreamHandler0);
      String string0 = FileUtils.getFileNameWithExtension(uRL0);
      assertEquals(".tmpdir", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("] not found.", ",B<");
      URL uRL0 = mockFile0.toURL();
      String string0 = FileUtils.getFileNameWithExtension(uRL0);
      assertEquals("] not found", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("java.lang.String", "2H24:*e'Fn ", 46, ".tmpdir", uRLStreamHandler0);
      String string0 = FileUtils.getFileNameWithExtension(uRL0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = FileUtils.getExtension("ct?c77o}.OOl-");
      assertEquals("OOl-", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = FileUtils.getExtension("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = new File("rB");
      // Undeclared exception!
      try { 
        FileUtils.createTempDirectory("rB", (String) null, file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".tmpdir", ".tmpdir");
      FileUtils.createTempDirectory(".tmpdir", "java.lang.String", mockFile0);
      FileUtils.removeDir(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          File file0 = new File("");
          FileUtils.removeDir(file0);
          assertFalse(file0.exists());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("", "");
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            FileUtils.deleteRecursively(path0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/home/xdevroey/.bash_logout\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)
             // java.nio.file.Files.delete(Files.java:1126)
             // org.ow2.proactive.utils.FileUtils$1.visitFile(FileUtils.java:80)
             // org.ow2.proactive.utils.FileUtils$1.visitFile(FileUtils.java:77)
             // java.nio.file.Files.walkFileTree(Files.java:2670)
             // java.nio.file.Files.walkFileTree(Files.java:2742)
             // org.ow2.proactive.utils.FileUtils.deleteRecursively(FileUtils.java:77)
             // sun.reflect.GeneratedMethodAccessor155.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("] not found.", ",B<");
      Path path0 = mockFile0.toPath();
      try { 
        FileUtils.deleteRecursively(path0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }
}
