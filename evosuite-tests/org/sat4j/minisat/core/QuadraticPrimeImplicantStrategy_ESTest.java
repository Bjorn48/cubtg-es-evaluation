/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:41:14 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuadraticPrimeImplicantStrategy_ESTest extends QuadraticPrimeImplicantStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.setAndPropagate(solver0, (-3718));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3718
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.compute((Solver<? extends DataStructureFactory>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the compute method first!
         //
         verifyException("org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      solver0.qhead = 5000;
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.compute(solver0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, naturalStaticOrder0, miniSATRestarts0);
      quadraticPrimeImplicantStrategy0.compute(solver0);
      int[] intArray0 = quadraticPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      PureOrder pureOrder0 = new PureOrder();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, pureOrder0, miniSATRestarts0);
      solver0.qhead = 313;
      boolean boolean0 = quadraticPrimeImplicantStrategy0.setAndPropagate(solver0, 0);
      assertEquals(1, solver0.decisionLevel());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      PureOrder pureOrder0 = new PureOrder();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, pureOrder0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.setAndPropagate(solver0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
