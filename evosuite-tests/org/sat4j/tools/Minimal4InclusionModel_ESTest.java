/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:58:14 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IOptimizationProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4InclusionModel_ESTest extends Minimal4InclusionModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-639));
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      minimal4InclusionModel0.isSatisfiable(iVecInt0);
      int[] intArray0 = minimal4InclusionModel0.modelWithInternalVariables();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4InclusionModel0);
      Minimal4InclusionModel minimal4InclusionModel1 = new Minimal4InclusionModel(maxSatDecorator0, iVecInt0);
      minimal4InclusionModel1.isSatisfiable(iVecInt0);
      int[] intArray0 = minimal4InclusionModel1.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      minimal4InclusionModel0.newVar(1);
      VecInt vecInt0 = new VecInt(32, (-639));
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      int[] intArray0 = minimal4InclusionModel0.model();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      iVecInt0.insertFirst((-639));
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0, iVecInt0);
      minimal4InclusionModel0.isSatisfiable(iVecInt0);
      minimal4InclusionModel0.model();
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable(iVecInt0);
      assertEquals(1, solver0.nConstraints());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      VecInt vecInt0 = new VecInt(2241, 2241);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(optToSatAdapter0, vecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0, iVecInt0, solutionFoundListener0);
      try { 
        minimal4InclusionModel0.isSatisfiable(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts(1689);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, lubyRestarts0);
      VecInt vecInt0 = new VecInt(1689, (-48));
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0, vecInt0);
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      minimal4InclusionModel0.model();
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      assertEquals(1, solver0.nConstraints());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-639));
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      Solver<CardinalityDataStructureYanMin>[] solverArray0 = (Solver<CardinalityDataStructureYanMin>[]) Array.newInstance(Solver.class, 4);
      solverArray0[0] = solver0;
      solverArray0[1] = solver0;
      solverArray0[2] = solver0;
      solverArray0[3] = solver0;
      ManyCore<Solver<CardinalityDataStructureYanMin>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMin>>(false, solverArray0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable(iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts(1689);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      iVecInt0.shrink(1689);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable(iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts(1689);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, lubyRestarts0);
      solver0.setTimeoutMs((-2578L));
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable(iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      VecInt vecInt0 = new VecInt(1, 1);
      vecInt0.push((-1));
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      VecInt vecInt0 = new VecInt(4209, 0);
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4InclusionModel minimal4InclusionModel1 = new Minimal4InclusionModel(iSolver0, vecInt0, checkMUSSolutionListener0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>((OptToSatAdapter) null);
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(lexicoDecorator0, (IVecInt) null, (SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      GroupClauseSelectorSolver<OptToSatAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0);
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(true, optToSatAdapterArray0);
      SolutionCounter solutionCounter0 = new SolutionCounter(manyCore0);
      ModelIterator modelIterator0 = new ModelIterator(solutionCounter0, 0L);
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(modelIterator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      VecInt vecInt0 = new VecInt(32, (-639));
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      Minimal4InclusionModel minimal4InclusionModel1 = new Minimal4InclusionModel(iSolver0, vecInt0);
      int[] intArray0 = minimal4InclusionModel1.model();
      assertArrayEquals(new int[] {639}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      VecInt vecInt0 = new VecInt(32, (-639));
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      Minimal4InclusionModel minimal4InclusionModel1 = new Minimal4InclusionModel(minimal4InclusionModel0, vecInt0);
      int[] intArray0 = minimal4InclusionModel1.modelWithInternalVariables();
      assertArrayEquals(new int[] {639}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
