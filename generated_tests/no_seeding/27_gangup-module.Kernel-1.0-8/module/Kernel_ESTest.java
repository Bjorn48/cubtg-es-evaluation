/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 21:56:54 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.MissingResourceException;
import java.util.Vector;
import module.ConfigModule;
import module.GameModule;
import module.Kernel;
import module.Message;
import module.MessageFactory;
import module.Module;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Kernel_ESTest extends Kernel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Message message0 = new Message();
      try { 
        kernel0.sendMessage(message0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      String string0 = "";
      try { 
        kernel0.loadModule("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Vector<Module> vector0 = new Vector<Module>();
      int int0 = 1134;
      ConfigModule configModule0 = null;
      try {
        configModule0 = new ConfigModule();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      String string0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) kernel0;
      Message message0 = new Message();
      try { 
        kernel0.sendMessage(message0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Module module0 = null;
      try { 
        kernel0.unregister((Module) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=null
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      LinkedHashSet<Module> linkedHashSet0 = new LinkedHashSet<Module>();
      Message message0 = new Message();
      kernel0.sendMessageNotify(linkedHashSet0, message0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Message message0 = MessageFactory.createUnloadMessage(")#<!'`CQa6}*'5hq");
      try { 
        kernel0.request(message0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Sorry, requests are not implemented in Kernel
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) kernel0;
      objectArray0[2] = (Object) "UB?O4 P^-M";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "UB?O4 P^-M";
      objectArray0[5] = (Object) "UB?O4 P^-M";
      objectArray0[6] = (Object) "";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "";
      Message message0 = MessageFactory.createErrorMessage("", objectArray0);
      kernel0.receiveMessage(message0);
      try { 
        kernel0.request("UB?O4 P^-M", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Requests are not implemented
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Kernel kernel1 = new Kernel();
      kernel0.unsubscribe((Module) kernel1);
      kernel0.start();
      String string0 = "state.NetworkData";
      String string1 = "(,|\\s+)";
      try { 
        kernel0.unloadModule("(,|s+)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=(,|s+)
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.getKernel();
      try { 
        kernel0.unregister((Module) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=null
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      String string0 = " s4TF*d~_Vg+/GHO";
      MessageFactory messageFactory0 = MessageFactory.instance;
      MessageFactory.instance = null;
      try { 
        kernel0.loadModule(" s4TF*d~_Vg+/GHO");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.ClassNotFoundException:  s4TF*d~_Vg+/GHO
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.getKernel();
      String string0 = null;
      Kernel kernel1 = new Kernel();
      Message message0 = new Message((String) null, kernel1);
      kernel0.subscribe((Module) null, "X$oNE7{F$W{K~]Hjr");
      try { 
        kernel1.unloadModule((Module) kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=module.Kernel@2: Not registered!
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Message message0 = MessageFactory.createConnectionDroppedMessage(0, "i!xx");
      assertNotNull(message0);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(4, Message.DELIVERED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(1, Message.CREATED);
      assertEquals(2, Message.RECEIVED);
      assertEquals(1, message0.getRefCount());
      assertEquals(3000L, message0.getTTL());
      assertNull(message0.getSender());
      assertFalse(message0.received());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("*", message0.getRecipient());
      assertFalse(message0.getIsConsumed());
      assertTrue(message0.getIsManaged());
      assertEquals(0L, message0.getID());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals("DROPPED", message0.getHeader());
      assertFalse(message0.delivered());
      
      kernel0.processMessage(message0);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(4, Message.DELIVERED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(1, Message.CREATED);
      assertEquals(2, Message.RECEIVED);
      assertEquals(1, message0.getRefCount());
      assertEquals(3000L, message0.getTTL());
      assertNull(message0.getSender());
      assertFalse(message0.received());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("*", message0.getRecipient());
      assertFalse(message0.getIsConsumed());
      assertTrue(message0.getIsManaged());
      assertEquals(0L, message0.getID());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals("DROPPED", message0.getHeader());
      assertFalse(message0.delivered());
      
      GameModule gameModule0 = null;
      try {
        gameModule0 = new GameModule();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      String string0 = "";
      try { 
        kernel0.unloadModule("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mod=
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Kernel kernel1 = kernel0.getKernel();
      assertNull(kernel1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Message message0 = MessageFactory.createWarningMessage("D(hSy~]<+wuoJ", objectArray0);
      assertNotNull(message0);
      assertEquals(1, objectArray0.length);
      assertEquals(2, Message.RECEIVED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(1, Message.CREATED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(4, Message.DELIVERED);
      assertEquals(0L, message0.getID());
      assertFalse(message0.received());
      assertFalse(message0.delivered());
      assertEquals(1, message0.getRefCount());
      assertEquals(3000L, message0.getTTL());
      assertEquals("WARNING", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertNull(message0.getSender());
      assertFalse(message0.getIsConsumed());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals("*", message0.getRecipient());
      assertTrue(message0.getIsManaged());
      
      try { 
        message0.send((Module) kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: modnull,msg=Message[id=0,session=0,head=WARNING,recip=*,sender=null,state=1,ttl=3000,time=1392409281320,body=Reading string from locale failed: key=D(hSy~]<+wuoJ
         // This probably means that you have an old or otherwise
         // inaccurate locale file (maybe it's missing altogether)
         // or that the classpath does not contain the directory.]
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      assertNotNull(messageFactory0);
      assertEquals(0, messageFactory0.getTotalProduced());
      
      Message message0 = messageFactory0.createMessage();
      assertNotNull(message0);
      assertEquals(4, Message.DELIVERED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(1, Message.CREATED);
      assertEquals(2, Message.RECEIVED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(1, messageFactory0.getTotalProduced());
      assertFalse(message0.received());
      assertFalse(message0.getIsConsumed());
      assertEquals(0L, message0.getID());
      assertEquals(1, message0.getRefCount());
      assertFalse(message0.delivered());
      assertEquals("", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertTrue(message0.getIsManaged());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals("*", message0.getRecipient());
      
      message0.unref();
      assertEquals(4, Message.DELIVERED);
      assertEquals(0, Message.UNDEFINED);
      assertEquals(1, Message.CREATED);
      assertEquals(2, Message.RECEIVED);
      assertEquals(3000, Message.TIME_TO_LIVE);
      assertEquals(1, messageFactory0.getTotalProduced());
      assertFalse(message0.received());
      assertEquals(0, message0.getRefCount());
      assertEquals(0L, message0.getID());
      assertTrue(message0.getIsConsumed());
      assertFalse(message0.delivered());
      assertEquals("", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertNull(message0.getSender());
      assertEquals(3000L, message0.getTTL());
      assertTrue(message0.getIsManaged());
      assertEquals(1392409281320L, message0.getTimeStamp());
      assertEquals("*", message0.getRecipient());
      
      try { 
        kernel0.processMessage(message0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Vector<Module> vector0 = new Vector<Module>();
      MessageFactory.getInstance();
      int int0 = 0;
      String string0 = "9f>\\FqgFP!eNuO";
      Module module0 = null;
      String string1 = "";
      kernel0.subscribe((Module) null, "");
      ConfigModule configModule0 = null;
      try {
        configModule0 = new ConfigModule(kernel0);
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find bundle for base name gangup, locale en
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }
}
