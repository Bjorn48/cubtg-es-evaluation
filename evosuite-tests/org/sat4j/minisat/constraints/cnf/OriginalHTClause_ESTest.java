/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:04:48 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalHTClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OriginalHTClause_ESTest extends OriginalHTClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      // Undeclared exception!
      try { 
        originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-1207));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1216.059024);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(solver0, lits0, vecInt0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
      boolean boolean0 = originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1216.059024);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lits0.satisfies(1);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(solver0, lits0, vecInt0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
      // Undeclared exception!
      try { 
        originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.forwardActivity(2518.922446);
      assertEquals(2518.922446, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1216.059024);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      int[] intArray0 = new int[4];
      intArray0[3] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(solver0, lits0, vecInt0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      boolean boolean0 = originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1216.059024);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      int[] intArray0 = new int[4];
      intArray0[3] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      // Undeclared exception!
      try { 
        OriginalHTClause.brandNewClause(solver0, lits0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(1);
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, eMARestarts0, mUSLauncher0);
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.propagate(solver0, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(2140, (-2316));
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2315
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = (-229);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.OriginalHTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, lubyRestarts0);
      // Undeclared exception!
      try { 
        originalHTClause0.propagate(solver0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        OriginalHTClause.brandNewClause((UnitPropagationListener) null, iLits0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt(16);
      IVecInt iVecInt0 = vecInt0.push(2);
      // Undeclared exception!
      try { 
        OriginalHTClause.brandNewClause((UnitPropagationListener) null, (ILits) null, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(2171);
      // Undeclared exception!
      try { 
        OriginalHTClause.brandNewClause((UnitPropagationListener) null, lits0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(iVecInt0, (ILits) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause((IVecInt) null, (ILits) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      int[] intArray0 = new int[7];
      intArray0[0] = 47;
      intArray0[1] = 47;
      intArray0[2] = (-2295);
      intArray0[3] = 47;
      intArray0[4] = 47;
      intArray0[5] = 47;
      intArray0[6] = 47;
      VecInt vecInt0 = new VecInt(intArray0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
      ILits iLits0 = solver0.getVocabulary();
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(solver0, iLits0, iVecInt0);
      originalHTClause0.register();
      assertFalse(originalHTClause0.locked());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lits0.satisfies(1);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(solver0, lits0, vecInt0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
      // Undeclared exception!
      try { 
        originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(solver0, lits0, vecInt0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      boolean boolean0 = originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
      assertTrue(boolean0);
      
      boolean boolean1 = originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1216.059024);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder(0);
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, pureOrder0, lubyRestarts0);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(solver0, lits0, vecInt0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      // Undeclared exception!
      try { 
        originalHTClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 32);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      int[] intArray0 = new int[7];
      intArray0[0] = 47;
      intArray0[1] = 47;
      intArray0[2] = (-2295);
      intArray0[3] = 47;
      intArray0[4] = 47;
      intArray0[5] = 47;
      intArray0[6] = 47;
      VecInt vecInt0 = new VecInt(intArray0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
      ILits iLits0 = solver0.getVocabulary();
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(solver0, iLits0, iVecInt0);
      originalHTClause0.setLearnt();
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.incActivity((-1310.1600912101226));
      assertEquals(5, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.setActivity((-827));
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      SearchParams searchParams0 = new SearchParams(541);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, glucose21Restarts0, (ILogAble) null);
      // Undeclared exception!
      try { 
        originalHTClause0.propagate(solver0, 541);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }
}
