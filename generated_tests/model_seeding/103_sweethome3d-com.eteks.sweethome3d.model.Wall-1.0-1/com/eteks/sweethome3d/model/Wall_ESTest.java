/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 16:01:04 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      int int0 = Float.floatToIntBits(0.4957111F);
      assertEquals(1056820696, int0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("[]R\"podo");
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      
      float float0 = ((Float)0.4957111F).floatValue();
      assertEquals(0.4957111F, float0, 0.01F);
      
      Float float1 = new Float(0.4957111F);
      assertEquals(0.4957111F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      TextureImage textureImage0 = wall1.getPattern();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(textureImage0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Float float2 = new Float(908.4869F);
      assertEquals(908.4869F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      wall0.setHeightAtEnd((Float) 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall2.getThickness(), 0.01F);
      assertEquals(908.4869F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(908.4869F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(908.4869F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall2.getXEnd(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals(908.4869F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall2.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-2344.0F), (-2344.0F), 769.3172F, (-3.4056332F), 606.28F);
      assertEquals(3895.013F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals((-787.34143F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(769.3172F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3895.013F, wall0.getLength(), 0.01F);
      assertEquals((-3.4056332F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      int int0 = Float.compare((-647.693F), 769.3172F);
      assertEquals((-1), int0);
      
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight((Float) null);
      assertEquals(3895.013F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals((-787.34143F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(769.3172F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3895.013F, wall0.getLength(), 0.01F);
      assertEquals((-3.4056332F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.move(1439.2F, (-1));
      assertEquals(3895.013F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-904.80005F), wall0.getXStart(), 0.01F);
      assertEquals((-4.405633F), wall0.getYEnd(), 0.01F);
      assertEquals(651.8585F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2345.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2208.517F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1174.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3895.013F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setXEnd((-2679.2104F));
      assertEquals((-904.80005F), wall0.getXStart(), 0.01F);
      assertEquals(2937.161F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.405633F), wall0.getYEnd(), 0.01F);
      assertEquals((-2679.2104F), wall0.getXEnd(), 0.01F);
      assertEquals((-2345.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1174.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2937.161F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1792.0052F), wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1.3759189F), (-1.3759189F), (-721.12F));
      assertFalse(boolean0);
      assertEquals((-904.80005F), wall0.getXStart(), 0.01F);
      assertEquals(2937.161F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.405633F), wall0.getYEnd(), 0.01F);
      assertEquals((-2679.2104F), wall0.getXEnd(), 0.01F);
      assertEquals((-2345.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1174.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2937.161F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1792.0052F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess((-1.3759189F));
      assertEquals((-904.80005F), wall0.getXStart(), 0.01F);
      assertEquals(2937.161F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.405633F), wall0.getYEnd(), 0.01F);
      assertEquals((-2679.2104F), wall0.getXEnd(), 0.01F);
      assertEquals((-2345.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1174.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2937.161F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1792.0052F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall(2164.53F, (-667.234F), 1.0F, 0.0F, 1898.0F);
      assertEquals(2164.53F, wall1.getXStart(), 0.01F);
      assertEquals(1898.0F, wall1.getThickness(), 0.01F);
      assertEquals(2264.081F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2264.081F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-667.234F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-333.617F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.765F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Wall wall2 = wall0.clone();
      assertEquals((-904.80005F), wall0.getXStart(), 0.01F);
      assertEquals(2937.161F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.405633F), wall0.getYEnd(), 0.01F);
      assertEquals((-2679.2104F), wall0.getXEnd(), 0.01F);
      assertEquals((-2345.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1174.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2937.161F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1792.0052F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1792.0052F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-904.80005F), wall2.getXStart(), 0.01F);
      assertEquals((-4.405633F), wall2.getYEnd(), 0.01F);
      assertEquals(2937.161F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2679.2104F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.3759189F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2345.0F), wall2.getYStart(), 0.01F);
      assertEquals(606.28F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1174.7028F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2937.161F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      Float float1 = wall2.getHeight();
      assertEquals((-904.80005F), wall0.getXStart(), 0.01F);
      assertEquals(2937.161F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.405633F), wall0.getYEnd(), 0.01F);
      assertEquals((-2679.2104F), wall0.getXEnd(), 0.01F);
      assertEquals((-2345.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1174.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2937.161F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1792.0052F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1792.0052F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-904.80005F), wall2.getXStart(), 0.01F);
      assertEquals((-4.405633F), wall2.getYEnd(), 0.01F);
      assertEquals(2937.161F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2679.2104F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.3759189F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2345.0F), wall2.getYStart(), 0.01F);
      assertEquals(606.28F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1174.7028F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2937.161F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(float1);
      
      wall1.setHeight((Float) null);
      assertEquals(2164.53F, wall1.getXStart(), 0.01F);
      assertEquals(1898.0F, wall1.getThickness(), 0.01F);
      assertEquals(2264.081F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2264.081F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-667.234F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-333.617F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.765F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall2.setHeightAtEnd((Float) null);
      assertEquals((-904.80005F), wall0.getXStart(), 0.01F);
      assertEquals(2937.161F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.405633F), wall0.getYEnd(), 0.01F);
      assertEquals((-2679.2104F), wall0.getXEnd(), 0.01F);
      assertEquals((-2345.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1174.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2937.161F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1792.0052F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1792.0052F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-904.80005F), wall2.getXStart(), 0.01F);
      assertEquals((-4.405633F), wall2.getYEnd(), 0.01F);
      assertEquals(2937.161F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2679.2104F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.3759189F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2345.0F), wall2.getYStart(), 0.01F);
      assertEquals(606.28F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1174.7028F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2937.161F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Wall wall3 = wall0.getWallAtStart();
      assertEquals((-904.80005F), wall0.getXStart(), 0.01F);
      assertEquals(2937.161F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.405633F), wall0.getYEnd(), 0.01F);
      assertEquals((-2679.2104F), wall0.getXEnd(), 0.01F);
      assertEquals((-2345.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1174.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2937.161F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1792.0052F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNull(wall3);
      
      Float float2 = wall0.getHeight();
      assertEquals((-904.80005F), wall0.getXStart(), 0.01F);
      assertEquals(2937.161F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.405633F), wall0.getYEnd(), 0.01F);
      assertEquals((-2679.2104F), wall0.getXEnd(), 0.01F);
      assertEquals((-2345.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1174.7028F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2937.161F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1792.0052F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNull(float2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 1744.9F);
      assertEquals(1744.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setArcExtent(float0);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Wall wall2 = new Wall(1744.9F, 1744.9F, 0.0F, 0.0F, (-1615.0F));
      assertEquals(1744.9F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getLength(), 0.01F);
      assertEquals(872.45F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeight());
      assertEquals((-1615.0F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1744.9F, wall2.getXStart(), 0.01F);
      assertEquals(872.45F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      boolean boolean0 = float0.equals(wall0);
      assertFalse(boolean0);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      float float1 = new Float(1744.9F);
      assertEquals(1744.9F, float1, 0.01F);
      
      float float2 = Float.sum(0.014925373F, 513.259F);
      assertEquals(513.2739F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      Float float3 = wall0.getArcExtent();
      assertEquals(1744.9F, (float)float3, 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      Float float4 = Float.valueOf(16.813103F);
      assertEquals(16.813103F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      
      float float5 = Float.sum((-1253.0F), 1744.9F);
      assertEquals(491.90002F, float5, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      
      int int0 = Float.compare(0.0F, 513.259F);
      assertEquals((-1), int0);
      
      int int1 = Float.compare(0.0F, 0.1F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float float6 = ((Float)0.1F).floatValue();
      assertEquals(0.1F, float6, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      
      int int2 = Float.compare(513.2739F, 491.90002F);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      float float7 = wall1.getThickness();
      assertEquals(1744.9F, float7, 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      float float8 = wall2.getYArcCircleCenter();
      assertEquals(872.45F, float8, 0.01F);
      assertEquals(1744.9F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getLength(), 0.01F);
      assertEquals(872.45F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeight());
      assertEquals((-1615.0F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1744.9F, wall2.getXStart(), 0.01F);
      assertEquals(872.45F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertNotEquals(float8, float1, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setWallAtEnd(wall0);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getLength(), 0.01F);
      assertEquals(872.45F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeight());
      assertEquals((-1615.0F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1744.9F, wall2.getXStart(), 0.01F);
      assertEquals(872.45F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall0.setXStart((-1730.3716F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(401.7312F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3475.2715F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1730.3716F), wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(7.264221F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3832223.5F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
      
      Integer integer0 = Integer.valueOf(1256);
      assertEquals(1256, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall((-1804.0F), 0.0F, 667.1F, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean0 = float0.equals(wall1);
      assertFalse(boolean0);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = ((Float)0.0F).floatValue();
      assertEquals(0.0F, float1, 0.01F);
      
      int int1 = Float.floatToIntBits(750.85F);
      assertEquals(1144764006, int1);
      assertFalse(int1 == int0);
      
      float float2 = ((Float)750.85F).floatValue();
      assertEquals(750.85F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      Float float3 = new Float((double) 667.1F);
      assertEquals(667.1F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      float float4 = float3.floatValue();
      assertEquals(667.1F, float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      Float float5 = new Float(0.0);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      
      float float6 = float5.floatValue();
      assertEquals(0.0F, float6, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      
      Float float7 = new Float(0.0F);
      assertEquals(0.0F, (float)float7, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      assertNotNull(float7);
      
      float float8 = float7.floatValue();
      assertEquals(0.0F, float8, 0.01F);
      assertEquals(float8, float1, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertEquals(float8, float6, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float9 = wall1.getThickness();
      assertEquals(0.0F, float9, 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertEquals(float9, float1, 0.01F);
      assertEquals(float9, float8, 0.01F);
      assertNotEquals(float9, float4, 0.01F);
      assertEquals(float9, float6, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float10 = float7.floatValue();
      assertEquals(0.0F, float10, 0.01F);
      assertEquals(float10, float8, 0.01F);
      assertEquals(float10, float1, 0.01F);
      assertEquals(float10, float9, 0.01F);
      assertNotEquals(float10, float2, 0.01F);
      assertEquals(float10, float6, 0.01F);
      assertNotEquals(float10, float4, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float8, 0.01F);
      assertEquals((float)float7, (float)float9, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setHeight((Float) null);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 1744.9F);
      assertEquals(1744.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      
      Integer integer0 = Integer.valueOf(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(107);
      assertEquals(107, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(107);
      assertEquals(107, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Float float1 = new Float(1453.0);
      assertEquals(1453.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeightAtEnd(float1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1453.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer3 = Integer.valueOf(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      wall1.setRightSideColor(integer3);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1453.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1453.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      Integer integer4 = Integer.valueOf((-2747));
      assertEquals((-2747), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      wall1.setLeftSideColor(integer4);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1453.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals((-2747), (int)wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      wall1.setXEnd(2060.719F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(315.81897F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1622.8381F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(348257.44F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1453.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1902.8096F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2747), (int)wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(2060.719F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYStart((-2747));
      assertEquals((-2747.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4953271.5F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(3480.9888F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(4491.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-501.05F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setXStart((-2747));
      assertEquals((-2237.139F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2747.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7004984.0F, wall0.getLength(), 0.01F);
      assertEquals((-2747.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6352.506F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1235.039F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setArcExtent(float0);
      assertEquals((-2237.139F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2747.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7004984.0F, wall0.getLength(), 0.01F);
      assertEquals((-2747.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6352.506F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1235.039F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(315.81897F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1622.8381F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(348257.44F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1453.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1902.8096F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2747), (int)wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(2060.719F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertEquals((-2237.139F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2747.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7004984.0F, wall0.getLength(), 0.01F);
      assertEquals((-2747.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6352.506F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1235.039F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2747.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2747.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals((-2237.139F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall2.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall2.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(6352.506F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1235.039F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(7004984.0F, wall2.getLength(), 0.01F);
      assertEquals(1744.9F, wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      wall1.setWallAtStart(wall0);
      assertEquals((-2237.139F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2747.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7004984.0F, wall0.getLength(), 0.01F);
      assertEquals((-2747.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6352.506F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1235.039F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(315.81897F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1622.8381F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(348257.44F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1453.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1902.8096F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2747), (int)wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(2060.719F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(682.0392F, 682.0392F, 682.0392F, 682.0392F, 682.0392F, 682.0392F);
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(682.0392F);
      assertEquals(682.0392F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(682.0392F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(682.0392F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall(1213.25F, 1213.25F, 1213.25F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(606.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(531.92F, 0.0F, 1213.25F, 1.0F, (-1683.5969F), (-1683.5969F));
      assertEquals(872.58496F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(681.33075F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float((double) (-1683.5969F));
      assertEquals((-1683.5969F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = float0.equals(wall1);
      assertFalse(boolean0);
      assertEquals(872.58496F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(681.33075F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.floatToIntBits(2998.5159F);
      assertEquals(1161521217, int0);
      
      boolean boolean1 = ((Float)2998.5159F).equals(wall0);
      assertFalse(boolean1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(606.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      Float float1 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall1.setArcExtent(float1);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertEquals(624.0831F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(871.66974F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(710.56995F, wall1.getLength(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer0 = new Integer(1161521217);
      assertEquals(1161521217, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-408));
      assertEquals((-408), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean2 = wall1.containsPoint(531.92F, 1161521217, 0.0F);
      assertTrue(boolean2);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertEquals(624.0831F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(871.66974F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(710.56995F, wall1.getLength(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float float2 = wall0.getLength();
      assertEquals(1213.25F, float2, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(606.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(606.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertEquals(624.0831F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(871.66974F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(710.56995F, wall1.getLength(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(1834.5604F, 1834.5604F, 1834.5604F, 915.09686F, 915.09686F, 915.09686F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(0.66760266F);
      assertEquals(0.66760266F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = new Float(0.66760266F);
      assertEquals(0.66760266F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall1.setArcExtent(float1);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(3160.2852F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(936.76324F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals(0.66760266F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("ld");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.ld
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(1213.25F, 1213.25F, 1213.25F, 1213.25F, 1213.25F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(1213.25F, wall0.getThickness(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setYStart(1213.25F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(1213.25F, wall0.getThickness(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(1213.25F, wall0.getThickness(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float(1744.9F);
      assertEquals(1744.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setArcExtent(float0);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Level level0 = new Level("9", 0.0F, 1744.9F, 0.0F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("9", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(1744.9F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      Level level2 = level1.clone();
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(2067.0479F, level2.getHeight(), 0.01F);
      assertEquals("?:", level2.getName());
      assertEquals(2067.0479F, level2.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level2.getElevation(), 0.01F);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      
      float float1 = level2.getElevation();
      assertEquals(2067.0479F, float1, 0.01F);
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(2067.0479F, level2.getHeight(), 0.01F);
      assertEquals("?:", level2.getName());
      assertEquals(2067.0479F, level2.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level2.getElevation(), 0.01F);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      
      float float2 = level2.getHeight();
      assertEquals(2067.0479F, float2, 0.01F);
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(2067.0479F, level2.getHeight(), 0.01F);
      assertEquals("?:", level2.getName());
      assertEquals(2067.0479F, level2.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level2.getElevation(), 0.01F);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertEquals(float2, float1, 0.01F);
      
      Level level3 = level2.clone();
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(2067.0479F, level2.getHeight(), 0.01F);
      assertEquals("?:", level2.getName());
      assertEquals(2067.0479F, level2.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level2.getElevation(), 0.01F);
      assertEquals(2067.0479F, level3.getFloorThickness(), 0.01F);
      assertEquals("?:", level3.getName());
      assertEquals(2067.0479F, level3.getElevation(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(2067.0479F, level3.getHeight(), 0.01F);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertNotSame(level3, level0);
      assertNotSame(level3, level2);
      assertNotSame(level3, level1);
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertNotNull(level3);
      
      float float3 = level3.getElevation();
      assertEquals(2067.0479F, float3, 0.01F);
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(2067.0479F, level2.getHeight(), 0.01F);
      assertEquals("?:", level2.getName());
      assertEquals(2067.0479F, level2.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level2.getElevation(), 0.01F);
      assertEquals(2067.0479F, level3.getFloorThickness(), 0.01F);
      assertEquals("?:", level3.getName());
      assertEquals(2067.0479F, level3.getElevation(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(2067.0479F, level3.getHeight(), 0.01F);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertNotSame(level3, level0);
      assertNotSame(level3, level2);
      assertNotSame(level3, level1);
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level3));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      boolean boolean0 = wall0.isAtLevel(level2);
      assertFalse(boolean0);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(2067.0479F, level2.getHeight(), 0.01F);
      assertEquals("?:", level2.getName());
      assertEquals(2067.0479F, level2.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level2.getElevation(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level3));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      
      Float float5 = new Float(0.0);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      
      float float6 = float5.floatValue();
      assertEquals(0.0F, float6, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      
      Float float7 = new Float(0.0);
      assertEquals(0.0F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotNull(float7);
      
      float float8 = float7.floatValue();
      assertEquals(0.0F, float8, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float1, 0.01F);
      
      Float float9 = new Float(0.0F);
      assertEquals(0.0F, (float)float9, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertEquals((float)float9, (float)float8, 0.01F);
      assertEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertEquals((float)float9, (float)float7, 0.01F);
      assertNotNull(float9);
      
      float float10 = float9.floatValue();
      assertEquals(0.0F, float10, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertEquals((float)float9, (float)float8, 0.01F);
      assertEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals(float10, float1, 0.01F);
      assertNotEquals(float10, float3, 0.01F);
      assertEquals(float10, float6, 0.01F);
      assertNotEquals(float10, float2, 0.01F);
      assertEquals(float10, float8, 0.01F);
      
      wall1.setArcExtent((Float) 0.0F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float11 = wall1.getLength();
      assertEquals(0.0F, float11, 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float11, float3, 0.01F);
      assertNotEquals(float11, float1, 0.01F);
      assertEquals(float11, float8, 0.01F);
      assertEquals(float11, float10, 0.01F);
      assertNotEquals(float11, float2, 0.01F);
      assertEquals(float11, float6, 0.01F);
      
      wall1.setArcExtent(float9);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertEquals((float)float9, (float)float8, 0.01F);
      assertEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertEquals((float)float9, (float)float11, 0.01F);
      assertEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertEquals((float)float9, (float)float7, 0.01F);
      assertEquals((float)float9, (float)float10, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart((-721.9F));
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = Float.compare(0.0F, 1.0F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare(0.0F, 0.1F);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      wall0.setArcExtent((Float) 0.1F);
      assertEquals((-19781.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1734.694F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      Integer integer1 = new Integer(3474);
      assertEquals(3474, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(3474);
      assertEquals(3474, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int2));
      assertNotNull(integer2);
      
      boolean boolean0 = wall0.containsPoint(1682.234F, (-1.0F), 1.0F);
      assertFalse(boolean0);
      assertEquals((-19781.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1734.694F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals((-19781.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1734.694F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      int int1 = new Integer(0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      wall0.setHeight((Float) 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.move(0, (-2455.8713F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-4911.7427F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4911.7427F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(0.0F, (-1557.126F), (-721.12F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-4911.7427F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4911.7427F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.setRightSideShininess(1030.2057F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-4911.7427F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(1030.2057F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4911.7427F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 2067.0479F, 1030.2057F, (-1684.0F), 531.92F, 2067.0479F);
      assertEquals(531.92F, wall1.getThickness(), 0.01F);
      assertEquals((-1684.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2067.0479F, wall1.getHeight(), 0.01F);
      assertEquals(3889.9465F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1030.2057F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2067.0479F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3889.9465F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(515.10284F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(191.52393F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float((double) (-721.9F));
      assertEquals((-721.9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = float0.equals("Z*;H.2ASoQiAKG");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = float0.equals("Z*;H.2ASoQiAKG");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      wall1.setArcExtent(float0);
      assertEquals(531.92F, wall1.getThickness(), 0.01F);
      assertEquals((-1684.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1680.0868F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5935.06F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-721.9F), wall1.getArcExtent(), 0.01F);
      assertEquals(2067.0479F, wall1.getHeight(), 0.01F);
      assertEquals(3889.9465F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4293617.0F, wall1.getLength(), 0.01F);
      assertEquals(1030.2057F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(2067.0479F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals(531.92F, wall1.getThickness(), 0.01F);
      assertEquals((-1684.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1680.0868F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5935.06F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-721.9F), wall1.getArcExtent(), 0.01F);
      assertEquals(2067.0479F, wall1.getHeight(), 0.01F);
      assertEquals(3889.9465F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4293617.0F, wall1.getLength(), 0.01F);
      assertEquals(1030.2057F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(2067.0479F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      
      float float1 = wall1.getLength();
      assertEquals(4293617.0F, float1, 0.01F);
      assertEquals(531.92F, wall1.getThickness(), 0.01F);
      assertEquals((-1684.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1680.0868F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5935.06F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-721.9F), wall1.getArcExtent(), 0.01F);
      assertEquals(2067.0479F, wall1.getHeight(), 0.01F);
      assertEquals(3889.9465F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4293617.0F, wall1.getLength(), 0.01F);
      assertEquals(1030.2057F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(2067.0479F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 577.2982F, (-1.0F), 577.2982F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(38.36F, 1174.6F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "veD/Xj'u1p7XsrCF", object0, object0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      propertyChangeEvent0.setPropagationId("veD/Xj'u1p7XsrCF");
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(integer0);
      
      float float0 = wall0.getThickness();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getThickness();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(float1, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean1 = wall0.containsPoint(0.0F, (-1888.4F), 0.0F);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      boolean boolean2 = wall1.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      
      boolean boolean3 = wall0.containsPoint(0.0F, 39.60616F, (-1.0F));
      assertFalse(boolean3);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      wall1.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("RIGHT_SIDE_SHININESS", "", resourceURLContent0, 0.0F, 0.0F, "HEIGHT");
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("RIGHT_SIDE_SHININESS", catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("HEIGHT", catalogTexture0.getCreator());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      String string2 = catalogTexture0.getName();
      assertEquals("", string2);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("RIGHT_SIDE_SHININESS", catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("HEIGHT", catalogTexture0.getCreator());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      wall1.setPattern(catalogTexture0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("RIGHT_SIDE_SHININESS", catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("HEIGHT", catalogTexture0.getCreator());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(1834.5604F, 1834.5604F, 1834.5604F, 915.09686F, 915.09686F, 915.09686F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(915.09686F, 915.09686F, 915.09686F, 1834.5604F, 1834.5604F, 915.09686F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(0.66760266F);
      assertEquals(0.66760266F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float float1 = wall1.getLength();
      assertEquals(919.46356F, float1, 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer1 = new Integer(1209);
      assertEquals(1209, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      float float0 = ((Float)0.0F).floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float((double) 2.0F);
      assertEquals(2.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.0);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jn* ~");
      assertFalse(boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer2 = Integer.valueOf(533);
      assertEquals(533, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(533);
      assertEquals(533, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      wall0.setRightSideColor(integer3);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(533, (int)wall0.getRightSideColor());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Wall wall2 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(533, (int)wall0.getRightSideColor());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall2.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(533, (int)wall2.getRightSideColor());
      assertEquals((-2455.8713F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2455.8713F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-2455.8713F), wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      wall2.setRightSideColor(integer3);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(533, (int)wall0.getRightSideColor());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall2.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(533, (int)wall2.getRightSideColor());
      assertEquals((-2455.8713F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2455.8713F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-2455.8713F), wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(1163.0F, 1163.0F, 2910.5725F, 2910.5725F, 0.0F, 1163.0F);
      assertEquals(2910.5725F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2910.5725F, wall0.getXEnd(), 0.01F);
      assertEquals(2036.7863F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1163.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2471.4407F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2036.7863F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2471.4407F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1163.0F, wall0.getXStart(), 0.01F);
      assertEquals(1163.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-4944.98F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4944.98F), wall0.getYEnd(), 0.01F);
      assertEquals(2910.5725F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(6353.0645F, wall0.getLength(), 0.01F);
      assertEquals(1163.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2036.7863F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1890.99F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1163.0F, wall0.getXStart(), 0.01F);
      assertEquals(6353.0645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1163.0F, wall0.getHeight(), 0.01F);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4944.98F), wall0.getYEnd(), 0.01F);
      assertEquals(2910.5725F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(6353.0645F, wall0.getLength(), 0.01F);
      assertEquals(1163.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2036.7863F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1890.99F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1163.0F, wall0.getXStart(), 0.01F);
      assertEquals(6353.0645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1163.0F, wall0.getHeight(), 0.01F);
      assertNull(float0);
      
      float float1 = 274.7F;
      wall0.setYEnd(1886.33F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2910.5725F, wall0.getXEnd(), 0.01F);
      assertEquals(1524.665F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1163.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1891.3529F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1886.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2036.7863F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1163.0F, wall0.getXStart(), 0.01F);
      assertEquals(1163.0F, wall0.getHeight(), 0.01F);
      assertEquals(1891.3529F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(274.7F, 0.0F, 1.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(273.7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(274.7F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(273.7F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(137.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = Integer.valueOf(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("4p^UDW=Jk[~X(#l", integer0);
      assertEquals(8, (int)integer1);
      assertNotNull(integer1);
      
      try { 
        Integer.decode("4p^UDW=Jk[~X(#l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4p^UDW=Jk[~X(#l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 1744.9F);
      assertEquals(1744.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setArcExtent(float0);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer0 = Integer.valueOf(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(107);
      assertEquals(107, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Float float1 = new Float(1453.0);
      assertEquals(1453.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(1453.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer3 = Integer.valueOf(0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      wall0.setRightSideColor(integer3);
      assertEquals(1453.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1453.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNotNull(floatArray0);
      
      Integer integer4 = Integer.valueOf((-2747));
      assertEquals((-2747), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      wall0.setLeftSideColor(integer4);
      assertEquals(1453.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-2747), (int)wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      float float2 = wall0.getLength();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(1453.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-2747), (int)wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      
      Integer integer5 = wall0.getLeftSideColor();
      assertEquals((-2747), (int)integer5);
      assertEquals(1453.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-2747), (int)wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = 1763.0F;
      Wall wall0 = new Wall(1.0F, 1.0F, (-1239.7003F), 1763.0F, 1763.0F, 1.0F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1763.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-619.35016F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2154.9897F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(882.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1239.7003F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1763.0F, wall0.getThickness(), 0.01F);
      assertEquals(2154.9897F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float1 = wall0.getArcExtent();
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1763.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-619.35016F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2154.9897F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(882.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1239.7003F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1763.0F, wall0.getThickness(), 0.01F);
      assertEquals(2154.9897F, wall0.getLength(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float(100000.0);
      assertEquals(100000.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      float float3 = float2.floatValue();
      assertEquals(100000.0F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      
      wall0.setArcExtent((Float) 100000.0F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(870.9081F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1763.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2154.9897F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(100000.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.07766712E8F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-635.10254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1239.7003F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1763.0F, wall0.getThickness(), 0.01F);
      
      float float4 = wall0.getLength();
      assertEquals(1.07766712E8F, float4, 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(870.9081F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1763.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2154.9897F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(100000.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.07766712E8F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-635.10254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1239.7003F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1763.0F, wall0.getThickness(), 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      float float5 = 0.0F;
      wall0.containsWallStartAt(float5, float4, float0);
      int int0 = 8;
      Integer integer0 = new Integer(int0);
      String string0 = "";
      integer0.equals(string0);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), (-1753.2878F), (-1753.2878F));
      assertEquals((-1753.2878F), wall0.getYEnd(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-422.40048F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move((-1232.2F), 0.015151516F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Level level0 = new Level(">O>k{4w}", 908.4869F, (-1753.2878F), 0.0F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals((-1753.2878F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(">O>k{4w}", level1.getName());
      assertEquals(908.4869F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level0.getElevation();
      assertEquals(908.4869F, float0, 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      float float1 = level1.getHeight();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals((-1753.2878F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(">O>k{4w}", level1.getName());
      assertEquals(908.4869F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float1, float0, 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      boolean boolean1 = wall0.containsPoint(3647.0F, 0.0F, 0.0F);
      assertFalse(boolean1);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      wall0.setRightSideShininess((-1753.2878F));
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-1753.2878F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float3 = wall0.getRightSideShininess();
      assertEquals((-1753.2878F), float3, 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-1753.2878F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(1213.25F, 0.0F, 1213.25F, 1.0F, (-1683.5969F), (-1683.5969F));
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1683.5969F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1213.25F);
      assertEquals(1213.25F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1211.6199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1683.5969F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1213.25F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2068.694F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(2, floatArray0.length);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1211.6199F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1683.5969F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1213.25F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2068.694F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, (-1.0F), (-1.0F), 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertNotNull(level0);
      
      float float0 = level0.getElevation();
      assertEquals(2067.0479F, float0, 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      
      float float1 = level0.getHeight();
      assertEquals(2067.0479F, float1, 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(float1, float0, 0.01F);
      
      wall0.setXStart((-1534.53F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1.0F, (-881.529F), 908.502F, (-1113.3931F), (-1641.764F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-881.529F), wall0.getXEnd(), 0.01F);
      assertEquals(1265.1693F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(454.751F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1265.1693F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-440.7645F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-1641.764F));
      assertEquals((-1641.764F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall0.getArcExtent(), 0.01F);
      assertEquals(785.98517F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-99.771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1299128.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-881.529F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1265.1693F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall0.getArcExtent(), 0.01F);
      assertEquals(785.98517F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-99.771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1299128.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-881.529F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1265.1693F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1299128.1F, wall1.getLength(), 0.01F);
      assertEquals((-881.529F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.98517F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1641.764F), wall1.getHeight(), 0.01F);
      assertEquals((-99.771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1113.3931F), wall1.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall1.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1265.1693F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall0.getArcExtent(), 0.01F);
      assertEquals(785.98517F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-99.771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1299128.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-881.529F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1265.1693F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1244, floatArray0.length);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall0.getArcExtent(), 0.01F);
      assertEquals(785.98517F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-99.771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1299128.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-881.529F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1265.1693F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      Integer integer0 = Integer.valueOf((-2747));
      assertEquals((-2747), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall0.getArcExtent(), 0.01F);
      assertEquals(785.98517F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertEquals((-99.771F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1299128.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2747), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-881.529F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1265.1693F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setXEnd(908.502F);
      assertEquals(1318576.2F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall0.getArcExtent(), 0.01F);
      assertEquals(113.38177F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2747), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(795.2445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.502F, wall0.getXEnd(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(1284.109F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = wall1.containsWallEndAt(173.92F, (-1342.144F), (-5703.8F));
      assertFalse(boolean0);
      assertEquals(1318576.2F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall0.getArcExtent(), 0.01F);
      assertEquals(113.38177F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2747), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(795.2445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.502F, wall0.getXEnd(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(1284.109F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1299128.1F, wall1.getLength(), 0.01F);
      assertEquals((-881.529F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.98517F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1641.764F), wall1.getHeight(), 0.01F);
      assertEquals((-99.771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1113.3931F), wall1.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall1.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1265.1693F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall0.getLevel();
      assertEquals(1318576.2F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall0.getArcExtent(), 0.01F);
      assertEquals(113.38177F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2747), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(795.2445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.502F, wall0.getXEnd(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(1284.109F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(level0);
      
      float float1 = wall1.getXStart();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1318576.2F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1113.3931F), wall0.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall0.getArcExtent(), 0.01F);
      assertEquals(113.38177F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2747), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(795.2445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.502F, wall0.getXEnd(), 0.01F);
      assertEquals((-1641.764F), wall0.getHeight(), 0.01F);
      assertEquals(1284.109F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1299128.1F, wall1.getLength(), 0.01F);
      assertEquals((-881.529F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.98517F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.502F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1641.764F), wall1.getHeight(), 0.01F);
      assertEquals((-99.771F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1113.3931F), wall1.getThickness(), 0.01F);
      assertEquals((-1641.764F), wall1.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1265.1693F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(682.7009F, 682.7009F, 682.7009F, 682.7009F, 682.7009F, 682.7009F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7009F, wall0.getHeight(), 0.01F);
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setXStart(682.7009F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7009F, wall0.getHeight(), 0.01F);
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7009F, wall0.getHeight(), 0.01F);
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-3159.95F), (-3159.95F), 908.4869F, 908.4869F);
      assertFalse(boolean0);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall((-261.6522F), (-261.6522F), (-1286.1727F), (-1286.1727F), (-261.6522F));
      assertEquals(1448.8909F, wall0.getLength(), 0.01F);
      assertEquals((-773.9125F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-261.6522F), wall0.getThickness(), 0.01F);
      assertEquals(1448.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-773.9125F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-261.6522F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-261.6522F), wall0.getXStart(), 0.01F);
      assertEquals((-1286.1727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1286.1727F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals((-773.9125F), float0, 0.01F);
      assertEquals(1448.8909F, wall0.getLength(), 0.01F);
      assertEquals((-773.9125F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-261.6522F), wall0.getThickness(), 0.01F);
      assertEquals(1448.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-773.9125F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-261.6522F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-261.6522F), wall0.getXStart(), 0.01F);
      assertEquals((-1286.1727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1286.1727F), wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(274.7F, 0.0F, 1.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(273.7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(273.7F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(137.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(274.7F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(273.7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(273.7F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(137.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(274.7F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), 17.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(8.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(18.027756F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(1073.96F, 0.0F);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      wall0.setArcExtent((Float) 1073.96F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(414, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(414, floatArray1.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall0.setLeftSideShininess(1073.96F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1073.96F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1073.96F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, (-678.5654F), (-2932.9749F));
      assertTrue(boolean0);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1073.96F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setLeftSideShininess(1.0F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      int int2 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = Float.compare(0.0F, 0);
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = Float.compare(0.0F, 2.0F);
      assertEquals((-1), int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      
      wall0.setHeightAtEnd((Float) 2.0F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertEquals(2.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertEquals(2.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = new Integer(12);
      assertEquals(12, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      
      boolean boolean1 = integer0.equals((Object) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int2));
      
      wall0.setLeftSideColor(integer0);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertEquals(2.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(12, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int2));
      
      boolean boolean2 = wall0.intersectsRectangle(3965.9495F, (-3363.1F), 1.0F, 994.98F);
      assertTrue(boolean2);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertEquals(2.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(12, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Wall wall1 = wall0.clone();
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertEquals(2.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(12, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(18.027756F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(12, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1073.96F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(10.112936F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(17.0F, wall1.getYEnd(), 0.01F);
      assertEquals(42038.523F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(37.53284F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean3 = wall1.containsWallEndAt(0.0F, 17.0F, (-678.5654F));
      assertFalse(boolean3);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertEquals(2.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(12, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(18.027756F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(12, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1073.96F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(10.112936F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(17.0F, wall1.getYEnd(), 0.01F);
      assertEquals(42038.523F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(37.53284F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1744.9F, 3276.3286F, 531.92F, (-1085.0016F), 3490.293F, (-1402.12F));
      assertEquals((-1402.12F), wall1.getHeight(), 0.01F);
      assertEquals(4526.8667F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3490.293F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1095.6636F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(531.92F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(4526.8667F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3276.3286F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1138.41F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1085.0016F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      int int0 = Float.floatToIntBits(1.0F);
      assertEquals(1065353216, int0);
      
      int int1 = Float.floatToIntBits((-9.906713F));
      assertEquals((-1054965275), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ((Float)(-9.906713F)).equals(wall0);
      assertFalse(boolean0);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = Float.valueOf((float) 1065353216);
      assertEquals(1.06535322E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(1065353216);
      assertEquals(1065353216, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      boolean boolean1 = wall1.containsPoint((-1085.0016F), (-1999.4681F), (-1.0F));
      assertFalse(boolean1);
      assertEquals((-1402.12F), wall1.getHeight(), 0.01F);
      assertEquals(4526.8667F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3490.293F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1095.6636F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(531.92F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(4526.8667F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3276.3286F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1138.41F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1085.0016F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals((-1402.12F), wall1.getHeight(), 0.01F);
      assertEquals(4526.8667F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3490.293F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1095.6636F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(531.92F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(4526.8667F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3276.3286F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1138.41F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1085.0016F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = wall0.getLength();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float1, 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1138.41F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3276.3286F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1744.9F, wall2.getXStart(), 0.01F);
      assertEquals(4526.8667F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(4526.8667F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3490.293F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1095.6636F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(531.92F, wall2.getXEnd(), 0.01F);
      assertEquals((-1085.0016F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1402.12F), wall2.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall((-384.6877F), (-384.6877F), (-2455.8713F), (-384.6877F), (-1677.7F), (-2455.8713F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-384.6877F), wall0.getXStart(), 0.01F);
      assertEquals((-1677.7F), wall0.getThickness(), 0.01F);
      assertEquals(2071.1836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-384.6877F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-384.6877F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1420.2795F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2071.1836F, wall0.getLength(), 0.01F);
      assertEquals((-384.6877F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(299.86F, 0.0F, (-2885.6155F), 435.42786F, 0.0F, 299.86F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean0 = float0.equals(wall1);
      assertFalse(boolean0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = Integer.valueOf(21);
      assertEquals(21, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(21);
      assertEquals(21, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(21);
      assertEquals(21, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf(71);
      assertEquals(71, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Integer integer5 = Integer.valueOf(2717);
      assertEquals(2717, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      Integer integer6 = Integer.valueOf(0);
      assertEquals(0, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      
      Integer integer7 = Integer.valueOf((-2403));
      assertEquals((-2403), (int)integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      
      wall1.setRightSideColor(integer7);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2403), (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      
      wall0.setHeightAtEnd((Float) 435.42786F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-384.6877F), wall0.getXStart(), 0.01F);
      assertEquals(435.42786F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1677.7F), wall0.getThickness(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2071.1836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-384.6877F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-384.6877F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1420.2795F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2071.1836F, wall0.getLength(), 0.01F);
      assertEquals((-384.6877F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall1.getRightSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2403), (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-384.6877F), wall0.getXStart(), 0.01F);
      assertEquals(435.42786F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1677.7F), wall0.getThickness(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2071.1836F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-384.6877F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-384.6877F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1420.2795F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2071.1836F, wall0.getLength(), 0.01F);
      assertEquals((-384.6877F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      
      wall1.setPattern((TextureImage) null);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2403), (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setXStart((-721.9F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(8192);
      assertEquals(8192, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = Integer.min(8192, 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = integer1.equals(object0);
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      wall0.setLeftSideColor(integer1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(8192, (int)wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = new Integer(924);
      assertEquals(924, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      wall0.setLeftSideColor(integer2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(924, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(924, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(homeTexture0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(924, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall1);
      
      Integer integer3 = wall0.getLeftSideColor();
      assertEquals(924, (int)integer3);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(924, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall(683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(boolean1 == boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer0 = Integer.valueOf(2106);
      assertEquals(2106, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2106, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getYStart();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2106, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 1213.25F, 0.0F, 0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.15F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.15F, wall0.getLength(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(606.675F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart(1213.25F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt(908.4869F, 908.4869F, (-3159.95F));
      assertFalse(boolean0);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(1006.28F, 1006.28F, 1006.28F, 1006.28F, 1006.28F, 1414.3275F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float1.equals(object0);
      assertFalse(boolean0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertTrue(boolean1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint((-3159.95F), (-3159.95F), 908.4869F);
      assertFalse(boolean0);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(1918.1659F, 1918.1659F, (-1.3759189F), (-1.3759189F), 1918.1659F);
      assertEquals(958.39496F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertEquals(2714.642F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2714.642F, wall0.getLength(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.3759189F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7hDup1y JNa|{");
      assertFalse(boolean0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.3759189F));
      assertEquals((-1.3759189F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float float2 = Float.sum(219.87F, 1121.5277F);
      assertEquals(1341.3977F, float2, 0.01F);
      
      Wall wall1 = new Wall(1121.5277F, 1400.8982F, 1121.5277F, 1121.5277F, (-2300.237F), 1400.8982F);
      assertEquals(1400.8982F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1121.5277F, wall1.getXEnd(), 0.01F);
      assertEquals(1121.5277F, wall1.getYEnd(), 0.01F);
      assertEquals(279.37048F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1400.8982F, wall1.getHeight(), 0.01F);
      assertEquals(1121.5277F, wall1.getXStart(), 0.01F);
      assertEquals(1261.2129F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(279.37048F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.5277F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2300.237F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Level level0 = wall0.getLevel();
      assertEquals(958.39496F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertEquals(2714.642F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2714.642F, wall0.getLength(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.3759189F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(level0);
      
      wall1.setHeightAtEnd(float0);
      assertEquals(1400.8982F, wall1.getYStart(), 0.01F);
      assertEquals((-1232.2F), wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1121.5277F, wall1.getXEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1121.5277F, wall1.getYEnd(), 0.01F);
      assertEquals(279.37048F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1400.8982F, wall1.getHeight(), 0.01F);
      assertEquals(1121.5277F, wall1.getXStart(), 0.01F);
      assertEquals(1261.2129F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(279.37048F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1121.5277F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2300.237F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = new Float((-597.0F));
      assertEquals((-597.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      float float4 = float3.floatValue();
      assertEquals((-597.0F), float4, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      float float5 = new Float((-1.3759189F));
      assertEquals((-1.3759189F), float5, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      
      wall1.setArcExtent((Float) (-1.3759189F));
      assertEquals(1400.8982F, wall1.getYStart(), 0.01F);
      assertEquals((-1232.2F), wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1121.5277F, wall1.getXEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1121.5277F, wall1.getYEnd(), 0.01F);
      assertEquals(302.6883F, wall1.getLength(), 0.01F);
      assertEquals(279.37048F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1400.8982F, wall1.getHeight(), 0.01F);
      assertEquals(1121.5277F, wall1.getXStart(), 0.01F);
      assertEquals((-1.3759189F), wall1.getArcExtent(), 0.01F);
      assertEquals(1261.2129F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(951.576F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2300.237F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float6 = wall1.getArcExtent();
      assertEquals((-1.3759189F), (float)float6, 0.01F);
      assertEquals(1400.8982F, wall1.getYStart(), 0.01F);
      assertEquals((-1232.2F), wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1121.5277F, wall1.getXEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1121.5277F, wall1.getYEnd(), 0.01F);
      assertEquals(302.6883F, wall1.getLength(), 0.01F);
      assertEquals(279.37048F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1400.8982F, wall1.getHeight(), 0.01F);
      assertEquals(1121.5277F, wall1.getXStart(), 0.01F);
      assertEquals((-1.3759189F), wall1.getArcExtent(), 0.01F);
      assertEquals(1261.2129F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(951.576F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2300.237F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotNull(float6);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), 0.01F, (-1753.2878F));
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1851.82F));
      assertEquals((-1851.82F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1400.8982F);
      assertEquals(1400.8982F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = float2.equals("w");
      assertFalse(boolean0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(1400.8982F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      int int0 = Float.floatToIntBits(1528.8F);
      assertEquals(1153374618, int0);
      
      float float4 = ((Float)1528.8F).floatValue();
      assertEquals(1528.8F, float4, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals((-1232.2F), float5, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      float float6 = Float.min((-297.7F), (-1232.2F));
      assertEquals((-1232.2F), float6, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertEquals(float6, float5, 0.01F);
      
      int int1 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare(0.0F, 0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = Float.compare(0.0F, 2.0F);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      wall0.setArcExtent((Float) 2.0F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture0);
      
      Integer integer0 = Integer.valueOf(110);
      assertEquals(110, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int3));
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(108);
      assertEquals(108, (int)integer1);
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertNotNull(integer1);
      
      wall0.setRightSideColor(integer1);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(108, (int)wall0.getRightSideColor());
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      
      boolean boolean1 = wall0.intersectsRectangle(1153374618, 1528.8F, (-1.0F), 0);
      assertTrue(boolean1);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(108, (int)wall0.getRightSideColor());
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean1 == boolean0);
      
      HomeTexture homeTexture1 = wall0.getLeftSideTexture();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(108, (int)wall0.getRightSideColor());
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture1);
      
      Integer integer2 = wall0.getRightSideColor();
      assertEquals(108, (int)integer2);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(108, (int)wall0.getRightSideColor());
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(integer2.equals((Object)int3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1744.9F);
      assertEquals(1744.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      Integer integer0 = Integer.valueOf((-2747));
      assertEquals((-2747), (int)integer0);
      assertNotNull(integer0);
      
      float float1 = float0.floatValue();
      assertEquals(1744.9F, float1, 0.01F);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      float float2 = float0.floatValue();
      assertEquals(1744.9F, float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      wall1.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = wall1.getThickness();
      assertEquals(1744.9F, float3, 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      
      float float4 = wall1.getYArcCircleCenter();
      assertEquals(1744.9F, float4, 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float4, float1, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(float4, float3, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float5 = wall1.getLength();
      assertEquals(0.0F, float5, 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(682.0392F, 1.0F, (-6523.6F), 0.0F, (-748.8703F), 682.0392F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(682.0392F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7205.639F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-748.8703F), wall1.getThickness(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2920.7805F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall1.getXEnd(), 0.01F);
      assertEquals(7205.639F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float0 = Float.max(795.11F, 0.0F);
      assertEquals(795.11F, float0, 0.01F);
      
      boolean boolean0 = Float.isFinite((-1982.5713F));
      assertTrue(boolean0);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(682.0392F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7205.639F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-748.8703F), wall1.getThickness(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2920.7805F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall1.getXEnd(), 0.01F);
      assertEquals(7205.639F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(682.0392F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7205.639F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-748.8703F), wall1.getThickness(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2920.7805F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall1.getXEnd(), 0.01F);
      assertEquals(7205.639F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(682.0392F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7205.639F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-748.8703F), wall1.getThickness(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2920.7805F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall1.getXEnd(), 0.01F);
      assertEquals(7205.639F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(682.0392F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7205.639F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-748.8703F), wall1.getThickness(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2920.7805F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall1.getXEnd(), 0.01F);
      assertEquals(7205.639F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(682.0392F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7205.639F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-748.8703F), wall1.getThickness(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2920.7805F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall1.getXEnd(), 0.01F);
      assertEquals(7205.639F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(682.0392F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7205.639F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-748.8703F), wall1.getThickness(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2920.7805F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall1.getXEnd(), 0.01F);
      assertEquals(7205.639F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(682.0392F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7205.639F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-748.8703F), wall1.getThickness(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-2920.7805F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall1.getXEnd(), 0.01F);
      assertEquals(7205.639F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall0.getPoints();
      assertEquals(4, floatArray2.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7205.639F, wall0.getLength(), 0.01F);
      assertEquals(7205.639F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-6523.6F), wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals((-748.8703F), wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2920.7805F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall((-2456.0896F), (-2456.0896F), (-2456.0896F), (-2456.0896F), (-2456.0896F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess((-2456.0896F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      
      wall0.setRightSideShininess((-2456.0896F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2456.0896F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, (-2985.4878F), 1414.3275F, 908.4869F, 908.4869F, (-3212.5193F));
      assertEquals((-2985.4878F), wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(1161.4072F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3926.6924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1038.5005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3926.6924F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(908.4869F, 908.4869F, (-3212.5193F));
      assertFalse(boolean0);
      assertEquals((-2985.4878F), wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(1161.4072F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3926.6924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1038.5005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3926.6924F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float float0 = 543.42F;
      int int0 = Float.compare(1414.3275F, 1757.3372F);
      assertEquals((-1), int0);
      
      Float float1 = Float.valueOf(1397.8136F);
      assertEquals(1397.8136F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      boolean boolean1 = Float.isFinite(875.6F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Float float2 = null;
      wall0.setArcExtent(float1);
      assertEquals((-1013.7454F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(2757506.2F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3926.6924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(970.8422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1397.8136F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(3686, floatArray0.length);
      assertEquals((-1013.7454F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(2757506.2F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3926.6924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(970.8422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1397.8136F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(3686, floatArray1.length);
      assertEquals((-1013.7454F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(2757506.2F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3926.6924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(970.8422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1397.8136F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall0.setLeftSideShininess((-323.11536F));
      assertEquals((-1013.7454F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(2757506.2F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3926.6924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-323.11536F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(970.8422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1397.8136F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1013.7454F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(2757506.2F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3926.6924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-323.11536F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(970.8422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1397.8136F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float3 = wall0.getRightSideShininess();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals((-1013.7454F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2985.4878F), wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(2757506.2F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3926.6924F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-323.11536F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(970.8422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1397.8136F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotEquals(float3, float0, 0.01F);
      
      // Undeclared exception!
      wall0.intersectsRectangle((-3212.5193F), 1397.8136F, (-2985.4878F), 875.6F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      int int1 = Float.compare(0.0F, (-721.9F));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      wall0.setHeight((Float) 0.0F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.move((-2455.8713F), (-1557.126F));
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.setThickness((-2455.8713F));
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      float float0 = wall0.getYEnd();
      assertEquals((-4012.9973F), float0, 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall((-351.924F), (-8.796608F), (-2997.077F), (-351.924F), 915.09686F, 1834.5604F);
      assertEquals(1834.5604F, wall0.getHeight(), 0.01F);
      assertEquals((-2997.077F), wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-351.924F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2667.3152F, wall0.getLength(), 0.01F);
      assertEquals((-1674.5005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-8.796608F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-351.924F), wall0.getXStart(), 0.01F);
      assertEquals((-180.3603F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2667.3152F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1834.5604F);
      assertEquals(1834.5604F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1834.5604F, wall0.getHeight(), 0.01F);
      assertEquals((-2997.077F), wall0.getXEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getArcExtent(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-351.924F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-8.796608F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-351.924F), wall0.getXStart(), 0.01F);
      assertEquals((-4316.6465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20187.816F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2667.3152F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.7759076E7F, wall0.getLength(), 0.01F);
      
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Level level0 = new Level("", 908.4869F, 908.4869F, 0.0F);
      assertEquals(908.4869F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(908.4869F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(908.4869F, level1.getElevation(), 0.01F);
      assertEquals(908.4869F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level0.getElevation();
      assertEquals(908.4869F, float0, 0.01F);
      assertEquals(908.4869F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
      
      Integer integer0 = Integer.valueOf(174);
      assertEquals(174, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 174, 174);
      assertFalse(boolean0);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setLeftSideColor(integer1);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = Float.floatToIntBits(2998.5159F);
      assertEquals(1161521217, int0);
      
      wall0.setArcExtent((Float) 2998.5159F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2998.5159F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer2 = new Integer(2315);
      assertEquals(2315, (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(2315);
      assertEquals(2315, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      boolean boolean1 = wall0.containsPoint(1161521217, 908.4869F, (-1334.22F));
      assertFalse(boolean1);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2998.5159F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2998.5159F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      Integer integer4 = wall0.getLeftSideColor();
      assertEquals(0, (int)integer4);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2998.5159F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(1834.5604F, 1834.5604F, 1834.5604F, 915.09686F, 915.09686F, 915.09686F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(0.66760266F);
      assertEquals(0.66760266F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float float1 = wall1.getLength();
      assertEquals(919.46356F, float1, 0.01F);
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(1006.28F, 2268.81F, 2268.81F, 2268.81F, 2268.81F, 2268.81F);
      assertEquals(1262.53F, wall0.getLength(), 0.01F);
      assertEquals(1637.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1262.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2268.81F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setXEnd(2561.55F);
      assertEquals(2561.55F, wall0.getXEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1555.27F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1783.915F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertEquals(1555.27F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(2561.55F, wall0.getXEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1555.27F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1783.915F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertEquals(1555.27F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(2561.55F, wall0.getXEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1555.27F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1783.915F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertEquals(1555.27F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(3732.6F, 3732.6F, 3732.6F, 1479.0F, (-2955.8F), 2912.6F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Wall wall1 = wall0.clone();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1479.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall1.getYStart(), 0.01F);
      assertEquals(2253.6F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2912.6F, wall1.getHeight(), 0.01F);
      assertEquals(2605.8F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2253.6F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall1.getXEnd(), 0.01F);
      assertEquals(3732.6F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3732.6F, wall1.getXStart(), 0.01F);
      assertEquals((-2955.8F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("IrT ! [h@NSyV", propertyChangeListener0);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object1, "veD/Xj'u1p7XsrCF", object1, object1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertFalse(object1.equals((Object)object0));
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(string1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(object0, "veD/Xj'u1p7XsrCF", object0, object0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertNotNull(propertyChangeEvent1);
      
      String string2 = propertyChangeEvent1.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string2);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object1);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = propertyChangeEvent1.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string3);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object1);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object1);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      
      boolean boolean0 = wall0.containsWallEndAt((-2955.8F), (-754.563F), 3732.6F);
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(3732.6F, float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer0 = wall0.getRightSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(integer0);
      
      Float float1 = wall1.getHeight();
      assertEquals(2912.6F, (float)float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1479.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall1.getYStart(), 0.01F);
      assertEquals(2253.6F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2912.6F, wall1.getHeight(), 0.01F);
      assertEquals(2605.8F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2253.6F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall1.getXEnd(), 0.01F);
      assertEquals(3732.6F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3732.6F, wall1.getXStart(), 0.01F);
      assertEquals((-2955.8F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Wall wall2 = new Wall(274.7F, 0.0F, 1.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(274.7F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(137.85F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      wall2.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(274.7F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(137.85F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall2.getLeftSideTexture();
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(274.7F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(137.85F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(homeTexture0);
      
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      
      Level level0 = new Level("?:", 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      float float0 = level0.getElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = float1.equals(object1);
      assertFalse(boolean0);
      assertNotSame(object1, object0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(object1.equals((Object)object0));
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall((-6523.6F), (-6523.6F), 915.09686F, (-6523.6F), 915.09686F, (-6523.6F));
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float0 = Float.max((-71.6F), (-6523.6F));
      assertEquals((-71.6F), float0, 0.01F);
      
      boolean boolean0 = Float.isFinite((-1193.0F));
      assertTrue(boolean0);
      
      Float float1 = new Float(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall0.getPoints();
      assertEquals(4, floatArray2.length);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      
      Wall wall2 = wall1.clone();
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertEquals(915.09686F, wall2.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6523.6F), wall2.getXStart(), 0.01F);
      assertEquals(915.09686F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-6523.6F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2804.2517F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(7438.697F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-6523.6F), wall2.getHeight(), 0.01F);
      assertEquals((-6523.6F), wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      Wall wall3 = wall1.getWallAtStart();
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertEquals(7438.697F, wall3.getLength(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-2804.2517F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(7438.697F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall3.getThickness(), 0.01F);
      assertEquals((-6523.6F), wall3.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall3.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-6523.6F), wall3.getXStart(), 0.01F);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertNotNull(wall3);
      
      Float float2 = Float.valueOf(1363.54F);
      assertEquals(1363.54F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = float2.equals(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      wall1.setHeightAtEnd(float2);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1363.54F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("Ftkq<Pzcn}x", integer1);
      assertEquals(0, (int)integer2);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean2 = integer0.equals(integer2);
      assertTrue(boolean2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      wall2.setLeftSideColor(integer2);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6523.6F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6523.6F), wall0.getHeight(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1363.54F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals((-6523.6F), wall1.getYStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals((-6523.6F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getHeight(), 0.01F);
      assertEquals(915.09686F, wall2.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6523.6F), wall2.getXStart(), 0.01F);
      assertEquals(915.09686F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-6523.6F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2804.2517F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall2.getLeftSideColor());
      assertEquals(7438.697F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-6523.6F), wall2.getHeight(), 0.01F);
      assertEquals((-6523.6F), wall2.getYEnd(), 0.01F);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      int int0 = Float.floatToIntBits(908.4869F);
      assertEquals(1147346729, int0);
      
      float float0 = ((Float)908.4869F).floatValue();
      assertEquals(908.4869F, float0, 0.01F);
      
      Float float1 = new Float((double) 908.4869F);
      assertEquals(908.4869F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      float float2 = wall1.getLength();
      assertEquals(0.0F, float2, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float3, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(1006.28F, 2268.81F, 2268.81F, 2268.81F, 2268.81F, 1414.3275F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1262.53F, wall0.getLength(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2268.81F, wall0.getXEnd(), 0.01F);
      assertEquals(1262.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1637.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(1262.53F, float0, 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1262.53F, wall0.getLength(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2268.81F, wall0.getXEnd(), 0.01F);
      assertEquals(1262.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1637.545F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float1.equals(object0);
      assertFalse(boolean0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1262.53F, wall0.getLength(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getXEnd(), 0.01F);
      assertEquals(1262.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1637.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertTrue(boolean1);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1262.53F, wall0.getLength(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getXEnd(), 0.01F);
      assertEquals(1262.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1637.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), 0.01F, (-1753.2878F));
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1906.0F);
      assertEquals(1906.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Wall wall1 = new Wall((-1804.0F), 0.0F, 667.1F, 0.0F, 0.0F);
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean0 = float1.equals(wall1);
      assertFalse(boolean0);
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = ((Float)0.0F).floatValue();
      assertEquals(0.0F, float2, 0.01F);
      
      float float3 = Float.sum(0.01F, 1.0F);
      assertEquals(1.01F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      Float float4 = Float.valueOf(1834.5604F);
      assertEquals(1834.5604F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      Float float5 = Float.valueOf(1834.5604F);
      assertEquals(1834.5604F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      
      float float6 = Float.sum((-1804.0F), 0.01F);
      assertEquals((-1803.99F), float6, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      
      float float7 = float5.floatValue();
      assertEquals(1834.5604F, float7, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float6, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      
      float float8 = 0.0F;
      int int0 = Float.compare(0.1F, 0.0F);
      assertEquals(1, int0);
      
      wall0.setHeightAtEnd((Float) 0.0F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float9 = wall0.getThickness();
      assertEquals((-1753.2878F), float9, 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float9, float6, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertNotEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float8, 0.01F);
      assertNotEquals(float9, float3, 0.01F);
      
      float float10 = wall1.getYArcCircleCenter();
      assertEquals(0.0F, float10, 0.01F);
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float10, float8, 0.01F);
      assertNotEquals(float10, float3, 0.01F);
      assertNotEquals(float10, float6, 0.01F);
      assertNotEquals(float10, float7, 0.01F);
      assertNotEquals(float10, float9, 0.01F);
      assertEquals(float10, float2, 0.01F);
      
      String string0 = "Rt;KABSqo5";
      String string1 = "_e!!";
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      String string2 = "Zz%";
      try { 
        Integer.decode("Zz%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Zz%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, (PropertyChangeListener) null);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Float float0 = new Float((-82.41722653));
      assertEquals((-82.41723F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float float1 = Float.sum(0.01F, (-578.766F));
      assertEquals((-578.756F), float1, 0.01F);
      
      wall0.setLeftSideShininess((-578.766F));
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-578.766F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean0 = float0.equals(object0);
      assertFalse(boolean0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-82.41723F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-578.766F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      wall0.setHeight((Float) 1744.9F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-82.41723F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-578.766F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-82.41723F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-578.766F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-82.41723F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-578.766F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-82.41723F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-578.766F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-82.41723F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-578.766F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-82.41723F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-578.766F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-82.41723F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-578.766F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall2.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-2455.8713F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-2455.8713F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2455.8713F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(2087.11F, (-3109.0F), 2087.11F, 2087.11F, (-5.62689F), 2087.11F);
      assertEquals((-510.94495F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3109.0F), wall0.getYStart(), 0.01F);
      assertEquals((-5.62689F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5196.1104F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2087.11F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2087.11F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2087.11F, wall0.getHeight(), 0.01F);
      assertEquals(5196.1104F, wall0.getLength(), 0.01F);
      assertEquals(2087.11F, wall0.getXEnd(), 0.01F);
      assertEquals(2087.11F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals((-510.94495F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3109.0F), wall0.getYStart(), 0.01F);
      assertEquals((-5.62689F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5599.606F, wall0.getLength(), 0.01F);
      assertEquals(1043.555F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5599.606F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2087.11F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2087.11F, wall0.getHeight(), 0.01F);
      assertEquals(2087.11F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setXStart(1.0F);
      assertEquals((-510.94495F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3109.0F), wall0.getYStart(), 0.01F);
      assertEquals((-5.62689F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5196.1104F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2087.11F, wall0.getHeight(), 0.01F);
      assertEquals(5196.1104F, wall0.getLength(), 0.01F);
      assertEquals(2087.11F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals((-510.94495F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3109.0F), wall0.getYStart(), 0.01F);
      assertEquals((-5.62689F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5196.1104F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2087.11F, wall0.getHeight(), 0.01F);
      assertEquals(5196.1104F, wall0.getLength(), 0.01F);
      assertEquals(2087.11F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(908.4869F, 908.4869F, 908.4869F);
      assertTrue(boolean0);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall((-2344.0F), (-2344.0F), 740.77893F, 0.0F, 606.28F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-178.23102F));
      assertEquals((-178.23102F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-178.23102F), float1, 0.01F);
      
      float float2 = Float.sum(1379.5767F, (-2344.0F));
      assertEquals((-964.42334F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals((-178.23102F), float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      
      Float float4 = new Float(0.0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      
      Wall wall1 = new Wall(299.86F, 0.0F, (-2885.6155F), 435.42786F, 0.0F, 299.86F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean0 = float4.equals(wall1);
      assertFalse(boolean0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setHeightAtEnd((Float) 435.42786F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(435.42786F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float5 = wall0.getThickness();
      assertEquals(606.28F, float5, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(435.42786F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      
      float float6 = wall1.getYArcCircleCenter();
      assertEquals(217.71393F, float6, 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Rt;KABSqo5", propertyChangeListener0);
      assertEquals("Rt;KABSqo5", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("Rt;KABSqo5", propertyChangeListenerProxy0);
      assertEquals("Rt;KABSqo5", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("Rt;KABSqo5", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotNull(propertyChangeListenerProxy1);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(435.42786F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals("Rt;KABSqo5", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      
      TextureImage textureImage0 = wall0.getPattern();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(435.42786F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(textureImage0);
      
      TextureImage textureImage1 = wall1.getPattern();
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(textureImage1);
      
      wall1.setLeftSideShininess((-3120.47F));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3120.47F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float7 = wall0.getHeightAtEnd();
      assertEquals(435.42786F, (float)float7, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(435.42786F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3120.47F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 915.09686F, 915.09686F, 915.09686F, 915.09686F, 915.09686F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(0.66760266F);
      assertEquals(0.66760266F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYStart(919.46356F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(917.2802F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4.366699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(919.46356F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.366699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setWallAtStart(wall1);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(917.2802F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4.366699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(919.46356F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.366699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(917.2802F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4.366699F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(919.46356F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.366699F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(908.4869F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall(1213.25F, 1213.25F, 1213.25F, 1213.25F, 1213.25F);
      assertEquals(1213.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1213.25F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(1213.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1213.25F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(1209, (int)wall0.getRightSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall(740.77893F, 0.0F, 740.77893F, 740.77893F, 606.28F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(740.77893F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(740.77893F, wall0.getLength(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(370.38947F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(740.77893F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(740.77893F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(740.77893F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(740.77893F, wall0.getLength(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(370.38947F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(740.77893F, wall0.getXStart(), 0.01F);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float1.equals(object0);
      assertFalse(boolean0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setThickness((-4911.7427F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(740.77893F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(740.77893F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(370.38947F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(740.77893F, wall0.getXStart(), 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(740.77893F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(740.77893F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(370.38947F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(740.77893F, wall0.getXStart(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(740.77893F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(740.77893F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(370.38947F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(740.77893F, wall0.getXStart(), 0.01F);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(327.5F, 908.4869F, 908.4869F, 327.5F, 908.4869F, 908.4869F);
      assertEquals(617.9934F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(821.6395F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(821.6395F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(617.9934F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(327.5F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(327.5F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(327.5F);
      assertEquals(327.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(356330.5F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(821.6395F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1330.3982F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(327.5F, wall0.getArcExtent(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(327.5F, wall0.getYEnd(), 0.01F);
      assertEquals(1330.3982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(327.5F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1424, floatArray0.length);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(356330.5F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(821.6395F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1330.3982F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(327.5F, wall0.getArcExtent(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(327.5F, wall0.getYEnd(), 0.01F);
      assertEquals(1330.3982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(327.5F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall(3732.6F, 3732.6F, 3732.6F, 1479.0F, (-2955.8F), 2912.6F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(2605.8F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2955.8F), wall1.getThickness(), 0.01F);
      assertEquals(3732.6F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall1.getLength(), 0.01F);
      assertEquals(3732.6F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2912.6F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3732.6F, wall1.getXStart(), 0.01F);
      assertEquals(1479.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2253.6F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object1, "veD/Xj'u1p7XsrCF", object1, object1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertFalse(object1.equals((Object)object0));
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(string0);
      
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(object0, "veD/Xj'u1p7XsrCF", object0, object0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertNotNull(propertyChangeEvent1);
      
      String string1 = propertyChangeEvent1.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object1);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = propertyChangeEvent1.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string2);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object1);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = wall0.containsWallEndAt((-2955.8F), (-754.563F), 3732.6F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(3732.6F, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(0.01F, 0.0F);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare((-929.5F), (-2146.4F));
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = Float.compare(0.0F, 4510.0F);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = Float.compare(0.0F, 0.01F);
      assertEquals((-1), int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      
      int int5 = Float.compare((-1361.56F), 1);
      assertEquals((-1), int5);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      
      int int6 = Float.compare(1, (-1361.56F));
      assertEquals(1, int6);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      
      float float1 = ((Float)(-1361.56F)).floatValue();
      assertEquals((-1361.56F), float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      Float float2 = new Float(1453.0);
      assertEquals(1453.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      float float3 = float2.floatValue();
      assertEquals(1453.0F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add(wall1);
      assertTrue(boolean1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(2605.8F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2955.8F), wall1.getThickness(), 0.01F);
      assertEquals(3732.6F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall1.getLength(), 0.01F);
      assertEquals(3732.6F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2912.6F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3732.6F, wall1.getXStart(), 0.01F);
      assertEquals(1479.0F, wall1.getYEnd(), 0.01F);
      assertEquals(2253.6F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall1));
      assertFalse(linkedList0.contains(wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(wall1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall1));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Level level0 = new Level("user.home", 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, level0.getFloorThickness(), 0.01F);
      assertEquals("user.home", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(908.4869F, level0.getHeight(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(level1);
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, level0.getFloorThickness(), 0.01F);
      assertEquals("user.home", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(908.4869F, level0.getHeight(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertFalse(boolean1 == boolean0);
      
      Float float1 = wall0.getHeightAtEnd();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(float1);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(682.7009F, 682.7009F, 682.7009F, 682.7009F, 682.7009F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(682.7009F);
      assertEquals(682.7009F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.7009F, wall0.getArcExtent(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.7009F, wall0.getArcExtent(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Wall wall1 = wall0.clone();
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float0 = wall1.getThickness();
      assertEquals(1744.9F, float0, 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(3676);
      assertEquals(3676, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("DduL", integer0);
      assertEquals(3676, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Wall wall0 = new Wall(0.0F, 1.0F, 1.0F, 915.09686F, 915.09686F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(914.0974F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(458.04843F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(914.0974F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(3676, 0.0F, 915.09686F, 915.09686F, 1.0F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(914.0974F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(458.04843F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(914.0974F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(915.09686F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(915.09686F, wall2.getYEnd(), 0.01F);
      assertEquals(914.0974F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(458.04843F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(914.0974F, wall2.getLength(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      wall2.setWallAtEnd(wall2);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(915.09686F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(915.09686F, wall2.getYEnd(), 0.01F);
      assertEquals(914.0974F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(458.04843F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(914.0974F, wall2.getLength(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setLeftSideColor(integer1);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(915.09686F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(915.09686F, wall2.getYEnd(), 0.01F);
      assertEquals(914.0974F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(458.04843F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3676, (int)wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(914.0974F, wall2.getLength(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float0 = new Float(915.09686F);
      assertEquals(915.09686F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(914.0974F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3676, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(458.04843F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(914.0974F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall2);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(915.09686F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(915.09686F, wall2.getYEnd(), 0.01F);
      assertEquals(914.0974F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(458.04843F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3676, (int)wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(914.0974F, wall2.getLength(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(914.0974F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3676, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(458.04843F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(914.0974F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(914.0974F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3676, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(458.04843F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(914.0974F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall1.getPoints();
      assertEquals(4, floatArray2.length);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2908.606F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2295.5483F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(457.54843F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Float float1 = new Float(5683293.28660436);
      assertEquals(5683293.5F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall1.setArcExtent(float1);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-892.30554F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(5683293.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3676.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.15599872E10F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(2908.606F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(1848.1414F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(916.7022F, 916.7022F, 916.7022F, 916.7022F, 916.7022F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(916.7022F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(916.7022F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(916.7022F, wall0.getXStart(), 0.01F);
      assertEquals(916.7022F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(916.7022F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(916.7022F, wall0.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(916.7022F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(916.7022F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(916.7022F, wall0.getXStart(), 0.01F);
      assertEquals(916.7022F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(916.7022F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(916.7022F, wall0.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(916.7022F, wall1.getYStart(), 0.01F);
      assertEquals(916.7022F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(916.7022F, wall1.getThickness(), 0.01F);
      assertEquals(916.7022F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(916.7022F, wall1.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(916.7022F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(916.7022F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(916.7022F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(916.7022F, wall0.getXStart(), 0.01F);
      assertEquals(916.7022F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(916.7022F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(916.7022F, wall0.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(916.7022F, wall1.getYStart(), 0.01F);
      assertEquals(916.7022F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(916.7022F, wall1.getThickness(), 0.01F);
      assertEquals(916.7022F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(916.7022F, wall1.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(916.7022F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart((-3582.4038F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(916.7022F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(916.7022F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(916.7022F, wall0.getXStart(), 0.01F);
      assertEquals(916.7022F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(916.7022F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(916.7022F, wall0.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4499.106F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(916.7022F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(916.7022F, wall1.getThickness(), 0.01F);
      assertEquals(916.7022F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3582.4038F), wall1.getYStart(), 0.01F);
      assertEquals((-1332.8508F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(916.7022F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4499.106F, wall1.getLength(), 0.01F);
      assertEquals(916.7022F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(916.7022F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(916.7022F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(916.7022F, wall0.getXStart(), 0.01F);
      assertEquals(916.7022F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(916.7022F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(916.7022F, wall0.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4499.106F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(916.7022F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(916.7022F, wall1.getThickness(), 0.01F);
      assertEquals(916.7022F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3582.4038F), wall1.getYStart(), 0.01F);
      assertEquals((-1332.8508F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(916.7022F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4499.106F, wall1.getLength(), 0.01F);
      assertEquals(916.7022F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(916.7022F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(916.7022F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(916.7022F, wall0.getXStart(), 0.01F);
      assertEquals(916.7022F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(916.7022F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(916.7022F, wall0.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4499.106F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(916.7022F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(916.7022F, wall1.getThickness(), 0.01F);
      assertEquals(916.7022F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3582.4038F), wall1.getYStart(), 0.01F);
      assertEquals((-1332.8508F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(916.7022F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4499.106F, wall1.getLength(), 0.01F);
      assertEquals(916.7022F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(916.7022F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(916.7022F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(916.7022F, wall0.getXStart(), 0.01F);
      assertEquals(916.7022F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(916.7022F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(916.7022F, wall0.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4499.106F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(916.7022F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(916.7022F, wall1.getThickness(), 0.01F);
      assertEquals(916.7022F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3582.4038F), wall1.getYStart(), 0.01F);
      assertEquals((-1332.8508F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(916.7022F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4499.106F, wall1.getLength(), 0.01F);
      assertEquals(916.7022F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(916.7022F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(916.7022F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(916.7022F, wall0.getXStart(), 0.01F);
      assertEquals(916.7022F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(916.7022F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(916.7022F, wall0.getXEnd(), 0.01F);
      assertEquals(916.7022F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(3176);
      assertEquals(3176, (int)integer0);
      assertNotNull(integer0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, "veD/Xj'u1p7XsrCF", "=fT", integer0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(string0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Integer integer1 = new Integer(3176);
      assertEquals(3176, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(object0, "veD/Xj'u1p7XsrCF", object2, integer1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertNotNull(propertyChangeEvent1);
      
      String string1 = propertyChangeEvent1.toString();
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      PropertyChangeEvent propertyChangeEvent2 = new PropertyChangeEvent(object3, "veD/Xj'u1p7XsrCF", object3, object3);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent2.getPropertyName());
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent1));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent0));
      assertNotNull(propertyChangeEvent2);
      
      String string2 = propertyChangeEvent2.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string2);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent2.getPropertyName());
      assertNotSame(object3, object0);
      assertNotSame(object3, object2);
      assertNotSame(object3, object1);
      assertNotSame(propertyChangeEvent2, propertyChangeEvent1);
      assertNotSame(propertyChangeEvent2, propertyChangeEvent0);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent1));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = propertyChangeEvent2.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string3);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent2.getPropertyName());
      assertNotSame(object3, object0);
      assertNotSame(object3, object2);
      assertNotSame(object3, object1);
      assertNotSame(propertyChangeEvent2, propertyChangeEvent1);
      assertNotSame(propertyChangeEvent2, propertyChangeEvent0);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent1));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = propertyChangeEvent2.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string4);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent2.getPropertyName());
      assertNotSame(object3, object0);
      assertNotSame(object3, object2);
      assertNotSame(object3, object1);
      assertNotSame(propertyChangeEvent2, propertyChangeEvent1);
      assertNotSame(propertyChangeEvent2, propertyChangeEvent0);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent1));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent0));
      assertNotNull(string4);
      
      String string5 = propertyChangeEvent1.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string5);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object0, object3);
      assertNotSame(object2, object3);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent2);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object3));
      assertFalse(object2.equals((Object)object3));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent2));
      assertNotNull(string5);
      
      boolean boolean0 = wall0.containsWallEndAt(0.01F, 1586.363F, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertSame(wall0, wall1);
      
      float float0 = wall1.getXArcCircleCenter();
      assertEquals((-2455.8713F), float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      Integer integer2 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertNull(integer2);
      
      Float float1 = wall0.getHeight();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertNull(float1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertSame(wall0, wall1);
      
      boolean boolean2 = wall0.containsPoint((-1.0F), (-1.0F), 1207.9274F);
      assertFalse(boolean2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float float2 = wall0.getLength();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertNotEquals(float2, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(1006.28F, 1006.28F, 1006.28F, 1006.28F, 1006.28F, 1414.3275F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float1.equals(object0);
      assertFalse(boolean0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(float2, float0, 0.01F);
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float0, 0.01F);
      
      float float4 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float4, 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(float4, float0, 0.01F);
      assertEquals(float4, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart((-721.9F));
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = Float.compare(1209, 1.0F);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare(0, 0.1F);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      wall0.setArcExtent((Float) 0.1F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1734.694F, wall0.getLength(), 0.01F);
      assertEquals((-19781.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5aQ0sj27:/To+XNf");
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(3474);
      assertEquals(3474, (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(3474);
      assertEquals(3474, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int2));
      assertNotNull(integer2);
      
      wall0.setThickness(3474);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1734.694F, wall0.getLength(), 0.01F);
      assertEquals((-19781.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3474.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(1682.234F, (-1.0F), 1.0F);
      assertFalse(boolean1);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1734.694F, wall0.getLength(), 0.01F);
      assertEquals((-19781.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3474.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1734.694F, wall0.getLength(), 0.01F);
      assertEquals((-19781.13F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3474.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(3732.6F, 3732.6F, 3732.6F, 1479.0F, (-2955.8F), 2912.6F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3732.6F, wall1.getXStart(), 0.01F);
      assertEquals(2253.6F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(1479.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2605.8F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3732.6F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2955.8F), wall1.getThickness(), 0.01F);
      assertEquals(2912.6F, wall1.getHeight(), 0.01F);
      assertEquals(2253.6F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("IrT ! [h@NSyV", propertyChangeListener0);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object1, "veD/Xj'u1p7XsrCF", object1, object1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertFalse(object1.equals((Object)object0));
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(string1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(object0, "veD/Xj'u1p7XsrCF", object0, object0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertNotNull(propertyChangeEvent1);
      
      String string2 = propertyChangeEvent1.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string2);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object1);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = propertyChangeEvent1.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string3);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object1);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent1.getPropertyName());
      assertNotSame(object0, object1);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      
      boolean boolean0 = wall0.containsWallEndAt((-2955.8F), (-754.563F), 3732.6F);
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("IrT ! [h@NSyV", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(3732.6F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(integer0);
      
      Float float1 = wall1.getHeight();
      assertEquals(2912.6F, (float)float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2955.8F), wall0.getThickness(), 0.01F);
      assertEquals(2605.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2253.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3732.6F, wall0.getYStart(), 0.01F);
      assertEquals(1479.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3732.6F, wall0.getXStart(), 0.01F);
      assertEquals(2912.6F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2253.6F, wall0.getLength(), 0.01F);
      assertEquals(3732.6F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3732.6F, wall1.getXStart(), 0.01F);
      assertEquals(2253.6F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3732.6F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(1479.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2605.8F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3732.6F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2955.8F), wall1.getThickness(), 0.01F);
      assertEquals(2912.6F, wall1.getHeight(), 0.01F);
      assertEquals(2253.6F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3732.6F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Wall wall2 = new Wall(274.7F, 0.0F, 1.0F, 0.0F, 0.0F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(274.7F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(137.85F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(273.7F, wall2.getLength(), 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      HomeTexture homeTexture0 = wall2.getLeftSideTexture();
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(274.7F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(137.85F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(273.7F, wall2.getLength(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(homeTexture0);
      
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 1834.5604F, 1834.5604F, (-6523.6F), 760.3789F);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(760.3789F, 760.3789F, 760.3789F, 915.09686F, 1834.5604F, 1834.5604F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(1834.5604F);
      assertEquals(1834.5604F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(1834.5604F, float1, 0.01F);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(1634.993F, 1634.993F, 1634.993F, (-0.243647F), (-0.243647F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.243647F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1634.993F, wall0.getXStart(), 0.01F);
      assertEquals(1635.2367F, wall0.getLength(), 0.01F);
      assertEquals(1634.993F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1634.993F, wall0.getYStart(), 0.01F);
      assertEquals(817.3747F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1635.2367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1634.993F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.243647F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(1635.2367F, float0, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.243647F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1634.993F, wall0.getXStart(), 0.01F);
      assertEquals(1635.2367F, wall0.getLength(), 0.01F);
      assertEquals(1634.993F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1634.993F, wall0.getYStart(), 0.01F);
      assertEquals(817.3747F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1635.2367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1634.993F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.243647F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(908.4869F, 908.4869F, 1197.0F);
      assertTrue(boolean0);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      boolean boolean1 = wall0.intersectsRectangle((-3159.95F), (-3159.95F), 908.4869F, 908.4869F);
      assertFalse(boolean1);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(880.05286F, 880.05286F, 880.05286F, 880.05286F, 880.05286F, 880.05286F);
      assertEquals(880.05286F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(880.05286F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(880.05286F, wall0.getYStart(), 0.01F);
      assertEquals(880.05286F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(880.05286F, wall0.getYEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getXStart(), 0.01F);
      assertEquals(880.05286F, wall0.getXEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(880.05286F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(880.05286F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(880.05286F, wall0.getYStart(), 0.01F);
      assertEquals(880.05286F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(880.05286F, wall0.getYEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getXStart(), 0.01F);
      assertEquals(880.05286F, wall0.getXEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertEquals(2067.0479F, float0, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      float float1 = level1.getHeight();
      assertEquals(2067.0479F, float1, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      
      wall0.setLevel(level1);
      assertEquals(880.05286F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(880.05286F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(880.05286F, wall0.getYStart(), 0.01F);
      assertEquals(880.05286F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(880.05286F, wall0.getYEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getXStart(), 0.01F);
      assertEquals(880.05286F, wall0.getXEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      Level level2 = wall0.getLevel();
      assertEquals(880.05286F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(880.05286F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(880.05286F, wall0.getYStart(), 0.01F);
      assertEquals(880.05286F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(880.05286F, wall0.getYEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getXStart(), 0.01F);
      assertEquals(880.05286F, wall0.getXEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(level2.isVisible());
      assertEquals(2067.0479F, level2.getHeight(), 0.01F);
      assertEquals("?:", level2.getName());
      assertEquals(2067.0479F, level2.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level2.getElevation(), 0.01F);
      assertSame(level2, level1);
      assertNotSame(level2, level0);
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      
      float float2 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(880.05286F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(880.05286F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(880.05286F, wall0.getYStart(), 0.01F);
      assertEquals(880.05286F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(880.05286F, wall0.getYEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getXStart(), 0.01F);
      assertEquals(880.05286F, wall0.getXEnd(), 0.01F);
      assertEquals(880.05286F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1.0F, (-1955.246F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1955.246F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1955.246F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(871.77893F, 871.77893F, 871.77893F, 871.77893F, 871.77893F);
      assertEquals(871.77893F, wall0.getThickness(), 0.01F);
      assertEquals(871.77893F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(871.77893F, wall0.getYEnd(), 0.01F);
      assertEquals(871.77893F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(871.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(871.77893F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.77893F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(871.77893F, wall0.getThickness(), 0.01F);
      assertEquals(871.77893F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(871.77893F, wall0.getYEnd(), 0.01F);
      assertEquals(871.77893F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(871.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(871.77893F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.77893F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(871.77893F, wall0.getThickness(), 0.01F);
      assertEquals(871.77893F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(871.77893F, wall0.getYEnd(), 0.01F);
      assertEquals(871.77893F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(871.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(871.77893F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(871.77893F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 1213.25F, 0.0F, 0.0F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.625F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.625F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.625F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.625F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(674.5801F, 674.5801F, 674.5801F, 674.5801F, 674.5801F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(674.5801F, wall0.getYEnd(), 0.01F);
      assertEquals(674.5801F, wall0.getThickness(), 0.01F);
      assertEquals(674.5801F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(674.5801F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(674.5801F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(674.5801F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(674.5801F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float(674.5801F);
      assertEquals(674.5801F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(674.5801F, wall0.getYEnd(), 0.01F);
      assertEquals(674.5801F, wall0.getThickness(), 0.01F);
      assertEquals(674.5801F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(674.5801F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(674.5801F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(674.5801F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(674.5801F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(674.5801F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(515.27576F, (-1145.9F), (-1145.9F), 908.4869F, (-1683.5969F), 515.27576F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1145.9F), wall0.getYStart(), 0.01F);
      assertEquals(515.27576F, wall0.getHeight(), 0.01F);
      assertEquals((-118.70657F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-315.31213F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2641.971F, wall0.getLength(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals((-1145.9F), wall0.getXEnd(), 0.01F);
      assertEquals(515.27576F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2641.971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = new Float(4806.917F);
      assertEquals(4806.917F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1145.9F), wall0.getYStart(), 0.01F);
      assertEquals(515.27576F, wall0.getHeight(), 0.01F);
      assertEquals((-7598.291F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals((-6007.718F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1145.9F), wall0.getXEnd(), 0.01F);
      assertEquals(515.27576F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.5467244E7F, wall0.getLength(), 0.01F);
      assertEquals(4806.917F, wall0.getArcExtent(), 0.01F);
      assertEquals(2641.971F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      // Undeclared exception!
      wall0.containsPoint(0.1F, (-1.0F), (-1683.5969F));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(floatArray0);
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Wall wall1 = new Wall((-1804.0F), 0.0F, 667.1F, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float0 = ((Float)0.0F).floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = ((Float)0.0F).floatValue();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      Float float2 = new Float((double) 667.1F);
      assertEquals(667.1F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.0);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      float float4 = wall1.getThickness();
      assertEquals(0.0F, float4, 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float4, float1, 0.01F);
      assertEquals(float4, float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.getWallAtEnd();
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(667.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2471.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-568.45F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1804.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2471.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), 0.01F, (-1753.2878F));
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1851.82F));
      assertEquals((-1851.82F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setXEnd(1400.8982F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1400.8982F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.3436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1033.3436F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1154.6925F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1400.8982F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.3436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1033.3436F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1154.6925F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      boolean boolean0 = wall0.containsWallEndAt(1400.8982F, 1400.8982F, 941.8137F);
      assertFalse(boolean0);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1400.8982F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.3436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1033.3436F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1154.6925F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Level level0 = wall0.getLevel();
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1400.8982F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.3436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1033.3436F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1154.6925F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(level0);
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(15, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1400.8982F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.3436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1033.3436F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1154.6925F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 1213.25F, 1213.25F, (-1683.5969F), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1715.7805F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(606.63F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(1715.7805F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = Float.valueOf(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      Float float1 = new Float((-82.41722653));
      assertEquals((-82.41723F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = float1.equals(object0);
      assertFalse(boolean1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      float float2 = float1.floatValue();
      assertEquals((-82.41723F), float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float3 = new Float(1.0F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      wall1.setXStart(0.0F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray2 = wall0.getPoints();
      assertEquals(4, floatArray2.length);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 0.01F, 1744.9F);
      assertNull(wall0.getHeight());
      assertEquals(1744.89F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.89F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(872.455F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, (PropertyChangeListener) null);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeight());
      assertEquals(1744.89F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.89F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(872.455F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      Float float0 = new Float((-82.41722653));
      assertEquals((-82.41723F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setLeftSideShininess((-578.766F));
      assertNull(wall0.getHeight());
      assertEquals(1744.89F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.89F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-578.766F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(872.455F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = float0.equals(object0);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertEquals(1744.89F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-518.4835F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(199920.23F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-578.766F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-82.41723F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(872.455F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      
      int int0 = Float.floatToIntBits((-872.34F));
      assertEquals((-1000729149), int0);
      
      wall0.setHeight((Float) (-872.34F));
      assertEquals(1744.89F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-518.4835F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(199920.23F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-578.766F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-82.41723F), wall0.getArcExtent(), 0.01F);
      assertEquals((-872.34F), wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(872.455F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall(274.7F, 0.0F, 1.0F, 0.0F, 0.0F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(274.7F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(137.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(273.7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(273.7F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(274.7F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(137.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(273.7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(273.7F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(274.7F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(137.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(273.7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(273.7F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      boolean boolean1 = wall0.containsPoint((-2.6437423F), (-2.6437423F), (-3159.95F));
      assertFalse(boolean1);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(boolean1 == boolean0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall2 = new Wall(299.86F, 0.0F, (-2885.6155F), 435.42786F, 0.0F, 299.86F);
      assertEquals(3215.0974F, wall2.getLength(), 0.01F);
      assertEquals((-1292.8777F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(435.42786F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2885.6155F), wall2.getXEnd(), 0.01F);
      assertEquals(299.86F, wall2.getHeight(), 0.01F);
      assertEquals(217.71393F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3215.0974F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(299.86F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      boolean boolean2 = float0.equals(wall2);
      assertFalse(boolean2);
      assertEquals(3215.0974F, wall2.getLength(), 0.01F);
      assertEquals((-1292.8777F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(435.42786F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2885.6155F), wall2.getXEnd(), 0.01F);
      assertEquals(299.86F, wall2.getHeight(), 0.01F);
      assertEquals(217.71393F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3215.0974F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(299.86F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      wall0.setHeightAtEnd((Float) 435.42786F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(435.42786F, wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1744.9F);
      assertEquals(1744.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setArcExtent(float0);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = Integer.valueOf((-2747));
      assertEquals((-2747), (int)integer0);
      assertNotNull(integer0);
      
      float float1 = float0.floatValue();
      assertEquals(1744.9F, float1, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals(1744.9F, float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = new Float((-82.41722653));
      assertEquals((-82.41723F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      boolean boolean0 = float3.equals(object0);
      assertFalse(boolean0);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      wall1.setArcExtent(float3);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-82.41723F), wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-82.41723F), wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-82.41723F), wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-82.41723F), wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall2.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(1744.9F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeight());
      assertEquals(1744.9F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall2.getThickness(), 0.01F);
      assertEquals(1744.9F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), 0.01F, (-1753.2878F));
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1851.82F));
      assertEquals((-1851.82F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1400.8982F);
      assertEquals(1400.8982F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = float2.equals("w");
      assertFalse(boolean0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(1400.8982F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      int int0 = Float.floatToIntBits(1528.8F);
      assertEquals(1153374618, int0);
      
      float float4 = ((Float)1528.8F).floatValue();
      assertEquals(1528.8F, float4, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals((-1232.2F), float5, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      float float6 = Float.min((-297.7F), (-1232.2F));
      assertEquals((-1232.2F), float6, 0.01F);
      assertEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(454.24844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals((-422.40048F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1753.2878F), wall1.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2812.5388F, wall1.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(454.24844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals((-422.40048F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1753.2878F), wall1.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2812.5388F, wall1.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(integer0);
      
      float float7 = wall0.getThickness();
      assertEquals((-1753.2878F), float7, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      
      wall1.setRightSideColor((Integer) null);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(454.24844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals((-422.40048F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1753.2878F), wall1.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2812.5388F, wall1.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float8 = wall0.getThickness();
      assertEquals((-1753.2878F), float8, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertEquals(float8, float7, 0.01F);
      
      boolean boolean1 = wall0.containsPoint((-2491.6F), (-278.8F), (-1014.0F));
      assertFalse(boolean1);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = wall0.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float9 = wall1.getRightSideShininess();
      assertEquals(0.0F, float9, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(454.24844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals((-422.40048F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1753.2878F), wall1.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2812.5388F, wall1.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float9, float4, 0.01F);
      assertNotEquals(float9, float3, 0.01F);
      assertNotEquals(float9, float6, 0.01F);
      assertNotEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float5, 0.01F);
      assertNotEquals(float9, float8, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean3 = wall0.containsPoint((-1232.2F), (-1417.247F), (-1232.2F));
      assertFalse(boolean3);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      wall0.setRightSideShininess(908.4869F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float10 = wall1.getXStart();
      assertEquals(908.4869F, float10, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(454.24844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals((-422.40048F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1753.2878F), wall1.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2812.5388F, wall1.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float10, float6, 0.01F);
      assertNotEquals(float10, float9, 0.01F);
      assertNotEquals(float10, float5, 0.01F);
      assertNotEquals(float10, float3, 0.01F);
      assertNotEquals(float10, float4, 0.01F);
      assertNotEquals(float10, float7, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1885.7545F), 215.407F, (-1.0F), 0.0F, 0.0F);
      assertEquals(1897.1377F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1885.7545F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(215.407F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-943.37726F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1897.1377F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(107.2035F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(3408.0F, 1.0F, (-3273.3F));
      assertFalse(boolean0);
      assertEquals(1897.1377F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1885.7545F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(215.407F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-943.37726F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1897.1377F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(107.2035F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      wall0.setYStart((-2489.071F));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2489.071F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(215.407F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2497.4646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(107.2035F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1245.0355F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(2497.4646F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2489.071F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(215.407F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2497.4646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(107.2035F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1245.0355F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(2497.4646F, wall0.getLength(), 0.01F);
      assertNotNull(float0);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals(2497.4646F, float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2489.071F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(215.407F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2497.4646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(107.2035F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1245.0355F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(2497.4646F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall((-82.64642F), 2601.8323F, 2601.8323F, 2601.8323F, 1.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.BackgroundImage", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.containsWallStartAt(2.0F, (-82.64642F), 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setRightSideShininess((-841.1627F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean1 = wall0.intersectsRectangle(2.0F, 0.1F, (-4772.413F), 0.0F);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean1 == boolean0);
      
      int int0 = Float.compare(1.0F, 0.0F);
      assertEquals(1, int0);
      
      wall0.setHeightAtEnd((Float) 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      
      boolean boolean2 = wall0.intersectsRectangle((-731.5022F), 2.0F, 1, 1);
      assertFalse(boolean2);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2601.8323F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2601.8323F, wall1.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2601.8323F, wall1.getXEnd(), 0.01F);
      assertEquals((-841.1627F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-82.64642F), wall1.getXStart(), 0.01F);
      assertEquals(2684.4788F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2601.8323F, wall1.getYStart(), 0.01F);
      assertEquals(1259.5929F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean3 = wall0.containsWallEndAt(2.0F, (-4772.413F), 0.0F);
      assertFalse(boolean3);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(880.2721F, 880.2721F, 880.2721F, 880.2721F, 880.2721F);
      assertEquals(880.2721F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(880.2721F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(880.2721F, wall0.getYStart(), 0.01F);
      assertEquals(880.2721F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(880.2721F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(880.2721F, wall0.getXStart(), 0.01F);
      assertEquals(880.2721F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(880.2721F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(880.2721F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(880.2721F, wall0.getYStart(), 0.01F);
      assertEquals(880.2721F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(880.2721F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(880.2721F, wall0.getXStart(), 0.01F);
      assertEquals(880.2721F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(880.2721F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(880.2721F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(880.2721F, wall0.getYStart(), 0.01F);
      assertEquals(880.2721F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(880.2721F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(880.2721F, wall0.getXStart(), 0.01F);
      assertEquals(880.2721F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 1744.9F);
      assertEquals(1744.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setArcExtent(float0);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Wall wall2 = new Wall(1744.9F, 1744.9F, 0.0F, 0.0F, (-1615.0F));
      assertEquals(2467.6614F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(872.45F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1615.0F), wall2.getThickness(), 0.01F);
      assertEquals(872.45F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      boolean boolean0 = float0.equals(wall0);
      assertFalse(boolean0);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = float0.floatValue();
      assertEquals(1744.9F, float1, 0.01F);
      
      float float2 = Float.sum(0.014925373F, 513.259F);
      assertEquals(513.2739F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      Float float3 = Float.valueOf(1744.9F);
      assertEquals(1744.9F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      Float float4 = Float.valueOf(16.813103F);
      assertEquals(16.813103F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      float float5 = Float.sum((-1253.0F), 1744.9F);
      assertEquals(491.90002F, float5, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      
      int int0 = Float.compare(0.0F, 513.259F);
      assertEquals((-1), int0);
      
      int int1 = Float.compare(0.0F, 0.1F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float float6 = ((Float)0.1F).floatValue();
      assertEquals(0.1F, float6, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      
      int int2 = Float.compare(513.2739F, 491.90002F);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      float float7 = wall1.getThickness();
      assertEquals(1744.9F, float7, 0.01F);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getHeight(), 0.01F);
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      float float8 = wall2.getYArcCircleCenter();
      assertEquals(872.45F, float8, 0.01F);
      assertEquals(2467.6614F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(872.45F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1615.0F), wall2.getThickness(), 0.01F);
      assertEquals(872.45F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float1, 0.01F);
      assertNotEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setWallAtEnd(wall0);
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2467.6614F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(872.45F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1615.0F), wall2.getThickness(), 0.01F);
      assertEquals(872.45F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall0.setXStart((-1730.3716F));
      assertEquals(1744.9F, wall0.getHeight(), 0.01F);
      assertEquals(3832223.5F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(7.264221F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3475.2715F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(401.7312F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals((-1730.3716F), wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall3 = wall2.getWallAtEnd();
      assertEquals(3832223.5F, wall3.getLength(), 0.01F);
      assertEquals(1744.9F, wall3.getArcExtent(), 0.01F);
      assertEquals(401.7312F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall3.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall3.getHeight(), 0.01F);
      assertEquals(1744.9F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall3.getThickness(), 0.01F);
      assertEquals(1744.9F, wall3.getYStart(), 0.01F);
      assertEquals((-1730.3716F), wall3.getXStart(), 0.01F);
      assertEquals(7.264221F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(3475.2715F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getRightSideColor());
      assertEquals(2467.6614F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(872.45F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1744.9F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2467.6614F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1744.9F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1615.0F), wall2.getThickness(), 0.01F);
      assertEquals(872.45F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall((-2456.0896F), (-2456.0896F), (-2456.0896F), (-2456.0896F), (-2456.0896F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess((-2456.0896F));
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      wall0.setXStart(0.0F);
      assertEquals((-1228.0448F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2456.0896F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertEquals(2456.0896F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-1228.0448F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2456.0896F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertEquals(2456.0896F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      
      wall0.setRightSideShininess((-2456.0896F));
      assertEquals((-1228.0448F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2456.0896F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertEquals(2456.0896F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      float float0 = wall0.getLength();
      assertEquals(2456.0896F, float0, 0.01F);
      assertEquals((-1228.0448F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2456.0896F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertEquals(2456.0896F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals((-1228.0448F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2456.0896F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertEquals(2456.0896F, wall0.getLength(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2456.0896F), wall1.getYEnd(), 0.01F);
      assertEquals((-2456.0896F), wall1.getXEnd(), 0.01F);
      assertEquals((-2456.0896F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall1.getYStart(), 0.01F);
      assertEquals((-1228.0448F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2456.0896F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2456.0896F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2456.0896F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2456.0896F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2456.0896F, wall1.getLength(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, (-1.0F), 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      int int0 = Float.compare(2.0F, 543.42F);
      assertEquals((-1), int0);
      
      Float float0 = Float.valueOf((-2454.9316F));
      assertEquals((-2454.9316F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall0.setLeftSideShininess(3122.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3122.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3122.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      float float1 = wall0.getRightSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3122.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean1 = wall0.containsPoint((-1), (-1534.53F), (-721.12F));
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3122.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean1 == boolean0);
      
      wall0.setRightSideShininess(3729.334F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3729.334F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3122.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3729.334F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3122.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setXEnd(908.4869F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      boolean boolean0 = wall0.intersectsRectangle((-3159.95F), (-3159.95F), 908.4869F, 908.4869F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      wall0.setHeight((Float) 0.0F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.move((float) integer0, (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4911.7427F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = wall0.containsPoint(0, (-1557.126F), (-721.12F));
      assertFalse(boolean0);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4911.7427F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.setRightSideShininess(1030.2057F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4911.7427F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1030.2057F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 2067.0479F, 1030.2057F, (-1684.0F), (-1557.126F), 2067.0479F);
      assertEquals(3889.9465F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(515.10284F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1684.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2067.0479F, wall1.getHeight(), 0.01F);
      assertEquals(1030.2057F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1557.126F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2067.0479F, wall1.getYStart(), 0.01F);
      assertEquals(191.52393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3889.9465F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float((double) (-721.9F));
      assertEquals((-721.9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = float0.equals("Z*;H.2ASoQiAKG");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      wall1.setArcExtent(float0);
      assertEquals(3889.9465F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5935.06F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1680.0868F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-721.9F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1684.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2067.0479F, wall1.getHeight(), 0.01F);
      assertEquals(1030.2057F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4293617.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1557.126F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2067.0479F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals(3889.9465F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5935.06F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1680.0868F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-721.9F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1684.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2067.0479F, wall1.getHeight(), 0.01F);
      assertEquals(1030.2057F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4293617.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1557.126F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2067.0479F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      
      float float1 = wall1.getLength();
      assertEquals(4293617.0F, float1, 0.01F);
      assertEquals(3889.9465F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5935.06F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1680.0868F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-721.9F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1684.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2067.0479F, wall1.getHeight(), 0.01F);
      assertEquals(1030.2057F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4293617.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1557.126F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2067.0479F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = wall0.getYStart();
      assertEquals((-4911.7427F), float2, 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4911.7427F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1030.2057F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 915.09686F, 915.09686F, 915.09686F, 915.09686F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(1520);
      assertEquals(1520, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("DduL", integer0);
      assertEquals(1520, (int)integer1);
      assertNotNull(integer1);
      
      boolean boolean0 = integer0.equals(integer1);
      assertTrue(boolean0);
      
      wall1.setLeftSideColor(integer1);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1520, (int)wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((-46.36906F));
      assertEquals((-46.36906F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1520, (int)wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1520, (int)wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1520, (int)wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1520, (int)wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall1.getPoints();
      assertEquals(4, floatArray2.length);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1520, (int)wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      Float float1 = new Float(1453.0);
      assertEquals(1453.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1453.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(1918.1659F, 1918.1659F, 1918.1659F, (-1.3759189F), 1918.1659F);
      assertEquals(1918.1659F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1918.1659F, wall0.getXEnd(), 0.01F);
      assertEquals(1919.5419F, wall0.getLength(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1919.5419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1871.9175F));
      assertEquals((-1871.9175F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1400.8982F);
      assertEquals(1400.8982F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = float2.equals("w");
      assertFalse(boolean0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(1400.8982F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      int int0 = Float.floatToIntBits(1400.8982F);
      assertEquals(1152326846, int0);
      
      float float4 = ((Float)1918.1659F).floatValue();
      assertEquals(1918.1659F, float4, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals((-1232.2F), float5, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      int int1 = Float.compare((-297.7F), 0.0F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare(0.0F, (-1));
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = Float.compare(0.0F, (-4.2513013F));
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      wall0.setArcExtent((Float) (-4.2513013F));
      assertEquals(2513.036F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1918.1659F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-4.2513013F), wall0.getArcExtent(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1919.5419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4800.4526F, wall0.getLength(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(2513.036F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1918.1659F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-4.2513013F), wall0.getArcExtent(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1919.5419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4800.4526F, wall0.getLength(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(homeTexture0);
      
      wall0.setXEnd(4148.7935F);
      assertEquals(4148.7935F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7359.5645F, wall0.getLength(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-4.2513013F), wall0.getArcExtent(), 0.01F);
      assertEquals(2942.8455F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertEquals(1649.6711F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3628.3499F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setYStart((-1232.2F));
      assertEquals(4148.7935F, wall0.getXEnd(), 0.01F);
      assertEquals(74.48825F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2547.671F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-4.2513013F), wall0.getArcExtent(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertEquals(6371.2983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2652.0447F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1232.2F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Float float6 = new Float(0.0);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      
      Wall wall1 = new Wall(299.86F, 0.0F, (-2885.6155F), 435.42786F, 0.0F, 299.86F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean1 = float6.equals(wall1);
      assertFalse(boolean1);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      
      wall0.setArcExtent((Float) 435.42786F);
      assertEquals(4148.7935F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2547.671F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(435.42786F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1232.2F), wall0.getYStart(), 0.01F);
      assertEquals(684827.75F, wall0.getLength(), 0.01F);
      assertEquals(190.88419F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2587.8193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(299.86F, wall1.getXStart(), 0.01F);
      assertEquals(435.42786F, wall1.getYEnd(), 0.01F);
      assertEquals(217.71393F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals((-1292.8777F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2885.6155F), wall1.getXEnd(), 0.01F);
      assertEquals(3215.0974F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      
      float float7 = wall0.getLength();
      assertEquals(684827.75F, float7, 0.01F);
      assertEquals(4148.7935F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2547.671F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(435.42786F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1232.2F), wall0.getYStart(), 0.01F);
      assertEquals(684827.75F, wall0.getLength(), 0.01F);
      assertEquals(190.88419F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2587.8193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall((-2455.0F), (-2455.0F), (-2455.0F), (-2455.0F), (-2455.0F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((float) 1209);
      assertEquals(1209.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 1209);
      assertEquals(1209.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer1 = new Integer(1209);
      assertEquals(1209, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1209, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(integer0.equals((Object)integer1));
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1209, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2455.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1209, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2455.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2455.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1209, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2455.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1209, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2455.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(672.66833F, 672.66833F, 672.66833F, 672.66833F, 672.66833F, 672.66833F);
      assertEquals(672.66833F, wall0.getYStart(), 0.01F);
      assertEquals(672.66833F, wall0.getXStart(), 0.01F);
      assertEquals(672.66833F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(672.66833F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(672.66833F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(672.66833F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(672.66833F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(672.66833F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(672.66833F);
      assertEquals(672.66833F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(672.66833F, wall0.getYStart(), 0.01F);
      assertEquals(672.66833F, wall0.getXStart(), 0.01F);
      assertEquals(672.66833F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(672.66833F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(672.66833F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(672.66833F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(672.66833F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(672.66833F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(672.66833F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall(531.92F, 0.0F, 1213.25F, 1.0F, (-1683.5969F), (-1683.5969F));
      assertEquals(681.33075F, wall0.getLength(), 0.01F);
      assertEquals(531.92F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(681.33075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(872.58496F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-1683.5969F));
      assertEquals((-1683.5969F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(501.08853F, (-1628.543F));
      assertEquals((-1628.543F), float1, 0.01F);
      
      boolean boolean0 = float0.equals(wall0);
      assertFalse(boolean0);
      assertEquals(681.33075F, wall0.getLength(), 0.01F);
      assertEquals(531.92F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(681.33075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(872.58496F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      int int0 = Float.floatToIntBits(2998.5159F);
      assertEquals(1161521217, int0);
      
      Float float2 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      int int1 = Float.floatToIntBits(1161521217);
      assertEquals(1317697233, int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare(0.0F, 1.0F);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = Float.compare(0.0F, 0.1F);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      float float3 = ((Float)0.1F).floatValue();
      assertEquals(0.1F, float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      wall0.setRightSideShininess(1317697233);
      assertEquals(681.33075F, wall0.getLength(), 0.01F);
      assertEquals(531.92F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(681.33075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(872.58496F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.31769728E9F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(681.33075F, wall0.getLength(), 0.01F);
      assertEquals(531.92F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(681.33075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(872.58496F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.31769728E9F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      
      Float float4 = wall0.getHeightAtEnd();
      assertEquals(681.33075F, wall0.getLength(), 0.01F);
      assertEquals(531.92F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(681.33075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(872.58496F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.31769728E9F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float4);
      
      float float5 = wall0.getRightSideShininess();
      assertEquals(1.31769728E9F, float5, 0.01F);
      assertEquals(681.33075F, wall0.getLength(), 0.01F);
      assertEquals(531.92F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(681.33075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(872.58496F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.31769728E9F, wall0.getRightSideShininess(), 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd((-2455.8713F));
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      int int1 = Float.compare(0.0F, (-721.9F));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      wall0.setHeight((Float) 0.0F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.move((-2455.8713F), (-1557.126F));
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.setThickness((-2455.8713F));
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertEquals(2067.0479F, float0, 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      float float1 = level1.getHeight();
      assertEquals(2067.0479F, float1, 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertFalse(boolean0);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      boolean boolean1 = wall0.containsPoint(1213.25F, 173.0F, 0.0F);
      assertFalse(boolean1);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      wall0.setRightSideShininess(3416.6572F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3416.6572F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 1834.5604F, 1834.5604F, (-6523.6F), 760.3789F);
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getThickness(), 0.01F);
      assertEquals(8408.583F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2344.5198F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8408.583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(1.0F, float1, 0.01F);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getThickness(), 0.01F);
      assertEquals(8408.583F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2344.5198F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8408.583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getThickness(), 0.01F);
      assertEquals(8408.583F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2344.5198F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8408.583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getThickness(), 0.01F);
      assertEquals(8408.583F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2344.5198F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8408.583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getThickness(), 0.01F);
      assertEquals(8408.583F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2344.5198F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8408.583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getThickness(), 0.01F);
      assertEquals(8408.583F, wall1.getLength(), 0.01F);
      assertEquals(1374.8286F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals((-6523.6F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2344.5198F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8408.583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 577.2982F, (-1.0F), 577.2982F, 0.0F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(38.36F, 1174.6F, 0.0F);
      assertFalse(boolean0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "veD/Xj'u1p7XsrCF", object0, object0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      propertyChangeEvent0.setPropagationId("veD/Xj'u1p7XsrCF");
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean1 = wall0.containsWallEndAt(577.2982F, (-1888.4F), 1.0F);
      assertFalse(boolean1);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Wall wall1 = wall0.clone();
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(integer0);
      
      float float1 = wall0.getThickness();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float2 = wall0.getThickness();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      boolean boolean2 = wall0.containsPoint(0.0F, (-1888.4F), 1049.4138F);
      assertFalse(boolean2);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      boolean boolean3 = wall1.isAtLevel((Level) null);
      assertTrue(boolean3);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = wall0.getRightSideShininess();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      
      boolean boolean4 = wall0.containsPoint(0.0F, 39.60616F, (-1.0F));
      assertFalse(boolean4);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      wall1.setRightSideShininess(0.0F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall(682.7009F, 682.7009F, 682.7009F, 682.7009F, 682.7009F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall((-2344.0F), (-2344.0F), 740.77893F, 0.0F, 606.28F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(606.28F, 0.0F);
      assertEquals(1, int0);
      
      int int1 = Float.compare((-647.693F), 740.77893F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(134, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(134, floatArray1.length);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals((-2946.9421F), float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(674.5801F, 674.5801F, 674.5801F, 674.5801F, 674.5801F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(674.5801F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(674.5801F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(674.5801F, wall0.getYEnd(), 0.01F);
      assertEquals(674.5801F, wall0.getXEnd(), 0.01F);
      assertEquals(674.5801F, wall0.getYStart(), 0.01F);
      assertEquals(674.5801F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(674.5801F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(674.5801F);
      assertEquals(674.5801F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(674.5801F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(674.5801F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(674.5801F, wall0.getYEnd(), 0.01F);
      assertEquals(674.5801F, wall0.getXEnd(), 0.01F);
      assertEquals(674.5801F, wall0.getYStart(), 0.01F);
      assertEquals(674.5801F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(674.5801F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(674.5801F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(674.5801F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(674.5801F, wall0.getYEnd(), 0.01F);
      assertEquals(674.5801F, wall0.getXEnd(), 0.01F);
      assertEquals(674.5801F, wall0.getYStart(), 0.01F);
      assertEquals(674.5801F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(674.5801F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 915.09686F, 915.09686F, 915.09686F, 915.09686F, 915.09686F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-2654.19F), 760.3789F, (-2654.19F), (-2654.19F), 0.01F, 0.01F);
      assertEquals((-2654.19F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-2654.19F), wall1.getXStart(), 0.01F);
      assertEquals(3414.5688F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(3414.5688F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertEquals((-2654.19F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-2654.19F), wall1.getXStart(), 0.01F);
      assertEquals(3414.5688F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(3414.5688F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2654.19F), wall2.getXStart(), 0.01F);
      assertEquals((-946.9055F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals((-2654.19F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3414.5688F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals((-2654.19F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(3414.5688F, wall2.getLength(), 0.01F);
      assertEquals((-2654.19F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      Float float0 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite((-750.521F));
      assertTrue(boolean0);
      
      float float1 = float0.floatValue();
      assertEquals((-1.0F), float1, 0.01F);
      
      Float float2 = new Float(2.0F);
      assertEquals(2.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      wall1.setXStart(2.0F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(4326.0405F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1326.095F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      wall2.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(4326.0405F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1326.095F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2654.19F), wall2.getXStart(), 0.01F);
      assertEquals((-946.9055F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals((-2654.19F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3414.5688F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals((-2654.19F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(3414.5688F, wall2.getLength(), 0.01F);
      assertEquals((-2654.19F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setWallAtStart(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(4326.0405F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1326.095F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2654.19F), wall2.getXStart(), 0.01F);
      assertEquals((-946.9055F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals((-2654.19F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3414.5688F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals((-2654.19F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(3414.5688F, wall2.getLength(), 0.01F);
      assertEquals((-2654.19F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setWallAtStart(wall1);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(4326.0405F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1326.095F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2654.19F), wall2.getXStart(), 0.01F);
      assertEquals((-946.9055F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals((-2654.19F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3414.5688F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals((-2654.19F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(3414.5688F, wall2.getLength(), 0.01F);
      assertEquals((-2654.19F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      wall0.setWallAtEnd(wall2);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(4326.0405F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1326.095F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2654.19F), wall2.getXStart(), 0.01F);
      assertEquals((-946.9055F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals((-2654.19F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3414.5688F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals((-2654.19F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getArcExtent());
      assertEquals(3414.5688F, wall2.getLength(), 0.01F);
      assertEquals((-2654.19F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(4326.0405F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1326.095F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(4326.0405F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1326.095F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall0.getPoints();
      assertEquals(4, floatArray2.length);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      
      float float3 = wall1.getStartPointToEndPointDistance();
      assertEquals(4326.0405F, float3, 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(4326.0405F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1326.095F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotEquals(float3, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      Wall wall3 = wall1.clone();
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2654.19F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertEquals((-2654.19F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(760.3789F, wall3.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall3.getLength(), 0.01F);
      assertEquals((-946.9055F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.01F, wall3.getThickness(), 0.01F);
      assertEquals((-1326.095F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(4326.0405F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2654.19F), wall1.getXEnd(), 0.01F);
      assertEquals((-2654.19F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-946.9055F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(4326.0405F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(4326.0405F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1326.095F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotNull(wall3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getHeightAtEnd();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 740.77893F, (-2344.0F), 740.77893F, 740.77893F);
      assertEquals((-2344.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2344.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(740.77893F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(740.77893F, wall0.getThickness(), 0.01F);
      assertEquals((-1172.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(740.77893F, wall0.getYStart(), 0.01F);
      assertEquals(2344.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess((-2344.0F));
      assertEquals((-2344.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2344.0F, wall0.getLength(), 0.01F);
      assertEquals(740.77893F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(740.77893F, wall0.getThickness(), 0.01F);
      assertEquals((-1172.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(740.77893F, wall0.getYStart(), 0.01F);
      assertEquals(2344.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Float float0 = new Float((-1851.82F));
      assertEquals((-1851.82F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-1851.82F), float1, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals((-1851.82F), float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals((-1851.82F), float3, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      
      float float4 = Float.min(0.0F, 0.0F);
      assertEquals(0.0F, float4, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      wall0.setArcExtent((Float) (-1851.82F));
      assertEquals((-2344.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1851.82F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(740.77893F, wall0.getThickness(), 0.01F);
      assertEquals((-1172.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(740.77893F, wall0.getYStart(), 0.01F);
      assertEquals(2344.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-268.49896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2864177.0F, wall0.getLength(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-2344.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1851.82F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(740.77893F, wall0.getThickness(), 0.01F);
      assertEquals((-1172.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(740.77893F, wall0.getYStart(), 0.01F);
      assertEquals(2344.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-268.49896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2864177.0F, wall0.getLength(), 0.01F);
      assertNull(homeTexture0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(4238);
      assertEquals(4238, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      wall0.setRightSideColor(integer1);
      assertEquals((-2344.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1851.82F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4238, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(740.77893F, wall0.getThickness(), 0.01F);
      assertEquals((-1172.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(740.77893F, wall0.getYStart(), 0.01F);
      assertEquals(2344.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-268.49896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2864177.0F, wall0.getLength(), 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, (-1851.82F), 740.77893F, (-1851.82F));
      assertFalse(boolean0);
      assertEquals((-2344.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1851.82F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4238, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(740.77893F, wall0.getThickness(), 0.01F);
      assertEquals((-1172.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(740.77893F, wall0.getYStart(), 0.01F);
      assertEquals(2344.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-268.49896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2864177.0F, wall0.getLength(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getLeftSideTexture();
      assertEquals((-2344.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(740.77893F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1851.82F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4238, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2344.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(740.77893F, wall0.getThickness(), 0.01F);
      assertEquals((-1172.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(740.77893F, wall0.getYStart(), 0.01F);
      assertEquals(2344.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-268.49896F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2864177.0F, wall0.getLength(), 0.01F);
      assertNull(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), 0.01F, (-1753.2878F));
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-1232.2F), float1, 0.01F);
      
      float float2 = Float.sum(0.0F, (-3120.47F));
      assertEquals((-3120.47F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals((-1232.2F), float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      wall0.setHeightAtEnd((Float) (-1232.2F));
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      
      float float4 = wall0.getThickness();
      assertEquals((-1753.2878F), float4, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      float float5 = wall0.getYArcCircleCenter();
      assertEquals(454.24844F, float5, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Rt;KABSqo5", propertyChangeListener0);
      assertEquals("Rt;KABSqo5", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals("Rt;KABSqo5", propertyChangeListenerProxy0.getPropertyName());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertNull(textureImage0);
      
      TextureImage textureImage1 = wall0.getPattern();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertNull(textureImage1);
      
      wall0.setLeftSideShininess(209.183F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(209.183F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-517.3961F), 3680.567F, 2074.2805F, 3680.567F);
      assertEquals(4501.4844F, wall0.getLength(), 0.01F);
      assertEquals(778.4422F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3680.567F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2074.2805F, wall0.getYEnd(), 0.01F);
      assertEquals(3680.567F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-517.3961F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4501.4844F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1840.2834F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(18);
      assertEquals(18, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite((-1455.0F));
      assertTrue(boolean0);
      
      boolean boolean1 = Float.isFinite(0.0F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = Float.isFinite(0.0F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      wall0.setArcExtent(float0);
      assertEquals(4501.4844F, wall0.getLength(), 0.01F);
      assertEquals(3.0054108E19F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.1162646E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3680.567F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2074.2805F, wall0.getYEnd(), 0.01F);
      assertEquals(3680.567F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-517.3961F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4501.4844F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(900.0F, (-1886.9309F), 590.0F, 590.0F, 590.0F);
      assertEquals(745.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(590.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1886.9309F), wall1.getYStart(), 0.01F);
      assertEquals(900.0F, wall1.getXStart(), 0.01F);
      assertEquals(2496.2546F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-648.46545F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2496.2546F, wall1.getLength(), 0.01F);
      assertEquals(590.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(590.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean3 = wall1.containsWallEndAt(0.0F, (-517.3961F), 3680.567F);
      assertTrue(boolean3);
      assertEquals(745.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(590.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1886.9309F), wall1.getYStart(), 0.01F);
      assertEquals(900.0F, wall1.getXStart(), 0.01F);
      assertEquals(2496.2546F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-648.46545F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2496.2546F, wall1.getLength(), 0.01F);
      assertEquals(590.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(590.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = integer0.equals(wall1);
      assertFalse(boolean4);
      assertEquals(745.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(590.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1886.9309F), wall1.getYStart(), 0.01F);
      assertEquals(900.0F, wall1.getXStart(), 0.01F);
      assertEquals(2496.2546F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-648.46545F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2496.2546F, wall1.getLength(), 0.01F);
      assertEquals(590.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(590.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(4501.4844F, wall0.getLength(), 0.01F);
      assertEquals(3.0054108E19F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.1162646E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(18, (int)wall0.getLeftSideColor());
      assertEquals(3680.567F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2074.2805F, wall0.getYEnd(), 0.01F);
      assertEquals(3680.567F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-517.3961F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4501.4844F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setYStart((-1886.9309F));
      assertEquals(745.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(590.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1886.9309F), wall1.getYStart(), 0.01F);
      assertEquals(900.0F, wall1.getXStart(), 0.01F);
      assertEquals(2496.2546F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-648.46545F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2496.2546F, wall1.getLength(), 0.01F);
      assertEquals(590.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(590.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean5 = wall0.containsWallEndAt(1.0F, 954.27F, 1906.0F);
      assertFalse(boolean5);
      assertEquals(4501.4844F, wall0.getLength(), 0.01F);
      assertEquals(3.0054108E19F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.1162646E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(18, (int)wall0.getLeftSideColor());
      assertEquals(3680.567F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2074.2805F, wall0.getYEnd(), 0.01F);
      assertEquals(3680.567F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-517.3961F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4501.4844F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2591.6768F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.1162646E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(778.4422F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(18, (int)wall0.getLeftSideColor());
      assertEquals(2591.6768F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2074.2805F, wall0.getYEnd(), 0.01F);
      assertEquals(3680.567F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-517.3961F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getYEnd();
      assertEquals(2074.2805F, float1, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2591.6768F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.1162646E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(778.4422F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(18, (int)wall0.getLeftSideColor());
      assertEquals(2591.6768F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2074.2805F, wall0.getYEnd(), 0.01F);
      assertEquals(3680.567F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-517.3961F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = new Wall(274.7F, 0.0F, 1.0F, 0.0F, 0.0F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(274.7F, wall2.getXStart(), 0.01F);
      assertEquals(273.7F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(137.85F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      HomeTexture homeTexture0 = wall2.getLeftSideTexture();
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(274.7F, wall2.getXStart(), 0.01F);
      assertEquals(273.7F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(273.7F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(137.85F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(homeTexture0);
      
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall(1834.5604F, 1834.5604F, 1834.5604F, 915.09686F, 915.09686F, 915.09686F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(1.3728963F);
      assertEquals(1.3728963F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1374.8286F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getXStart(), 0.01F);
      assertEquals(1834.5604F, wall1.getYStart(), 0.01F);
      assertEquals(919.46356F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(915.09686F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1834.5604F, wall1.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(919.46356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1834.5604F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(1834.5604F, wall0.getXStart(), 0.01F);
      assertEquals(919.46356F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1374.8286F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(919.46356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(1834.5604F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(908.4869F, 908.4869F, 0.0F);
      assertFalse(boolean0);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall((-2344.0F), (-2344.0F), 740.77893F, 0.0F, 606.28F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(606.28F, 0.0F);
      assertEquals(1, int0);
      
      int int1 = Float.compare((-647.693F), 740.77893F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite((-1679.0F));
      assertTrue(boolean0);
      
      float float1 = Float.min((-731.5022F), 1.0F);
      assertEquals((-731.5022F), float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(134, floatArray0.length);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(134, floatArray1.length);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall0.setLeftSideShininess(1.0F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertFalse(boolean1 == boolean0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(908.4869F, 908.4869F);
      assertEquals(1816.9738F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1816.9738F, wall0.getXEnd(), 0.01F);
      assertEquals(1816.9738F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1816.9738F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1816.9738F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1816.9738F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals(1816.9738F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1816.9738F, wall0.getXEnd(), 0.01F);
      assertEquals(1816.9738F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1816.9738F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1816.9738F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1816.9738F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall(549.0F, 549.0F, 925.8805F, 549.0F, 1.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(737.44025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(376.8805F, wall0.getLength(), 0.01F);
      assertEquals(549.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(549.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(549.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(925.8805F, wall0.getXEnd(), 0.01F);
      assertEquals(549.0F, wall0.getYStart(), 0.01F);
      assertEquals(376.8805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLevel((Level) null);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(737.44025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(376.8805F, wall0.getLength(), 0.01F);
      assertEquals(549.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(549.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(549.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(925.8805F, wall0.getXEnd(), 0.01F);
      assertEquals(549.0F, wall0.getYStart(), 0.01F);
      assertEquals(376.8805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(737.44025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(376.8805F, wall0.getLength(), 0.01F);
      assertEquals(549.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(549.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(549.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(925.8805F, wall0.getXEnd(), 0.01F);
      assertEquals(549.0F, wall0.getYStart(), 0.01F);
      assertEquals(376.8805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(737.44025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(376.8805F, wall0.getLength(), 0.01F);
      assertEquals(549.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(549.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(549.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(925.8805F, wall0.getXEnd(), 0.01F);
      assertEquals(549.0F, wall0.getYStart(), 0.01F);
      assertEquals(376.8805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(1918.1659F, 1918.1659F, 1918.1659F, (-1.3759189F), 1918.1659F);
      assertEquals(1918.1659F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1919.5419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1918.1659F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertEquals(1919.5419F, wall0.getLength(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1871.9175F));
      assertEquals((-1871.9175F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1400.8982F);
      assertEquals(1400.8982F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = float2.equals("w");
      assertFalse(boolean0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = Float.min((-1232.2F), 1561.9359F);
      assertEquals((-1232.2F), float3, 0.01F);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float float4 = float2.floatValue();
      assertEquals(1400.8982F, float4, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      int int0 = Float.floatToIntBits(1400.8982F);
      assertEquals(1152326846, int0);
      
      float float5 = ((Float)1918.1659F).floatValue();
      assertEquals(1918.1659F, float5, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      
      int int1 = Float.compare((-297.7F), 0.0F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare(0.0F, (-4.2513013F));
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      wall0.setArcExtent((Float) (-4.2513013F));
      assertEquals(4800.4526F, wall0.getLength(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2513.036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4.2513013F), wall0.getArcExtent(), 0.01F);
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1919.5419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1918.1659F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(4800.4526F, wall0.getLength(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2513.036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4.2513013F), wall0.getArcExtent(), 0.01F);
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1919.5419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1918.1659F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0);
      
      Integer integer0 = Integer.valueOf(1455);
      assertEquals(1455, (int)integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(863);
      assertEquals(863, (int)integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      boolean boolean2 = wall0.containsPoint(1152326846, 2635.4648F, (-1.3759189F));
      assertFalse(boolean2);
      assertEquals(4800.4526F, wall0.getLength(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2513.036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4.2513013F), wall0.getArcExtent(), 0.01F);
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1919.5419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1918.1659F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      wall0.setRightSideShininess((-1.3759189F));
      assertEquals((-1.3759189F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(4800.4526F, wall0.getLength(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2513.036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4.2513013F), wall0.getArcExtent(), 0.01F);
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1919.5419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1918.1659F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean3 = wall0.containsWallStartAt(1917.0F, 0.0F, 1400.8982F);
      assertTrue(boolean3);
      assertEquals((-1.3759189F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(4800.4526F, wall0.getLength(), 0.01F);
      assertEquals(1918.1659F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2513.036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.1659F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4.2513013F), wall0.getArcExtent(), 0.01F);
      assertEquals(958.39496F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1919.5419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1918.1659F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1918.1659F, wall0.getXStart(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(0.0F, float1, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      float float3 = new Float(0.0F);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(float3, float1, 0.01F);
      
      float float4 = float2.floatValue();
      assertEquals(0.0F, float4, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float3, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(float4, float1, 0.01F);
      
      float float5 = float2.floatValue();
      assertEquals(0.0F, float5, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float4, 0.01F);
      assertEquals((float)float2, (float)float3, 0.01F);
      assertEquals(float5, float1, 0.01F);
      assertEquals(float5, float4, 0.01F);
      assertEquals(float5, float3, 0.01F);
      
      float float6 = float2.floatValue();
      assertEquals(0.0F, float6, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float5, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float4, 0.01F);
      assertEquals((float)float2, (float)float3, 0.01F);
      assertEquals(float6, float5, 0.01F);
      assertEquals(float6, float4, 0.01F);
      assertEquals(float6, float1, 0.01F);
      assertEquals(float6, float3, 0.01F);
      
      float float7 = float0.floatValue();
      assertEquals(0.0F, float7, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float5, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float4, 0.01F);
      assertEquals((float)float0, (float)float6, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals(float7, float4, 0.01F);
      assertEquals(float7, float5, 0.01F);
      assertEquals(float7, float1, 0.01F);
      assertEquals(float7, float6, 0.01F);
      assertEquals(float7, float3, 0.01F);
      
      float float8 = float2.floatValue();
      assertEquals(0.0F, float8, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float5, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float4, 0.01F);
      assertEquals((float)float2, (float)float6, 0.01F);
      assertEquals((float)float2, (float)float7, 0.01F);
      assertEquals((float)float2, (float)float3, 0.01F);
      assertEquals(float8, float3, 0.01F);
      assertEquals(float8, float5, 0.01F);
      assertEquals(float8, float1, 0.01F);
      assertEquals(float8, float4, 0.01F);
      assertEquals(float8, float6, 0.01F);
      assertEquals(float8, float7, 0.01F);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float float9 = Float.max((-570.0F), 0.0F);
      assertEquals(0.0F, float9, 0.01F);
      assertEquals(float9, float5, 0.01F);
      assertEquals(float9, float1, 0.01F);
      assertEquals(float9, float4, 0.01F);
      assertEquals(float9, float3, 0.01F);
      assertEquals(float9, float8, 0.01F);
      assertEquals(float9, float6, 0.01F);
      assertEquals(float9, float7, 0.01F);
      
      wall0.setLeftSideShininess(1.0F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float10 = wall0.getRightSideShininess();
      assertEquals(0.0F, float10, 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(float10, float6, 0.01F);
      assertEquals(float10, float1, 0.01F);
      assertEquals(float10, float4, 0.01F);
      assertEquals(float10, float7, 0.01F);
      assertEquals(float10, float9, 0.01F);
      assertEquals(float10, float5, 0.01F);
      assertEquals(float10, float8, 0.01F);
      assertEquals(float10, float3, 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      wall0.setRightSideShininess(0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(textureImage0);
      
      float float11 = wall0.getXEnd();
      assertEquals(0.0F, float11, 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float11, float10, 0.01F);
      assertEquals(float11, float8, 0.01F);
      assertEquals(float11, float3, 0.01F);
      assertEquals(float11, float1, 0.01F);
      assertEquals(float11, float5, 0.01F);
      assertEquals(float11, float9, 0.01F);
      assertEquals(float11, float6, 0.01F);
      assertEquals(float11, float4, 0.01F);
      assertEquals(float11, float7, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      Integer integer0 = Integer.valueOf((-2747));
      assertEquals((-2747), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Float.compare((-1636.0F), (-1636.0F));
      assertEquals(0, int0);
      
      float float0 = ((Float)(-1636.0F)).floatValue();
      assertEquals((-1636.0F), float0, 0.01F);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Float float1 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertEquals((-1.0F), float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      int int1 = Float.compare(0.01F, 0.0F);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare((-929.5F), (-2146.4F));
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = Float.compare(0.0F, 4510.0F);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = Float.compare(0.0F, 0.01F);
      assertEquals((-1), int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      
      int int5 = Float.compare((-1361.56F), 1);
      assertEquals((-1), int5);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      
      int int6 = Float.compare(1, (-1361.56F));
      assertEquals(1, int6);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      
      wall1.setArcExtent((Float) (-1361.56F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-1361.56F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = wall0.getThickness();
      assertEquals((-2455.8713F), float3, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals((-2455.8713F), float4, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-1361.56F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setXStart((-2146.4F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals(309.47144F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals(259833.66F, wall1.getLength(), 0.01F);
      assertEquals((-2146.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2301.1357F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-1361.56F), wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2567.5625F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals(309.47144F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals(259833.66F, wall1.getLength(), 0.01F);
      assertEquals((-2146.4F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2301.1357F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-1361.56F), wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2567.5625F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), 17.0F, 0.0F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(8.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(18.027756F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(1073.96F, 0.0F);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      wall0.setArcExtent((Float) 1073.96F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(414, floatArray0.length);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(414, floatArray1.length);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall0.setLeftSideShininess(1073.96F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1073.96F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1073.96F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, (-678.5654F), (-2932.9749F));
      assertTrue(boolean0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1073.96F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      
      wall0.setLeftSideShininess(1.0F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      
      wall0.setThickness(1360.9586F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1360.9586F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      
      Integer integer0 = Integer.getInteger("LEFT_SIDE_TEXTURE", 0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean1 = integer0.equals("LEFT_SIDE_TEXTURE");
      assertFalse(boolean1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1360.9586F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(42038.523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(37.53284F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.112936F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(17.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(18.027756F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1073.96F, wall0.getArcExtent(), 0.01F);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-2344.0F), (-2344.0F), 740.77893F, 0.0F, 606.28F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(606.28F, 0.0F);
      assertEquals(1, int0);
      
      int int1 = Float.compare((-647.693F), 740.77893F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(134, floatArray0.length);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(134, floatArray1.length);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall0.setLeftSideShininess(1.0F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(740.77893F, 1.0F, (-2932.9749F), (-2932.9749F));
      assertTrue(boolean0);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, (-1.0F), 0.0F);
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertEquals(2067.0479F, float0, 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      level1.setName("");
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      float float1 = level1.getHeight();
      assertEquals(2067.0479F, float1, 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      
      wall0.setLevel(level1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setXStart((-1534.53F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      float float2 = wall0.getYEnd();
      assertEquals(0.0F, float2, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, (-1.0F), (-1.0F), 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      float float0 = level0.getElevation();
      assertEquals(2067.0479F, float0, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      
      float float1 = level0.getHeight();
      assertEquals(2067.0479F, float1, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      wall0.setXStart((-1534.53F));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 1834.5604F, 1834.5604F, 1115.9194F, 1115.9194F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float(1.3728963F);
      assertEquals(1.3728963F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtStart(wall0);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      
      float float1 = Float.max(1115.9194F, (-284.0F));
      assertEquals(1115.9194F, float1, 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setHeight(float0);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.3728963F, wall0.getHeight(), 0.01F);
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.3728963F, wall0.getHeight(), 0.01F);
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(1926.0F, 1926.0F, 1926.0F, 1926.0F, 1926.0F, 1926.0F);
      assertEquals(1926.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1926.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1926.0F, wall0.getThickness(), 0.01F);
      assertEquals(1926.0F, wall0.getYStart(), 0.01F);
      assertEquals(1926.0F, wall0.getXStart(), 0.01F);
      assertEquals(1926.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1926.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1926.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1926.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1926.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1926.0F, wall0.getThickness(), 0.01F);
      assertEquals(1926.0F, wall0.getYStart(), 0.01F);
      assertEquals(1926.0F, wall0.getXStart(), 0.01F);
      assertEquals(1926.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1926.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1926.0F, wall0.getYArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1926.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1926.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1926.0F, wall0.getThickness(), 0.01F);
      assertEquals(1926.0F, wall0.getYStart(), 0.01F);
      assertEquals(1926.0F, wall0.getXStart(), 0.01F);
      assertEquals(1926.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1926.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1926.0F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(1213.25F, 1213.25F, 1213.25F, 0.0F, 0.0F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(606.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(531.92F, 0.0F, 1213.25F, 1.0F, (-1684.0F), (-1684.0F));
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(681.33075F, wall1.getLength(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1684.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1684.0F), wall1.getThickness(), 0.01F);
      assertEquals(872.58496F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float((double) (-1684.0F));
      assertEquals((-1684.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = float0.equals(wall1);
      assertFalse(boolean0);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(681.33075F, wall1.getLength(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1684.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1684.0F), wall1.getThickness(), 0.01F);
      assertEquals(872.58496F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.floatToIntBits(2998.5159F);
      assertEquals(1161521217, int0);
      
      boolean boolean1 = ((Float)2998.5159F).equals(wall0);
      assertFalse(boolean1);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(606.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      Float float1 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall1.setArcExtent(float1);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertEquals(624.0831F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1684.0F), wall1.getHeight(), 0.01F);
      assertEquals(871.66974F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1684.0F), wall1.getThickness(), 0.01F);
      assertEquals(710.56995F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer0 = Integer.valueOf((-408));
      assertEquals((-408), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-408));
      assertEquals((-408), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      boolean boolean2 = wall1.containsPoint(531.92F, 1161521217, 0.0F);
      assertTrue(boolean2);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertEquals(624.0831F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1684.0F), wall1.getHeight(), 0.01F);
      assertEquals(871.66974F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1684.0F), wall1.getThickness(), 0.01F);
      assertEquals(710.56995F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float float2 = wall0.getLength();
      assertEquals(1213.25F, float2, 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1213.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1213.25F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1213.25F, wall0.getYStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(606.625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer2 = wall1.getLeftSideColor();
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(531.92F, wall1.getXStart(), 0.01F);
      assertEquals(624.0831F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertEquals((-1684.0F), wall1.getHeight(), 0.01F);
      assertEquals(871.66974F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(681.33075F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1684.0F), wall1.getThickness(), 0.01F);
      assertEquals(710.56995F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall((-2456.0896F), (-2456.0896F), (-2456.0896F), (-2456.0896F), (-2456.0896F));
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess((-2456.0896F));
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertEquals((-2456.0896F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2456.0896F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals(2456.0896F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1228.0448F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2456.0896F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals(2456.0896F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1228.0448F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      
      wall0.setRightSideShininess((-2456.0896F));
      assertEquals((-2456.0896F), wall0.getXStart(), 0.01F);
      assertEquals((-2456.0896F), wall0.getThickness(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2456.0896F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2456.0896F), wall0.getYStart(), 0.01F);
      assertEquals(2456.0896F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1228.0448F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2456.0896F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2456.0896F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2456.0896F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), 0.01F, (-1753.2878F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1906.0F);
      assertEquals(1906.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = Float.isFinite((-1389.2053F));
      assertTrue(boolean0);
      
      Wall wall1 = new Wall((-1804.0F), 0.0F, 667.1F, 0.0F, 0.0F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean1 = float1.equals(wall1);
      assertFalse(boolean1);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      
      float float2 = ((Float)0.0F).floatValue();
      assertEquals(0.0F, float2, 0.01F);
      
      float float3 = Float.sum(0.01F, 1.0F);
      assertEquals(1.01F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      Float float4 = Float.valueOf(1834.5604F);
      assertEquals(1834.5604F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      Float float5 = Float.valueOf(1834.5604F);
      assertEquals(1834.5604F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      
      float float6 = Float.sum((-1804.0F), 0.01F);
      assertEquals((-1803.99F), float6, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      
      float float7 = float5.floatValue();
      assertEquals(1834.5604F, float7, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float6, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      
      int int0 = Float.compare(0.1F, 0.0F);
      assertEquals(1, int0);
      
      wall0.setHeightAtEnd((Float) 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float8 = wall0.getThickness();
      assertEquals((-1753.2878F), float8, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float8, float7, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      
      float float9 = wall1.getYArcCircleCenter();
      assertEquals(0.0F, float9, 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float3, 0.01F);
      assertNotEquals(float9, float8, 0.01F);
      assertNotEquals(float9, float6, 0.01F);
      assertEquals(float9, float2, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      try { 
        Integer.decode("Zz%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Zz%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall((-6523.6F), 760.3789F, 915.09686F, 760.3789F, 915.09686F, 760.3789F);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(760.3789F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(760.3789F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite((-1193.0F));
      assertTrue(boolean0);
      
      float float1 = float0.floatValue();
      assertEquals(1.0F, float1, 0.01F);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(760.3789F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(760.3789F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(760.3789F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(760.3789F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(760.3789F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(760.3789F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(760.3789F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(760.3789F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(760.3789F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(760.3789F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall1.getLength(), 0.01F);
      assertEquals((-6523.6F), wall1.getXStart(), 0.01F);
      assertEquals(7438.697F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(760.3789F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(760.3789F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals((-2804.2517F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall0.getPoints();
      assertEquals(4, floatArray2.length);
      assertEquals((-6523.6F), wall0.getXStart(), 0.01F);
      assertEquals(760.3789F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(760.3789F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7438.697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7438.697F, wall0.getLength(), 0.01F);
      assertEquals((-2804.2517F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(760.3789F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(760.3789F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      wall0.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setLeftSideShininess(0.1F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer1 = new Integer(1209);
      assertEquals(1209, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      float float0 = ((Float)0.0F).floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float((double) 1209);
      assertEquals(1209.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.0);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), 0.01F, (-1753.2878F));
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1906.0F);
      assertEquals(1906.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setYEnd(0.0F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.542F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.542F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(454.24344F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      boolean boolean0 = Float.isFinite((-1389.2053F));
      assertTrue(boolean0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.542F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.542F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(454.24344F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(homeTexture0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.542F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.542F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(454.24344F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(floatArray0);
      
      Integer integer0 = Integer.valueOf(37);
      assertEquals(37, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.542F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(37, (int)wall0.getLeftSideColor());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.542F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(454.24344F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setXEnd(908.4869F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(37, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(454.24344F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getLength(), 0.01F);
      
      wall0.setYStart((-1349.065F));
      assertEquals((-1349.065F), wall0.getYStart(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-674.5325F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1349.065F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(37, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1349.065F, wall0.getLength(), 0.01F);
      
      wall0.setXStart((-1753.2878F));
      assertEquals((-1349.065F), wall0.getYStart(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-674.5325F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2984.1282F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(37, (int)wall0.getLeftSideColor());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2984.1282F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float2 = wall0.getXEnd();
      assertEquals(908.4869F, float2, 0.01F);
      assertEquals((-1349.065F), wall0.getYStart(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-674.5325F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2984.1282F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(37, (int)wall0.getLeftSideColor());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2984.1282F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(1213.25F, 1214.81F, 0.1F, 1214.81F, 2587.133F, 2587.133F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1214.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1214.81F, wall0.getYEnd(), 0.01F);
      assertEquals(1214.81F, wall0.getYStart(), 0.01F);
      assertEquals(1213.15F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(606.675F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2587.133F, wall0.getThickness(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1213.15F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2587.133F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      int int0 = Float.compare(0.0F, 1.0F);
      assertEquals((-1), int0);
      
      int int1 = Float.compare(0.0F, 0.1F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      wall0.setHeightAtEnd((Float) 0.1F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1214.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1214.81F, wall0.getYEnd(), 0.01F);
      assertEquals(1214.81F, wall0.getYStart(), 0.01F);
      assertEquals(1213.15F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(606.675F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2587.133F, wall0.getThickness(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(1213.15F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2587.133F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
      
      wall0.setYStart(3416.6572F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2513.9338F, wall0.getLength(), 0.01F);
      assertEquals(1214.81F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(606.675F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2587.133F, wall0.getThickness(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(2513.9338F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3416.6572F, wall0.getYStart(), 0.01F);
      assertEquals(2315.7336F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2587.133F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
      
      Float float0 = new Float(2495.227F);
      assertEquals(2495.227F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(2495.227F, float1, 0.01F);
      
      Float float2 = new Float((double) 2495.227F);
      assertEquals(2495.227F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      float float3 = float2.floatValue();
      assertEquals(2495.227F, float3, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(float3, float1, 0.01F);
      
      wall0.setHeight((Float) 2495.227F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2513.9338F, wall0.getLength(), 0.01F);
      assertEquals(1214.81F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(606.675F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2495.227F, wall0.getHeight(), 0.01F);
      assertEquals(2587.133F, wall0.getThickness(), 0.01F);
      assertEquals(1213.25F, wall0.getXStart(), 0.01F);
      assertEquals(2513.9338F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3416.6572F, wall0.getYStart(), 0.01F);
      assertEquals(2315.7336F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(1006.28F, 1006.28F, 1006.28F, 1006.28F, 1006.28F, 1414.3275F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(682.7009F, 682.7009F, 682.7009F, 682.7009F, 682.7009F);
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(682.7009F);
      assertEquals(682.7009F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.7009F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(682.7009F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getXEnd(), 0.01F);
      assertEquals(682.7009F, wall0.getThickness(), 0.01F);
      assertEquals(682.7009F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(682.7009F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.7009F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.7009F, wall0.getXStart(), 0.01F);
      assertEquals(682.7009F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      int int1 = Float.compare(0.0F, (-721.9F));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      wall0.setHeight((Float) 0.0F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.move((-2455.8713F), (-1557.126F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setThickness((-2455.8713F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Level level0 = new Level("?:", 2067.0F, 2067.0F, 2067.0F);
      assertEquals(2067.0F, level0.getElevation(), 0.01F);
      assertEquals(2067.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(2067.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(2067.0F, level0.getElevation(), 0.01F);
      assertEquals(2067.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(2067.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0F, level1.getHeight(), 0.01F);
      assertEquals(2067.0F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertEquals(2067.0F, float0, 0.01F);
      assertEquals(2067.0F, level0.getElevation(), 0.01F);
      assertEquals(2067.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(2067.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0F, level1.getHeight(), 0.01F);
      assertEquals(2067.0F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      float float1 = level1.getHeight();
      assertEquals(2067.0F, float1, 0.01F);
      assertEquals(2067.0F, level0.getElevation(), 0.01F);
      assertEquals(2067.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(2067.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0F, level1.getHeight(), 0.01F);
      assertEquals(2067.0F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2067.0F, level0.getElevation(), 0.01F);
      assertEquals(2067.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(2067.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0F, level1.getHeight(), 0.01F);
      assertEquals(2067.0F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      level1.setName("?:");
      assertEquals(2067.0F, level0.getElevation(), 0.01F);
      assertEquals(2067.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(2067.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0F, level1.getHeight(), 0.01F);
      assertEquals(2067.0F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2067.0F, level0.getElevation(), 0.01F);
      assertEquals(2067.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(2067.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("?:", level1.getName());
      assertEquals(2067.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0F, level1.getHeight(), 0.01F);
      assertEquals(2067.0F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      
      wall0.setRightSideShininess(3416.6572F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(3416.6572F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(3416.6572F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertEquals((-4911.7427F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-4012.9973F), wall1.getYEnd(), 0.01F);
      assertEquals((-4012.9973F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3416.6572F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall1.getXStart(), 0.01F);
      assertEquals((-4012.9973F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 577.2982F, (-1.0F), 577.2982F, 0.0F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(38.36F, 1174.6F, 0.0F);
      assertFalse(boolean0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "veD/Xj'u1p7XsrCF", object0, object0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      propertyChangeEvent0.setPropagationId("veD/Xj'u1p7XsrCF");
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall1 = wall0.clone();
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(integer0);
      
      float float0 = wall0.getThickness();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getThickness();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(float1, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean1 = wall0.containsPoint(0.0F, (-1888.4F), 0.0F);
      assertFalse(boolean1);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      boolean boolean2 = wall1.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      boolean boolean3 = wall0.containsPoint(0.0F, 39.60616F, (-1.0F));
      assertFalse(boolean3);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      wall1.setRightSideShininess(0.0F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(577.2982F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.getWallAtEnd();
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(577.2982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(577.2982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(577.2982F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      
      Level level0 = new Level("?:", 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      float float0 = level0.getElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(1.0F, 0.0F, (-3690.918F), 1.0F, (-3690.918F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3690.918F), wall0.getXEnd(), 0.01F);
      assertEquals(3691.9182F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3690.918F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1844.959F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3691.9182F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      
      Level level0 = new Level("?:", 0.0F, 0.0F, 0.0F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      float float0 = level0.getElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      
      wall0.setLevel(level0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      
      Float float1 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = float1.equals(object1);
      assertFalse(boolean0);
      assertNotSame(object1, object0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(object1.equals((Object)object0));
      
      wall0.setHeight(float1);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(homeTexture0);
      
      Float float2 = wall0.getHeight();
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(2123);
      assertEquals(2123, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(2123, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(2123, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart((-721.9F));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(1733.9713F, wall0.getLength(), 0.01F);
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Wall wall1 = new Wall((-1804.0F), 0.0F, 667.1F, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float0 = ((Float)0.0F).floatValue();
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = ((Float)0.0F).floatValue();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      Float float2 = new Float((double) 667.1F);
      assertEquals(667.1F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = wall1.containsPoint(1209, 2.0F, 2.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-568.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1804.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2471.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(667.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = new Float((-3752.24F));
      assertEquals((-3752.24F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      float float4 = float3.floatValue();
      assertEquals((-3752.24F), float4, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      
      float float5 = float3.floatValue();
      assertEquals((-3752.24F), float5, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertEquals(float5, float4, 0.01F);
      
      float float6 = float3.floatValue();
      assertEquals((-3752.24F), float6, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float5, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertEquals(float6, float5, 0.01F);
      
      float float7 = float3.floatValue();
      assertEquals((-3752.24F), float7, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float5, 0.01F);
      assertEquals((float)float3, (float)float6, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(float7, float4, 0.01F);
      assertEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float0, 0.01F);
      assertNotEquals(float7, float1, 0.01F);
      assertEquals(float7, float5, 0.01F);
      
      float float8 = float3.floatValue();
      assertEquals((-3752.24F), float8, 0.01F);
      assertEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float0, 0.01F);
      assertNotEquals(float8, float1, 0.01F);
      assertEquals(float8, float4, 0.01F);
      assertEquals(float8, float6, 0.01F);
      assertEquals(float8, float7, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float5, 0.01F);
      assertEquals((float)float3, (float)float7, 0.01F);
      assertEquals((float)float3, (float)float6, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      float float9 = float3.floatValue();
      assertEquals((-3752.24F), float9, 0.01F);
      assertEquals(float9, float5, 0.01F);
      assertEquals(float9, float7, 0.01F);
      assertEquals(float9, float4, 0.01F);
      assertEquals(float9, float6, 0.01F);
      assertNotEquals(float9, float0, 0.01F);
      assertEquals(float9, float8, 0.01F);
      assertNotEquals(float9, float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float5, 0.01F);
      assertEquals((float)float3, (float)float7, 0.01F);
      assertEquals((float)float3, (float)float6, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertEquals((float)float3, (float)float8, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      wall0.setArcExtent((Float) (-3752.24F));
      assertEquals(5854335.5F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1158.7072F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1588.8857F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals(1733.9713F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-721.9F), wall0.getXStart(), 0.01F);
      assertEquals((-3752.24F), wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.setLeftSideShininess(0.1F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Integer integer0 = new Integer(1209);
      assertEquals(1209, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer1 = new Integer(1209);
      assertEquals(1209, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      float float0 = new Float(0.1F);
      assertEquals(0.1F, float0, 0.01F);
      
      Float float1 = new Float((double) 1209);
      assertEquals(1209.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.0);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2455.8713F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getThickness(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 1213.25F, 1213.25F, (-1683.5969F), 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertEquals(1715.7805F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(606.63F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1715.7805F, wall1.getLength(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = Float.valueOf(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      Float float1 = new Float((-82.41722653));
      assertEquals((-82.41723F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = float1.equals(object0);
      assertFalse(boolean1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      float float2 = float1.floatValue();
      assertEquals((-82.41723F), float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float3 = new Float(1.0F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      wall1.setXStart(0.0F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall0, wall1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall1.getPoints();
      assertEquals(4, floatArray2.length);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray2);
      
      float float4 = wall0.getStartPointToEndPointDistance();
      assertEquals(1715.7805F, float4, 0.01F);
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      
      Wall wall2 = wall1.clone();
      assertEquals(1715.7805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(606.63F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1213.25F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1683.5969F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(606.63F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1213.25F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1715.7805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1715.7875F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1715.7875F, wall1.getLength(), 0.01F);
      assertEquals(606.63F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(606.625F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1213.25F, wall1.getYEnd(), 0.01F);
      assertEquals(1213.25F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1213.25F, wall2.getXEnd(), 0.01F);
      assertEquals(1715.7875F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1715.7875F, wall2.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(606.63F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(606.625F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1683.5969F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1213.25F, wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall(683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("RIGHT_SIDE_SHININESS", "", resourceURLContent0, 0.0F, 0.0F, "HEIGHT");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("RIGHT_SIDE_SHININESS", catalogTexture0.getId());
      assertEquals("HEIGHT", catalogTexture0.getCreator());
      assertNotNull(catalogTexture0);
      
      String string0 = catalogTexture0.getName();
      assertEquals("", string0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("RIGHT_SIDE_SHININESS", catalogTexture0.getId());
      assertEquals("HEIGHT", catalogTexture0.getCreator());
      assertNotNull(string0);
      
      wall0.setPattern(catalogTexture0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("RIGHT_SIDE_SHININESS", catalogTexture0.getId());
      assertEquals("HEIGHT", catalogTexture0.getCreator());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1);
      
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertEquals(2067.0479F, float0, 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      float float1 = level1.getHeight();
      assertEquals(2067.0479F, float1, 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertFalse(boolean0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Wall wall0 = new Wall(0.1F, (-1334.22F), (-2144.8792F), (-1334.22F), (-1014.0F));
      assertEquals((-1334.22F), wall0.getYStart(), 0.01F);
      assertEquals((-1072.3895F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2144.9792F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1334.22F), wall0.getYEnd(), 0.01F);
      assertEquals((-2144.8792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1334.22F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2144.9792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1014.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1334.22F), wall0.getYStart(), 0.01F);
      assertEquals((-1072.3895F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2144.9792F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1334.22F), wall0.getYEnd(), 0.01F);
      assertEquals((-2144.8792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1334.22F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2144.9792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1014.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      Integer integer0 = Integer.valueOf(947);
      assertEquals(947, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertEquals(947, (int)integer1);
      assertNotNull(integer1);
      
      wall0.setLeftSideShininess((-1.3759189F));
      assertEquals((-1334.22F), wall0.getYStart(), 0.01F);
      assertEquals((-1072.3895F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.3759189F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2144.9792F, wall0.getLength(), 0.01F);
      assertEquals((-1334.22F), wall0.getYEnd(), 0.01F);
      assertEquals((-2144.8792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1334.22F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2144.9792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1014.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      int int0 = Integer.max(2146766953, 2146766953);
      assertEquals(2146766953, int0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(947, (int)wall0.getRightSideColor());
      assertEquals((-1334.22F), wall0.getYStart(), 0.01F);
      assertEquals((-1072.3895F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.3759189F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2144.9792F, wall0.getLength(), 0.01F);
      assertEquals((-1334.22F), wall0.getYEnd(), 0.01F);
      assertEquals((-2144.8792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1334.22F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2144.9792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1014.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals((-1.3759189F), float1, 0.01F);
      assertEquals(947, (int)wall0.getRightSideColor());
      assertEquals((-1334.22F), wall0.getYStart(), 0.01F);
      assertEquals((-1072.3895F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.3759189F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2144.9792F, wall0.getLength(), 0.01F);
      assertEquals((-1334.22F), wall0.getYEnd(), 0.01F);
      assertEquals((-2144.8792F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1334.22F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2144.9792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1014.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      Float float2 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = float2.equals(object0);
      assertFalse(boolean1);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      wall0.setArcExtent(float2);
      assertEquals(947, (int)wall0.getRightSideColor());
      assertEquals(2237.0305F, wall0.getLength(), 0.01F);
      assertEquals((-1334.22F), wall0.getYStart(), 0.01F);
      assertEquals((-1072.3895F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.3759189F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(628.959F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1334.22F), wall0.getYEnd(), 0.01F);
      assertEquals((-2144.8792F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(2144.9792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1014.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.0F, 1.0F, 1.0F, (-1128.08F), (-94.26488F));
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-94.26488F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1128.08F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("<8m}", propertyChangeListener0);
      assertEquals("<8m}", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-94.26488F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1128.08F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals("<8m}", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setYStart(1.0F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-94.26488F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1128.08F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-94.26488F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1128.08F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 0.0F, 2.0F, 2.0F, 2.0F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1885.7545F), 215.407F, (-1.0F), 0.0F, 0.0F);
      assertEquals(1897.1377F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-943.37726F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(107.2035F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1885.7545F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(215.407F, wall0.getXEnd(), 0.01F);
      assertEquals(1897.1377F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart((-2489.071F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1245.0355F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(107.2035F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2497.4646F, wall0.getLength(), 0.01F);
      assertEquals(2497.4646F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2489.071F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(215.407F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(2455);
      assertEquals(2455, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2455, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2455, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall((-1.0949799F), (-1.0949799F), (-1.0949799F), 908.4869F, 908.4869F, (-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0949799F), wall0.getYStart(), 0.01F);
      assertEquals(453.69595F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0949799F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0949799F), wall0.getXEnd(), 0.01F);
      assertEquals(909.58185F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0949799F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(909.58185F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1.0949799F));
      assertEquals((-1.0949799F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(744.8835F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0949799F), wall0.getYStart(), 0.01F);
      assertEquals(453.69595F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0949799F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0949799F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0949799F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(956.6632F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(909.58185F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(80, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(744.8835F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0949799F), wall0.getYStart(), 0.01F);
      assertEquals(453.69595F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0949799F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0949799F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0949799F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(956.6632F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(909.58185F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(1006.28F, 1006.28F, 1006.28F, 1006.28F, 1006.28F, 1414.3275F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Wall wall1 = wall0.clone();
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1006.28F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1006.28F, wall1.getThickness(), 0.01F);
      assertEquals(1006.28F, wall1.getYStart(), 0.01F);
      assertEquals(1006.28F, wall1.getXStart(), 0.01F);
      assertEquals(1006.28F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall1.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(integer0);
      
      float float2 = wall0.getThickness();
      assertEquals(1006.28F, float2, 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float0, 0.01F);
      
      Integer integer1 = new Integer(8192);
      assertEquals(8192, (int)integer1);
      assertNotNull(integer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer1.equals(object0);
      assertFalse(boolean0);
      
      wall1.setRightSideColor(integer1);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1006.28F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall1.getHeight(), 0.01F);
      assertEquals(8192, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1006.28F, wall1.getThickness(), 0.01F);
      assertEquals(1006.28F, wall1.getYStart(), 0.01F);
      assertEquals(1006.28F, wall1.getXStart(), 0.01F);
      assertEquals(1006.28F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall1.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float3 = wall1.getThickness();
      assertEquals(1006.28F, float3, 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1006.28F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1414.3275F, wall1.getHeight(), 0.01F);
      assertEquals(8192, (int)wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1006.28F, wall1.getThickness(), 0.01F);
      assertEquals(1006.28F, wall1.getYStart(), 0.01F);
      assertEquals(1006.28F, wall1.getXStart(), 0.01F);
      assertEquals(1006.28F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1006.28F, wall1.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      
      boolean boolean1 = wall0.containsPoint((-849.997F), (-1.0F), (-4012.0576F));
      assertFalse(boolean1);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = wall0.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float float4 = wall0.getRightSideShininess();
      assertEquals(0.0F, float4, 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      boolean boolean3 = wall0.containsPoint(8192, 1006.28F, 8192);
      assertTrue(boolean3);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      wall0.setRightSideShininess((-1014.0F));
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertEquals((-1014.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(1006.28F, 1006.28F, 1006.28F, 1006.28F, 1006.28F, 1414.3275F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float1.equals(object0);
      assertFalse(boolean0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(1006.28F, float2, 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertNull(wall1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1006.28F, wall0.getThickness(), 0.01F);
      assertEquals(1006.28F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1006.28F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1006.28F, wall0.getXEnd(), 0.01F);
      assertEquals(1414.3275F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1006.28F, wall0.getYStart(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall(682.0392F, 682.0392F, 682.0392F, 682.0392F, 682.0392F, 682.0392F);
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float(682.0392F);
      assertEquals(682.0392F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 740.77893F, 0.0F, 606.28F);
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(370.38947F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(740.77893F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(606.28F, 0.0F);
      assertEquals(1, int0);
      
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(370.38947F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(772.56934F, wall0.getLength(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(677.99335F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(68, floatArray0.length);
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(370.38947F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(772.56934F, wall0.getLength(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(677.99335F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(68, floatArray1.length);
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(370.38947F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(772.56934F, wall0.getLength(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(677.99335F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(370.38947F, float1, 0.01F);
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(370.38947F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(772.56934F, wall0.getLength(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(677.99335F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(370.38947F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(772.56934F, wall0.getLength(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(677.99335F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(wall1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(740.77893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(370.38947F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(772.56934F, wall0.getLength(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(677.99335F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(682.7F, 682.7F, 682.7F, 682.7F, 682.7F, 682.7F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(682.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(682.7F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.7F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.7F, wall0.getXStart(), 0.01F);
      assertEquals(682.7F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7F, wall0.getThickness(), 0.01F);
      assertEquals(682.7F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(682.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(682.7F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.7F, wall0.getYEnd(), 0.01F);
      assertEquals(682.7F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(682.7F, wall0.getXStart(), 0.01F);
      assertEquals(682.7F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.7F, wall0.getThickness(), 0.01F);
      assertEquals(682.7F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.7F, wall1.getThickness(), 0.01F);
      assertEquals(682.7F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(682.7F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(682.7F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(682.7F, wall1.getXEnd(), 0.01F);
      assertEquals(682.7F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(682.7F, wall1.getHeight(), 0.01F);
      assertEquals(682.7F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(1006.28F, 2268.81F, 2268.81F, 2268.81F, 2268.81F, 2268.81F);
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(1262.53F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1637.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1262.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2268.81F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd(2561.55F);
      assertEquals(1555.27F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(1783.915F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertEquals(1555.27F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2561.55F, wall0.getXEnd(), 0.01F);
      
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(1555.27F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(1783.915F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertEquals(1555.27F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2561.55F, wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(1555.27F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(1783.915F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertEquals(1555.27F, wall0.getLength(), 0.01F);
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2561.55F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float0 = ((Float)0.4957111F).floatValue();
      assertEquals(0.4957111F, float0, 0.01F);
      
      Float float1 = new Float(0.4957111F);
      assertEquals(0.4957111F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 915.09686F, 915.09686F, 915.09686F, 915.09686F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(915.09686F);
      assertEquals(915.09686F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall(1006.28F, 2268.81F, 2268.81F, 2268.81F, 2268.81F, 2268.81F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1637.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getXEnd(), 0.01F);
      assertEquals(1262.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1262.53F, wall0.getLength(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1637.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getXEnd(), 0.01F);
      assertEquals(1262.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1262.53F, wall0.getLength(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1637.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2268.81F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2268.81F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2268.81F, wall0.getYEnd(), 0.01F);
      assertEquals(2268.81F, wall0.getXEnd(), 0.01F);
      assertEquals(1262.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2268.81F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.28F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1262.53F, wall0.getLength(), 0.01F);
      assertEquals(2268.81F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall((-2344.0F), (-2344.0F), 740.77893F, 0.0F, 606.28F);
      assertEquals((-801.61053F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1172.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      int int0 = Float.compare(606.28F, 0.0F);
      assertEquals(1, int0);
      
      int int1 = Float.compare((-647.693F), 740.77893F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Float float0 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(134, floatArray0.length);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(134, floatArray1.length);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall0.setLeftSideShininess(1.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      
      float float1 = wall0.getRightSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1417.247F), (-4640.6F), (-4012.0576F));
      assertFalse(boolean0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      
      wall0.setRightSideShininess(4573.002F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(4573.002F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4040.5645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1651.325F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3874.2996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2344.0F), wall0.getXStart(), 0.01F);
      assertEquals(740.77893F, wall0.getXEnd(), 0.01F);
      assertEquals(606.28F, wall0.getThickness(), 0.01F);
      assertEquals((-2344.0F), wall0.getYStart(), 0.01F);
      assertEquals(4573.002F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2946.9421F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      int int0 = Float.floatToIntBits(908.4869F);
      assertEquals(1147346729, int0);
      
      float float0 = ((Float)908.4869F).floatValue();
      assertEquals(908.4869F, float0, 0.01F);
      
      Float float1 = new Float((double) 908.4869F);
      assertEquals(908.4869F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) 1147346729);
      assertEquals(1.14734669E9F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      wall0.setRightSideColor((Integer) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1744.9F);
      assertEquals(1744.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(2.0F, 1.0F, (-1804.0F), 1760.9666F, 0.0F);
      assertEquals((-1804.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2521.7292F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(1760.9666F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-901.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(880.9833F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2521.7292F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(9993);
      assertEquals(9993, (int)integer0);
      assertNotNull(integer0);
      
      float float1 = float0.floatValue();
      assertEquals(1744.9F, float1, 0.01F);
      
      Float float2 = new Float(4.7874357540553715E17);
      assertEquals(4.78743581E17F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(4.251301288604736);
      assertEquals(4.2513013F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      float float4 = wall0.getThickness();
      assertEquals(1744.9F, float4, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float4, float1, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2521.7292F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(1760.9666F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-901.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(880.9833F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2521.7292F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals((-1804.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2521.7292F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(1760.9666F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-901.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(880.9833F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2521.7292F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2521.7292F, wall2.getLength(), 0.01F);
      assertEquals(1760.9666F, wall2.getYEnd(), 0.01F);
      assertEquals((-901.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1804.0F), wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals(2521.7292F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(880.9833F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("YCUPJBJbRjB.D", propertyChangeListener0);
      assertEquals("YCUPJBJbRjB.D", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals("YCUPJBJbRjB.D", propertyChangeListenerProxy0.getPropertyName());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      Wall wall1 = wall0.getWallAtEnd();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeightAtEnd();
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), 0.01F, (-1753.2878F));
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-1232.2F), float1, 0.01F);
      
      float float2 = Float.sum(0.0F, (-3120.47F));
      assertEquals((-3120.47F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(1412.8301F);
      assertTrue(boolean0);
      
      float float3 = float0.floatValue();
      assertEquals((-1232.2F), float3, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      wall0.setHeightAtEnd((Float) (-1232.2F));
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float4 = wall0.getThickness();
      assertEquals((-1753.2878F), float4, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      float float5 = wall0.getYArcCircleCenter();
      assertEquals(454.24844F, float5, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Rt;KABSqo5", propertyChangeListener0);
      assertEquals("Rt;KABSqo5", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals("Rt;KABSqo5", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setXStart(1360.9586F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3244.05F, wall0.getLength(), 0.01F);
      assertEquals(1360.9586F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-196.16461F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3244.05F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3244.05F, wall0.getLength(), 0.01F);
      assertEquals(1360.9586F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-196.16461F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3244.05F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0);
      
      Float float6 = wall0.getHeightAtEnd();
      assertEquals((-1232.2F), (float)float6, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3244.05F, wall0.getLength(), 0.01F);
      assertEquals(1360.9586F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-196.16461F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1232.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3244.05F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      int int1 = Float.compare(0.0F, (-721.9F));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      wall0.setHeight((Float) 0.0F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.move((-2455.8713F), (-1557.126F));
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setThickness((-2455.8713F));
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertEquals(2067.0479F, float0, 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean0 = wall0.intersectsRectangle((-2455.8713F), 1, (-1384.8F), 1.0F);
      assertFalse(boolean0);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float1 = level1.getHeight();
      assertEquals(2067.0479F, float1, 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      
      boolean boolean1 = wall0.isAtLevel(level1);
      assertFalse(boolean1);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      boolean boolean2 = wall0.containsPoint(1213.25F, 173.0F, 0.0F);
      assertFalse(boolean2);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      wall0.setRightSideShininess(3416.6572F);
      assertNull(wall0.getArcExtent());
      assertEquals(3416.6572F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float3 = wall0.getXEnd();
      assertEquals((-4911.7427F), float3, 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3416.6572F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4012.9973F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setThickness((-4083.726F));
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals((-4083.726F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      boolean boolean0 = wall0.containsPoint((-3159.95F), (-3159.95F), 908.4869F);
      assertFalse(boolean0);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals((-4083.726F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals((-4083.726F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(integer0);
      
      Level level0 = wall0.getLevel();
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals((-4083.726F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 1834.5604F, 1834.5604F, 1115.9194F, 1115.9194F);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1115.9194F, 1115.9194F, 1115.9194F, 915.09686F, 1834.5604F, 1834.5604F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1115.9194F, wall1.getXEnd(), 0.01F);
      assertEquals(200.82257F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1115.9194F, wall1.getXStart(), 0.01F);
      assertEquals(1015.5082F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(200.82257F, wall1.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(1.3728963F);
      assertEquals(1.3728963F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1115.9194F, wall1.getXEnd(), 0.01F);
      assertEquals(200.82257F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1115.9194F, wall1.getXStart(), 0.01F);
      assertEquals(1015.5082F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(200.82257F, wall1.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1115.9194F, wall1.getXEnd(), 0.01F);
      assertEquals(200.82257F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1115.9194F, wall1.getXStart(), 0.01F);
      assertEquals(1015.5082F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(200.82257F, wall1.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1115.9194F, wall1.getXEnd(), 0.01F);
      assertEquals(200.82257F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1115.9194F, wall1.getXStart(), 0.01F);
      assertEquals(1015.5082F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(200.82257F, wall1.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1115.9194F, wall1.getXEnd(), 0.01F);
      assertEquals(200.82257F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1115.9194F, wall1.getXStart(), 0.01F);
      assertEquals(1015.5082F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(200.82257F, wall1.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1115.9194F, wall1.getXEnd(), 0.01F);
      assertEquals(200.82257F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1115.9194F, wall1.getXStart(), 0.01F);
      assertEquals(1015.5082F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(200.82257F, wall1.getLength(), 0.01F);
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(1115.9194F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1475.24F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1115.9194F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1166.9868F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1166.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1115.9194F, wall0.getThickness(), 0.01F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), 0.01F, (-1753.2878F));
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(454.24844F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(2812.5388F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1851.82F));
      assertEquals((-1851.82F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1400.8982F);
      assertEquals(1400.8982F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = float2.equals("w");
      assertFalse(boolean0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(1400.8982F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      int int0 = Float.floatToIntBits(1528.8F);
      assertEquals(1153374618, int0);
      
      float float4 = ((Float)1528.8F).floatValue();
      assertEquals(1528.8F, float4, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals((-1232.2F), float5, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      
      float float6 = Float.min((-297.7F), (-1232.2F));
      assertEquals((-1232.2F), float6, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertEquals(float6, float5, 0.01F);
      
      int int1 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare(0.0F, 0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = Float.compare(0.0F, 2.0F);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      wall0.setArcExtent((Float) 2.0F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(homeTexture0);
      
      Integer integer0 = Integer.valueOf(110);
      assertEquals(110, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      boolean boolean1 = wall0.intersectsRectangle((-4079.63F), 200.25827F, (-2917.173F), 908.4869F);
      assertFalse(boolean1);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertTrue(boolean1 == boolean0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      float float7 = wall0.getStartPointToEndPointDistance();
      assertEquals(2812.5388F, float7, 0.01F);
      assertEquals(2812.5388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals((-400.30447F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3342.4075F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals((-130.73734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1744.9F);
      assertEquals(1744.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setArcExtent(float0);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1744.9F, wall1.getXEnd(), 0.01F);
      assertEquals(1744.9F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1744.9F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.9F, wall1.getXStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYStart(), 0.01F);
      assertEquals(1744.9F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.9F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      Integer integer0 = Integer.valueOf((-2747));
      assertEquals((-2747), (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertNotNull(list0);
      
      Wall wall2 = new Wall(0.014925373F, 0.0F, 0.014925373F, 1.0F, (-2747));
      assertEquals(1.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.014925373F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.014925373F, wall2.getXEnd(), 0.01F);
      assertEquals((-2747.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.014925373F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      wall0.setWallAtStart(wall2);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.014925373F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.014925373F, wall2.getXEnd(), 0.01F);
      assertEquals((-2747.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.014925373F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall0.setWallAtStart(wall2);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.014925373F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.014925373F, wall2.getXEnd(), 0.01F);
      assertEquals((-2747.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.014925373F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float1 = Float.valueOf((-2356.31F));
      assertEquals((-2356.31F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(1744.9F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1744.9F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1744.9F, wall0.getXStart(), 0.01F);
      assertEquals(1744.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1744.9F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2356.31F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1744.9F, wall0.getThickness(), 0.01F);
      assertEquals(1744.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1744.9F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, (-1.0F), 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertEquals(2067.0479F, float0, 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      float float1 = level1.getHeight();
      assertEquals(2067.0479F, float1, 0.01F);
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      
      wall0.setLevel(level1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals("?:", level1.getName());
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setXStart((-1534.53F));
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(homeTexture0);
      
      Float float2 = wall0.getHeightAtEnd();
      assertEquals((-1534.53F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1534.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-767.265F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1534.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(float2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(544);
      assertEquals(544, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Float.floatToIntBits((-1.0F));
      assertEquals((-1082130432), int0);
      
      float float0 = ((Float)(-1.0F)).floatValue();
      assertEquals((-1.0F), float0, 0.01F);
      
      Float float1 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(textureImage0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      float float2 = wall1.getLength();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(908.4869F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall1.getYStart(), 0.01F);
      assertEquals(908.4869F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(908.4869F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(908.4869F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(908.4869F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      wall0.setLeftSideColor(integer1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall((-82.64642F), 2601.8323F, 2601.8323F, 2601.8323F, 1.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.BackgroundImage", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.containsWallStartAt(2.0F, (-82.64642F), 0.0F);
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setRightSideShininess((-841.1627F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean1 = wall0.intersectsRectangle(2.0F, 0.1F, (-4772.413F), 0.0F);
      assertFalse(boolean1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean1 == boolean0);
      
      int int0 = Float.compare(1.0F, 0.0F);
      assertEquals(1, int0);
      
      wall0.setThickness((-4772.413F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals((-4772.413F), wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Integer integer0 = Integer.getInteger("com.eteks.sweethome3d.model.BackgroundImage", 0);
      assertEquals(0, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1685));
      assertEquals((-1685), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = integer1.equals(object0);
      assertFalse(boolean2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean3 = integer1.equals(object1);
      assertFalse(boolean3);
      assertNotSame(object1, object0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      wall0.setLeftSideColor(integer1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.5929F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-841.1627F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-82.64642F), wall0.getXStart(), 0.01F);
      assertEquals(2601.8323F, wall0.getYEnd(), 0.01F);
      assertEquals(2601.8323F, wall0.getXEnd(), 0.01F);
      assertEquals(2601.8323F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2684.4788F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2684.4788F, wall0.getLength(), 0.01F);
      assertEquals((-1685), (int)wall0.getLeftSideColor());
      assertEquals((-4772.413F), wall0.getThickness(), 0.01F);
      assertEquals(2601.8323F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 915.09686F, 915.09686F, 915.09686F, 915.09686F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(915.09686F);
      assertEquals(915.09686F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(4, floatArray1.length);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      int int0 = Float.compare((-721.9F), (-721.9F));
      assertEquals(0, int0);
      
      boolean boolean0 = wall0.intersectsRectangle((-2455.8713F), 0, 0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      int int1 = Float.compare(0.0F, (-721.9F));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      wall0.setHeight((Float) 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2455.8713F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8713F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8713F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.move((-2455.8713F), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8613F), wall0.getYStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8613F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8613F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 0.01F, (-721.12F));
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8613F), wall0.getYStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8613F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8613F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      wall0.setRightSideShininess(1030.2057F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1030.2057F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8613F), wall0.getYStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8613F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8613F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1030.2057F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2455.8613F), wall0.getYStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8613F), wall0.getYEnd(), 0.01F);
      assertEquals((-2455.8613F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall(266.52393F, 266.52393F, 266.52393F, 266.52393F, 266.52393F, 1.0F);
      assertEquals(266.52393F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(266.52393F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(266.52393F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(266.52393F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(266.52393F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(266.52393F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(266.52393F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(1.0F, (float)float0, 0.01F);
      assertEquals(266.52393F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(266.52393F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(266.52393F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(266.52393F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(266.52393F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(266.52393F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(266.52393F, wall0.getXEnd(), 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall(683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(683.9756F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(683.9756F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(683.9756F, wall0.getHeight(), 0.01F);
      assertEquals(683.9756F, wall0.getXEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getYEnd(), 0.01F);
      assertEquals(683.9756F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(683.9756F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(683.9756F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall(682.0392F, 682.0392F, 682.0392F, 682.0392F, 682.0392F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(682.0392F);
      assertEquals(682.0392F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.0392F, wall0.getArcExtent(), 0.01F);
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.0392F, wall0.getArcExtent(), 0.01F);
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), (-1.3759189F), (-1753.2878F));
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals(453.55548F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(2812.9868F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Float float0 = new Float((-1232.2F));
      assertEquals((-1232.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1851.82F));
      assertEquals((-1851.82F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("fP]**`7", propertyChangeListener0);
      assertEquals("fP]**`7", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "veD/Xj'u1p7XsrCF", object0, object0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string0);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertEquals("veD/Xj'u1p7XsrCF", string1);
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("fP]**`7", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("veD/Xj'u1p7XsrCF", propertyChangeEvent0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals(453.55548F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(2812.9868F, wall0.getLength(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals("fP]**`7", propertyChangeListenerProxy0.getPropertyName());
      
      Float float2 = new Float(1400.8982F);
      assertEquals(1400.8982F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      boolean boolean1 = float2.equals("w");
      assertFalse(boolean1);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      float float3 = float2.floatValue();
      assertEquals(1400.8982F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      int int0 = Float.floatToIntBits(1528.8F);
      assertEquals(1153374618, int0);
      
      float float4 = ((Float)1528.8F).floatValue();
      assertEquals(1528.8F, float4, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals((-1232.2F), float5, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      
      float float6 = Float.min((-297.7F), (-1232.2F));
      assertEquals((-1232.2F), float6, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertEquals(float6, float5, 0.01F);
      
      int int1 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.compare(0.0F, 0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = Float.compare(0.0F, 2.0F);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      wall0.setArcExtent((Float) 2.0F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-400.9975F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-130.29237F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(3342.94F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-400.9975F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-130.29237F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(3342.94F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(homeTexture0);
      
      float float7 = wall0.getYArcCircleCenter();
      assertEquals((-400.9975F), float7, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-400.9975F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-130.29237F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(3342.94F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      
      float float8 = wall0.getXArcCircleCenter();
      assertEquals((-130.29237F), float8, 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-400.9975F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-130.29237F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(3342.94F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-400.9975F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-130.29237F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(3342.94F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(integer0);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertFalse(boolean2);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertEquals(2812.9868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-400.9975F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.3759189F), wall0.getYEnd(), 0.01F);
      assertEquals((-130.29237F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(3342.94F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(908.4869F, wall0.getYEnd(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(908.4869F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(908.4869F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(682.0392F, 682.0392F, 682.0392F, 682.0392F, 682.0392F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(682.0392F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(682.0392F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(682.0392F, wall0.getYEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXEnd(), 0.01F);
      assertEquals(682.0392F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(682.0392F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(682.0392F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(682.0392F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 1834.5604F, 1834.5604F, (-6523.6F), 760.3789F);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(760.3789F, 760.3789F, 760.3789F, 915.09686F, 1834.5604F, 1834.5604F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(1834.5604F);
      assertEquals(1834.5604F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(1834.5604F, float1, 0.01F);
      
      Float float2 = wall1.getHeight();
      assertEquals(1834.5604F, (float)float2, 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall1);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertEquals(837.7379F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getLength(), 0.01F);
      assertEquals(760.3789F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(760.3789F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(154.71796F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1834.5604F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(760.3789F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(760.3789F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1834.5604F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(1834.5604F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-6523.6F), wall0.getYEnd(), 0.01F);
      assertEquals(8408.583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1834.5604F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2344.5198F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1374.8286F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(760.3789F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8408.583F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall((-3212.5193F), 2177.1301F, (-3212.5193F), (-1.0F), (-727.38116F), (-3212.5193F));
      assertEquals((-3212.5193F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3212.5193F), wall0.getXStart(), 0.01F);
      assertEquals(2178.1301F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1088.0651F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2177.1301F, wall0.getYStart(), 0.01F);
      assertEquals((-3212.5193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2178.1301F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-727.38116F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess((-1.0F));
      assertEquals((-3212.5193F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3212.5193F), wall0.getXStart(), 0.01F);
      assertEquals(2178.1301F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1088.0651F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2177.1301F, wall0.getYStart(), 0.01F);
      assertEquals((-3212.5193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2178.1301F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-727.38116F), wall0.getThickness(), 0.01F);
      
      wall0.setLeftSideShininess(16.0F);
      assertEquals((-3212.5193F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3212.5193F), wall0.getXStart(), 0.01F);
      assertEquals(2178.1301F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1088.0651F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2177.1301F, wall0.getYStart(), 0.01F);
      assertEquals((-3212.5193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2178.1301F, wall0.getLength(), 0.01F);
      assertEquals(16.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-727.38116F), wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(2177.1301F, 2177.1301F, (-2336.0F), 16.0F);
      assertFalse(boolean0);
      assertEquals((-3212.5193F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3212.5193F), wall0.getXStart(), 0.01F);
      assertEquals(2178.1301F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1088.0651F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2177.1301F, wall0.getYStart(), 0.01F);
      assertEquals((-3212.5193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2178.1301F, wall0.getLength(), 0.01F);
      assertEquals(16.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-727.38116F), wall0.getThickness(), 0.01F);
      
      wall0.setXStart((-727.38116F));
      assertEquals((-3212.5193F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3304.567F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1969.9502F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-727.38116F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3304.567F, wall0.getLength(), 0.01F);
      assertEquals(1088.0651F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2177.1301F, wall0.getYStart(), 0.01F);
      assertEquals(16.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-727.38116F), wall0.getThickness(), 0.01F);
      
      float float0 = wall0.getYStart();
      assertEquals(2177.1301F, float0, 0.01F);
      assertEquals((-3212.5193F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3304.567F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1969.9502F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-727.38116F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3304.567F, wall0.getLength(), 0.01F);
      assertEquals(1088.0651F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2177.1301F, wall0.getYStart(), 0.01F);
      assertEquals(16.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-727.38116F), wall0.getThickness(), 0.01F);
      
      float float1 = wall0.getXStart();
      assertEquals((-727.38116F), float1, 0.01F);
      assertEquals((-3212.5193F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3304.567F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1969.9502F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-727.38116F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3304.567F, wall0.getLength(), 0.01F);
      assertEquals(1088.0651F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2177.1301F, wall0.getYStart(), 0.01F);
      assertEquals(16.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-727.38116F), wall0.getThickness(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      Random.setNextRandom(81);
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertEquals("?:", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float2 = level1.getElevation();
      assertEquals(2067.0479F, float2, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertEquals("?:", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      float float3 = level1.getHeight();
      assertEquals(2067.0479F, float3, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertEquals("?:", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      
      wall0.setLevel(level1);
      assertEquals((-3212.5193F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3304.567F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1969.9502F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3212.5193F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-727.38116F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3304.567F, wall0.getLength(), 0.01F);
      assertEquals(1088.0651F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2177.1301F, wall0.getYStart(), 0.01F);
      assertEquals(16.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-727.38116F), wall0.getThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2067.0479F, level0.getHeight(), 0.01F);
      assertEquals(2067.0479F, level0.getElevation(), 0.01F);
      assertEquals("?:", level0.getName());
      assertEquals(2067.0479F, level0.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getFloorThickness(), 0.01F);
      assertEquals(2067.0479F, level1.getElevation(), 0.01F);
      assertEquals("?:", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(2067.0479F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), (-1753.2878F), (-1753.2878F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals((-1753.2878F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals((-422.40048F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move((-1232.2F), 0.015151516F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      
      Integer integer0 = Integer.valueOf((-2437));
      assertEquals((-2437), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(16);
      assertEquals(16, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((-2437));
      assertEquals((-2437), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(691);
      assertEquals(691, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf((-2764));
      assertEquals((-2764), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      wall0.setLeftSideColor(integer4);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals((-2764), (int)wall0.getLeftSideColor());
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals((-2764), (int)wall0.getLeftSideColor());
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Level level0 = new Level(">O>k{4w}", 908.4869F, (-1753.2878F), 0.0F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertEquals(908.4869F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1753.2878F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(">O>k{4w}", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level0.getElevation();
      assertEquals(908.4869F, float0, 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      float float1 = level1.getHeight();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertEquals(908.4869F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1753.2878F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(">O>k{4w}", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float1, float0, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(">O>k{4w}", propertyChangeListener0);
      assertEquals(">O>k{4w}", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertEquals(">O>k{4w}", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      boolean boolean0 = wall0.containsPoint((-2455.8713F), (-2455.8713F), 908.4869F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals((-2764), (int)wall0.getLeftSideColor());
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall0.isAtLevel((Level) null);
      assertTrue(boolean1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals((-2764), (int)wall0.getLeftSideColor());
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals((-2764), (int)wall0.getLeftSideColor());
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      boolean boolean2 = wall0.containsPoint(0.0F, 1314.6943F, 493.52625F);
      assertTrue(boolean2);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals((-2764), (int)wall0.getLeftSideColor());
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      wall0.setRightSideShininess(0.1F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertEquals((-2764), (int)wall0.getLeftSideColor());
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setYEnd((-4911.7427F));
      assertEquals(6400.023F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2001.6204F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6400.023F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2764), (int)wall0.getLeftSideColor());
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float3 = wall0.getArcExtent();
      assertEquals(6400.023F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2001.6204F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6400.023F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2764), (int)wall0.getLeftSideColor());
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-4911.7427F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float3);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall(915.09686F, 915.09686F, 915.09686F, 915.09686F, 915.09686F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(915.09686F);
      assertEquals(915.09686F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(4, floatArray1.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      wall1.setArcExtent(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray2 = wall1.getPoints();
      assertEquals(4, floatArray2.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(915.09686F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(915.09686F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(915.09686F, wall0.getThickness(), 0.01F);
      assertEquals(915.09686F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(915.09686F, wall0.getYEnd(), 0.01F);
      assertEquals(915.09686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(915.09686F, wall0.getXEnd(), 0.01F);
      assertEquals(915.09686F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getXStart(), 0.01F);
      assertEquals(915.09686F, wall1.getThickness(), 0.01F);
      assertEquals(915.09686F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(915.09686F, wall1.getYStart(), 0.01F);
      assertEquals(915.09686F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(915.09686F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(915.09686F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, (-1753.2878F), (-1753.2878F), (-1753.2878F));
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-422.40048F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1753.2878F), wall0.getXEnd(), 0.01F);
      assertEquals((-1753.2878F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(908.4869F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(908.4869F, wall0.getYStart(), 0.01F);
      assertEquals((-422.40048F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move((-1232.2F), 0.015151516F);
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1753.2878F), wall0.getThickness(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Level level0 = new Level(">O>k{4w}", 908.4869F, (-1753.2878F), 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(908.4869F, level1.getElevation(), 0.01F);
      assertEquals((-1753.2878F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(">O>k{4w}", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level0.getElevation();
      assertEquals(908.4869F, float0, 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      float float1 = level1.getHeight();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(908.4869F, level1.getElevation(), 0.01F);
      assertEquals((-1753.2878F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(">O>k{4w}", level1.getName());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float1, float0, 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertFalse(boolean0);
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(908.4869F, level0.getElevation(), 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(">O>k{4w}", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      level0.setElevation(0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(">O>k{4w}", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      boolean boolean1 = wall0.containsPoint(3647.0F, 0.0F, 0.0F);
      assertFalse(boolean1);
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(boolean1 == boolean0);
      
      wall0.setRightSideShininess((-1753.2878F));
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1753.2878F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float3 = wall0.getHeight();
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1753.2878F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float3);
      
      boolean boolean2 = wall0.isAtLevel(level0);
      assertFalse(boolean2);
      assertEquals(3764.3179F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1753.2727F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1654.6005F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3764.3179F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(908.502F, wall0.getYStart(), 0.01F);
      assertEquals((-1753.2878F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-323.71307F), wall0.getXStart(), 0.01F);
      assertEquals((-2985.4878F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-422.38535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1753.2878F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(">O>k{4w}", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1969.21F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1969.21F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1969.21F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      Wall wall1 = wall0.clone();
      Float.floatToIntBits(0.4957111F);
      ((Float)0.4957111F).floatValue();
      Float float0 = new Float((double) 0.0F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall1.getPattern();
      wall1.getPoints();
      Wall.Property.values();
      float float1 = wall0.getLength();
      assertEquals(0.0F, float1, 0.01F);
      
      Float.floatToIntBits(0.0F);
      wall0.setHeightAtEnd((Float) 0.0F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(908.4869F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall(683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F, 683.9756F);
      Float float0 = new Float(0.0);
      Wall wall1 = new Wall(299.86F, 0.0F, (-2885.6155F), 435.42786F, 0.0F, 299.86F);
      float0.equals(wall1);
      ((Float)435.42786F).floatValue();
      Float float1 = new Float(1034.9203F);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtStart(wall0);
      wall1.getPoints();
      assertEquals(299.86F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3215.0974F, wall1.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      wall0.setWallAtEnd(wall0);
      Float.compare((-721.9F), (-721.9F));
      wall0.getPoints();
      Integer integer0 = new Integer(1256);
      Float float0 = new Float(0.0F);
      Wall wall1 = new Wall((-1804.0F), 0.0F, 667.1F, 0.0F, 0.0F);
      float0.equals(wall1);
      ((Float)0.0F).floatValue();
      Float.floatToIntBits(750.85F);
      ((Float)750.85F).floatValue();
      Float float1 = new Float((double) 667.1F);
      float1.floatValue();
      Float float2 = new Float(0.0);
      float2.floatValue();
      float0.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      float float3 = wall1.getThickness();
      assertEquals(0.0F, float3, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      assertEquals(2471.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.getArcExtent();
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall wall0 = new Wall(1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F, 1744.9F);
      Float float0 = new Float((double) 1744.9F);
      Object object0 = new Object();
      wall0.setArcExtent(float0);
      Wall wall1 = wall0.clone();
      wall1.getLeftSideTexture();
      Integer.valueOf(8);
      Integer.valueOf(107);
      Integer.valueOf(0);
      Float float1 = new Float(1453.0);
      wall1.setHeightAtEnd(float1);
      Integer integer0 = Integer.valueOf(0);
      wall1.setRightSideColor(integer0);
      wall1.getPoints();
      Integer integer1 = Integer.valueOf((-2747));
      wall1.setLeftSideColor(integer1);
      wall1.setXEnd(2060.719F);
      wall0.setYStart((-2747));
      wall0.setXStart((-2747));
      wall1.setArcExtent(float0);
      assertEquals((-2747.0F), wall0.getYStart(), 0.01F);
      assertEquals(348257.44F, wall1.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      Level level0 = new Level("HEIGHT", 908.4869F, 908.4869F, 908.4869F);
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      Wall wall1 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2455.8713F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall(1213.25F, 1213.25F, 0.1F, 4972.0F, 0.0F, 14.382381F);
      wall0.setXStart(1213.25F);
      wall0.setXStart(14.382381F);
      wall0.setYEnd((-1168.9F));
      assertEquals(14.382381F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Wall wall0 = new Wall(1921.9738F, 1921.9738F, 1921.9738F, 1921.9738F, 1921.9738F, 1921.9738F);
      wall0.getArcExtent();
      float float0 = wall0.getLength();
      assertEquals(1921.9738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1921.9738F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall((-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F), (-2455.8713F));
      Float.compare((-721.9F), (-721.9F));
      Float.compare(0.0F, (-721.9F));
      wall0.setHeight((Float) 0.0F);
      wall0.move((-2455.8713F), (-1557.126F));
      wall0.setThickness((-2455.8713F));
      Level level0 = new Level("?:", 2067.0479F, 2067.0479F, 2067.0479F);
      Level level1 = level0.clone();
      level1.getElevation();
      level1.getHeight();
      wall0.isAtLevel(level1);
      wall0.getRightSideShininess();
      wall0.containsPoint(1213.25F, 173.0F, 0.0F);
      wall0.setRightSideShininess(3416.6572F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Wall wall0 = new Wall(3571.53F, 682.0392F, (-2320.67F), (-1059.4198F), 0.1F, 1700.73F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float(457.54843F);
      wall1.clone();
      wall1.setWallAtEnd(wall0);
      wall1.setYStart((-457.93F));
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      assertEquals((-457.93F), wall1.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      wall0.containsWallStartAt(0.0F, (-1.0F), 0.0F);
      wall0.getPoints();
      Level level0 = new Level("?:", 0.0F, 0.0F, 0.0F);
      level0.getElevation();
      wall0.setLevel(level0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("wpLR", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 0.0F, 863.9212F);
      assertTrue(boolean0);
      
      wall0.getLevel();
      Level level1 = wall0.getLevel();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(level1);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Wall wall0 = new Wall(908.4869F, 908.4869F, 908.4869F, 908.4869F, 908.4869F);
      wall0.setWallAtStart((Wall) null);
      wall0.getPoints();
      assertEquals(908.4869F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F));
      wall0.containsWallStartAt(0.0F, (-1.0F), 0.0F);
      Float float0 = new Float(0.0F);
      float0.floatValue();
      Float float1 = new Float(0.0F);
      float1.floatValue();
      float1.floatValue();
      float1.floatValue();
      float1.floatValue();
      float0.floatValue();
      float1.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      wall0.getPoints();
      wall0.getPoints();
      wall0.setLeftSideShininess(1.0F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getRightSideShininess();
      wall0.containsPoint(0.0F, 0.01F, 1.0F);
      wall0.setRightSideShininess(0.01F);
      Float.floatToIntBits(0.0F);
      wall0.setHeightAtEnd((Float) 0.0F);
      wall0.clone();
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Wall wall0 = new Wall(1213.25F, 0.0F, 1213.25F, 1.0F, (-1683.5969F), (-1683.5969F));
      Float float0 = new Float(1213.25F);
      Float.floatToIntBits((-1683.5969F));
      Float float1 = new Float(488.78622F);
      wall0.setArcExtent(float0);
      Integer integer0 = new Integer((-992840934));
      Integer.valueOf((-409));
      wall0.containsPoint(1.0F, (-912.4F), 488.78622F);
      wall0.setLeftSideColor(integer0);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideTexture();
      assertEquals(1211.6199F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Wall wall0 = new Wall(682.7009F, 682.7009F, 682.7009F, 682.7009F, 682.7009F, 682.7009F);
      Float float0 = new Float(682.7009F);
      wall0.setArcExtent(float0);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      Wall wall1 = new Wall(274.7F, 0.0F, 1.0F, 0.0F, 0.0F);
      wall1.getLeftSideTexture();
      wall1.setPattern((TextureImage) null);
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }
}
