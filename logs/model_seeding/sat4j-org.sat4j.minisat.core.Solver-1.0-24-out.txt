* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 4079
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550569946155
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.12914485165794065
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.061391541609822645
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.124
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.045112781954887216
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2125984251968504
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.15748031496062992
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.05184174624829468
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 267
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.19109947643979058
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.09140518417462483
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.136
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07142857142857142
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.29133858267716534
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2283464566929134
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.06684856753069578
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 350
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.262652705061082
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.14597544338335608
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18533333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.08270676691729323
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.10231923601637108
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 423
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2801047120418848
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17053206002728513
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.19466666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.10526315789473684
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11596180081855388
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 504
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.33507853403141363
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.22237380627557982
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2613333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.12030075187969924
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4566929133858268
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3779527559055118
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.14870395634379263
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 583
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.34642233856893545
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2305593451568895
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.26266666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4881889763779528
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4094488188976378
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 663
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3568935427574171
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24283765347885403
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.27466666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13533834586466165
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5196850393700787
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.16371077762619374
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 736
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36387434554973824
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24829467939972716
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.288
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.14285714285714285
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5511811023622047
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4566929133858268
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17326057298772168
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 784
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36649214659685864
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.25102319236016374
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.288
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.20676691729323307
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5748031496062992
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17735334242837653
* Search finished after 126s and 8 generations, 13893 statements, best individual has fitness: 2743.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36649214659685864
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.25102319236016374
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.288
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.20676691729323307
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5748031496062992
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17735334242837653
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 10:55:55.062 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 38%
* Total number of goals: 1146
* Number of covered goals: 439
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 25%
* Total number of goals: 733
* Number of covered goals: 184
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 31
* Number of covered goals: 31
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 30%
* Total number of goals: 750
* Number of covered goals: 226
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 21%
* Total number of goals: 266
* Number of covered goals: 55
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 60%
* Total number of goals: 127
* Number of covered goals: 76
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 48%
* Total number of goals: 127
* Number of covered goals: 61
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 18%
* Total number of goals: 733
* Number of covered goals: 130
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36649214659685864
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.25102319236016374
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.288
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.20676691729323307
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5748031496062992
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17735334242837653
* Generated 114 tests with total length 2634
* Resulting test suite's coverage: 42% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:56:47.032 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6676333333333333% of time used, but only 12/114 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 2%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36649214659685864
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.25102319236016374
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.288
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.20676691729323307
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5748031496062992
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17735334242837653
* Compiling and checking tests
[MASTER] 10:57:28.706 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 10:57:28.720 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 10:57:35.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:35.137 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte)3;
byteArray0[1] = (byte)3;
byteArray0[2] = (byte)3;
byteArray0[3] = (byte) (-55);
byteArray0[4] = (byte)3;
byteArray0[5] = (byte)3;
byteArray0[6] = (byte)3;
byteArray0[7] = (byte)3;
byteArray0[8] = (byte)3;
FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
glucose21Restarts0.onRestart();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log((String) null);
PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-2731));
CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, randomWalkDecorator0, glucose21Restarts0);
SearchParams searchParams0 = solver0.getSearchParams();
searchParams0.getConflictBoundIncFactor();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax1, searchParams0, randomWalkDecorator0, glucose21Restarts0, mUSLauncher0);
solver1.isSatisfiable(false);
assertEquals(1, solver1.nVars());


[MASTER] 10:57:36.160 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:36.161 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
int[] intArray0 = new int[1];
intArray0[0] = (-707);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte) (-55);
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
glucose21Restarts0.onRestart();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log((String) null);
PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-2731));
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, varOrderHeap0, glucose21Restarts0);
SearchParams searchParams0 = solver0.getSearchParams();
searchParams0.getConflictBoundIncFactor();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, glucose21Restarts0, mUSLauncher0);
solver1.isSatisfiable(true);
assertEquals(1, solver1.nVars());


[MASTER] 10:57:41.435 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:41.435 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

RestartStrategy restartStrategy0 = null;
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

int int0 = solver0.getPropagationLevel();
assertEquals(0, int0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

mixedDataStructureDanielHT0.getWatchesFor(0);

[MASTER] 10:57:42.611 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 10:57:42.617 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(7);
assertNotNull(percentLengthLearning0);
assertEquals(7, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(7, percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());

solver0.expireTimeout();
assertEquals(7, percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, (-1219));
assertNotNull(searchParams0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double0, 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-1219), int0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

int int1 = searchParams0.getInitConflictBound();
assertEquals((-1219), int1);
assertTrue(int1 == int0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

int int2 = searchParams0.getInitConflictBound();
assertEquals((-1219), int2);
assertTrue(int2 == int1);
assertTrue(int2 == int0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double1, 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

int int3 = searchParams0.getInitConflictBound();
assertEquals((-1219), int3);
assertTrue(int3 == int2);
assertTrue(int3 == int1);
assertTrue(int3 == int0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

double double2 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double2, 0.01);
assertEquals(double2, double0, 0.01);
assertEquals(double2, double1, 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

int int4 = searchParams0.getInitConflictBound();
assertEquals((-1219), int4);
assertTrue(int4 == int0);
assertTrue(int4 == int3);
assertTrue(int4 == int1);
assertTrue(int4 == int2);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

double double3 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double3, 0.01);
assertEquals(double3, double0, 0.01);
assertEquals(double3, double2, 0.01);
assertEquals(double3, double1, 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

int int5 = searchParams0.getInitConflictBound();
assertEquals((-1219), int5);
assertTrue(int5 == int3);
assertTrue(int5 == int1);
assertTrue(int5 == int4);
assertTrue(int5 == int2);
assertTrue(int5 == int0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

int int6 = searchParams0.getInitConflictBound();
assertEquals((-1219), int6);
assertTrue(int6 == int1);
assertTrue(int6 == int4);
assertTrue(int6 == int0);
assertTrue(int6 == int3);
assertTrue(int6 == int5);
assertTrue(int6 == int2);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, (-1502));
assertNotNull(tabuListDecorator0);

tabuListDecorator0.undo((-1502));
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver1);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);

UnitClause unitClause0 = new UnitClause(0);
assertNotNull(unitClause0);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.size());

unitClause0.incActivity(0);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.size());

solver1.analyzeAtRootLevel(unitClause0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.size());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);


[MASTER] 10:57:43.282 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 10:57:43.295 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(7);
assertNotNull(percentLengthLearning0);
assertEquals(7, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

int[] intArray0 = new int[1];
intArray0[0] = (-707);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

SearchParams searchParams0 = new SearchParams((-1249.51676208), (-1249.51676208), 0.0, 11);
assertNotNull(searchParams0);
assertEquals((-1249.51676208), searchParams0.getClaDecay(), 0.01);
assertEquals((-1249.51676208), searchParams0.getVarDecay(), 0.01);
assertEquals(11, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getReducedliterals());

eMARestarts0.init(searchParams0, solverStats0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals((-1249.51676208), searchParams0.getClaDecay(), 0.01);
assertEquals((-1249.51676208), searchParams0.getVarDecay(), 0.01);
assertEquals(11, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getReducedliterals());

eMARestarts0.onRestart();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, subsetVarOrder0, eMARestarts0);
assertEquals(1, intArray0.length);
assertNotNull(solver0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(7, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

StringWriter stringWriter0 = new StringWriter(1283);
assertNotNull(stringWriter0);
assertEquals("", stringWriter0.toString());

PrintWriter printWriter0 = new PrintWriter(stringWriter0);
assertNotNull(printWriter0);
assertEquals("", stringWriter0.toString());

solver0.setLearner(percentLengthLearning0);
assertEquals(1, intArray0.length);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(7, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
assertFalse(boolean0);

solver0.printInfos(printWriter0, "");
assertEquals(1, intArray0.length);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(7, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("constraints type \n0 constraints processed.\n", stringWriter0.toString());

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

varOrderHeap0.init();

[MASTER] 10:57:44.112 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:44.118 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
assertFalse(boolean0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertNotNull(clauseOnlyLearning1);
assertFalse(clauseOnlyLearning1.equals((Object)clauseOnlyLearning0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure1);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertNotNull(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning1, cardinalityDataStructure1, randomWalkDecorator0, (RestartStrategy) null);
assertNotNull(solver0);
assertFalse(clauseOnlyLearning1.equals((Object)clauseOnlyLearning0));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertFalse(clauseOnlyLearning1.equals((Object)clauseOnlyLearning0));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotSame(clauseOnlyLearning1, clauseOnlyLearning0);
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertFalse(clauseOnlyLearning1.equals((Object)clauseOnlyLearning0));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotSame(clauseOnlyLearning1, clauseOnlyLearning0);
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, (RestartStrategy) null);
assertNotNull(solver1);
assertFalse(clauseOnlyLearning0.equals((Object)clauseOnlyLearning1));
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
assertFalse(clauseOnlyLearning1.equals((Object)clauseOnlyLearning0));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertFalse(solver1.equals((Object)solver0));
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(8, solver0.newVar());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());

int int0 = solver1.getTimeout();
assertEquals(2147483, int0);
assertFalse(clauseOnlyLearning0.equals((Object)clauseOnlyLearning1));
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
assertFalse(clauseOnlyLearning1.equals((Object)clauseOnlyLearning0));
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertFalse(solver0.equals((Object)solver1));
assertFalse(solver1.equals((Object)solver0));
assertNotSame(clauseOnlyLearning0, clauseOnlyLearning1);
assertNotSame(cardinalityDataStructure0, cardinalityDataStructure1);
assertNotSame(clauseOnlyLearning1, clauseOnlyLearning0);
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertNotSame(solver0, solver1);
assertNotSame(solver1, solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.nVars());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());


[MASTER] 10:57:44.775 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:44.784 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertNotNull(clauseOnlyLearning1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertNotNull(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning1, cardinalityDataStructure0, randomWalkDecorator0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts(10);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());

solver1.setLearningStrategy(clauseOnlyLearning0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(8, solver0.newVar());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, (RestartStrategy) null);
assertNotNull(solver2);
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

solver2.reset();
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());


[MASTER] 10:57:45.470 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:45.476 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams((-1));
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals((-1), int0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

int int1 = searchParams0.getInitConflictBound();
assertEquals((-1), int1);
assertTrue(int1 == int0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

int[] intArray0 = new int[1];
intArray0[0] = (-707);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

noRestarts0.onBackjumpToRootLevel();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, noRestarts0);
assertEquals(1, intArray0.length);
assertNotNull(solver0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

subsetVarOrder0.varDecayActivity();
assertEquals(1, intArray0.length);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

solver0.setTimeout(382);
assertEquals(1, intArray0.length);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(382, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());


[MASTER] 10:57:46.122 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:46.124 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

int[] intArray0 = new int[1];
intArray0[0] = (-695);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-695)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

LubyRestarts lubyRestarts0 = new LubyRestarts(10);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(10, lubyRestarts0.getFactor());

SearchParams searchParams1 = new SearchParams(1.0, 10);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(10, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, lubyRestarts0.getFactor());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, intArray0.length);
assertNotNull(solver0);
assertArrayEquals(new int[] {(-695)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());

LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver0.fixedSize(32);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, intArray0.length);
assertNotNull(learnedConstraintsDeletionStrategy0);
assertArrayEquals(new int[] {(-695)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());

solver0.backtrack(intArray0);

[MASTER] 10:57:46.789 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:46.790 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-707);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, subsetVarOrder0, (RestartStrategy) null);
assertEquals(1, intArray0.length);
assertNotNull(solver0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());

solver0.truthValue((-707));

[MASTER] 10:57:47.607 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:47.608 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, pureOrder0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());

solver0.expireTimeout();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());


[MASTER] 10:57:48.364 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:48.368 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
assertNotNull(activeLearning0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-707);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, (RestartStrategy) null);
assertEquals(1, intArray0.length);
assertNotNull(solver0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());

int int0 = solver0.decisionLevel();
assertEquals(0, int0);
assertEquals(1, intArray0.length);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());

MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, subsetVarOrder0, (RestartStrategy) null);
assertEquals(1, intArray0.length);
assertNotNull(solver1);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());

solver1.decayActivities();
assertEquals(1, intArray0.length);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-1195));
assertNotNull(percentLengthLearning0);
assertEquals((-1195), percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, subsetVarOrder0, (RestartStrategy) null);
assertEquals(1, intArray0.length);
assertNotNull(solver2);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-1195), percentLengthLearning0.getLimit());

solver2.setDataStructureFactory(cardinalityDataStructureYanMin0);
assertEquals(1, intArray0.length);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals((-1195), percentLengthLearning0.getLimit());

RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
assertEquals(1, intArray0.length);
assertNull(restartStrategy0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(5, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());


[MASTER] 10:57:48.982 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:48.990 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {0}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, (-1219));
assertNotNull(searchParams0);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

searchParams0.setInitConflictBound((-1219));
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double0, 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

int int0 = searchParams0.getInitConflictBound();
assertEquals((-1219), int0);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

int int1 = searchParams0.getInitConflictBound();
assertEquals((-1219), int1);
assertTrue(int1 == int0);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

int int2 = searchParams0.getInitConflictBound();
assertEquals((-1219), int2);
assertTrue(int2 == int1);
assertTrue(int2 == int0);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double1, 0.01);
assertEquals(double1, double0, 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

double double2 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double2, 0.01);
assertEquals(double2, double1, 0.01);
assertEquals(double2, double0, 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

int int3 = searchParams0.getInitConflictBound();
assertEquals((-1219), int3);
assertTrue(int3 == int2);
assertTrue(int3 == int1);
assertTrue(int3 == int0);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

double double3 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double3, 0.01);
assertEquals(double3, double2, 0.01);
assertEquals(double3, double1, 0.01);
assertEquals(double3, double0, 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

int int4 = searchParams0.getInitConflictBound();
assertEquals((-1219), int4);
assertTrue(int4 == int0);
assertTrue(int4 == int2);
assertTrue(int4 == int3);
assertTrue(int4 == int1);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

int int5 = searchParams0.getInitConflictBound();
assertEquals((-1219), int5);
assertTrue(int5 == int0);
assertTrue(int5 == int1);
assertTrue(int5 == int3);
assertTrue(int5 == int2);
assertTrue(int5 == int4);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
assertEquals(1, intArray0.length);
assertNotNull(solver0);
assertArrayEquals(new int[] {0}, intArray0);
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals((-1219), searchParams0.getInitConflictBound());

solver0.removeConstr((IConstr) null);

[MASTER] 10:57:49.682 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 10:57:49.685 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

int int0 = 11;
SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.999, 11);
assertNotNull(searchParams0);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(11, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());

lubyRestarts0.init(searchParams0, solverStats0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(11, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, pureOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, pureOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertFalse(solver1.equals((Object)solver0));
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());

solver1.primeImplicant(1);

[MASTER] 10:57:51.293 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:51.303 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertNotNull(clauseOnlyLearning1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertNotNull(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning1, cardinalityDataStructure0, randomWalkDecorator0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts(10);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(5, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());

solver1.setLearningStrategy(clauseOnlyLearning0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(7, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

solver2.reset();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

IVecInt iVecInt0 = solver2.unsatExplanation();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNull(iVecInt0);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning2 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertNotNull(clauseOnlyLearning2);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning2.toString());


[MASTER] 10:57:51.875 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:51.914 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertNotNull(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());

SearchParams searchParams0 = solver0.getSearchParams();
assertNotNull(searchParams0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

LubyRestarts lubyRestarts0 = new LubyRestarts(10);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());

ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);
assertFalse(solver2.equals((Object)solver1));
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());

solver2.setLearningStrategy(clauseOnlyLearning0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver2.equals((Object)solver1));
assertNotSame(solver2, solver1);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.nVars());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(5, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL1, randomWalkDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver3);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver3.isVerbose());
assertEquals(2, solver3.newVar());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(1, solver3.nVars());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.nConstraints());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());

solver3.reset();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver3.isVerbose());
assertEquals(2, solver3.newVar());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(1, solver3.nVars());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.nConstraints());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());

IVecInt iVecInt0 = solver3.unsatExplanation();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNull(iVecInt0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(3, solver3.nVars());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.nConstraints());
assertEquals(4, solver3.newVar());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertNotNull(clauseOnlyLearning1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, cardinalityDataStructureYanMin0, varOrderHeap0, (RestartStrategy) null);
assertNotNull(solver4);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertFalse(solver4.isSolverKeptHot());
assertEquals(2147483, solver4.getTimeout());
assertEquals(1, solver4.realNumberOfVariables());
assertEquals(0, solver4.nConstraints());
assertEquals(2, solver4.newVar());
assertEquals(1, solver4.nVars());
assertEquals(0, solver4.decisionLevel());
assertEquals("c ", solver4.getLogPrefix());
assertFalse(solver4.isDBSimplificationAllowed());
assertEquals(0, solver4.currentDecisionLevel());
assertFalse(solver4.isVerbose());
assertEquals(0, solver4.getPropagationLevel());

double[] doubleArray0 = solver4.getVariableHeuristics();
assertEquals(1, doubleArray0.length);
assertNotNull(doubleArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertFalse(solver4.isSolverKeptHot());
assertEquals(2147483, solver4.getTimeout());
assertEquals(4, solver4.newVar());
assertEquals(3, solver4.nVars());
assertEquals(0, solver4.nConstraints());
assertEquals(3, solver4.realNumberOfVariables());
assertEquals(0, solver4.decisionLevel());
assertEquals("c ", solver4.getLogPrefix());
assertFalse(solver4.isDBSimplificationAllowed());
assertEquals(0, solver4.currentDecisionLevel());
assertFalse(solver4.isVerbose());
assertEquals(0, solver4.getPropagationLevel());

Random.setNextRandom(6049);
int int0 = solver0.nextFreeVarId(true);
assertEquals(11, int0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(13, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(12, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(12, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());


[MASTER] 10:57:52.650 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:52.653 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertNotEquals(double1, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

int[] intArray0 = new int[1];
intArray0[0] = (-707);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
assertEquals(1, intArray0.length);
assertNotNull(solver0);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());

solver0.setTimeoutOnConflicts((-707));
assertEquals(1, intArray0.length);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals((-707), solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LearningStrategy<CardinalityDataStructureYanMin> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMin>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin1);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log((String) null);
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, mUSLauncher0);
assertEquals(1, intArray0.length);
assertNotNull(solver1);
assertArrayEquals(new int[] {(-707)}, intArray0);
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

int[] intArray1 = new int[6];
assertFalse(intArray1.equals((Object)intArray0));

intArray1[0] = 424;
intArray1[1] = 48;
intArray1[2] = 3506;
intArray1[3] = 2;
intArray1[4] = (-547);
intArray1[5] = 0;
VecInt vecInt0 = new VecInt(intArray1);
assertEquals(6, intArray1.length);
assertNotNull(vecInt0);
assertFalse(intArray1.equals((Object)intArray0));
assertArrayEquals(new int[] {424, 48, 3506, 2, (-547), 0}, intArray1);
assertEquals(6, vecInt0.size());
assertEquals(0, vecInt0.last());
assertFalse(vecInt0.isEmpty());

vecInt0.sort();
assertEquals(6, intArray1.length);
assertFalse(intArray1.equals((Object)intArray0));
assertNotSame(intArray1, intArray0);
assertArrayEquals(new int[] {(-547), 0, 2, 48, 424, 3506}, intArray1);
assertEquals(6, vecInt0.size());
assertEquals(3506, vecInt0.last());
assertFalse(vecInt0.isEmpty());

IteratorInt iteratorInt0 = vecInt0.iterator();
assertEquals(6, intArray1.length);
assertNotNull(iteratorInt0);
assertFalse(intArray1.equals((Object)intArray0));
assertNotSame(intArray1, intArray0);
assertArrayEquals(new int[] {(-547), 0, 2, 48, 424, 3506}, intArray1);
assertEquals(6, vecInt0.size());
assertEquals(3506, vecInt0.last());
assertFalse(vecInt0.isEmpty());

solver1.findModel((IVecInt) vecInt0);

[MASTER] 10:57:53.123 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:57:53.125 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(7);
assertNotNull(percentLengthLearning0);
assertEquals(7, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(7, percentLengthLearning0.getLimit());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

solver0.backtrack((int[]) null);

[MASTER] 10:57:53.954 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 10:57:53.955 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, (-1502));
assertNotNull(tabuListDecorator0);

tabuListDecorator0.undo((-1502));
LubyRestarts lubyRestarts0 = new LubyRestarts(10);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(10, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());

SearchParams searchParams0 = new SearchParams(1.0, 10);
assertNotNull(searchParams0);
assertEquals(10, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

lubyRestarts0.onRestart();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, tabuListDecorator0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());

IVec<Constr> iVec0 = solver0.getLearnedConstraints();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(iVec0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(10L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, iVec0.size());
assertTrue(iVec0.isEmpty());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
