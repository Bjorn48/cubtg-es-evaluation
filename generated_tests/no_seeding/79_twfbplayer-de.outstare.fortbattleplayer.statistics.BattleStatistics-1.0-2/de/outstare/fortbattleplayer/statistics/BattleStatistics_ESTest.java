/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:55:26 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.AreaStatistic;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import de.outstare.fortbattleplayer.statistics.CriticalHit;
import de.outstare.fortbattleplayer.statistics.LabeledData;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import de.outstare.fortbattleplayer.statistics.RoundStatistics;
import de.outstare.fortbattleplayer.statistics.WeaponModCounter;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BattleStatistics_ESTest extends BattleStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      battleStatistics0.setRound(0);
      battleStatistics0.setRound(916);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getNotShootersPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1570, 1570);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1570, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1), "6", 2, 2448);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 59, "h", characterClass0, simpleWeapon0, "]");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 4076, " health points", characterClass0, simpleWeapon0, "");
      battleStatistics0.criticalShot(simpleCombatant1, simpleCombatant0, 1);
      assertNotSame(simpleCombatant0, simpleCombatant1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(17, 17);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 17, 4, true, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "U/-a!", characterClass0, (Weapon) null, "U/-a!");
      // Undeclared exception!
      try { 
        battleStatistics0.hasSwappedPosition(simpleCombatant0, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, "6");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, (-2513), "fJwT&75-UtS#Dfawvw]", characterClass0, simpleWeapon0, (String) null);
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant1);
      assertEquals(CharacterClass.ADVENTURER, simpleCombatant1.getCharacterClass());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(3308, 3308);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1703), false, false, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-721), 0, simpleSector0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-2162), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1703), "sa/8", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-721), "", characterClass0, simpleWeapon0, "");
      // Undeclared exception!
      try { 
        battleStatistics0.aimsAt((Combatant) null, simpleCombatant0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1), 3313);
      HashMap<CombatantSide, AtomicInteger> hashMap0 = new HashMap<CombatantSide, AtomicInteger>();
      HashMap<CombatantSide, RoundStatistics> hashMap1 = new HashMap<CombatantSide, RoundStatistics>();
      battleStatistics0.addAndResetRoundCounter(hashMap0, hashMap1);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(260, 260);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, (Area) null, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "de.outstare.fortbattleplayer.statistics.BattleStatistics", 260, 1711);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "de.outstare.fortbattleplayer.statistics.BattleStatistics", characterClass0, simpleWeapon0, "de.outstare.fortbattleplayer.statistics.BattleStatistics");
      battleStatistics0.isHit(simpleCombatant0, (-796), 0);
      assertEquals(0, simpleCombatant0._getCurrentLP());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1392, 1392);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(1392, false, false, 1073741824, 1073741824, false, 1073741824, characterClass0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3540, "6", 1682, 3540);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, (String) null);
      battleStatistics0.hasMoved(simpleCombatant0, simpleArea0);
      assertEquals(50, simpleCombatant0._maxHealth());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(50, false, false, 1539, 50, true, 50, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(50, 50, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(207, "ATTACK", 50, 207);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 13, "n=(I[C", characterClass0, simpleWeapon0, "&n?-Li-");
      battleStatistics0.hasSwappedPosition(simpleCombatant0, simpleCombatant0);
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(2, 2);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 125, 0, true, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 75, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "almost crit by ", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2, "almost crit by ", characterClass0, simpleWeapon0, "almost crit by ");
      battleStatistics0.hasSwappedPosition(simpleCombatant0, simpleCombatant0);
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(3308, 3308);
      int int0 = battleStatistics0.round(0.15);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(260, 260);
      int int0 = battleStatistics0.round(260);
      assertEquals(260, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      int int0 = battleStatistics0.round((-339.1207910884143));
      assertEquals((-339), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, "6");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1260, 1260);
      int int0 = battleStatistics0.combatantLifetime((Combatant) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, "6");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals((-1235), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1570, 1570);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1570, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1), "6", 2, 2448);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 59, "h", characterClass0, simpleWeapon0, "]");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      // Undeclared exception!
      try { 
        battleStatistics0.numberOfMovesPerPlayer((CombatantSide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, "6");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1539, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1), "6", 2, 2448);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 59, "h", characterClass0, simpleWeapon0, "]");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfGraphitLubricants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1570, 1570);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, true, true, 1570, 59, true, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1), "6", 2, 2448);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 59, "h", characterClass0, simpleWeapon0, "]");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfFettesOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(34, 34);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(34, true, false, 34, 34, false, 34, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((Point) null, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 34, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(16716049, "Tjb'#&2UQ", 0, 50);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "Tjb'#&2UQ", characterClass0, simpleWeapon0, "Tjb'#&2UQ");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfBayonets(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      // Undeclared exception!
      try { 
        battleStatistics0.isOnline((Combatant) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(3308, 3308);
      // Undeclared exception!
      try { 
        battleStatistics0.criticalShot((Combatant) null, (Combatant) null, 3308);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.CriticalHit", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(17, 17);
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(17, true, true, 17, 17, true, 17, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(17, 17, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 17, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(120, "", 62, 62);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 62, "DEy@a)djAl", characterClass0, simpleWeapon0, "DEy@a)djAl");
      battleStatistics0.isOnline(simpleCombatant0, false);
      WeaponModCounter.BayonetCounter weaponModCounter_BayonetCounter0 = new WeaponModCounter.BayonetCounter();
      int int0 = battleStatistics0.countWeaponMods(combatantSide0, weaponModCounter_BayonetCounter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1073741819, 0);
      Hashtable<CombatantSide, RoundStatistics> hashtable0 = new Hashtable<CombatantSide, RoundStatistics>();
      // Undeclared exception!
      try { 
        battleStatistics0.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      List<CriticalHit> list0 = battleStatistics0.critList(combatantSide0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      battleStatistics0.setRound(1539);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1539, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(59, "ATTACK", 59, 216);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1539, "ATTACK", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, false);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      battleStatistics0.setRound(1539);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1539, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(59, "ATTACK", 59, 216);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1539, "ATTACK", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, false);
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(34, 34);
      List<CriticalHit> list0 = battleStatistics0.critList((CombatantSide) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1570, 1570);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      long long0 = battleStatistics0.criticalHitDamage(combatantSide0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList((CombatantSide) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1539, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(207, "ATTACK", 59, 59);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1), "ATTACK", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfHipFlasks(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1539, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(207, "ATTACK", 59, 59);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-1), "ATTACK", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      WeaponModCounter.ShinyOilCounter weaponModCounter_ShinyOilCounter0 = new WeaponModCounter.ShinyOilCounter();
      int int0 = battleStatistics0.countWeaponMods(combatantSide0, weaponModCounter_ShinyOilCounter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      String string0 = battleStatistics0.targetNoOne(combatantSide0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      boolean boolean0 = true;
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, "6");
      battleStatistics0.isOnline(simpleCombatant0, true);
      battleStatistics0.isOnline(simpleCombatant0, boolean0);
      assertEquals("6", simpleCombatant0.getCity());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, "6");
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1539, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(59, "ATTACK", 59, 216);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1539, "ATTACK", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, false);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1539, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(59, "ATTACK", 59, 216);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1539, "ATTACK", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, false);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(78, false, true, 1, 488, false, 78, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(78, 78, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "Jn.q$h6FrkoU%.\u0007i1", 1, 1073741824);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1073741824, "]", characterClass0, simpleWeapon0, "Jn.q$h6FrkoU%.\u0007i1");
      BattleStatistics battleStatistics0 = new BattleStatistics(488, 1073741824);
      battleStatistics0.isOnline(simpleCombatant0, false);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1539, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(59, "ATTACK", 59, 216);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1539, "ATTACK", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, false);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.roundsTillOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, "6");
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.roundsTillOnline((CombatantSide) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, true, (-1796), 40, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "N:", 1383, 1762);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 15, "Not shooting", characterClass0, simpleWeapon0, "Not shooting");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, "6");
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfOffliners(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "6", characterClass0, simpleWeapon0, "6");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(59, true, true, 2, 6343, true, 6343, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 4311, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1073741824, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(6343, ":ku&Dw);bsHc", 392, 6343);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1073741824, " must exist!", characterClass0, simpleWeapon0, " must exist!");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-1235), true, true, (-1235), 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 50, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "Tjb'#&2UQ", 0, 1383);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 50, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.combatantLifetime(simpleCombatant0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1570, 1570);
      battleStatistics0.setRound(1570);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, true, true, 1570, 59, true, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1), "6", 2, 2448);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 59, "h", characterClass0, simpleWeapon0, "]");
      battleStatistics0.isOnline(simpleCombatant0, true);
      battleStatistics0.setRound(1570);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(3295, 3295);
      battleStatistics0.setRound(3295);
      battleStatistics0.setRound(3295);
      battleStatistics0.setRound(2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1570, 1570);
      battleStatistics0.setRound(1570);
      battleStatistics0.setRound(1570);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(59, false, false, 1570, 59, false, 59, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(59, 59, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1), "6", 2, 2448);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 59, "h", characterClass0, simpleWeapon0, "h");
      battleStatistics0.isOnline(simpleCombatant0, false);
      assertTrue(simpleCombatant0.isOnline());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getShotsPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(78, true, true, 78, 488, true, 78, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(78, 78, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 488, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(488, ":ku&Dw);bsHc", 78, 115);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 115, "WxfMC+*?]y*", characterClass0, simpleWeapon0, "WxfMC+*?]y*");
      BattleStatistics battleStatistics0 = new BattleStatistics(488, 0);
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, (-3347));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.criticalHits(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getHitsPerRound();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1774), (-3850));
      // Undeclared exception!
      try { 
        battleStatistics0.hasMoved((Combatant) null, (Area) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-315), 210);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point(159, 1426);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(4459, true, false, 3156, 159, true, (-3255), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 1426, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 4459, "c&[RU=FXh", characterClass0, (Weapon) null, "c&[RU=FXh");
      battleStatistics0.isAlive(simpleCombatant0);
      assertEquals(CombatantSide.DEFENDER, simpleCombatant0.getSide());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfSchmierOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1570, 1570);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfFettesOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1539, 1539);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfGraphitLubricants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      battleStatistics0.isDead((Combatant) null);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, (-3347));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1570, 1570);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1385, 1385);
      // Undeclared exception!
      try { 
        battleStatistics0.isHit((Combatant) null, 1385, 1385);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, (-3347));
      battleStatistics0.newDestination((Combatant) null, (Area) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1383, 1383);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfBayonets(combatantSide0);
      assertEquals(0, int0);
  }
}
