/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:33:09 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SizeComparator;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeComparator_ESTest extends SizeComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt(1730, (-1));
      Constr constr0 = cardinalityDataStructure0.createUnregisteredClause(vecInt0);
      constr0.incActivity(0.95);
      int int0 = sizeComparator0.compare(constr0, constr0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(3290.87085211, (-1445.05), (-1445.05), (-1468));
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      ILits iLits0 = solver0.getVocabulary();
      CBClause cBClause0 = new CBClause(iVecInt0, iLits0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, iVecInt0, true, (-1468));
      int int0 = sizeComparator0.compare((Constr) cBClause0, (Constr) maxWatchCard0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-23));
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      Lits lits0 = (Lits)solver0.voc;
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 32);
      VecInt vecInt0 = (VecInt)solver0.trail;
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      int int0 = sizeComparator0.compare((Constr) binaryClauses0, (Constr) originalBinaryClause0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt(1730, (-1));
      Constr constr0 = cardinalityDataStructure0.createUnregisteredClause(vecInt0);
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      // Undeclared exception!
      try { 
        sizeComparator0.compare(constr0, (Constr) unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      // Undeclared exception!
      try { 
        sizeComparator0.compare((Constr) null, (Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SizeComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt(566, 1134);
      Constr constr0 = cardinalityDataStructure0.createUnregisteredClause(vecInt0);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = sizeComparator0.compare(constr0, (Constr) learntBinaryClause0);
      assertEquals(564, int0);
  }
}
