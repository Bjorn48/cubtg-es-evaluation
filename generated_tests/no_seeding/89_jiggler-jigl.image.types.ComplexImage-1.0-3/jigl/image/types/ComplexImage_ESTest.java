/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 16:25:12 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = complexImage0.subtract(1010.7F, 1.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(173, 173, (-2618.065F), 1010.7F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = complexImage0.min();
      assertNotNull(complex1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complexImage1.max();
      assertNotNull(complex2);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      Complex complex3 = complexImage0.max();
      assertNotNull(complex3);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(0, complex3.intValue());
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.arg(), 0.01);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      
      ComplexImage complexImage2 = complexImage1.multiply((float) 8, (float) 8);
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      complexImage1.divide(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, (ROI) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(183, 1);
      assertNotNull(complexImage0);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(183, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertNotNull(complexImage3);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(183, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage2.imag();
      assertNotNull(realGrayImage0);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(183, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertNotNull(realGrayImage1);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(183, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(183, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      complexImage3.imag = realGrayImage0;
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(183, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(183, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, complexImage3.imag.min(), 0.01F);
      assertEquals(0.0F, complexImage3.imag.max(), 0.01F);
      assertEquals(183, complexImage3.imag.X());
      assertEquals(0.0, complexImage3.imag.sqrSum(), 0.01);
      assertEquals(1, complexImage3.imag.Y());
      assertEquals(0.0F, complexImage3.imag.absSum(), 0.01F);
      assertEquals(0.0F, complexImage3.imag.addSum(), 0.01F);
      
      complexImage2.divide(complexImage1);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(183, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      ROI rOI0 = new ROI(3193, (-1653), 0, 0);
      assertNotNull(rOI0);
      assertEquals((-1653), rOI0.uy());
      assertEquals(1654, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(3193, rOI0.lx());
      assertEquals(3194, rOI0.X());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1653
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      Complex complex0 = complexImage2.min();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(16, 16, (-756), 16);
      assertNotNull(rOI1);
      assertEquals((-756), rOI1.ux());
      assertEquals(16, rOI1.uy());
      assertEquals(16, rOI1.lx());
      assertEquals(16, rOI1.ly());
      assertEquals(773, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage0.subtract(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, realGrayImage0.X());
      assertEquals(16, realGrayImage0.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ComplexImage complexImage1 = complexImage0.add(2150.5557F, 2150.5557F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage1.setImaginary((-1786), 316, (float) 316, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage0.divide((ComplexImage) null);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.clear((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      ComplexImage complexImage3 = complexImage1.add(226.69595F, 820.30054F);
      assertNotNull(complexImage3);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      complexImage2.subtract(complexImage3, rOI0, rOI0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      
      Complex complex0 = complexImage2.max();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Complex complex0 = null;
      int int0 = 88;
      BufferedImage bufferedImage0 = new BufferedImage(88, 88, 7);
      assertNotNull(bufferedImage0);
      assertEquals(88, bufferedImage0.getTileWidth());
      assertEquals(88, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(88, bufferedImage0.getTileHeight());
      assertEquals(7, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(88, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage1 = new ComplexImage(3711, 477);
      assertNotNull(complexImage1);
      assertEquals(477, complexImage1.Y());
      assertEquals(3711, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 1;
      float float0 = 577.31696F;
      ComplexImage complexImage1 = complexImage0.subtract((float) 1, 577.31696F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = 4320;
      rOI0.setROI(1, 4320, 1, 1);
      assertEquals(1, rOI0.X());
      assertEquals(4320, rOI0.Y());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(4320, rOI0.ly());
      assertEquals(1, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-1281), (-1281), (-1281), (-1281), 2351.372F, (float) (-1281));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 1452;
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      complexImage0.setReal(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      int int1 = (-1);
      ROI rOI0 = new ROI((-1), (-1), (-238), 1452);
      assertNotNull(rOI0);
      assertEquals((-1), rOI0.lx());
      assertEquals(238, rOI0.X());
      assertEquals((-238), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(1452, rOI0.ly());
      assertEquals(1454, rOI0.Y());
      
      rOI0.setROI((-2426), (-238), (-238), (-2426));
      assertEquals((-238), rOI0.lx());
      assertEquals((-238), rOI0.ly());
      assertEquals(2189, rOI0.X());
      assertEquals(2189, rOI0.Y());
      assertEquals((-2426), rOI0.ux());
      assertEquals((-2426), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.set(696, 380, (-594.7631F), (-3939.153F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.subtract((float) 16, (float) 16);
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 1502);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(1502, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(1502, complexImage1.Y());
      assertEquals(1502, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      complexImage1.subtract(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(1502, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(1, 0, 0, 1);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(2, rOI0.Y());
      assertEquals(2, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Complex complex0 = complexImage0.max(rOI0);
      assertNotNull(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertSame(complexImage0, complexImage1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2575, 220);
      assertNotNull(complexImage0);
      assertEquals(220, complexImage0.Y());
      assertEquals(2575, complexImage0.X());
      
      // Undeclared exception!
      complexImage0.addbuffer(220, 220, (-1), 220, (float) 220, (float) (-1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 3347;
      int int1 = 0;
      ROI rOI0 = new ROI(10, (-2996), 3347, 0);
      assertNotNull(rOI0);
      assertEquals(3338, rOI0.X());
      assertEquals(10, rOI0.ux());
      assertEquals(3347, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-2996), rOI0.uy());
      assertEquals(2997, rOI0.Y());
      
      int int2 = 3711;
      rOI0.setROI((-2996), 3711, 3711, 10);
      assertEquals(3702, rOI0.Y());
      assertEquals(10, rOI0.uy());
      assertEquals(6708, rOI0.X());
      assertEquals((-2996), rOI0.ux());
      assertEquals(3711, rOI0.lx());
      assertEquals(3711, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 3347, (float) 3347, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      ROI rOI0 = new ROI(8, 8, (-1178), (-1178));
      assertNotNull(rOI0);
      assertEquals(1187, rOI0.Y());
      assertEquals(1187, rOI0.X());
      assertEquals(8, rOI0.ly());
      assertEquals((-1178), rOI0.ux());
      assertEquals(8, rOI0.lx());
      assertEquals((-1178), rOI0.uy());
      
      rOI0.setROI((-1476), (-1476), (-295), (-1178));
      assertEquals((-1476), rOI0.ux());
      assertEquals((-1476), rOI0.uy());
      assertEquals((-1178), rOI0.ly());
      assertEquals((-295), rOI0.lx());
      assertEquals(1182, rOI0.X());
      assertEquals(299, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.set(8, (-295), 1.0F, (float) (-1178), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1771
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      // Undeclared exception!
      complexImage0.addbuffer(4147, 16, (float) 4147, (float) 4147);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage3 = new ComplexImage(complexImage0);
      assertNotNull(complexImage3);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage3.X());
      assertEquals(16, complexImage3.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      ComplexImage complexImage4 = complexImage1.diff(complexImage3);
      assertNotNull(complexImage4);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage3.X());
      assertEquals(16, complexImage3.Y());
      assertEquals(8, complexImage4.X());
      assertEquals(16, complexImage4.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      
      rOI0.setROI(8, 8, 16, 8);
      assertEquals(8, rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(8, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(9, rOI0.X());
      assertEquals(8, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(16, 8, 0.0F, 460.9681F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI1.setROI((-2501), 3674, (-2501), (-2016));
      assertEquals(5691, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2501), rOI1.lx());
      assertEquals(3674, rOI1.ly());
      assertEquals((-2016), rOI1.uy());
      assertEquals((-2501), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      complexImage0.copy(rOI1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(183, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage0.X());
      assertEquals(183, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage2 = complexImage1.multiply((float) 183, (float) 1, rOI0);
      assertNotNull(complexImage2);
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage0.X());
      assertEquals(183, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage0.X());
      assertEquals(183, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      
      ComplexImage complexImage3 = complexImage2.diff(complexImage0);
      assertNotNull(complexImage3);
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage0.X());
      assertEquals(183, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(183, complexImage3.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      
      ImageProducer imageProducer0 = complexImage2.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage0.X());
      assertEquals(183, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.add((-3570), (-3570), 1.0F, (float) (-3570), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3570
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1, 1, (Complex) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage1, realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 2692;
      int int1 = (-2225);
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(2692, (-2225));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = complexImage0.min();
      assertNotNull(complex1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals((short)0, complex1.shortValue());
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complexImage1.max();
      assertNotNull(complex2);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      complexImage0.multiply(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.multiply((float) 8, 1.0F);
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage2.X());
      assertEquals(8, complexImage2.Y());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      ComplexImage complexImage3 = new ComplexImage();
      assertNotNull(complexImage3);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      // Undeclared exception!
      try { 
        complexImage2.divide(complexImage3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1688, 1688, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.divide(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1, 1, 2797.8F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNotNull(realGrayImage0);
      assertEquals(8, realGrayImage0.X());
      assertEquals(8, realGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.set((-1462), 8, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI((-1), (-688), (-562), 1452);
      assertNotNull(rOI0);
      assertEquals((-688), rOI0.uy());
      assertEquals(1452, rOI0.ly());
      assertEquals(562, rOI0.X());
      assertEquals((-1), rOI0.lx());
      assertEquals((-562), rOI0.ux());
      assertEquals(2141, rOI0.Y());
      
      rOI0.setROI(1, (-1), 1452, (-1));
      assertEquals(1, rOI0.ux());
      assertEquals(1452, rOI0.X());
      assertEquals(1452, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-1), rOI0.ly());
      assertEquals((-1), rOI0.uy());
      
      rOI0.setROI(604, 0, (-1), 3711);
      assertEquals(0, rOI0.uy());
      assertEquals(606, rOI0.X());
      assertEquals(604, rOI0.lx());
      assertEquals(3711, rOI0.ly());
      assertEquals(3712, rOI0.Y());
      assertEquals((-1), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.subtract((float) 1, (float) (-1), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(16, 16, (float) 16, (float) 16);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = (-1083);
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-1083), (-1083));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 172;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = complexImage0.add(2150.5557F, 2150.5557F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI(2, (-1347), 16, 1);
      assertNotNull(rOI0);
      assertEquals((-1347), rOI0.uy());
      assertEquals(1349, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals(15, rOI0.X());
      assertEquals(2, rOI0.ux());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage2.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      int int1 = 4147;
      int int2 = 0;
      ComplexImage complexImage1 = new ComplexImage(4147, 0);
      assertNotNull(complexImage1);
      assertEquals(4147, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(4147, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(4147, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage1.clear();
      assertNotNull(complexImage3);
      assertEquals(4147, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(4147, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 1784, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = complexImage1.min();
      assertNotNull(complex1);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI((-1722), 26, 26, (-1722));
      assertEquals((-1722), rOI0.uy());
      assertEquals(1749, rOI0.X());
      assertEquals(26, rOI0.ly());
      assertEquals((-1722), rOI0.ux());
      assertEquals(26, rOI0.lx());
      assertEquals(1749, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1752, 1752, (float) 1752, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.add(226.69595F, 820.30054F);
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage3 = complexImage1.divide((-99.14F), (float) 16, rOI0);
      assertNotNull(complexImage3);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(16, complexImage3.Y());
      assertEquals(16, complexImage3.X());
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.magnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(1398, 1398);
      assertNotNull(complexImage1);
      assertEquals(1398, complexImage1.X());
      assertEquals(1398, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI(1398, 1398, 1398, 1398);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1398, rOI0.uy());
      assertEquals(1398, rOI0.ux());
      assertEquals(1398, rOI0.ly());
      assertEquals(1398, rOI0.lx());
      
      rOI0.setROI(255, 1398, 1398, 255);
      assertEquals(1398, rOI0.ly());
      assertEquals(255, rOI0.uy());
      assertEquals(1144, rOI0.Y());
      assertEquals(255, rOI0.ux());
      assertEquals(1398, rOI0.lx());
      assertEquals(1144, rOI0.X());
      
      rOI0.setROI(1398, (-1022), (-1022), 1398);
      assertEquals((-1022), rOI0.uy());
      assertEquals((-1022), rOI0.ux());
      assertEquals(1398, rOI0.ly());
      assertEquals(1398, rOI0.lx());
      assertEquals(2421, rOI0.Y());
      assertEquals(2421, rOI0.X());
      
      rOI0.setROI(1, 1, 1398, 1398);
      assertEquals(1, rOI0.uy());
      assertEquals(1398, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(1398, rOI0.Y());
      assertEquals(1398, rOI0.lx());
      assertEquals(1398, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add(820.30054F, 820.30054F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract(0.0F, 0.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set((-1425), (-1425), complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      Complex complex0 = complexImage2.min();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ComplexImage complexImage3 = complexImage1.multiply((float) 16, (float) 16);
      assertNotNull(complexImage3);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage3.X());
      assertEquals(16, complexImage3.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage4 = complexImage0.subtract((float) 16, (-1378.0F), rOI0);
      assertNotNull(complexImage4);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(16, complexImage4.Y());
      assertEquals(16, complexImage4.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      
      // Undeclared exception!
      try { 
        complexImage3.get(16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.add((-1.0F), (float) 8);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(15, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.get(924, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      Complex complex0 = complexImage2.min();
      assertNotNull(complex0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ROI rOI0 = new ROI(8, 16, 16, 16);
      assertNotNull(rOI0);
      assertEquals(8, rOI0.ux());
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(16, rOI0.uy());
      assertEquals(9, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage2.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      complexImage1.add(5, 5, (-8.428F), (-8.428F), rOI0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-17), 255, (float) 255, 588.51F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      RealGrayImage realGrayImage0 = null;
      complexImage0.real = null;
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      complexImage0.setImag(1, 1, (float) 1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2575, 220);
      assertNotNull(complexImage0);
      assertEquals(220, complexImage0.Y());
      assertEquals(2575, complexImage0.X());
      
      float float0 = 0.0F;
      float float1 = 28.506466F;
      // Undeclared exception!
      complexImage0.toString();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 16;
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.subtract(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      complexImage1.add(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI((-1347), 16, (-1347), 16);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-1347), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-1347), rOI0.lx());
      assertEquals(16, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(16, 16, 0.0F, 1854.4543F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add(3711, 3711, (float) 3711, (-2637.491F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(16, 16, 16, 2334, (float) 16, (float) 2334);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(16, 16, (-168.49971F), (float) 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 8;
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      
      Complex complex1 = complexImage0.min();
      assertNotNull(complex1);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex1, complex0);
      
      ComplexImage complexImage2 = complexImage1.subtract((float) 8, 0.0F);
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      ComplexImage complexImage3 = complexImage2.divide((-1546.0972F), (float) 8);
      assertNotNull(complexImage3);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(8, complexImage3.X());
      assertEquals(8, complexImage3.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      
      int int1 = 178;
      float float0 = (-3211.103F);
      float float1 = 133.6F;
      int int2 = 2601;
      ROI rOI0 = new ROI(2601, 2, 1, 2);
      assertNotNull(rOI0);
      assertEquals(2, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2601, rOI0.X());
      assertEquals(2, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(2601, rOI0.lx());
      
      int int3 = (-3409);
      // Undeclared exception!
      try { 
        complexImage2.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI(475, 475, 16, 16);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.ux());
      assertEquals(16, rOI0.uy());
      assertEquals(475, rOI0.ly());
      assertEquals(475, rOI0.lx());
      assertEquals(460, rOI0.Y());
      assertEquals(460, rOI0.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      Complex complex0 = complexImage1.min(rOI1);
      assertNotNull(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(rOI1.equals((Object)rOI0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI1, rOI0);
      
      Complex complex1 = complexImage0.max();
      assertNotNull(complex1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, (-4599), 0, (-4599));
      assertNotNull(rOI0);
      assertEquals((-4599), rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-4599), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(3, 3, (-0.6993F), (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 0;
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(1, 0, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      complexImage1.add(complexImage0, rOI0, rOI0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 0.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = complexImage1.min();
      assertNotNull(complex1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals((short) (-1), complex1.shortValue());
      assertEquals(9223372036854775807L, complex1.longValue());
      assertEquals(Integer.MAX_VALUE, complex1.intValue());
      assertEquals((byte) (-1), complex1.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.magnitude(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.imag(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      
      complexImage1.setReal((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract((-32768.0F), (-1.0F));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.add(1.0F, 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add(8, 8, 1627.7693F, (float) 8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-1), 255, (float) 255, 588.51F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(128, 8);
      assertNotNull(complexImage0);
      assertEquals(128, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(128, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(128, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      complexImage1.multiply(complexImage0, rOI0, rOI0);
      assertEquals(128, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(128, complexImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotNull(realGrayImage0);
      assertEquals(128, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(128, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(128, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      Complex complex0 = complexImage1.max(rOI0);
      assertNotNull(complex0);
      assertEquals(128, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(128, complexImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertFalse(rOI0.equals((Object)rOI1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI0, rOI1);
      
      int int0 = complexImage0.Y();
      assertEquals(8, int0);
      assertEquals(128, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertSame(complexImage0, complexImage1);
      
      String string0 = complexImage1.toString(rOI0);
      assertNotNull(string0);
      assertEquals("128:8\n0.0 \n128:8\n0.0 \n", string0);
      assertEquals(128, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(128, complexImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(rOI0, rOI1);
      
      int int1 = complexImage0.X();
      assertEquals(128, int1);
      assertEquals(128, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertFalse(int1 == int0);
      assertSame(complexImage0, complexImage1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(475, 475);
      assertNotNull(complexImage1);
      assertEquals(475, complexImage1.Y());
      assertEquals(475, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      complexImage1.clear();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = (-2040);
      int int1 = 168;
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-2040), 168, (-806.0125F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = (-1863);
      String string0 = complexImage0.toString();
      assertNotNull(string0);
      assertEquals("0:1\n0:1\n", string0);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      
      String string1 = complexImage1.toString();
      assertNotNull(string1);
      assertEquals("0:1\n0:1\n", string1);
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = (-2107);
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      int int1 = (-1);
      int int2 = (-12);
      ROI rOI0 = new ROI(2722, 2722, (-1505), (-12));
      assertNotNull(rOI0);
      assertEquals(2735, rOI0.Y());
      assertEquals(4228, rOI0.X());
      assertEquals((-12), rOI0.uy());
      assertEquals(2722, rOI0.ly());
      assertEquals((-1505), rOI0.ux());
      assertEquals(2722, rOI0.lx());
      
      int int3 = 2044;
      rOI0.setROI((-2638), (-2107), (-2107), 2044);
      assertEquals((-2107), rOI0.uy());
      assertEquals(532, rOI0.X());
      assertEquals((-2638), rOI0.ux());
      assertEquals(2044, rOI0.ly());
      assertEquals((-2107), rOI0.lx());
      assertEquals(4152, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-2107), (-1), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.get((-3236), 4147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      ROI rOI0 = new ROI((-1), 3082, (-1), (-162));
      assertNotNull(rOI0);
      assertEquals(3245, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(3082, rOI0.ly());
      assertEquals((-1), rOI0.lx());
      assertEquals((-162), rOI0.uy());
      assertEquals((-1), rOI0.ux());
      
      rOI0.setROI(0, 0, 22, (-1));
      assertEquals(2, rOI0.Y());
      assertEquals(22, rOI0.lx());
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(23, rOI0.X());
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 183;
      ComplexImage complexImage0 = new ComplexImage(183, 1);
      assertNotNull(complexImage0);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(183, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertNotNull(complexImage3);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(183, complexImage3.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      
      RealGrayImage realGrayImage0 = complexImage2.imag();
      assertNotNull(realGrayImage0);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(183, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      complexImage3.imag = realGrayImage0;
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(183, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.Y());
      assertEquals(183, complexImage3.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(183, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, complexImage3.imag.Y());
      assertEquals(0.0F, complexImage3.imag.absSum(), 0.01F);
      assertEquals(0.0F, complexImage3.imag.max(), 0.01F);
      assertEquals(0.0F, complexImage3.imag.min(), 0.01F);
      assertEquals(183, complexImage3.imag.X());
      assertEquals(0.0F, complexImage3.imag.addSum(), 0.01F);
      assertEquals(0.0, complexImage3.imag.sqrSum(), 0.01);
      
      complexImage2.divide(complexImage1);
      assertEquals(183, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(183, complexImage1.X());
      assertEquals(183, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      int int1 = (-946);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.set(183, (-946), (-1.0F), (-1602.2258F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -946
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-1347), (-269), 1, 0);
      assertNotNull(rOI0);
      assertEquals((-269), rOI0.uy());
      assertEquals(270, rOI0.Y());
      assertEquals(1349, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1347), rOI0.ux());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      complexImage0.subtract((ComplexImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      Complex complex0 = complexImage2.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(0, (-1347), 1.0F, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage2.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(8, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      
      ComplexImage complexImage3 = complexImage1.multiply((float) 16, (float) 8);
      assertNotNull(complexImage3);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage3.Y());
      assertEquals(8, complexImage3.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      
      int int0 = complexImage2.Y();
      assertEquals(16, int0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-4265), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 8;
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      int int0 = 3368;
      int int1 = 785;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(3368, 785, (float) 3368, (float) 3368);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set(2077, 2077, (-168.49971F), (float) 2077);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float float0 = (-2832.342F);
      float float1 = 0.0F;
      int int0 = (-1469);
      ROI rOI0 = new ROI((-1469), (-1469), (-1469), (-1469));
      assertNotNull(rOI0);
      assertEquals((-1469), rOI0.uy());
      assertEquals((-1469), rOI0.ux());
      assertEquals((-1469), rOI0.ly());
      assertEquals((-1469), rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = 3711;
      rOI0.setROI(3711, 0, 3711, (-1469));
      assertEquals((-1469), rOI0.uy());
      assertEquals(1470, rOI0.Y());
      assertEquals(3711, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(3711, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((-2832.342F), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      
      ComplexImage complexImage1 = complexImage0.multiply((-786.7F), 1.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage1.divide(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, (ROI) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = complexImage0.divide(1316.7107F, 255.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(671, (-17), 0.0F, (float) 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(1479, 1479, (float) 1479, (float) 1479);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, 448, 2, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(448, rOI0.ly());
      assertEquals(2, rOI0.lx());
      assertEquals(449, rOI0.Y());
      assertEquals(3, rOI0.X());
      
      int int0 = 0;
      rOI0.setROI((-1809), (-269), (-1809), 627);
      assertEquals((-1809), rOI0.ux());
      assertEquals(627, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(897, rOI0.Y());
      assertEquals((-1809), rOI0.lx());
      assertEquals((-269), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 187;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 187, (-4336.83F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(9223372036854775807L, complex1.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.magnitude(), 0.01);
      assertEquals((byte) (-1), complex1.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex1.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex1.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex1.imag(), 0.01);
      assertEquals((short) (-1), complex1.shortValue());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complex1.equals((Object)complex0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.divide((-32768.0F), 0.0F, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int0 = (-383);
      // Undeclared exception!
      try { 
        complexImage0.multiply((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      float float0 = 2150.5557F;
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ComplexImage complexImage1 = complexImage0.add(2150.5557F, 2150.5557F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage1.setImag(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.phaseImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1759), 543, (float) 543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 1, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(0, 0, 8, 0);
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(9, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI1.setROI((-4222), 8, 451, 0);
      assertEquals(451, rOI1.lx());
      assertEquals(9, rOI1.Y());
      assertEquals(8, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(4674, rOI1.X());
      assertEquals((-4222), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI2 = new ROI(0, (-4222), (-4222), (-4222));
      assertNotNull(rOI2);
      assertEquals((-4222), rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals((-4222), rOI2.uy());
      assertEquals((-4222), rOI2.ux());
      assertEquals(4223, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI2, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(1452, 1452, 1452, 1452);
      assertNotNull(rOI0);
      assertEquals(1452, rOI0.lx());
      assertEquals(1452, rOI0.ly());
      assertEquals(1452, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1452, rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(1452, 1452, 1452, 1452);
      assertEquals(1452, rOI0.lx());
      assertEquals(1452, rOI0.ly());
      assertEquals(1452, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1452, rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1452, 1452, (float) 1452, (-1.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      float float0 = 33.5F;
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ROI rOI1 = new ROI(2663, 2663, 2663, (-1));
      assertNotNull(rOI1);
      assertEquals(2663, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(2663, rOI1.ux());
      assertEquals((-1), rOI1.uy());
      assertEquals(2665, rOI1.Y());
      assertEquals(2663, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage2.getImaginary(2663, (-137), rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      ComplexImage complexImage2 = complexImage1.multiply((float) 8, (float) 8);
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      complexImage1.divide(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      
      ROI rOI0 = new ROI(8, (-16777216), 8, (-16777216));
      assertNotNull(rOI0);
      assertEquals((-16777216), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(8, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(8, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.add((float) 8, (float) 8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-1469), (-1469), (-1469), (-1469));
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals((-1469), rOI0.uy());
      assertEquals((-1469), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-1469), rOI0.lx());
      assertEquals((-1469), rOI0.ly());
      
      rOI0.setROI(3711, 0, 3711, (-1469));
      assertEquals(0, rOI0.ly());
      assertEquals((-1469), rOI0.uy());
      assertEquals(1470, rOI0.Y());
      assertEquals(3711, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3711, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1, (-394), (float) 3711, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 8;
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      complexImage2.multiply(complexImage0, rOI0, rOI0);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage2.real();
      assertNotNull(realGrayImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(8, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      Complex complex0 = complexImage0.max(rOI1);
      assertNotNull(complex0);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(rOI1, rOI0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal((-383), (-383), (float) (-383));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.set(16, 0, complex0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.add(226.69595F, 820.30054F);
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(16, 1489, 1489, (-227));
      assertEquals(16, rOI0.ux());
      assertEquals((-227), rOI0.uy());
      assertEquals(1474, rOI0.X());
      assertEquals(1717, rOI0.Y());
      assertEquals(1489, rOI0.ly());
      assertEquals(1489, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(226.69595F, (float) 16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -227
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(182, 640, (float) 182, (float) 640);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-1526), 4373, 0, (-1526));
      assertNotNull(rOI0);
      assertEquals(4373, rOI0.ly());
      assertEquals(5900, rOI0.Y());
      assertEquals((-1526), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1527, rOI0.X());
      assertEquals((-1526), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(0, (-1526), (-17.77912F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(6, (-388), (float) 6, 32767.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ROI rOI0 = new ROI((-1469), 16, 16, (-1));
      assertNotNull(rOI0);
      assertEquals(1486, rOI0.X());
      assertEquals(18, rOI0.Y());
      assertEquals((-1469), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      
      rOI0.setROI((-1), (-16777216), 671, (-1469));
      assertEquals((-16777216), rOI0.uy());
      assertEquals(671, rOI0.lx());
      assertEquals(673, rOI0.X());
      assertEquals((-1469), rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals(16775748, rOI0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract((-32768.0F), (-1.0F));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-3802), (-3802), 3003.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage0 = new ComplexImage(30, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(30, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 8, 24, 8, 556.407F, (float) 16);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(30, complexImage0.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 12;
      int int1 = 2982;
      // Undeclared exception!
      try { 
        complexImage0.add(12, 2982, (float) 12, (float) 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      
      ComplexImage complexImage3 = new ComplexImage(8, 627);
      assertNotNull(complexImage3);
      assertEquals(8, complexImage3.X());
      assertEquals(627, complexImage3.Y());
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      ComplexImage complexImage4 = new ComplexImage();
      assertNotNull(complexImage4);
      assertEquals(0, complexImage4.X());
      assertEquals(0, complexImage4.Y());
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1532.3143F, (float) 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(2222, 0);
      assertNotNull(complexImage0);
      assertEquals(2222, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      float float0 = (-993.2587F);
      ROI rOI0 = new ROI((-1347), (-269), 1, 0);
      assertNotNull(rOI0);
      assertEquals((-1347), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1349, rOI0.X());
      assertEquals((-269), rOI0.uy());
      assertEquals(270, rOI0.Y());
      
      int int1 = (-1787);
      int int2 = (-1263);
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(2222, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(2222, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      rOI0.setROI(0, (-1787), (-1347), (-509));
      assertEquals((-1347), rOI0.ux());
      assertEquals((-509), rOI0.ly());
      assertEquals(1348, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-1787), rOI0.uy());
      assertEquals(1279, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-463), 0, (-993.2587F), (float) (-1787));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int2 = 389;
      float float0 = 0.0F;
      int int3 = 0;
      int int4 = (-1710);
      ROI rOI0 = new ROI(0, (-1710), 0, 0);
      assertNotNull(rOI0);
      assertEquals((-1710), rOI0.uy());
      assertEquals(1711, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(0, 0, (-1850), 1);
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.Y());
      assertEquals((-1850), rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1851, rOI0.X());
      
      int int5 = 0;
      // Undeclared exception!
      try { 
        complexImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(16, 16);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      Complex complex0 = complexImage2.min();
      assertNotNull(complex0);
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      complexImage1.subtract(complexImage2);
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.getReal(16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(794.56F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.subtract(0.0F, 0.0F);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      float float0 = (-1.0F);
      ComplexImage complexImage3 = null;
      try {
        complexImage3 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = 0;
      ROI rOI1 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI1.setROI(0, 0, 0, 0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0, rOI0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.addbuffer(16, 16, 16, 1, (float) 16, (-1043.0F));
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage2.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(267039.8F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1043.1227F, realGrayImage0.min(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
      assertEquals(1043.1227F, realGrayImage0.max(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(2.78554848E8, realGrayImage0.sqrSum(), 0.01);
      assertEquals(267039.8F, realGrayImage0.absSum(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      ComplexImage complexImage3 = complexImage1.add(226.69595F, 820.30054F);
      assertNotNull(complexImage3);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage3.X());
      assertEquals(16, complexImage3.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1, 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage1.subtract(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage1, realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract(1010.7F, 1.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.set((-1943), (-1943), complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      
      complexImage1.subtract(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.multiply((float) (-2159), 0.0F);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.getReal(2902, 2902);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI((-1), (-1), (-238), 1452);
      assertNotNull(rOI0);
      assertEquals(1452, rOI0.ly());
      assertEquals((-1), rOI0.lx());
      assertEquals(1454, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      assertEquals((-238), rOI0.ux());
      assertEquals(238, rOI0.X());
      
      rOI0.setROI((-1), (-412), 1452, (-1));
      assertEquals(1452, rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals(1454, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(412, rOI0.Y());
      assertEquals((-412), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.set(1452, 1452, (float) 1452, (-1.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      Complex complex0 = complexImage2.min();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Complex complex1 = complexImage1.max(rOI0);
      assertNotNull(complex1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals((short)0, complex1.shortValue());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      
      complexImage2.multiply(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(8, complexImage2.Y());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(8, realGrayImage0.X());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      
      ComplexImage complexImage3 = complexImage0.subtract((-100.553F), 122.466354F);
      assertNotNull(complexImage3);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage3.X());
      assertEquals(8, complexImage3.Y());
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      complexImage0.add(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.set((-1298), 8, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float float0 = 2135.6F;
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ComplexImage complexImage1 = complexImage0.add(2135.6F, 2135.6F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.phaseImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(1, (-2364), (float) 1, (float) (-2364));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1752, 8, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 6650);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, 0, 1375, 1);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1376, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(1375, rOI0.lx());
      assertEquals(1, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.add(1375, 1375, (float) 1375, (-1778.93F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage2.subtract(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      ComplexImage complexImage3 = complexImage1.multiply(32767.0F, 1469.0F);
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag((-1526), (-1526), (float) (-1526), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = complexImage0.min();
      assertNotNull(complex1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complexImage1.max();
      assertNotNull(complex2);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals((short)0, complex2.shortValue());
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      ComplexImage complexImage2 = complexImage1.multiply((float) 8, (float) 8);
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(8, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      ComplexImage complexImage3 = complexImage2.addbuffer(8, 8, 8, (-959), (float) (-959), (float) (-959));
      assertNotNull(complexImage3);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage2.X());
      assertEquals(8, complexImage2.Y());
      assertEquals(8, complexImage3.Y());
      assertEquals(8, complexImage3.X());
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      
      complexImage1.divide(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-959), 655, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      
      ComplexImage complexImage3 = complexImage1.multiply((float) 8, 0.0F);
      assertNotNull(complexImage3);
      assertEquals(8, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage3.Y());
      assertEquals(8, complexImage3.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(128, 128, (float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      Complex complex1 = complexImage0.max();
      assertNotNull(complex1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex1, complex0);
      
      ComplexImage complexImage1 = complexImage0.multiply(1.0F, (-2458.0F));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage0.divide(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, (ROI) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.set(135, 0, complex0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-2130), (-2130), (-2130), 0);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals((-2130), rOI0.lx());
      assertEquals(2131, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-2130), rOI0.uy());
      assertEquals((-2130), rOI0.ux());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      
      int int0 = 0;
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      float float0 = 3642.2234F;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(0, 0, 0, 0, 0.0F, 3642.2234F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertNotNull(complexImage2);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      Complex complex0 = complexImage2.min();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI((-105), 16, (-756), 16);
      assertNotNull(rOI1);
      assertEquals(16, rOI1.uy());
      assertEquals(652, rOI1.X());
      assertEquals((-105), rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals((-756), rOI1.ux());
      assertEquals(16, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = complexImage0.min();
      assertNotNull(complex1);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex1, complex0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Complex complex2 = complexImage0.max(rOI0);
      assertNotNull(complex2);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      
      ComplexImage complexImage2 = complexImage1.divide(0.0F, (float) 8);
      assertNotNull(complexImage2);
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage2.Y());
      assertEquals(8, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage2.subtract(8, 8, 1366.0112F, (float) 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage0.subtract(complexImage1);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertEquals(8, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1, 8, 0.0F, (-3037.742F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertSame(complexImage0, complexImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(2681, (-105), 2681, 2681);
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals((-105), rOI1.uy());
      assertEquals(2681, rOI1.ly());
      assertEquals(2681, rOI1.lx());
      assertEquals(2681, rOI1.ux());
      assertEquals(2787, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI1.setROI((-105), (-105), (-105), 2681);
      assertEquals(1, rOI1.X());
      assertEquals((-105), rOI1.ux());
      assertEquals((-105), rOI1.uy());
      assertEquals(2681, rOI1.ly());
      assertEquals(2787, rOI1.Y());
      assertEquals((-105), rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      rOI2.setROI(2681, 2681, 16, (-105));
      assertEquals(16, rOI2.ux());
      assertEquals(2666, rOI2.X());
      assertEquals(2787, rOI2.Y());
      assertEquals((-105), rOI2.uy());
      assertEquals(2681, rOI2.lx());
      assertEquals(2681, rOI2.ly());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI1, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1752, 1752, (float) 1752, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(8, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      complexImage1.multiply(complexImage0, rOI0, rOI0);
      assertEquals(16, complexImage0.Y());
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(8, 8, 1622.9F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(1, 1, 1, 1, 0.0F, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract((-32768.0F), (-1.0F));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      float float0 = 1.0F;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.divide((-1809), 2, (-1.0F), 240.65F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = complexImage1.X();
      assertEquals(0, int0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, realGrayImage0.Y());
      assertEquals(16, realGrayImage0.X());
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, realGrayImage0.Y());
      assertEquals(16, realGrayImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.subtract(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 16, 775.8536F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.subtract(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag((-2766), 3867);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
