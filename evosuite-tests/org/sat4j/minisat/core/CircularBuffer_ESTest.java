/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:29:19 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.core.CircularBuffer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CircularBuffer_ESTest extends CircularBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(1636);
      circularBuffer0.push(1636);
      circularBuffer0.push(3);
      long long0 = circularBuffer0.average();
      assertEquals(819L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(2);
      circularBuffer0.push(2);
      circularBuffer0.push(2);
      long long0 = circularBuffer0.average();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(2);
      circularBuffer0.push(2);
      circularBuffer0.push(2);
      circularBuffer0.push(4);
      assertEquals(3L, circularBuffer0.average());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(1);
      circularBuffer0.push(2);
      boolean boolean0 = circularBuffer0.isFull();
      assertEquals(2L, circularBuffer0.average());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(1);
      circularBuffer0.push((-2087));
      long long0 = circularBuffer0.average();
      assertEquals((-2087L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(0);
      // Undeclared exception!
      try { 
        circularBuffer0.push(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.CircularBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CircularBuffer circularBuffer0 = null;
      try {
        circularBuffer0 = new CircularBuffer((-11));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.CircularBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(1507);
      long long0 = circularBuffer0.average();
      assertFalse(circularBuffer0.isFull());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(1);
      circularBuffer0.push(1);
      circularBuffer0.push(1);
      circularBuffer0.push(1);
      assertEquals(1L, circularBuffer0.average());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(0);
      circularBuffer0.clear();
      assertFalse(circularBuffer0.isFull());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(2);
      boolean boolean0 = circularBuffer0.isFull();
      assertFalse(boolean0);
  }
}
