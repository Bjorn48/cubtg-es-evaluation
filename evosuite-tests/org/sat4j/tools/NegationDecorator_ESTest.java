/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:15:36 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NegationDecorator_ESTest extends NegationDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      VecInt vecInt0 = new VecInt();
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      boolean boolean0 = negationDecorator0.isSatisfiable((IVecInt) vecInt0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      VecInt vecInt0 = new VecInt();
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      boolean boolean0 = negationDecorator0.isSatisfiable((IVecInt) vecInt0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      NegationDecorator<StatisticsSolver> negationDecorator0 = new NegationDecorator<StatisticsSolver>(statisticsSolver0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NegationDecorator<ClausalCardinalitiesDecorator<MinOneDecorator>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<MinOneDecorator>>((ClausalCardinalitiesDecorator<MinOneDecorator>) null);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(statisticsSolver0);
      NegationDecorator<Minimal4CardinalityModel> negationDecorator0 = new NegationDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      NegationDecorator<Minimal4CardinalityModel> negationDecorator0 = new NegationDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      VecInt vecInt0 = new VecInt();
      minimal4CardinalityModel0.setDecorated(negationDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>((DimacsStringSolver) null);
      VecInt vecInt0 = new VecInt(1768);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsOutputSolver0);
      NegationDecorator<Minimal4CardinalityModel> negationDecorator0 = new NegationDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-37));
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn(0, 0, 0, 0, 0).when(iSolver0).nextFreeVarId(anyBoolean());
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      NegationDecorator<Minimal4CardinalityModel> negationDecorator0 = new NegationDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(1229);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>((DimacsOutputSolver) null);
      Collection<Integer> collection0 = negationDecorator0.getAddedVars();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      NegationDecorator<Minimal4CardinalityModel> negationDecorator0 = new NegationDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      VecInt vecInt0 = new VecInt();
      negationDecorator0.addClause(vecInt0);
      boolean boolean0 = negationDecorator0.isSatisfiable((IVecInt) vecInt0, false);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(iSolver0).nextFreeVarId(anyBoolean());
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      NegationDecorator<Minimal4CardinalityModel> negationDecorator0 = new NegationDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      NegationDecorator<Minimal4CardinalityModel> negationDecorator0 = new NegationDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(negationDecorator0, 0, solutionFoundListener0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator1 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        negationDecorator1.addAtLeast(vecInt0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>((SingleSolutionDetector) null);
      VecInt vecInt0 = new VecInt(1768);
      // Undeclared exception!
      try { 
        negationDecorator0.addAtMost(vecInt0, 1768);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(706);
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        negationDecorator0.addExactly((IVecInt) null, 706);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      NegationDecorator<ModelIterator> negationDecorator0 = new NegationDecorator<ModelIterator>(modelIterator0);
      boolean boolean0 = negationDecorator0.isSatisfiable((IVecInt) null, true);
      assertFalse(boolean0);
  }
}
