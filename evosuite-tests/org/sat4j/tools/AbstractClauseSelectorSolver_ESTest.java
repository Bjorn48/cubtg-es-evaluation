/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:57:52 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractClauseSelectorSolver_ESTest extends AbstractClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      VecInt vecInt0 = new VecInt(0, 1);
      fullClauseSelectorSolver0.addClause(vecInt0);
      DimacsStringSolver dimacsStringSolver1 = new DimacsStringSolver();
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver1, true);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver1, vecInt0, 1);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver2 = new FullClauseSelectorSolver<ModelIterator>(subModelIterator0, false);
      fullClauseSelectorSolver2.addClause(vecInt0);
      assertEquals(2, dimacsStringSolver1.realNumberOfVariables());
      assertEquals(2, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(7);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      GateTranslator gateTranslator0 = new GateTranslator(solver0);
      NegationDecorator<GateTranslator> negationDecorator0 = new NegationDecorator<GateTranslator>(gateTranslator0);
      negationDecorator0.internalState();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      groupClauseSelectorSolver0.discardLastestVar();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, checkMUSSolutionListener0);
      SubModelIterator subModelIterator0 = new SubModelIterator(modelIteratorToSATAdapter0, vecInt0, 0L);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(subModelIterator0, false);
      fullClauseSelectorSolver0.isSatisfiable((IVecInt) vecInt0);
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(1804.52, 1804.52, 0.0, 604);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0, iVecInt0, checkMUSSolutionListener0);
      NegationDecorator<Minimal4InclusionModel> negationDecorator0 = new NegationDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      FullClauseSelectorSolver<NegationDecorator<Minimal4InclusionModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<NegationDecorator<Minimal4InclusionModel>>(negationDecorator0, true);
      boolean boolean0 = fullClauseSelectorSolver0.isSatisfiable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(statisticsSolver0, checkMUSSolutionListener0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(modelIteratorToSATAdapter0);
      SubModelIterator subModelIterator0 = new SubModelIterator(statisticsSolver0, iVecInt0, 0L);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(subModelIterator0, iVecInt0, checkMUSSolutionListener0);
      NegationDecorator<Minimal4InclusionModel> negationDecorator0 = new NegationDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      FullClauseSelectorSolver<NegationDecorator<Minimal4InclusionModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<NegationDecorator<Minimal4InclusionModel>>(negationDecorator0, true);
      boolean boolean0 = fullClauseSelectorSolver0.isSatisfiable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      Collection<Integer> collection0 = groupClauseSelectorSolver0.getAddedVars();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsOutputSolver0, solutionFoundListener0);
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(groupClauseSelectorSolver0, checkMUSSolutionListener0);
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(2);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(1588);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      SolutionCounter solutionCounter0 = new SolutionCounter(modelIteratorToSATAdapter0);
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      int int0 = negationDecorator0.createNewVar(iVecInt0);
      assertEquals(1, dimacsOutputSolver0.nVars());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(2);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      try { 
        groupClauseSelectorSolver0.isSatisfiable(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[7];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecorator0;
      minOneDecoratorArray0[3] = minOneDecorator0;
      minOneDecoratorArray0[4] = minOneDecorator0;
      minOneDecoratorArray0[5] = minOneDecorator0;
      minOneDecoratorArray0[6] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(false, stringArray0, minOneDecoratorArray0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(manyCore0);
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator1);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(modelIterator0, vecInt0);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>(abstractMinimalModel0, true);
      try { 
        fullClauseSelectorSolver0.isSatisfiable((IVecInt) vecInt0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator0);
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) readOnlyVecInt0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(691);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(2138);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.isSatisfiable(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1000);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.createNewVar(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>((MaxSatDecorator) null);
      GroupClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>>(lexicoDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.createNewVar((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      VecInt vecInt0 = new VecInt(0, 1);
      fullClauseSelectorSolver0.addClause(vecInt0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(fullClauseSelectorSolver0, vecInt0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(minimal4InclusionModel0, checkMUSSolutionListener0);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<ModelIterator>(modelIteratorToSATAdapter0, true);
      fullClauseSelectorSolver1.addNonControlableClause(vecInt0);
      assertEquals(1, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(1, dimacsStringSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      int[] intArray0 = new int[2];
      intArray0[0] = 1282;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addControlableClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NegationDecorator<Minimal4InclusionModel> negationDecorator0 = new NegationDecorator<Minimal4InclusionModel>((Minimal4InclusionModel) null);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(9);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, pureOrder0, noRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator0);
      boolean boolean0 = negationDecorator0.isSatisfiable(iVecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NegationDecorator<FullClauseSelectorSolver<GateTranslator>> negationDecorator0 = new NegationDecorator<FullClauseSelectorSolver<GateTranslator>>((FullClauseSelectorSolver<GateTranslator>) null);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0);
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      NegationDecorator<LexicoDecorator<AbstractMinimalModel>> negationDecorator0 = new NegationDecorator<LexicoDecorator<AbstractMinimalModel>>(lexicoDecorator0);
      negationDecorator0.externalState();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(10);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0, vecInt0);
      NegationDecorator<Minimal4InclusionModel> negationDecorator0 = new NegationDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(negationDecorator0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.isSatisfiable((IVecInt) vecInt0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(691);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(2138);
      try { 
        groupClauseSelectorSolver0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      try { 
        groupClauseSelectorSolver0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }
}
