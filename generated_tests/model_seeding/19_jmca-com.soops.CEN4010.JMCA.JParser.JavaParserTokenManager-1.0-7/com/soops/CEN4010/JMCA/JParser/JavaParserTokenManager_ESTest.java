/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 22:13:15 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.adjustBeginLineColumn((-1), (-1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("Y", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("oy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals('o', char0);
      
      javaParserTokenManager1.curLexState = 0;
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1279), token0.endLine);
      assertEquals((-1279), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1278), token0.beginColumn);
      assertEquals((-1278), token0.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1278), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals("y", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      Token token1 = Token.newToken((-1278));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = Token.newToken(0);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1279), token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals((-1278), token3.beginColumn);
      assertEquals((-1278), token3.endColumn);
      assertEquals((-1279), token3.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1278), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L28.MM3WSYkNt");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), 2048);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 11);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 11. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L28.MM3WSYkNt");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), 2048);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2050, token0.endColumn);
      assertEquals((-1279), token0.beginLine);
      assertEquals(2048, token0.beginColumn);
      assertEquals((-1279), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals(2050, javaCharStream0.getColumn());
      assertEquals(2050, javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals("L28", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1279), token1.endLine);
      assertEquals((-1279), token1.beginLine);
      assertEquals(85, token1.kind);
      assertEquals(2051, token1.beginColumn);
      assertEquals(2051, token1.endColumn);
      assertNotSame(token1, token0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals(2051, javaCharStream0.getColumn());
      assertEquals(2051, javaCharStream0.getBeginColumn());
      assertEquals(2051, javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals(".", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g{njl");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1279), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1279), token0.endLine);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1279), token0.beginColumn);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals("g", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1278), token1.beginColumn);
      assertEquals((-1279), token1.beginLine);
      assertEquals(79, token1.kind);
      assertEquals((-1279), token1.endLine);
      assertEquals((-1278), token1.endColumn);
      assertNotSame(token1, token0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1278), javaCharStream0.getBeginColumn());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals("{", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A#FV{v+:tD0v7+p}U");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3278, 13);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(13, token0.endColumn);
      assertEquals(3278, token0.endLine);
      assertEquals(13, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3278, token0.beginLine);
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals("A", token0.toString());
      assertNotNull(token0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NDmV^#F");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 21, 21);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.nextCharInd = 21;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 21, column 22.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=Sf<2miKCM%");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 313, 313);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(313, token0.beginColumn);
      assertEquals(313, token0.endColumn);
      assertEquals(313, token0.beginLine);
      assertEquals(87, token0.kind);
      assertEquals(313, token0.endLine);
      assertEquals(313, javaCharStream0.getBeginColumn());
      assertEquals(313, javaCharStream0.getEndLine());
      assertEquals(313, javaCharStream0.getColumn());
      assertEquals(313, javaCharStream0.getLine());
      assertEquals(313, javaCharStream0.getEndColumn());
      assertEquals(313, javaCharStream0.getBeginLine());
      assertEquals("=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(315, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(313, token1.beginLine);
      assertEquals(314, token1.beginColumn);
      assertEquals(313, token1.endLine);
      assertNotSame(token1, token0);
      assertEquals(314, javaCharStream0.getBeginColumn());
      assertEquals(315, javaCharStream0.getColumn());
      assertEquals(313, javaCharStream0.getEndLine());
      assertEquals(313, javaCharStream0.getLine());
      assertEquals(313, javaCharStream0.getBeginLine());
      assertEquals(315, javaCharStream0.getEndColumn());
      assertEquals("Sf", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 313, 313);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(33, token0.kind);
      assertEquals(317, token0.endColumn);
      assertEquals(313, token0.endLine);
      assertEquals(313, token0.beginColumn);
      assertEquals(313, token0.beginLine);
      assertEquals(317, javaCharStream0.getEndColumn());
      assertEquals(317, javaCharStream0.getColumn());
      assertEquals(313, javaCharStream0.getEndLine());
      assertEquals(313, javaCharStream0.getBeginLine());
      assertEquals(313, javaCharStream0.getBeginColumn());
      assertEquals(313, javaCharStream0.getLine());
      assertEquals("float", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("synchronized");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("pb0tE?S9V))");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("pb0tE", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("synchronized");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, (-1988));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(95, token0.beginLine);
      assertEquals(95, token0.endLine);
      assertEquals((-1988), token0.beginColumn);
      assertEquals(56, token0.kind);
      assertEquals((-1977), token0.endColumn);
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals((-1977), javaCharStream0.getColumn());
      assertEquals((-1988), javaCharStream0.getBeginColumn());
      assertEquals((-1977), javaCharStream0.getEndColumn());
      assertEquals("synchronized", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eC~v}g_D3:+fO)N#en");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1279), token0.beginColumn);
      assertEquals((-1279), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1279), token0.endLine);
      assertEquals((-1278), token0.endColumn);
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals("eC", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1279), token1.endLine);
      assertEquals((-1279), token1.beginLine);
      assertEquals((-1277), token1.endColumn);
      assertEquals(90, token1.kind);
      assertEquals((-1277), token1.beginColumn);
      assertNotSame(token1, token0);
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1277), javaCharStream0.getColumn());
      assertEquals((-1277), javaCharStream0.getBeginColumn());
      assertEquals((-1277), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals("~", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1279), token2.endLine);
      assertEquals((-1279), token2.beginLine);
      assertEquals((-1276), token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals((-1276), token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1276), javaCharStream0.getBeginColumn());
      assertEquals((-1276), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1276), javaCharStream0.getColumn());
      assertEquals("v", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1279), token2.endLine);
      assertEquals((-1279), token2.beginLine);
      assertEquals((-1276), token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals((-1276), token2.endColumn);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1276), javaCharStream0.getBeginColumn());
      assertEquals((-1276), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1276), javaCharStream0.getColumn());
      assertEquals("v", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mF:5kW");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 17);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals('m', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, token0.endLine);
      assertEquals(17, token0.beginLine);
      assertEquals(18, token0.beginColumn);
      assertEquals(18, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals("F", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(19, token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals(17, token1.endLine);
      assertEquals(17, token1.beginLine);
      assertEquals(19, token1.beginColumn);
      assertNotSame(token1, token0);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(":", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pb0tE?S9V))");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('p', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("b0tE", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B<G");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1134), (-1134));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1134), token0.endColumn);
      assertEquals((-1134), token0.beginColumn);
      assertEquals((-1134), token0.beginLine);
      assertEquals((-1134), token0.endLine);
      assertEquals((-1134), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1134), javaCharStream0.getEndColumn());
      assertEquals((-1134), javaCharStream0.getBeginColumn());
      assertEquals("B", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1134), token1.endLine);
      assertEquals((-1133), token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals((-1133), token1.beginColumn);
      assertEquals((-1134), token1.beginLine);
      assertNotSame(token1, token0);
      assertEquals((-1133), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1133), javaCharStream0.getEndColumn());
      assertEquals((-1133), javaCharStream0.getBeginColumn());
      assertEquals("<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1134), token0.endColumn);
      assertEquals((-1134), token0.beginColumn);
      assertEquals((-1134), token0.beginLine);
      assertEquals((-1134), token0.endLine);
      assertNotSame(token0, token1);
      assertEquals((-1133), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1133), javaCharStream0.getEndColumn());
      assertEquals((-1133), javaCharStream0.getBeginColumn());
      assertEquals("B", token0.toString());
      assertFalse(token0.equals((Object)token1));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1134), token0.endColumn);
      assertEquals((-1134), token0.beginColumn);
      assertEquals((-1134), token0.beginLine);
      assertEquals((-1134), token0.endLine);
      assertNotSame(token0, token1);
      assertEquals((-1133), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1133), javaCharStream0.getEndColumn());
      assertEquals((-1133), javaCharStream0.getBeginColumn());
      assertEquals("B", token0.toString());
      assertFalse(token0.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eC~v}g_D3:+fO)N#en");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals('e', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1278), token0.endColumn);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1279), token0.endLine);
      assertEquals((-1278), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1278), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals("C", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (-759));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fhJ[s_^z.");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 29, 29);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(31, token0.endColumn);
      assertEquals(29, token0.endLine);
      assertEquals(29, token0.beginLine);
      assertEquals(29, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals("fhJ", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mF:5kW");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2048, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals((-1), token0.beginColumn);
      assertEquals(2048, token0.beginLine);
      assertEquals(2048, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(2048, javaCharStream0.getEndLine());
      assertEquals(2048, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(2048, javaCharStream0.getLine());
      assertEquals("mF", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(2048, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals(2048, token1.beginLine);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2048, javaCharStream0.getBeginLine());
      assertEquals(2048, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(":", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token2.endColumn);
      assertEquals(2048, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(66, token2.kind);
      assertEquals(2048, token2.beginLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2048, javaCharStream0.getBeginLine());
      assertEquals(2048, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("5", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.SwitchTo(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\r\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 111, 6);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 111, column 7.  Encountered: \"\\r\" (13), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f[se^z.");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1887), (-1852));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1852), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1887), token0.endLine);
      assertEquals((-1852), token0.endColumn);
      assertEquals((-1887), token0.beginLine);
      assertEquals((-1852), javaCharStream0.getBeginColumn());
      assertEquals((-1852), javaCharStream0.getEndColumn());
      assertEquals((-1887), javaCharStream0.getBeginLine());
      assertEquals((-1887), javaCharStream0.getLine());
      assertEquals((-1887), javaCharStream0.getEndLine());
      assertEquals((-1852), javaCharStream0.getColumn());
      assertEquals("f", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1852), javaCharStream0.getBeginColumn());
      assertEquals((-1852), javaCharStream0.getEndColumn());
      assertEquals((-1887), javaCharStream0.getBeginLine());
      assertEquals((-1887), javaCharStream0.getLine());
      assertEquals((-1887), javaCharStream0.getEndLine());
      assertEquals((-1852), javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1851), token1.endColumn);
      assertEquals(81, token1.kind);
      assertEquals((-1887), token1.beginLine);
      assertEquals((-1851), token1.beginColumn);
      assertEquals((-1887), token1.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals((-1851), javaCharStream0.getEndColumn());
      assertEquals((-1887), javaCharStream0.getBeginLine());
      assertEquals((-1851), javaCharStream0.getBeginColumn());
      assertEquals((-1887), javaCharStream0.getLine());
      assertEquals((-1851), javaCharStream0.getColumn());
      assertEquals((-1887), javaCharStream0.getEndLine());
      assertEquals("[", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1887), token2.beginLine);
      assertEquals((-1887), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals((-1850), token2.beginColumn);
      assertEquals((-1849), token2.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-1849), javaCharStream0.getColumn());
      assertEquals((-1849), javaCharStream0.getEndColumn());
      assertEquals((-1850), javaCharStream0.getBeginColumn());
      assertEquals((-1887), javaCharStream0.getBeginLine());
      assertEquals((-1887), javaCharStream0.getLine());
      assertEquals((-1887), javaCharStream0.getEndLine());
      assertEquals("se", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1887), token3.beginLine);
      assertEquals((-1887), token3.endLine);
      assertEquals(107, token3.kind);
      assertEquals((-1848), token3.endColumn);
      assertEquals((-1848), token3.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertEquals((-1848), javaCharStream0.getBeginColumn());
      assertEquals((-1848), javaCharStream0.getEndColumn());
      assertEquals((-1848), javaCharStream0.getColumn());
      assertEquals((-1887), javaCharStream0.getBeginLine());
      assertEquals((-1887), javaCharStream0.getLine());
      assertEquals((-1887), javaCharStream0.getEndLine());
      assertEquals("^", token3.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token4.kind);
      assertEquals((-1847), token4.beginColumn);
      assertEquals((-1887), token4.endLine);
      assertEquals((-1847), token4.endColumn);
      assertEquals((-1887), token4.beginLine);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertEquals((-1847), javaCharStream0.getColumn());
      assertEquals((-1847), javaCharStream0.getBeginColumn());
      assertEquals((-1887), javaCharStream0.getBeginLine());
      assertEquals((-1887), javaCharStream0.getLine());
      assertEquals((-1847), javaCharStream0.getEndColumn());
      assertEquals((-1887), javaCharStream0.getEndLine());
      assertEquals("z", token4.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertNotNull(token4);
      
      Token token5 = javaParserTokenManager1.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1887), token5.beginLine);
      assertEquals((-1847), token5.endColumn);
      assertEquals((-1847), token5.beginColumn);
      assertEquals(107, token5.kind);
      assertEquals((-1887), token5.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertEquals((-1847), javaCharStream0.getColumn());
      assertEquals((-1847), javaCharStream0.getBeginColumn());
      assertEquals((-1887), javaCharStream0.getBeginLine());
      assertEquals((-1887), javaCharStream0.getLine());
      assertEquals((-1847), javaCharStream0.getEndColumn());
      assertEquals((-1887), javaCharStream0.getEndLine());
      assertEquals("^", token5.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertNotNull(token5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("mF:5kW");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), 625);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals(625, token0.beginColumn);
      assertEquals(626, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(626, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(626, javaCharStream0.getEndColumn());
      assertEquals(625, javaCharStream0.getBeginColumn());
      assertEquals("mF", token0.toString());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      Token token1 = Token.newToken(1);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNotSame(token1, token0);
      assertNull(token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(627, token2.endColumn);
      assertEquals(627, token2.beginColumn);
      assertEquals((-1), token2.endLine);
      assertEquals(92, token2.kind);
      assertEquals((-1), token2.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(627, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(627, javaCharStream0.getEndColumn());
      assertEquals(627, javaCharStream0.getBeginColumn());
      assertEquals(":", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9U");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1279), token0.endColumn);
      assertEquals((-1279), token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals((-1279), token0.beginColumn);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals("9", token0.toString());
      assertNotNull(token0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1278), token1.endColumn);
      assertEquals((-1278), token1.beginColumn);
      assertEquals((-1279), token1.beginLine);
      assertEquals((-1279), token1.endLine);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1278), javaCharStream0.getBeginColumn());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals("U", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1278), javaCharStream0.getBeginColumn());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.input_stream = javaCharStream0;
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1278), javaCharStream0.getBeginColumn());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaParserTokenManager1.input_stream.getEndLine());
      assertEquals((-1279), javaParserTokenManager1.input_stream.getBeginLine());
      assertEquals((-1278), javaParserTokenManager1.input_stream.getColumn());
      assertEquals((-1279), javaParserTokenManager1.input_stream.getLine());
      assertEquals((-1278), javaParserTokenManager1.input_stream.getEndColumn());
      assertEquals((-1278), javaParserTokenManager1.input_stream.getBeginColumn());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1278), token2.beginColumn);
      assertEquals((-1278), token2.endColumn);
      assertEquals((-1279), token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-1279), token2.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1278), javaCharStream0.getBeginColumn());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      String string0 = token2.toString();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1278), token2.beginColumn);
      assertEquals((-1278), token2.endColumn);
      assertEquals((-1279), token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-1279), token2.beginLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1278), javaCharStream0.getBeginColumn());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token3 = Token.newToken((-1279));
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.beginLine);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNull(token3.toString());
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mF:5kW");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 17);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals('m', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(17, token0.endLine);
      assertEquals(18, token0.endColumn);
      assertEquals(18, token0.beginColumn);
      assertEquals(17, token0.beginLine);
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals("F", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(19, token1.beginColumn);
      assertEquals(17, token1.beginLine);
      assertEquals(19, token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals(17, token1.endLine);
      assertNotSame(token1, token0);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(":", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("...");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, (-1203));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(121, token0.kind);
      assertEquals(18, token0.beginLine);
      assertEquals((-1201), token0.endColumn);
      assertEquals((-1203), token0.beginColumn);
      assertEquals(18, token0.endLine);
      assertEquals(18, javaCharStream0.getLine());
      assertEquals((-1201), javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals((-1203), javaCharStream0.getBeginColumn());
      assertEquals((-1201), javaCharStream0.getColumn());
      assertEquals("...", token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("Pbn");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.lengthOfMatch = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("6", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/bUN,");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1988), (-1988));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1988), token0.endColumn);
      assertEquals((-1988), token0.beginColumn);
      assertEquals((-1988), token0.endLine);
      assertEquals((-1988), token0.beginLine);
      assertEquals(104, token0.kind);
      assertEquals((-1988), javaCharStream0.getEndColumn());
      assertEquals((-1988), javaCharStream0.getBeginLine());
      assertEquals((-1988), javaCharStream0.getLine());
      assertEquals((-1988), javaCharStream0.getColumn());
      assertEquals((-1988), javaCharStream0.getBeginColumn());
      assertEquals((-1988), javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1988), token1.endLine);
      assertEquals((-1988), token1.beginLine);
      assertEquals((-1988), token1.beginColumn);
      assertEquals((-1988), token1.endColumn);
      assertEquals(104, token1.kind);
      assertNotSame(token1, token0);
      assertEquals((-1988), javaCharStream0.getEndColumn());
      assertEquals((-1988), javaCharStream0.getBeginLine());
      assertEquals((-1988), javaCharStream0.getLine());
      assertEquals((-1988), javaCharStream0.getColumn());
      assertEquals((-1988), javaCharStream0.getBeginColumn());
      assertEquals((-1988), javaCharStream0.getEndLine());
      assertEquals("/", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mF5kW");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("mF5kW", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".F:lkW");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3, 103);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token0.endLine);
      assertEquals(85, token0.kind);
      assertEquals(3, token0.beginLine);
      assertEquals(103, token0.beginColumn);
      assertEquals(103, token0.endColumn);
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SwitchTo(0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f[se^z.");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1988), (-1988));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1988), token0.endColumn);
      assertEquals((-1988), token0.beginLine);
      assertEquals((-1988), token0.beginColumn);
      assertEquals((-1988), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1988), javaCharStream0.getEndLine());
      assertEquals((-1988), javaCharStream0.getLine());
      assertEquals((-1988), javaCharStream0.getBeginLine());
      assertEquals((-1988), javaCharStream0.getBeginColumn());
      assertEquals((-1988), javaCharStream0.getEndColumn());
      assertEquals((-1988), javaCharStream0.getColumn());
      assertEquals("f", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("do");
      assertNotNull(stringReader0);
      
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3278, 3278);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3279, token0.endColumn);
      assertEquals(25, token0.kind);
      assertEquals(3278, token0.endLine);
      assertEquals(3278, token0.beginLine);
      assertEquals(3278, token0.beginColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3279, javaCharStream0.getColumn());
      assertEquals(3279, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals("do", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 43, 1366);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager((JavaCharStream) null);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3278, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(3279, token1.beginColumn);
      assertEquals(3279, token1.endColumn);
      assertEquals(3278, token1.endLine);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertEquals(3279, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3279, javaCharStream0.getColumn());
      assertEquals(3279, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      StringReader stringReader1 = new StringReader("do");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader1.read();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(100, int0);
      
      stringReader0.close();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 2297, (-1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertNotNull(javaParserTokenManager3);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3279, token2.beginColumn);
      assertEquals(3278, token2.beginLine);
      assertEquals(3278, token2.endLine);
      assertEquals(3279, token2.endColumn);
      assertEquals(0, token2.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(3279, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3279, javaCharStream0.getColumn());
      assertEquals(3279, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      String string0 = token0.toString();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3279, token0.endColumn);
      assertEquals(25, token0.kind);
      assertEquals(3278, token0.endLine);
      assertEquals(3278, token0.beginLine);
      assertEquals(3278, token0.beginColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertEquals(3279, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3279, javaCharStream0.getColumn());
      assertEquals(3279, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals("do", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertEquals("do", string0);
      assertNotNull(string0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 49. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"Jo");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3278, 3278);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3278, column 3281.  Encountered: <EOF> after : \"\\\"Jo\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1280), token0.beginColumn);
      assertEquals((-1280), token0.endColumn);
      assertEquals((-1279), token0.endLine);
      assertEquals(0, token0.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      javaParserTokenManager1.jjround = 1137;
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      
      String string0 = token0.toString();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1280), token0.beginColumn);
      assertEquals((-1280), token0.endColumn);
      assertEquals((-1279), token0.endLine);
      assertEquals(0, token0.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      token0.endLine = 0;
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      assertEquals("", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1280), token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals((-1280), token0.endColumn);
      assertEquals(0, token0.kind);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.debugStream = javaParserTokenManager0.debugStream;
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1279), token1.beginLine);
      assertEquals((-1279), token1.endLine);
      assertEquals((-1280), token1.beginColumn);
      assertEquals((-1280), token1.endColumn);
      assertEquals(0, token1.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1279), token1.beginLine);
      assertEquals((-1279), token1.endLine);
      assertEquals((-1280), token1.beginColumn);
      assertEquals((-1280), token1.endColumn);
      assertEquals(0, token1.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1280), token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals((-1280), token0.endColumn);
      assertEquals(0, token0.kind);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1280), token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals((-1279), token2.beginLine);
      assertEquals((-1280), token2.beginColumn);
      assertEquals((-1279), token2.endLine);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-1280), javaCharStream1.getBeginColumn());
      assertEquals((-1280), javaCharStream1.getColumn());
      assertEquals((-1279), javaCharStream1.getLine());
      assertEquals((-1280), javaCharStream1.getEndColumn());
      assertEquals((-1279), javaCharStream1.getBeginLine());
      assertEquals((-1279), javaCharStream1.getEndLine());
      assertEquals("", token2.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(535);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 535. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1279), token0.endColumn);
      assertEquals((-1279), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1279), token0.endLine);
      assertEquals((-1279), token0.beginColumn);
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals("D", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SwitchTo(0);
      javaParserTokenManager0.SwitchTo(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)126;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)126, (byte)126}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)126, (byte)126, (byte)126, (byte)126, (byte)126}, byteArray0);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      StringBuffer stringBuffer0 = javaParserTokenManager0.image;
      assertNull(stringBuffer0);
      
      int int0 = (-509);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit((JavaCharStream) null, (int) (byte)126);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 126. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eC~v}g_D3:+fO)N#en");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1278), token0.endColumn);
      assertEquals((-1279), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1279), token0.beginColumn);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals("eC", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1279), token1.endLine);
      assertEquals(90, token1.kind);
      assertEquals((-1277), token1.beginColumn);
      assertEquals((-1277), token1.endColumn);
      assertEquals((-1279), token1.beginLine);
      assertNotSame(token1, token0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1277), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1277), javaCharStream0.getColumn());
      assertEquals((-1277), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals("~", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1279), token2.beginLine);
      assertEquals((-1276), token2.beginColumn);
      assertEquals((-1279), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals((-1276), token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1276), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1276), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1276), javaCharStream0.getColumn());
      assertEquals("v", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(80, token3.kind);
      assertEquals((-1279), token3.beginLine);
      assertEquals((-1279), token3.endLine);
      assertEquals((-1275), token3.beginColumn);
      assertEquals((-1275), token3.endColumn);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1275), javaCharStream0.getBeginColumn());
      assertEquals((-1275), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1275), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals("}", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",do");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3278, 3278);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3278, token0.beginColumn);
      assertEquals(84, token0.kind);
      assertEquals(3278, token0.endColumn);
      assertEquals(3278, token0.endLine);
      assertEquals(3278, token0.beginLine);
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3278, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getColumn());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3278, token0.beginColumn);
      assertEquals(84, token0.kind);
      assertEquals(3278, token0.endColumn);
      assertEquals(3278, token0.endLine);
      assertEquals(3278, token0.beginLine);
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3278, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getColumn());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(",", token0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("synchonize");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(10, token0.endColumn);
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("synchonize", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]2");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(82, token0.kind);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1279), token0.endColumn);
      assertEquals((-1279), token0.beginColumn);
      assertEquals((-1279), token0.endLine);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals("]", token0.toString());
      assertNotNull(token0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1279), token1.beginColumn);
      assertEquals((-1279), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1279), token1.endLine);
      assertEquals((-1279), token1.endColumn);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B<W");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1134), (-1134));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('B', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1134), token0.endColumn);
      assertEquals((-1134), token0.beginColumn);
      assertEquals(88, token0.kind);
      assertEquals((-1134), token0.endLine);
      assertEquals((-1134), token0.beginLine);
      assertEquals((-1134), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1134), javaCharStream0.getBeginColumn());
      assertEquals((-1134), javaCharStream0.getEndColumn());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1133), token1.endColumn);
      assertEquals((-1133), token1.beginColumn);
      assertEquals((-1134), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-1134), token1.endLine);
      assertNotSame(token1, token0);
      assertEquals((-1133), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals((-1133), javaCharStream0.getEndColumn());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1133), javaCharStream0.getBeginColumn());
      assertEquals("W", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1133), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals((-1133), javaCharStream0.getEndColumn());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1133), javaCharStream0.getBeginColumn());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1133), token2.endColumn);
      assertEquals((-1133), token2.beginColumn);
      assertEquals((-1134), token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals((-1134), token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-1133), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals((-1133), javaCharStream0.getEndColumn());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1133), javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("final");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken(24);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1279), token1.beginLine);
      assertEquals((-1279), token1.endLine);
      assertEquals((-1279), token1.beginColumn);
      assertEquals((-1275), token1.endColumn);
      assertEquals(31, token1.kind);
      assertNotSame(token1, token0);
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1275), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1275), javaCharStream0.getColumn());
      assertEquals("final", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sD");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1279), token0.endLine);
      assertEquals((-1278), token0.endColumn);
      assertEquals((-1279), token0.beginColumn);
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1278), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1278), javaCharStream0.getColumn());
      assertEquals("sD", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=Sf<2miKCM%");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      token_GTToken0.endColumn = 0;
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertNull(token_GTToken1.toString());
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      
      String string0 = token_GTToken1.toString();
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertNotSame(token_GTToken1, token_GTToken0);
      assertNull(token_GTToken1.toString());
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(string0);
      
      Token token0 = Token.newToken(44);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token1.kind);
      assertEquals((-1279), token1.endLine);
      assertEquals((-1279), token1.endColumn);
      assertEquals((-1279), token1.beginColumn);
      assertEquals((-1279), token1.beginLine);
      assertNotSame(token1, token0);
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals("=", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f[se^z.");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("%3");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1988), (-1988));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1988), token0.beginLine);
      assertEquals((-1988), token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals((-1988), token0.endColumn);
      assertEquals((-1988), token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1988), javaCharStream0.getEndLine());
      assertEquals((-1988), javaCharStream0.getLine());
      assertEquals((-1988), javaCharStream0.getColumn());
      assertEquals((-1988), javaCharStream0.getBeginLine());
      assertEquals((-1988), javaCharStream0.getBeginColumn());
      assertEquals((-1988), javaCharStream0.getEndColumn());
      assertEquals("%", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1988), token0.beginLine);
      assertEquals((-1988), token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals((-1988), token0.endColumn);
      assertEquals((-1988), token0.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1988), javaCharStream0.getEndLine());
      assertEquals((-1988), javaCharStream0.getLine());
      assertEquals((-1988), javaCharStream0.getColumn());
      assertEquals((-1988), javaCharStream0.getBeginLine());
      assertEquals((-1988), javaCharStream0.getBeginColumn());
      assertEquals((-1988), javaCharStream0.getEndColumn());
      assertEquals("%", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mF:5kW");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 17);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals('m', char0);
      
      StringReader stringReader1 = new StringReader("Pbn");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("Pbn", token0.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals("", token1.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals("", token2.toString());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals("Pbn", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("...");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3278, 3278);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(121, token0.kind);
      assertEquals(3280, token0.endColumn);
      assertEquals(3278, token0.endLine);
      assertEquals(3278, token0.beginColumn);
      assertEquals(3278, token0.beginLine);
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3280, javaCharStream0.getColumn());
      assertEquals(3280, javaCharStream0.getEndColumn());
      assertEquals("...", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(3280, token1.endColumn);
      assertEquals(3278, token1.endLine);
      assertEquals(3280, token1.beginColumn);
      assertEquals(3278, token1.beginLine);
      assertNotSame(token1, token0);
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3280, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3280, javaCharStream0.getColumn());
      assertEquals(3280, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fXa!-AmZ");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals("fXa", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(89, token1.kind);
      assertEquals((-1), token1.endLine);
      assertEquals((-1), token1.beginLine);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("!", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B<W");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1134), (-1134));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1134), token0.beginColumn);
      assertEquals((-1134), token0.endColumn);
      assertEquals((-1134), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1134), token0.endLine);
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1134), javaCharStream0.getBeginColumn());
      assertEquals((-1134), javaCharStream0.getEndColumn());
      assertEquals((-1134), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals("B", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1134), token1.beginLine);
      assertEquals((-1133), token1.beginColumn);
      assertEquals(88, token1.kind);
      assertEquals((-1134), token1.endLine);
      assertEquals((-1133), token1.endColumn);
      assertNotSame(token1, token0);
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1133), javaCharStream0.getEndColumn());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1133), javaCharStream0.getColumn());
      assertEquals((-1133), javaCharStream0.getBeginColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1134), token2.endLine);
      assertEquals((-1134), token2.beginLine);
      assertEquals((-1132), token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals((-1132), token2.beginColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-1134), javaCharStream0.getBeginLine());
      assertEquals((-1132), javaCharStream0.getEndColumn());
      assertEquals((-1134), javaCharStream0.getLine());
      assertEquals((-1132), javaCharStream0.getBeginColumn());
      assertEquals((-1134), javaCharStream0.getEndLine());
      assertEquals((-1132), javaCharStream0.getColumn());
      assertEquals("W", token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".F:lkW");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.endColumn);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token1.endColumn);
      assertEquals((-1), token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals((-1), token1.endLine);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("F", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(92, token2.kind);
      assertEquals((-1), token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.endColumn);
      assertEquals((-1), token2.endLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(":", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1), token3.beginLine);
      assertEquals(2, token3.beginColumn);
      assertEquals((-1), token3.endLine);
      assertEquals(4, token3.endColumn);
      assertEquals(74, token3.kind);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("lkW", token3.toString());
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NDmV^#F");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 21, 21);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(21, token0.beginColumn);
      assertEquals(21, token0.beginLine);
      assertEquals(21, token0.endLine);
      assertEquals(24, token0.endColumn);
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals("NDmV", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pQZLe");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3638, 3638);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3638, javaCharStream0.getEndLine());
      assertEquals(3638, javaCharStream0.getBeginLine());
      assertEquals(3638, javaCharStream0.getColumn());
      assertEquals(3638, javaCharStream0.getEndColumn());
      assertEquals(3638, javaCharStream0.getLine());
      assertEquals(3638, javaCharStream0.getBeginColumn());
      assertEquals('p', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(3642, token0.endColumn);
      assertEquals(3639, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3638, token0.endLine);
      assertEquals(3638, token0.beginLine);
      assertEquals(3642, javaCharStream0.getColumn());
      assertEquals(3638, javaCharStream0.getEndLine());
      assertEquals(3638, javaCharStream0.getBeginLine());
      assertEquals(3642, javaCharStream0.getEndColumn());
      assertEquals(3638, javaCharStream0.getLine());
      assertEquals(3639, javaCharStream0.getBeginColumn());
      assertEquals("QZLe", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mF:5kW");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 17);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals(109, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals('F', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token0.kind);
      assertEquals(17, token0.beginLine);
      assertEquals(18, token0.beginColumn);
      assertEquals(17, token0.endLine);
      assertEquals(18, token0.endColumn);
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(":", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token1.kind);
      assertEquals(17, token1.beginLine);
      assertEquals(19, token1.endColumn);
      assertEquals(17, token1.endLine);
      assertEquals(19, token1.beginColumn);
      assertNotSame(token1, token0);
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals("5", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.adjustBeginLineColumn((-1), (-1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(94, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("<=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("synchonize");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L28.MM3WSYkNt");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2048, 2048);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('L', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2048, token0.beginColumn);
      assertEquals(2050, token0.endColumn);
      assertEquals(2048, token0.endLine);
      assertEquals(70, token0.kind);
      assertEquals(2048, token0.beginLine);
      assertEquals(2048, javaCharStream0.getEndLine());
      assertEquals(2050, javaCharStream0.getEndColumn());
      assertEquals(2050, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getBeginLine());
      assertEquals(2048, javaCharStream0.getLine());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals("28.", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("synchronized");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 23, 23);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(10, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.beginColumn);
      assertEquals(23, token0.beginLine);
      assertEquals(23, token0.endLine);
      assertEquals(33, token0.endColumn);
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals("ynchronized", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(33, token1.beginColumn);
      assertEquals(23, token1.beginLine);
      assertEquals(33, token1.endColumn);
      assertEquals(23, token1.endLine);
      assertNotSame(token1, token0);
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(23, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BynchonNze");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(10, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("BynchonNze", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",do");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3278, 3278);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3278, token0.endLine);
      assertEquals(3278, token0.beginLine);
      assertEquals(3278, token0.beginColumn);
      assertEquals(3278, token0.endColumn);
      assertEquals(84, token0.kind);
      assertEquals(3278, javaCharStream0.getColumn());
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3278, javaCharStream0.getColumn());
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3278, javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaCharStream0.nextCharInd = 3278;
      assertEquals(3278, javaCharStream0.getColumn());
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3278, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3278, token1.endColumn);
      assertEquals(3278, token1.endLine);
      assertEquals(3278, token1.beginLine);
      assertEquals(3278, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(3278, javaCharStream0.getColumn());
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      MockFile mockFile0 = new MockFile("y4c@_BJWfE!", "<token of kind 7>");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.isDirectory();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/y4c@_BJWfE!", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/y4c@_BJWfE!/<token of kind 7>", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("<token of kind 7>", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean0);
      
      String string0 = mockFile0.getName();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/y4c@_BJWfE!", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/y4c@_BJWfE!/<token of kind 7>", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("<token of kind 7>", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals("<token of kind 7>", string0);
      assertNotNull(string0);
      
      javaParserTokenManager0.defaultLexState = 3278;
      assertEquals(3278, javaCharStream0.getColumn());
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3278, javaCharStream0.getLine());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4244), (-4244));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4244), token0.endColumn);
      assertEquals((-4244), token0.beginLine);
      assertEquals((-4244), token0.beginColumn);
      assertEquals((-4244), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-4244), javaCharStream0.getBeginLine());
      assertEquals((-4244), javaCharStream0.getEndLine());
      assertEquals((-4244), javaCharStream0.getBeginColumn());
      assertEquals((-4244), javaCharStream0.getColumn());
      assertEquals((-4244), javaCharStream0.getLine());
      assertEquals((-4244), javaCharStream0.getEndColumn());
      assertEquals("E", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4244), token1.endColumn);
      assertEquals((-4244), token1.beginLine);
      assertEquals((-4244), token1.beginColumn);
      assertEquals((-4244), token1.endLine);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      assertEquals((-4244), javaCharStream0.getBeginLine());
      assertEquals((-4244), javaCharStream0.getEndLine());
      assertEquals((-4244), javaCharStream0.getBeginColumn());
      assertEquals((-4244), javaCharStream0.getColumn());
      assertEquals((-4244), javaCharStream0.getLine());
      assertEquals((-4244), javaCharStream0.getEndColumn());
      assertEquals("E", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      StringReader stringReader1 = new StringReader("Pbn");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals((-4244), token2.beginColumn);
      assertEquals((-4244), token2.beginLine);
      assertEquals((-4244), token2.endLine);
      assertEquals((-4244), token2.endColumn);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-4244), javaCharStream0.getBeginLine());
      assertEquals((-4244), javaCharStream0.getEndLine());
      assertEquals((-4244), javaCharStream0.getBeginColumn());
      assertEquals((-4244), javaCharStream0.getColumn());
      assertEquals((-4244), javaCharStream0.getLine());
      assertEquals((-4244), javaCharStream0.getEndColumn());
      assertEquals("E", token2.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4244), token1.endColumn);
      assertEquals((-4244), token1.beginLine);
      assertEquals((-4244), token1.beginColumn);
      assertEquals((-4244), token1.endLine);
      assertEquals(74, token1.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertEquals((-4244), javaCharStream0.getBeginLine());
      assertEquals((-4244), javaCharStream0.getEndLine());
      assertEquals((-4244), javaCharStream0.getBeginColumn());
      assertEquals((-4244), javaCharStream0.getColumn());
      assertEquals((-4244), javaCharStream0.getLine());
      assertEquals((-4244), javaCharStream0.getEndColumn());
      assertEquals("E", token1.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4244), token0.endColumn);
      assertEquals((-4244), token0.beginLine);
      assertEquals((-4244), token0.beginColumn);
      assertEquals((-4244), token0.endLine);
      assertEquals(74, token0.kind);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertEquals((-4244), javaCharStream0.getBeginLine());
      assertEquals((-4244), javaCharStream0.getEndLine());
      assertEquals((-4244), javaCharStream0.getBeginColumn());
      assertEquals((-4244), javaCharStream0.getColumn());
      assertEquals((-4244), javaCharStream0.getLine());
      assertEquals((-4244), javaCharStream0.getEndColumn());
      assertEquals("E", token0.toString());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mF5kW");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, 17);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals(109, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals('F', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token0.beginColumn);
      assertEquals(18, token0.endColumn);
      assertEquals(17, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(17, token0.beginLine);
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals("5", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token1.beginLine);
      assertEquals(19, token1.beginColumn);
      assertEquals(20, token1.endColumn);
      assertEquals(17, token1.endLine);
      assertEquals(74, token1.kind);
      assertNotSame(token1, token0);
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals("kW", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f[spe^z.");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3278, 3278);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('f', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3278, token0.endLine);
      assertEquals(3278, token0.endColumn);
      assertEquals(81, token0.kind);
      assertEquals(3278, token0.beginLine);
      assertEquals(3278, token0.beginColumn);
      assertEquals(3278, javaCharStream0.getLine());
      assertEquals(3278, javaCharStream0.getEndColumn());
      assertEquals(3278, javaCharStream0.getBeginColumn());
      assertEquals(3278, javaCharStream0.getEndLine());
      assertEquals(3278, javaCharStream0.getBeginLine());
      assertEquals(3278, javaCharStream0.getColumn());
      assertEquals("[", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9U");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1279), (-1279));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjround = (-1279);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals((-1279), token0.beginColumn);
      assertEquals((-1279), token0.beginLine);
      assertEquals((-1279), token0.endLine);
      assertEquals((-1279), token0.endColumn);
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertEquals("9", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1279), javaCharStream0.getBeginColumn());
      assertEquals((-1279), javaCharStream0.getColumn());
      assertEquals((-1279), javaCharStream0.getEndLine());
      assertEquals((-1279), javaCharStream0.getLine());
      assertEquals((-1279), javaCharStream0.getEndColumn());
      assertEquals((-1279), javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("break");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals('b', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1), token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("reak", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1), token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("reak", token0.toString());
  }
}
