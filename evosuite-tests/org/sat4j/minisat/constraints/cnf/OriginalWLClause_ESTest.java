/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:51:30 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionCounter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OriginalWLClause_ESTest extends OriginalWLClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[5] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      boolean boolean0 = originalWLClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 2212);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        originalWLClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1920);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1920
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(350);
      vecInt0.unsafePush(5);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-2377));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.OriginalWLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (-251);
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      originalWLClause0.register();
      assertEquals(9, originalWLClause0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "b*:gD((qCdKF}`'~xiJ", (String) null, "u,K", "org.sat4j.minisat.constraints.cnf.OriginalWLClause").when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(iVecInt0).size();
      OriginalWLClause originalWLClause1 = OriginalWLClause.brandNewClause((UnitPropagationListener) null, iLits0, iVecInt0);
      assertFalse(originalWLClause1.learnt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(iVecInt0).size();
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause((UnitPropagationListener) null, iLits0, iVecInt0);
      assertFalse(originalWLClause0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.OriginalWLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-749));
      Lits lits0 = new Lits();
      vecInt0.pushAll(iVecInt0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalWLClause0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -750
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, (-1749));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, 439);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        OriginalWLClause.brandNewClause((UnitPropagationListener) null, (ILits) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(28);
      // Undeclared exception!
      try { 
        OriginalWLClause.brandNewClause((UnitPropagationListener) null, (ILits) null, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(solutionCounter0).nVars();
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(negationDecorator0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalWLClause originalWLClause0 = null;
      try {
        originalWLClause0 = new OriginalWLClause(readOnlyVecInt0, iLits0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OriginalWLClause originalWLClause0 = null;
      try {
        originalWLClause0 = new OriginalWLClause((IVecInt) null, (ILits) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      OriginalWLClause originalWLClause0 = null;
      try {
        originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(1204);
      OriginalWLClause originalWLClause0 = null;
      try {
        originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      boolean boolean0 = originalWLClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(350);
      vecInt0.unsafePush(5);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 2212);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt(350);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.setLearnt();
      assertFalse(originalWLClause0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.forwardActivity(247.707037);
      assertEquals(247.707037, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GateTranslator gateTranslator0 = new GateTranslator(dimacsOutputSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(gateTranslator0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, (ILits) null);
      originalWLClause0.incActivity(0);
      assertTrue(originalWLClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      boolean boolean0 = originalWLClause0.propagate((UnitPropagationListener) null, (-4265));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OriginalWLClause.brandNewClause((UnitPropagationListener) null, iLits0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      boolean boolean0 = originalWLClause0.learnt();
      assertFalse(boolean0);
  }
}
