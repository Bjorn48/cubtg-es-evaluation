[MASTER] 09:22:18.208 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.minisat.core.Solver<D> : Type points to itself
[MASTER] 09:22:18.209 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 09:22:18.209 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 09:22:24.105 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>> : Invalid generic instance
[MASTER] 09:22:24.170 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructureYanMax>> : Invalid generic instance
[MASTER] 09:22:24.350 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructureYanMin>> : Invalid generic instance
[MASTER] 09:22:40.867 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:44.924 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:45.620 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:45.658 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:47.391 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:48.621 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:48.983 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:49.152 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:49.262 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:49.837 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:50.225 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:50.299 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:51.073 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:51.611 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:51.812 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:51.889 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:54.780 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:54.857 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:56.497 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:22:57.278 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:23:02.572 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:23:02.664 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:23:25.475 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:23:40.016 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMin>[] solverArray0 = (Solver<CardinalityDataStructureYanMin>[]) Array.newInstance(Solver.class, 5), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMin>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:24:08.695 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:24:12.830 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:26:06.162 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:26:14.331 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:279) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:543) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:254) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:160) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1580) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 13 common frames omitted
[MASTER] 09:26:28.077 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 09:26:28.300 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_33_1550564788056/org/sat4j/minisat/core/Solver_33_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_33_1550564788056/org/sat4j/minisat/core/Solver_33_tmp__ESTest_scaffolding.java]]
[MASTER] 09:26:28.310 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 09:26:28.310 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 09:26:28.333 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>[] cannot be converted to org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>: 198
[MASTER] 09:26:28.333 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_33_1550564788056/org/sat4j/minisat/core/Solver_33_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 09:26:28.333 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 09:26:28.334 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_33_1550564788056/org/sat4j/minisat/core/Solver_33_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 09:26:28.334 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 09:26:28.336 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_33_1550564788056/org/sat4j/minisat/core/Solver_33_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 08:26:28 GMT 2019
4:  */
5: 
6: package org.sat4j.minisat.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.lang.reflect.Array;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.junit.runner.RunWith;
17: import org.sat4j.minisat.constraints.CardinalityDataStructure;
18: import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
19: import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
20: import org.sat4j.minisat.constraints.ClausalDataStructureWL;
21: import org.sat4j.minisat.core.SearchParams;
22: import org.sat4j.minisat.core.Solver;
23: import org.sat4j.minisat.core.SolverStats;
24: import org.sat4j.minisat.learning.ClauseOnlyLearning;
25: import org.sat4j.minisat.learning.NoLearningNoHeuristics;
26: import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
27: import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
28: import org.sat4j.minisat.orders.TabuListDecorator;
29: import org.sat4j.minisat.restarts.FixedPeriodRestarts;
30: import org.sat4j.minisat.restarts.LubyRestarts;
31: import org.sat4j.specs.Constr;
32: import org.sat4j.specs.IVecInt;
33: import org.sat4j.tools.ManyCore;
34: 
35: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
36: public class Solver_33_tmp__ESTest extends Solver_33_tmp__ESTest_scaffolding {
37: 
38:   @Test(timeout = 4000)
39:   public void test0()  throws Throwable  {
40:       ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
41:       assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
42:       assertNotNull(clauseOnlyLearning0);
43:       
44:       CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
45:       assertNotNull(cardinalityDataStructureYanMin0);
46:       
47:       RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
48:       assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
49:       assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
50:       
51:       LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
52:       assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
53:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
54:       assertNotNull(levelBasedVarOrderHeap0);
55:       
56:       TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
57:       assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
58:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
59:       assertNotNull(tabuListDecorator0);
60:       
61:       tabuListDecorator0.varDecayActivity();
62:       assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
63:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
64:       
65:       LubyRestarts lubyRestarts0 = new LubyRestarts();
66:       assertEquals(1, lubyRestarts0.luby());
67:       assertTrue(lubyRestarts0.shouldRestart());
68:       assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
69:       assertEquals(32, lubyRestarts0.getFactor());
70:       assertNotNull(lubyRestarts0);
71:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
72:       
73:       SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
74:       SolverStats solverStats0 = new SolverStats();
75:       assertEquals(0L, solverStats0.getIgnoredclauses());
76:       assertEquals(0, solverStats0.getShortcuts());
77:       assertEquals(0L, solverStats0.getLearnedliterals());
78:       assertEquals(0L, solverStats0.getDecisions());
79:       assertEquals(0L, solverStats0.getLearnedbinaryclauses());
80:       assertEquals(0L, solverStats0.getInspects());
81:       assertEquals(0L, solverStats0.getChangedreason());
82:       assertEquals(0, solverStats0.getStarts());
83:       assertEquals(0L, solverStats0.getPropagations());
84:       assertEquals(0L, solverStats0.getLearnedternaryclauses());
85:       assertEquals(0L, solverStats0.getReducedliterals());
86:       assertEquals(0L, solverStats0.getUpdateLBD());
87:       assertEquals(0L, solverStats0.getLearnedclauses());
88:       assertEquals(0, solverStats0.getReduceddb());
89:       assertEquals(0L, solverStats0.getConflicts());
90:       assertEquals(0L, solverStats0.getRootSimplifications());
91:       assertEquals(0, solverStats0.getImportedUnits());
92:       assertNotNull(solverStats0);
93:       
94:       lubyRestarts0.init(searchParams0, solverStats0);
95:       assertEquals(1, lubyRestarts0.luby());
96:       assertFalse(lubyRestarts0.shouldRestart());
97:       assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
98:       assertEquals(32, lubyRestarts0.getFactor());
99:       assertEquals(0L, solverStats0.getIgnoredclauses());
100:       assertEquals(0, solverStats0.getShortcuts());
101:       assertEquals(0L, solverStats0.getLearnedliterals());
102:       assertEquals(0L, solverStats0.getDecisions());
103:       assertEquals(0L, solverStats0.getLearnedbinaryclauses());
104:       assertEquals(0L, solverStats0.getInspects());
105:       assertEquals(0L, solverStats0.getChangedreason());
106:       assertEquals(0, solverStats0.getStarts());
107:       assertEquals(0L, solverStats0.getPropagations());
108:       assertEquals(0L, solverStats0.getLearnedternaryclauses());
109:       assertEquals(0L, solverStats0.getReducedliterals());
110:       assertEquals(0L, solverStats0.getUpdateLBD());
111:       assertEquals(0L, solverStats0.getLearnedclauses());
112:       assertEquals(0, solverStats0.getReduceddb());
113:       assertEquals(0L, solverStats0.getConflicts());
114:       assertEquals(0L, solverStats0.getRootSimplifications());
115:       assertEquals(0, solverStats0.getImportedUnits());
116:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
117:       
118:       lubyRestarts0.onRestart();
119:       assertEquals(1, lubyRestarts0.luby());
120:       assertFalse(lubyRestarts0.shouldRestart());
121:       assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
122:       assertEquals(32, lubyRestarts0.getFactor());
123:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
124:       
125:       Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, lubyRestarts0);
126:       assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
127:       assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
128:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
129:       assertEquals(1, lubyRestarts0.luby());
130:       assertFalse(lubyRestarts0.shouldRestart());
131:       assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
132:       assertEquals(32, lubyRestarts0.getFactor());
133:       assertFalse(solver0.isSolverKeptHot());
134:       assertEquals(0, solver0.nConstraints());
135:       assertEquals(2147483, solver0.getTimeout());
136:       assertFalse(solver0.isVerbose());
137:       assertEquals(2, solver0.newVar());
138:       assertEquals(0, solver0.decisionLevel());
139:       assertFalse(solver0.isDBSimplificationAllowed());
140:       assertEquals(1, solver0.nVars());
141:       assertEquals(0, solver0.currentDecisionLevel());
142:       assertEquals(0, solver0.getPropagationLevel());
143:       assertEquals(1, solver0.realNumberOfVariables());
144:       assertEquals("c ", solver0.getLogPrefix());
145:       assertNotNull(solver0);
146:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
147:       
148:       solver0.clearLearntClauses();
149:       assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
150:       assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
151:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
152:       assertEquals(1, lubyRestarts0.luby());
153:       assertFalse(lubyRestarts0.shouldRestart());
154:       assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
155:       assertEquals(32, lubyRestarts0.getFactor());
156:       assertFalse(solver0.isSolverKeptHot());
157:       assertEquals(0, solver0.nConstraints());
158:       assertEquals(2147483, solver0.getTimeout());
159:       assertFalse(solver0.isVerbose());
160:       assertEquals(0, solver0.decisionLevel());
161:       assertFalse(solver0.isDBSimplificationAllowed());
162:       assertEquals(0, solver0.currentDecisionLevel());
163:       assertEquals(3, solver0.nVars());
164:       assertEquals(0, solver0.getPropagationLevel());
165:       assertEquals(4, solver0.newVar());
166:       assertEquals(3, solver0.realNumberOfVariables());
167:       assertEquals("c ", solver0.getLogPrefix());
168:       assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
169:       
170:       NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
171:       assertNotNull(noLearningNoHeuristics0);
172:       
173:       ClausalDataStructureWL clausalDataStructureWL0 = null;
174:       FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
175:       assertEquals(0L, fixedPeriodRestarts0.getPeriod());
176:       assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
177:       assertTrue(fixedPeriodRestarts0.shouldRestart());
178:       assertNotNull(fixedPeriodRestarts0);
179:       
180:       boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
181:       assertEquals(0L, fixedPeriodRestarts0.getPeriod());
182:       assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
183:       assertTrue(fixedPeriodRestarts0.shouldRestart());
184:       assertTrue(boolean0);
185:       
186:       fixedPeriodRestarts0.onBackjumpToRootLevel();
187:       assertEquals(0L, fixedPeriodRestarts0.getPeriod());
188:       assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
189:       assertTrue(fixedPeriodRestarts0.shouldRestart());
190:       
191:       CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
192:       assertNotNull(cardinalityDataStructureYanMax0);
193:       
194:       String[] stringArray0 = new String[2];
195:       stringArray0[0] = "tabu list size\t: ";
196:       stringArray0[1] = "";
197:       Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6);
198:       solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0;
199:   }
200: }
RegularFileObject[/tmp/EvoSuite_33_1550564788056/org/sat4j/minisat/core/Solver_33_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 08:26:28 GMT 2019
5:  */
6: 
7: package org.sat4j.minisat.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class Solver_33_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.minisat.core.Solver"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Solver_33_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.minisat.core.ConflictTimerAdapter",
84:       "org.sat4j.tools.ManyCore",
85:       "org.sat4j.specs.UnitPropagationListener",
86:       "org.sat4j.minisat.core.SizeComparator",
87:       "org.sat4j.tools.FullClauseSelectorSolver",
88:       "org.sat4j.reader.LecteurDimacs",
89:       "org.sat4j.tools.SolverDecorator",
90:       "org.sat4j.specs.Propagatable",
91:       "org.sat4j.minisat.core.Counter",
92:       "org.sat4j.minisat.core.Undoable",
93:       "org.sat4j.minisat.learning.FixedLengthLearning",
94:       "org.sat4j.ILauncherMode",
95:       "org.sat4j.minisat.core.Pair",
96:       "org.sat4j.core.EmptyVecInt",
97:       "org.sat4j.ExitCode",
98:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
99:       "org.sat4j.specs.IVec",
100:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
101:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
102:       "org.sat4j.specs.Lbool",
103:       "org.sat4j.minisat.constraints.cnf.CBClause",
104:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
105:       "org.sat4j.AbstractLauncher$2",
106:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
107:       "org.sat4j.AbstractLauncher$1",
108:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
109:       "org.sat4j.specs.SearchListener",
110:       "org.sat4j.minisat.core.SimplificationType",
111:       "org.sat4j.minisat.learning.MiniSATLearning",
112:       "org.sat4j.minisat.core.SearchParams",
113:       "org.sat4j.tools.AbstractMinimalModel",
114:       "org.sat4j.minisat.core.Heap",
115:       "org.sat4j.specs.ILogAble$1",
116:       "org.sat4j.specs.Constr",
117:       "org.sat4j.specs.TimeoutException",
118:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
119:       "org.sat4j.minisat.core.ConflictTimerContainer",
120:       "org.sat4j.specs.ISolverService",
121:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
122:       "org.sat4j.minisat.core.LearningStrategy",
123:       "org.sat4j.minisat.constraints.cnf.WLClause",
124:       "org.sat4j.specs.IGroupSolver",
125:       "org.sat4j.DecisionMode",
126:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
127:       "org.sat4j.specs.IteratorInt",
128:       "org.sat4j.specs.ISolver",
129:       "org.sat4j.minisat.orders.RandomWalkDecorator",
130:       "org.sat4j.specs.UnitClauseProvider$1",
131:       "org.sat4j.minisat.core.CircularBuffer",
132:       "org.sat4j.minisat.learning.LimitedLearning",
133:       "org.sat4j.minisat.restarts.LubyRestarts",
134:       "org.sat4j.minisat.core.VoidTracing",
135:       "org.sat4j.minisat.core.ActivityListener",
136:       "org.sat4j.minisat.restarts.Glucose21Restarts",
137:       "org.sat4j.minisat.core.GlucoseLCDS",
138:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
139:       "org.sat4j.minisat.core.ILits",
140:       "org.sat4j.BasicLauncher",
141:       "org.sat4j.minisat.constraints.card.AtLeast",
142:       "org.sat4j.specs.ILogAble",
143:       "org.sat4j.specs.ContradictionException",
144:       "org.sat4j.reader.GroupedCNFReader",
145:       "org.sat4j.minisat.constraints.card.MinWatchCard",
146:       "org.sat4j.core.LiteralsUtils",
147:       "org.sat4j.minisat.learning.PercentLengthLearning",
148:       "org.sat4j.specs.IConstr",
149:       "org.sat4j.specs.IVecInt",
150:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
151:       "org.sat4j.core.ConstrGroup",
152:       "org.sat4j.tools.SolutionFoundListener",
153:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
154:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
155:       "org.sat4j.OptimizationMode",
156:       "org.sat4j.minisat.core.Learner",
157:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
158:       "org.sat4j.minisat.core.ActivityComparator",
159:       "org.sat4j.specs.MandatoryLiteralListener",
160:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
161:       "org.sat4j.specs.IProblem",
162:       "org.sat4j.minisat.restarts.MiniSATRestarts",
163:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
164:       "org.sat4j.core.VecInt",
165:       "org.sat4j.minisat.core.Solver",
166:       "org.sat4j.tools.xplain.HighLevelXplain",
167:       "org.sat4j.minisat.constraints.cnf.Lits",
168:       "org.sat4j.minisat.core.Solver$2",
169:       "org.sat4j.minisat.core.Solver$1",
170:       "org.sat4j.specs.UnitClauseProvider",
171:       "org.sat4j.minisat.learning.AbstractLearning",
172:       "org.sat4j.AbstractLauncher",
173:       "org.sat4j.minisat.core.Solver$4",
174:       "org.sat4j.minisat.core.Solver$3",
175:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
176:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
177:       "org.sat4j.core.VecInt$1",
178:       "org.sat4j.core.ASolverFactory",
179:       "org.sat4j.core.Vec$1",
180:       "org.sat4j.reader.DimacsReader",
181:       "org.sat4j.minisat.core.DataStructureFactory",
182:       "org.sat4j.core.Vec",
183:       "org.sat4j.minisat.core.Glucose2LCDS",
184:       "org.sat4j.minisat.core.Solver$6",
185:       "org.sat4j.minisat.core.SolverStats",
186:       "org.sat4j.minisat.core.Solver$8",
187:       "org.sat4j.minisat.core.Solver$7",
188:       "org.sat4j.minisat.core.Solver$10",
189:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
190:       "org.sat4j.minisat.core.ConstrActivityListener",
191:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
192:       "org.sat4j.core.ReadOnlyVec",
193:       "org.sat4j.minisat.restarts.ArminRestarts",
194:       "org.sat4j.tools.GroupClauseSelectorSolver",
195:       "org.sat4j.specs.SearchListenerAdapter",
196:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
197:       "org.sat4j.tools.xplain.Xplain",
198:       "org.sat4j.reader.ParseFormatException",
199:       "org.sat4j.tools.AbstractClauseSelectorSolver",
200:       "org.sat4j.tools.StatisticsSolver",
201:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
202:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
203:       "org.sat4j.tools.OutcomeListener",
204:       "org.sat4j.minisat.core.ActivityLCDS",
205:       "org.sat4j.tools.AbstractOutputSolver",
206:       "org.sat4j.minisat.learning.ActiveLearning",
207:       "org.sat4j.MUSLauncher",
208:       "org.sat4j.minisat.orders.VarOrderHeap",
209:       "org.sat4j.minisat.orders.NaturalStaticOrder",
210:       "org.sat4j.minisat.core.ISimplifier",
211:       "org.sat4j.reader.InstanceReader",
212:       "org.sat4j.minisat.core.ConflictTimer",
213:       "org.sat4j.minisat.core.VarActivityListener",
214:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
215:       "org.sat4j.specs.VarMapper",
216:       "org.sat4j.specs.RandomAccessModel",
217:       "org.sat4j.minisat.SolverFactory",
218:       "org.sat4j.minisat.core.LBDConflictTimer",
219:       "org.sat4j.tools.DimacsOutputSolver",
220:       "org.sat4j.minisat.orders.TabuListDecorator",
221:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
222:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
223:       "org.sat4j.minisat.orders.PureOrder",
224:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
225:       "org.sat4j.minisat.core.SizeLCDS",
226:       "org.sat4j.minisat.core.RestartStrategy",
227:       "org.sat4j.minisat.core.AgeLCDS",
228:       "org.sat4j.specs.FakeConstr",
229:       "org.sat4j.tools.xplain.Explainer",
230:       "org.sat4j.reader.Reader",
231:       "org.sat4j.core.ReadOnlyVecInt",
232:       "org.sat4j.minisat.core.IOrder",
233:       "org.sat4j.minisat.orders.VariableComparator",
234:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
235:       "org.sat4j.minisat.core.ICDCL",
236:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
237:       "org.sat4j.minisat.restarts.NoRestarts",
238:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
239:       "org.sat4j.core.EmptyVecInt$1",
240:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
241:     );
242:   } 
243:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
244:     mock(Class.forName("org.sat4j.minisat.core.SearchParams", false, Solver_33_tmp__ESTest_scaffolding.class.getClassLoader()));
245:   }
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Solver_33_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "org.sat4j.minisat.core.Solver$1",
252:       "org.sat4j.minisat.core.Solver",
253:       "org.sat4j.minisat.core.Solver$2",
254:       "org.sat4j.minisat.core.Solver$3",
255:       "org.sat4j.minisat.core.Solver$4",
256:       "org.sat4j.minisat.core.Solver$5",
257:       "org.sat4j.minisat.core.Solver$9",
258:       "org.sat4j.minisat.core.Solver$6",
259:       "org.sat4j.minisat.core.Solver$GlucoseLCDS",
260:       "org.sat4j.minisat.core.Solver$Glucose2LCDS",
261:       "org.sat4j.minisat.core.ConflictTimerAdapter",
262:       "org.sat4j.minisat.core.Solver$7",
263:       "org.sat4j.minisat.core.Solver$8",
264:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
265:       "org.sat4j.minisat.core.Solver$10",
266:       "org.sat4j.minisat.core.Solver$11",
267:       "org.sat4j.specs.ILogAble$1",
268:       "org.sat4j.specs.ILogAble",
269:       "org.sat4j.specs.UnitClauseProvider$1",
270:       "org.sat4j.specs.UnitClauseProvider",
271:       "org.sat4j.core.LiteralsUtils",
272:       "org.sat4j.specs.Lbool",
273:       "org.sat4j.core.EmptyVecInt",
274:       "org.sat4j.core.VecInt",
275:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
276:       "org.sat4j.minisat.orders.TabuListDecorator",
277:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
278:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
279:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
280:       "org.sat4j.core.Vec",
281:       "org.sat4j.minisat.constraints.cnf.Lits",
282:       "org.sat4j.minisat.learning.LimitedLearning",
283:       "org.sat4j.minisat.learning.FixedLengthLearning",
284:       "org.sat4j.minisat.learning.AbstractLearning",
285:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
286:       "org.sat4j.minisat.learning.MiniSATLearning",
287:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
288:       "org.sat4j.minisat.orders.NaturalStaticOrder",
289:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
290:       "org.sat4j.minisat.core.ActivityComparator",
291:       "org.sat4j.specs.SearchListenerAdapter",
292:       "org.sat4j.minisat.core.VoidTracing",
293:       "org.sat4j.minisat.core.Pair",
294:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
295:       "org.sat4j.minisat.core.ActivityLCDS",
296:       "org.sat4j.minisat.core.LBDConflictTimer",
297:       "org.sat4j.minisat.core.GlucoseLCDS",
298:       "org.sat4j.minisat.core.Glucose2LCDS",
299:       "org.sat4j.minisat.core.AgeLCDS",
300:       "org.sat4j.minisat.core.SizeComparator",
301:       "org.sat4j.minisat.core.SizeLCDS",
302:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
303:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
304:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
305:       "org.sat4j.minisat.restarts.ArminRestarts",
306:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
307:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
308:       "org.sat4j.minisat.restarts.LubyRestarts",
309:       "org.sat4j.MUSLauncher",
310:       "org.sat4j.AbstractLauncher$1",
311:       "org.sat4j.DecisionMode",
312:       "org.sat4j.ExitCode",
313:       "org.sat4j.OptimizationMode",
314:       "org.sat4j.ILauncherMode",
315:       "org.sat4j.minisat.learning.ActiveLearning",
316:       "org.sat4j.minisat.orders.PureOrder",
317:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
318:       "org.sat4j.minisat.orders.RandomWalkDecorator",
319:       "org.sat4j.minisat.restarts.NoRestarts",
320:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
321:       "org.sat4j.minisat.restarts.MiniSATRestarts",
322:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
323:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
324:       "org.sat4j.tools.AbstractOutputSolver",
325:       "org.sat4j.tools.DimacsOutputSolver",
326:       "org.sat4j.minisat.restarts.Glucose21Restarts",
327:       "org.sat4j.minisat.core.CircularBuffer",
328:       "org.sat4j.minisat.orders.SubsetVarOrder",
329:       "org.sat4j.core.ConstrGroup",
330:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
331:       "org.sat4j.minisat.learning.PercentLengthLearning",
332:       "org.sat4j.minisat.constraints.card.AtLeast",
333:       "org.sat4j.core.Vec$1",
334:       "org.sat4j.tools.SolverDecorator",
335:       "org.sat4j.tools.OptToSatAdapter",
336:       "org.sat4j.tools.SolutionFoundListener$1",
337:       "org.sat4j.tools.SolutionFoundListener",
338:       "org.sat4j.minisat.constraints.card.MinWatchCard",
339:       "org.sat4j.specs.ContradictionException",
340:       "org.sat4j.core.EmptyVecInt$1",
341:       "org.sat4j.minisat.core.Heap",
342:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
343:       "org.sat4j.core.VecInt$1",
344:       "org.sat4j.minisat.core.ConflictTimerContainer",
345:       "org.sat4j.minisat.constraints.cnf.CBClause",
346:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
347:       "org.sat4j.minisat.core.Counter",
348:       "org.sat4j.tools.DimacsStringSolver",
349:       "org.sat4j.core.ReadOnlyVec",
350:       "org.sat4j.tools.StatisticsSolver",
351:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
352:       "org.sat4j.minisat.constraints.cnf.UnitClause",
353:       "org.sat4j.minisat.restarts.EMARestarts",
354:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
355:       "org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy",
356:       "org.sat4j.minisat.constraints.cnf.WLClause",
357:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
358:       "org.sat4j.specs.FakeConstr",
359:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
360:       "org.sat4j.minisat.core.SearchParams",
361:       "org.sat4j.minisat.core.SolverStats",
362:       "org.sat4j.minisat.orders.VarOrderHeap",
363:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
364:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
365:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
366:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
367:       "org.sat4j.specs.TimeoutException"
368:     );
369:   }
370: }

[MASTER] 09:26:28.344 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getImportedUnits());
assertNotNull(solverStats0);

lubyRestarts0.init(searchParams0, solverStats0);
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, lubyRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.clearLearntClauses();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = null;
FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertTrue(boolean0);

fixedPeriodRestarts0.onBackjumpToRootLevel();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

String[] stringArray0 = new String[2];
stringArray0[0] = "tabu list size\t: ";
stringArray0[1] = "";
Solver<CardinalityDataStructure>[] solverArray0 = (Solver<CardinalityDataStructure>[]) Array.newInstance(Solver.class, 6);
solverArray0[0] = (Solver<CardinalityDataStructure>) solverArray0;

[MASTER] 09:27:11.404 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
[MASTER] 09:27:15.274 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: org.sat4j.minisat.core.Solver with seed 1550564493399. Configuration id : null
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:158) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_91]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_91]
	at com.sun.proxy.$Proxy7.evosuite_collectTestGenerationResult(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:164) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_91]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_91]
Caused by: java.net.SocketException: Broken pipe
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[na:1.8.0_91]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_91]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1286) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1427) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1577) ~[na:1.8.0_91]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:294) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:153) ~[na:1.8.0_91]
	... 9 common frames omitted
