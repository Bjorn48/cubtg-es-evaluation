/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:20:05 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IOptimizationProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptToSatAdapter_ESTest extends OptToSatAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      int[] intArray0 = optToSatAdapter0.modelWithInternalVariables();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(1884, 1);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.modelWithInternalVariables();
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      int[] intArray0 = optToSatAdapter0.findModel((IVecInt) vecInt0);
      int[] intArray1 = optToSatAdapter0.modelWithInternalVariables();
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.push(680);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.findModel();
      boolean boolean0 = optToSatAdapter0.model(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      int[] intArray0 = optToSatAdapter0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.push(680);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.model();
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(1884, 1);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable((IVecInt) vecInt0, false);
      assertTrue(optToSatAdapter0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.push(680);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      boolean boolean0 = optToSatAdapter0.isOptimal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      boolean boolean0 = optToSatAdapter0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(2343, 8);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model(8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model(184);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      gateTranslator0.ite(99, (-1660), 1, 1);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      // Undeclared exception!
      optToSatAdapter0.isSatisfiable(false);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(2343, 8);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.isSatisfiable();
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.push(680);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.findModel();
      // Undeclared exception!
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0, false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null, solutionFoundListener0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) vecInt0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(2343, 8);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.isSatisfiable();
      // Undeclared exception!
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null, solutionFoundListener0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.growTo(2389, 8);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel(iVecInt0);
      optToSatAdapter0.isSatisfiable((IVecInt) vecInt0, true);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, solutionFoundListener0);
      LexicoDecorator<ModelIterator> lexicoDecorator0 = new LexicoDecorator<ModelIterator>(modelIteratorToSATAdapter0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      try { 
        optToSatAdapter0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      IVecInt iVecInt0 = vecInt0.push(680);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel(iVecInt0);
      optToSatAdapter0.findModel();
      // Undeclared exception!
      optToSatAdapter0.isSatisfiable();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(2343, 8);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.findModel();
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(1, 2343);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      // Undeclared exception!
      optToSatAdapter0.findModel((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.shrink(2343);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      IOptimizationProblem iOptimizationProblem0 = mock(IOptimizationProblem.class, new ViolatedAssumptionAnswer());
      OptToSatAdapter optToSatAdapter0 = null;
      try {
        optToSatAdapter0 = new OptToSatAdapter(iOptimizationProblem0, checkMUSSolutionListener0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.specs.IOptimizationProblem$MockitoMock$1941094381 cannot be cast to org.sat4j.specs.ISolver
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(2343, 8);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      assertTrue(optToSatAdapter0.isOptimal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(2343, 8);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      int[] intArray0 = optToSatAdapter0.findModel();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(singleSolutionDetector0).nVars();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(fullClauseSelectorSolver0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(abstractMinimalModel0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel();
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.growTo(2343, 8);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable((IVecInt) vecInt0);
      assertTrue(optToSatAdapter0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isOptimal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      int[] intArray0 = optToSatAdapter0.model();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      String string0 = optToSatAdapter0.toString("c ");
      assertNotNull(string0);
  }
}
