/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:00:14 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.xplain.DeletionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeletionStrategy_ESTest extends DeletionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[1];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounterArray0[0] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(manyCore0);
      SolutionCounter solutionCounter1 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter1).discardCurrentModel();
      doReturn((String) null).when(solutionCounter1).getLogPrefix();
      doReturn(true, false).when(solutionCounter1).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(true).when(solutionCounter1).isVerbose();
      doReturn((int[]) null).when(solutionCounter1).modelWithInternalVariables();
      doReturn(iVecInt0).when(solutionCounter1).unsatExplanation();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter1, true);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, checkMUSSolutionListener0);
      VecInt vecInt0 = new VecInt();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(modelIteratorToSATAdapter0, vecInt0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(abstractMinimalModel0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[1];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounterArray0[0] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(manyCore0);
      SolutionCounter solutionCounter1 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(solutionCounter1).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false).when(solutionCounter1).isVerbose();
      doReturn(iVecInt0).when(solutionCounter1).unsatExplanation();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter1, true);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, checkMUSSolutionListener0);
      VecInt vecInt0 = new VecInt();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(modelIteratorToSATAdapter0, vecInt0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(abstractMinimalModel0, hashMap0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[1];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((IConstr) null, (IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      solutionCounter0.addClause(iVecInt0);
      solutionCounter0.setTimeout(50);
      solutionCounter0.countSolutions();
      solutionCounterArray0[0] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      solutionCounter0.setExpectedNumberOfClauses((-1605));
      IVecInt iVecInt1 = AbstractMinimalModel.negativeLiterals(manyCore0);
      solutionCounter0.addClause(iVecInt1);
      SolutionCounter solutionCounter1 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter1).discardCurrentModel();
      doReturn(true, false).when(solutionCounter1).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false).when(solutionCounter1).isVerbose();
      doReturn((int[]) null).when(solutionCounter1).modelWithInternalVariables();
      doReturn(iVecInt1).when(solutionCounter1).unsatExplanation();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter1, true);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, checkMUSSolutionListener0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(modelIteratorToSATAdapter0, hashMap0, iVecInt1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(solutionCounter0).unsatExplanation();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, true);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, checkMUSSolutionListener0);
      VecInt vecInt0 = new VecInt();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(modelIteratorToSATAdapter0, vecInt0);
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(abstractMinimalModel0, hashMap0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.DeletionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[1];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounterArray0[0] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(manyCore0);
      iVecInt0.pop();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, true);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(50, 50);
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn("s Z=Of|70XX").when(solutionCounter0).getLogPrefix();
      doReturn(true).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(solutionCounter0).isVerbose();
      doReturn(vecInt0).when(solutionCounter0).unsatExplanation();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, true);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      String string0 = deletionStrategy0.toString();
      assertEquals("Deletion based minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      deletionStrategy0.cancelExplanationComputation();
      assertEquals("Deletion based minimization strategy", deletionStrategy0.toString());
  }
}
